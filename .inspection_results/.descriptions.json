{
  "profile": "Project Default",
  "groups": [
    {
      "name": "Flow type checker",
      "inspections": [
        {
          "shortName": "FlowJSCoverage",
          "displayName": "Code is not covered by Flow",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "Flow JS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JavaScript code fragments that are not covered by the Flow type checker.\nTo use this inspection, configure the Flow executable in \u003ca href\u003d\"settings://Settings.JavaScript\"\u003eSettings | Languages \u0026amp; Frameworks | JavaScript\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FlowJSConfig",
          "displayName": "Missing .flowconfig",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "Flow JS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a JavaScript file with a \u003ccode\u003e@flow\u003c/code\u003e flag  that doesn\u0027t have an associated \u003ccode\u003e.flowconfig\u003c/code\u003e file in the project.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FlowJSFlagCommentPlacement",
          "displayName": "Misplaced @flow flag",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "Flow JS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003e@flow\u003c/code\u003e flag comment that is not located at the top of a file.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FlowJSError",
          "displayName": "Flow type checker",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports errors from \u003ca href\u003d\"https://flowtype.org/\"\u003eFlow\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Modularization issues",
      "inspections": [
        {
          "shortName": "InconsistentLanguageLevel",
          "displayName": "Inconsistent language level settings",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports modules which depend on other modules with a higher language level. \n\u003cp\u003eSuch dependencies should be removed or the language level of the module be increased.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ModuleWithTooManyClasses",
          "displayName": "Module with too many classes",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports modules that contain too many classes. Overly large modules may indicate a lack of design clarity.\nJava, Kotlin and Groovy classes are counted.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eMaximum number of classes\u003c/b\u003e field to specify the maximum number of classes a module may have.\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassOnlyUsedInOneModule",
          "displayName": "Class only used from one other module",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that:\n\u003cul\u003e\n  \u003cli\u003edo not depend on any other class in their module\u003c/li\u003e\n  \u003cli\u003edepend on classes from a different module\u003c/li\u003e\n  \u003cli\u003eare a dependency only for classes from this other module\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSuch classes could be moved into the module on which they depend.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassIndependentOfModule",
          "displayName": "Class independent of its module",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that:\n\u003cul\u003e\n  \u003cli\u003edo not depend on any other class in their module\u003c/li\u003e\n  \u003cli\u003eare not a dependency for any other class in their module\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSuch classes are an indication of ad-hoc or incoherent modularisation strategies,\n  and may often profitably be moved.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ModuleWithTooFewClasses",
          "displayName": "Module with too few classes",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports modules that contain too few classes. Overly small modules may indicate a too fragmented design.\nJava, Kotlin and Groovy classes are counted.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eMinimum number of classes\u003c/b\u003e field to specify the minimum number of classes a module may have.\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "LocalVariableNamingConventionJS",
          "displayName": "Local variable naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a local variable whose name is  too short, too\nlong, or doesn\u0027t follow the specified regular expression pattern.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the fields provided below to specify minimum length, maximum length, and a regular expression\n  expected for local variables names. Use the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format regular expressions.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSNonASCIINames",
          "displayName": "Identifiers with non-ASCII symbols",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a non-ASCII symbol in a name.\u003cbr/\u003e\u003cbr/\u003e\nIf the \u0027Allow only ASCII names\u0027 option is selected, reports all names that contain non-ASCII symbols.\u003cbr/\u003e\nOtherwise reports all names that contain both ASCII and non-ASCII symbols.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSClassNamingConvention",
          "displayName": "Class naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a class or a function that is annotated with a JSDoc \u003ccode\u003e@constructor\u003c/code\u003e or \u003ccode\u003e@class\u003c/code\u003e tag whose names are\ntoo short, too long, or do not follow the specified regular expression pattern.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the fields provided below to specify minimum length, maximum length, and a regular expression\n  expected for classes names. Use the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format for regular expressions.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ParameterNamingConventionJS",
          "displayName": "Function parameter naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function parameter whose name is too short,\ntoo long, or doesn\u0027t follow the specified regular expression pattern.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the fields provided below to specify minimum length, maximum length and regular expression\n  expected for local variables names. Use the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format regular expressions.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FunctionNamingConventionJS",
          "displayName": "Function naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function whose name is too short, too\nlong, or does not follow the specified regular expression pattern.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n Use the fields provided below to specify minimum length, maximum length, and a regular expression\nfor function names. Use the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format for regular expressions.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Redundant modifiers",
      "inspections": [
        {
          "shortName": "RedundantModifiersValLombok",
          "displayName": "Unnecessary final before \u0027val\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unneeded \u003ccode\u003efinal\u003c/code\u003e modifiers before \u003ccode\u003eval\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantModifiersValueLombok",
          "displayName": "@Value modifiers",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unneeded modifiers for classes annotated with \u003ccode\u003e@Value\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantModifiersUtilityClassLombok",
          "displayName": "@UtilityClass modifiers",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unneeded modifiers for classes annotated with \u003ccode\u003e@UtilityClass\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Thymeleaf",
      "inspections": [
        {
          "shortName": "ThymeleafDialectDomInspection",
          "displayName": "Thymeleaf Dialect Extensions errors",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.thymeleaf",
          "pluginVersion": "231.9011.34",
          "language": "ThymeleafExpressions",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect elements in Thymeleaf Dialect Extension \u003ccode\u003e\u0026lt;dialect\u0026gt;\u003c/code\u003e files:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eReferences to non-instantiable classes\u003c/li\u003e\n  \u003cli\u003eReferences to classes that do not extend required class\u003c/li\u003e\n  \u003cli\u003eReferences to classes with inappropriate scope\u003c/li\u003e\n  \u003cli\u003eEmpty tag and attribute values\u003c/li\u003e\n  \u003cli\u003eTag and attribute values that do not match the required pattern (for example, Java Identifiers)\u003c/li\u003e\n  \u003cli\u003eTags that do not include required children tags or attributes\u003c/li\u003e\n  \u003cli\u003eTags that define objects with duplicate names\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThymeleafVariablesResolveInspection",
          "displayName": "Unresolved references in Thymeleaf expression variables",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.thymeleaf",
          "pluginVersion": "231.9011.34",
          "language": "ThymeleafExpressions",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved references and invalid Thymeleaf expressions.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;html xmlns:th\u003d\"https://www.thymeleaf.org\"\u0026gt;\n\u0026lt;body\u0026gt;\n  \u0026lt;form th:object\u003d\"${\u003cstrong\u003eunknownPet\u003c/strong\u003e}\"  \u0026lt;!-- Cannot resolve \u0027unknownPet\u0027  --\u0026gt;\n        class\u003d\"form-horizontal\" method\u003d\"post\"\u0026gt;\n    \u0026lt;input type\u003d\"hidden\" name\u003d\"id\" th:value\u003d\"*{\u003cstrong\u003eid\u003c/strong\u003e}\" /\u0026gt; \u0026lt;!-- Cannot resolve \u0027id\u0027  --\u0026gt;\n  \u0026lt;/form\u0026gt;\n\u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThymeleafMessagesResolveInspection",
          "displayName": "Unresolved message resource keys",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.thymeleaf",
          "pluginVersion": "231.9011.34",
          "language": "ThymeleafExpressions",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved message resource keys.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;html xmlns:th\u003d\"https://www.thymeleaf.org\"\u0026gt;\n \u0026lt;body\u0026gt;\n    \u0026lt;h1 th:text\u003d\"#{\u003cstrong\u003ewelcome.unknown\u003c/strong\u003e}\"\u0026gt;Hallo, World\u0026lt;/h1\u0026gt; \u0026lt;!-- Cannot resolve property key  --\u0026gt;\n \u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Android Lint: Compliance",
      "inspections": [
        {
          "shortName": "AndroidLintExpiredTargetSdkVersion",
          "displayName": "TargetSdkVersion No Longer Supported",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eTargetSdkVersion No Longer Supported\u003cbr\u003e\u003cbr\u003eAs of the second half of 2018, Google Play requires that new apps and app updates target API level 26 or higher.\u003cbr/\u003e\n\u003cbr/\u003e\nConfiguring your app to target a recent API level ensures that users benefit from significant security and performance improvements, while still allowing your app to run on older Android versions (down to the \u003ccode\u003eminSdkVersion\u003c/code\u003e).\u003cbr/\u003e\n\u003cbr/\u003e\nTo update your \u003ccode\u003etargetSdkVersion\u003c/code\u003e, follow the steps from \"Meeting Google Play requirements for target API level\", \u003ca href\u003d\"https://developer.android.com/distribute/best-practices/develop/target-sdk.html\"\u003ehttps://developer.android.com/distribute/best-practices/develop/target-sdk.html\u003c/a\u003e\u003cbr\u003e\u003cbr\u003eIssue id: ExpiredTargetSdkVersion\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://support.google.com/googleplay/android-developer/answer/113469#targetsdk\"\u003ehttps://support.google.com/googleplay/android-developer/answer/113469#targetsdk\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPlaySdkIndexNonCompliant",
          "displayName": "Library has policy issues in SDK Index",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eLibrary has policy issues in SDK Index\u003cbr\u003e\u003cbr\u003eThis library version has policy issues that will block publishing in the Google Play Store.\u003cbr\u003e\u003cbr\u003eIssue id: PlaySdkIndexNonCompliant\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://play.google.com/sdks\"\u003ehttps://play.google.com/sdks\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintOutdatedLibrary",
          "displayName": "Outdated Library",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eOutdated Library\u003cbr\u003e\u003cbr\u003eYour app is using an outdated version of a library. This may cause violations of Google Play policies (see \u003ca href\u003d\"https://play.google.com/about/monetization-ads/ads/\"\u003ehttps://play.google.com/about/monetization-ads/ads/\u003c/a\u003e) and/or may affect your app\u0026#8217;s visibility on the Play Store.\u003cbr/\u003e\n\u003cbr/\u003e\nPlease try updating your app with an updated version of this library, or remove it from your app.\u003cbr\u003e\u003cbr\u003eIssue id: OutdatedLibrary\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://play.google.com/sdks\"\u003ehttps://play.google.com/sdks\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintExpiringTargetSdkVersion",
          "displayName": "TargetSdkVersion Soon Expiring",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eTargetSdkVersion Soon Expiring\u003cbr\u003e\u003cbr\u003eIn the second half of 2018, Google Play will require that new apps and app updates target API level 26 or higher. This will be required for new apps in August 2018, and for updates to existing apps in November 2018.\u003cbr/\u003e\n\u003cbr/\u003e\nConfiguring your app to target a recent API level ensures that users benefit from significant security and performance improvements, while still allowing your app to run on older Android versions (down to the \u003ccode\u003eminSdkVersion\u003c/code\u003e).\u003cbr/\u003e\n\u003cbr/\u003e\nThis lint check starts warning you some months \u003cb\u003ebefore\u003c/b\u003e these changes go into effect if your \u003ccode\u003etargetSdkVersion\u003c/code\u003e is 25 or lower. This is intended to give you a heads up to update your app, since depending on your current \u003ccode\u003etargetSdkVersion\u003c/code\u003e the work can be nontrivial.\u003cbr/\u003e\n\u003cbr/\u003e\nTo update your \u003ccode\u003etargetSdkVersion\u003c/code\u003e, follow the steps from \"Meeting Google Play requirements for target API level\", \u003ca href\u003d\"https://developer.android.com/distribute/best-practices/develop/target-sdk.html\"\u003ehttps://developer.android.com/distribute/best-practices/develop/target-sdk.html\u003c/a\u003e\u003cbr\u003e\u003cbr\u003eIssue id: ExpiringTargetSdkVersion\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://support.google.com/googleplay/android-developer/answer/113469#targetsdk\"\u003ehttps://support.google.com/googleplay/android-developer/answer/113469#targetsdk\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintQueryAllPackagesPermission",
          "displayName": "Using the QUERY_ALL_PACKAGES permission",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing the QUERY_ALL_PACKAGES permission\u003cbr\u003e\u003cbr\u003eIf you need to query or interact with other installed apps, you should be using a \u003ccode\u003e\u0026lt;queries\u003e\u003c/code\u003e declaration in your manifest. Using the QUERY_ALL_PACKAGES permission in order to see all installed apps is rarely necessary, and most apps on Google Play are not allowed to have this permission.\u003cbr\u003e\u003cbr\u003eIssue id: QueryAllPackagesPermission\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://g.co/dev/packagevisibility\"\u003ehttps://g.co/dev/packagevisibility\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Javadoc",
      "inspections": [
        {
          "shortName": "JavadocReference",
          "displayName": "Declaration has problems in Javadoc references",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references inside Javadoc comments.\n\u003cp\u003eIn the following example, the \u003ccode\u003esomeParam\u003c/code\u003e parameter is missing, so it will be highlighted:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass A {\n    /**\n     * @param someParam description\n     **/\n    void foo() {\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Disable the \u003cb\u003eReport inaccessible symbols\u003c/b\u003e option to ignore the tags that reference missing method parameters,\n  classes, fields and methods.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MismatchedJavadocCode",
          "displayName": "Mismatch between Javadoc and code",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports parts of method specification written in English that contradict with the method declaration. This includes:\n\u003cul\u003e\n  \u003cli\u003eMethod specified to return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e but its return type is not boolean.\u003c/li\u003e\n  \u003cli\u003eMethod specified to return \u003ccode\u003enull\u003c/code\u003e but it\u0027s annotated as \u003ccode\u003e@NotNull\u003c/code\u003e or its return type is primitive.\u003c/li\u003e\n  \u003cli\u003eMethod specified to return list but its return type is set or array.\u003c/li\u003e\n  \u003cli\u003eAnd so on.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n   * @return true if user is found, false otherwise\n   */\n  User findUser(String name);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Note that false-positives are possible, as this inspection tries to interpret a human language. However, if the inspection reports\n  incorrectly, it\u0027s still possible that the description is confusing and should be rewritten.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003csmall\u003eNew in 2022.3\u003c/small\u003e\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavadocLinkAsPlainText",
          "displayName": "Link specified as plain text",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports links specified as plain text in Javadoc comments.\n\u003cp\u003e\n  The quick-fix suggests to wrap the link in \u0026lt;a\u0026gt; tag.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n   /**\n    * https://en.wikipedia.org/\n    */\n    void foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n   /**\n    * \u0026lt;a href\u003d\"https://en.wikipedia.org/\"\u0026gt;https://en.wikipedia.org/\u0026lt;/a\u0026gt;\n    */\n    void foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MissingPackageInfo",
          "displayName": "Missing \u0027package-info.java\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports packages that contain classes but do not contain the \u003ccode\u003epackage-info.java\u003c/code\u003e\nor \u003ccode\u003epackage.html\u003c/code\u003e files and are, thus, missing the package documentation.\n\u003cp\u003eThe quick-fix creates an initial \u003ccode\u003epackage-info.java\u003c/code\u003e file.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavadocDeclaration",
          "displayName": "Javadoc declaration problems",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Javadoc comments and tags with the following problems:\n\u003cul\u003e\n  \u003cli\u003einvalid tag names\u003c/li\u003e\n  \u003cli\u003eincomplete tag descriptions\u003c/li\u003e\n  \u003cli\u003eduplicated tags\u003c/li\u003e\n  \u003cli\u003emissing Javadoc descriptions\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n   * Invalid tag name\n   * @poram param description\n   */\n  public void sample(int param){\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n   * Pointing to itself {@link #sample(int)}\n   */\n  public void sample(int param){\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eQuick-fix adds the unknown Javadoc tag to the list of user defined additional tags.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse textfield below to define additional Javadoc tags.\u003c/p\u003e\n\u003cp\u003eUse first checkbox to ignore duplicated \u0027throws\u0027 tag.\u003c/p\u003e\n\u003cp\u003eUse second checkbox to ignore problem with missing or incomplete first sentence in the description.\u003c/p\u003e\n\u003cp\u003eUse third checkbox to ignore references pointing to itself.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MissingJavadoc",
          "displayName": "Missing Javadoc",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports missing Javadoc comments and tags.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n   * Missing \"@param\" is reported (if configured).\n   */\n  public void sample(int param){\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fixes add missing tag or missing Javadoc comment:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n   * Missing \"@param\" is reported (if configured).\n   * @param param\n   */\n  public void sample(int param){\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nInspection can be configured to ignore deprecated elements or simple accessor methods like \u003ccode\u003egetField()\u003c/code\u003e or \u003ccode\u003esetField()\u003c/code\u003e.\n\u003c/p\u003e\nYou can also use options below to configure required tags and minimal required visibility for the specific code elements\nlike method, field, class, package, module.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavadocHtmlLint",
          "displayName": "HTML problems in Javadoc (DocLint)",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the same HTML issues in the Javadoc comments that have been reported by DocLint since Java 8.\n\u003cp\u003eThe inspection detects the following issues:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eSelf-closed, unclosed, unknown, misplaced, or empty tag\u003c/li\u003e\n  \u003cli\u003eUnknown or wrong attribute\u003c/li\u003e\n  \u003cli\u003eMisplaced text\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n/**\n * Unknown tag: List\u0026lt;String\u0026gt;\n * Unclosed tag: error\u0026lt;/b\u0026gt;\n * Misplaced text or tag: \u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;one\u0026lt;/li\u0026gt;, \u0026lt;li\u0026gt;two\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\n * Wrong or empty attribute: \u0026lt;a href\u003d\"\"\u0026gt;\u0026lt;/a\u0026gt;\n * Self-closed tag: \u0026lt;br/\u0026gt;\n * ...\n */\nvoid sample(){ }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DanglingJavadoc",
          "displayName": "Dangling Javadoc comment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Javadoc comments that don\u0027t belong to any class, method or field.\nThe Javadoc tool ignores dangling Javadoc comments and doesn\u0027t include them in the HTML documentation it generates.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A {\n    /**\n     * Dangling comment\n     */\n    /**\n     * Method javadoc\n     */\n     public void m(){}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix is available to delete such comments completely or convert them into a block comment. After the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A {\n    /*\n      Dangling comment\n    */\n    /**\n     * Method javadoc\n     */\n    public void m(){}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore file header comment in JavaDoc format\u003c/b\u003e option to ignore comments at the beginning of Java files.\nThese are usually copyright messages.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryJavaDocLink",
          "displayName": "Unnecessary Javadoc link",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Javadoc \u003ccode\u003e@see\u003c/code\u003e,\n\u003ccode\u003e{@link}\u003c/code\u003e, and \u003ccode\u003e{@linkplain}\u003c/code\u003e\ntags that refer to the method owning the comment, the super method of the\nmethod owning the comment, or the class containing the comment.\n\u003cp\u003eSuch links are unnecessary and can be safely removed with this inspection\u0027s quick-fix. The\n  quick-fix will remove the entire Javadoc comment if the tag is its only content.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Example {\n    /**\n     * @see Example#method\n     */\n    public void method() { }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass Example {\n  public void method() { }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the checkbox below to ignore inline links (\u003ccode\u003e{@link}\u003c/code\u003e and \u003ccode\u003e{@linkplain}\u003c/code\u003e)\nto super methods. Although a link to all super methods is automatically added by the\nJavadoc tool, an inline link to the super method may sometimes be needed in texts of the Javadoc comments.\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavadocBlankLines",
          "displayName": "Blank line should be replaced with \u003cp\u003e to break lines",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports blank lines in Javadoc comments.\n\u003cp\u003e\n  Blank lines in Javadoc may signal an intention split the text to different paragraphs. However, the Javadoc tool and IntelliJ IDEA will\n  ignore them when rendering documentation comments.\n\u003c/p\u003e\n\u003cp\u003e\n  The quick-fix suggests to replace the blank line with a paragraph tag (\u0026lt;p\u0026gt;).\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    /**\n     * Doesn\u0027t do anything.\n     *\n     * Does absolutely nothing\n     */\n    void foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    /**\n     * Doesn\u0027t do anything.\n     * \u0026lt;p\u0026gt;\n     * Does absolutely nothing\n     */\n    void foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MissingDeprecatedAnnotation",
          "displayName": "Missing \u0027@Deprecated\u0027 annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports module declarations, classes, fields, or methods that have the \u003ccode\u003e@deprecated\u003c/code\u003e\nJavadoc tag but do not have the \u003ccode\u003e@java.lang.Deprecated\u003c/code\u003e annotation.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n   * @deprecated use {@code example()} instead\n   */\n  void sample(){ }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n   * @deprecated use {@code example()} instead\n   */\n  @Deprecated\n  void sample(){ }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection reports only if the language level of the project or module is 5 or higher.\u003c/p\u003e\n\u003cp\u003e\nUse the checkbox below to report members annotated with \u003ccode\u003e@Deprecated\u003c/code\u003e without\n  an explanation in a Javadoc \u003ccode\u003e@deprecated\u003c/code\u003e tag.\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlTagCanBeJavadocTag",
          "displayName": "\u0027\u003ccode\u003e...\u003c/code\u003e\u0027 can be replaced with \u0027{@code ...}\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003e\u0026lt;code\u0026gt;\u003c/code\u003e tags in Javadoc comments.\nSince Java 5, these tags can be replaced with \u003ccode\u003e{@code ...}\u003c/code\u003e constructs.\nThis allows using angle brackets \u003ccode\u003e\u0026lt;\u003c/code\u003e and \u003ccode\u003e\u0026gt;\u003c/code\u003e inside the comment instead of HTML character entities.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n   * @return empty \u0026lt;code\u0026gt;ArrayList\u0026amp;lt;Integer\u0026amp;gt;\u0026lt;/code\u0026gt;\n   */\n  List\u0026lt;Integer\u0026gt; getList(){ ... }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n   * @return empty {@code ArrayList\u0026lt;Integer\u0026gt;}\n   */\n  List\u0026lt;Integer\u0026gt; getList(){ ... }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryInheritDoc",
          "displayName": "Unnecessary \u0027{@inheritDoc}\u0027 Javadoc comment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Javadoc comments that contain only an \u003ccode\u003e{@inheritDoc}\u003c/code\u003e\ntag. Since Javadoc copies the super class\u0027 comment if no comment is present, a\ncomment containing only \u003ccode\u003e{@inheritDoc}\u003c/code\u003e adds nothing.\n\u003cp\u003eAlso, it reports the \u003ccode\u003e{@inheritDoc}\u003c/code\u003e usages in invalid locations, for example, in fields.\u003c/p\u003e\n\u003cp\u003eSuggests removing the unnecessary Javadoc comment.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Example implements Comparable\u0026lt;Example\u0026gt; {\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int compareTo(Example o) {\n      return 0;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Example implements Comparable\u0026lt;Example\u0026gt; {\n    @Override\n    public int compareTo(Example o) {\n      return 0;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PackageInfoWithoutPackage",
          "displayName": "\u0027package-info.java\u0027 without \u0027package\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003epackage-info.java\u003c/code\u003e files without a \u003ccode\u003epackage\u003c/code\u003e statement.\n\u003cp\u003e\nThe Javadoc tool considers such files documentation for the default package even when the file is located somewhere else.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PackageDotHtmlMayBePackageInfo",
          "displayName": "\u0027package.html\u0027 may be converted to \u0027package-info.java\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any \u003ccode\u003epackage.html\u003c/code\u003e files which are used for documenting packages.\n\u003cp\u003eSince JDK 1.5, it is recommended that you use \u003ccode\u003epackage-info.java\u003c/code\u003e files instead, as such\nfiles can also contain package annotations. This way, package-info.java becomes a\n  sole repository for package level annotations and documentation.\u003c/p\u003e\n\u003cp\u003eExample: \u003ccode\u003epackage.html\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;html\u0026gt;\n  \u0026lt;body\u0026gt;\n    Documentation example.\n  \u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied: \u003ccode\u003epackage-info.java\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n/**\n * Documentation example.\n */\npackage com.sample;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceWithJavadoc",
          "displayName": "Comment replaceable with Javadoc",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a regular comment that belongs to a field, method, or class that can be replaced with a Javadoc comment.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Main {\n    /*\n    * Hello,\n    */\n    // World!\n    void f() {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Main {\n    /**\n     * Hello,\n     * World!\n     */\n    void f() {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Common",
      "inspections": [
        {
          "shortName": "ReactiveStreamsThrowInOperator",
          "displayName": "Throw statement in Reactive operator",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003ethrow\u003c/code\u003e expressions in the Reactor/RxJava operator code.\u003c/p\u003e\n\u003cp\u003eThrowing exceptions from a Reactor/RxJava operator indicates a possible problem, because you can return a \"Reactive-like\" error:\n  \u003ccode\u003eMono.error()\u003c/code\u003e or \u003ccode\u003eFlowable.error()\u003c/code\u003e from \u003ccode\u003eflatMap()\u003c/code\u003e,\n  or call \u003ccode\u003esink.error()\u003c/code\u003e from the Reactor\u0027s \u003ccode\u003ehandle()\u003c/code\u003e operator.\n\u003c/p\u003e\n\u003cp\u003e\nAlso, Reactor factory methods allow returning checked exceptions without any errors, while throwing such exceptions without\nthe \u003ccode\u003eExceptions\u003c/code\u003e class leads to a compilation error.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nFlux.just(1, 2, 3).flatMap(i -\u003e {\n            throw new RuntimeException();\n        })\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nFlux.just(1, 2, 3).flatMap(i -\u003e {\n            return Flux.error(new RuntimeException());\n        })\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReactiveStreamsNullableInLambdaInTransform",
          "displayName": "Return null or something nullable from a lambda in transformation method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports transform operations that may return \u003ccode\u003enull\u003c/code\u003e inside a Reactive Stream chain.\u003c/p\u003e\n\n\u003cp\u003e\n  Reactive Streams don\u0027t support nullable values, which causes such code to fail.\n  The quick-fix suggests replacing \u003ccode\u003emap()\u003c/code\u003e with \u003ccode\u003emapNotNull\u003c/code\u003e, which omits exceptions.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erepository.findWithTailableCursorBy()\n    .map(e -\u003e (Person)null)\n    .doOnNext(System.out::println)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erepository.findWithTailableCursorBy()\n    .mapNotNull(e -\u003e (Person)null)\n    .doOnNext(System.out::println)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003csmall\u003eNew in 2019.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReactiveStreamsTooLongSameOperatorsChain",
          "displayName": "Too long same methods chain",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports long Reactive Streams transformation chains.\u003c/p\u003e\n\u003cp\u003eEach operator method call, such as \u003ccode\u003emap()\u003c/code\u003e or \u003ccode\u003efilter()\u003c/code\u003e, creates some objects for those operators.\n  Calling a long chain of operators on each subscription, for each stream element, may cause performance overhead.\n  To avoid it, combine a long chain of calls into one operator call wherever possible.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nFlux.just(1, 2, 3)\n        .map(it -\u003e it + 1)\n        .map(it -\u003e it + 2)\n        .map(it -\u003e it + 3)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nFlux.just(1, 2, 3)\n        .map(it -\u003e it + 1 + 2 + 3)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReactorZipWithMonoVoid",
          "displayName": "Zip contains parameter with Mono\u003cVoid\u003e type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports zip operations that may return \u003ccode\u003eMono with void value\u003c/code\u003e inside a Reactive Stream chain.\u003c/p\u003e\n\n\u003cp\u003e\n  Reactive Streams zip transformation methods with Mono Void parameters will not have any effect.\n  The quick-fix suggests replacing \u003ccode\u003ezip(), zipWhen(), zipWith()\u003c/code\u003e with \u003ccode\u003ewhen\u003c/code\u003e, which returns Mono with Void value.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMono.zip(Mono.just(1), Mono.fromRunnable(() -\u003e System.out.println(\"value\")))\n                .map(v -\u003e \"New value\")\n                .doFinally(System.out::println);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMono.when(Mono.just(1), Mono.fromRunnable(() -\u003e System.out.println(\"value\")))\n                .then(Mono.fromCallable(() -\u003e \"New value\"))\n                .doFinally(System.out::println);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003csmall\u003eNew in 2023.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReactorTransformationOnMonoVoid",
          "displayName": "Calling {0} on receiver with Mono\u003cVoid\u003e type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports transform operations that called on \u003ccode\u003eMono with Void value\u003c/code\u003e inside a Reactive Stream chain.\u003c/p\u003e\n\n\u003cp\u003e\n  Reactive Streams chain calls on Mono with Void value will not have any effect.\n  The quick-fix suggests replacing \u003ccode\u003emap(), flatMap()\u003c/code\u003e with \u003ccode\u003ethen()\u003c/code\u003e, which returns other Mono.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMono.when(Mono.just(1), Mono.just(2))\n                .map(v -\u003e \"New value\")\n                .doFinally(System.out::println);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eMono.when(Mono.just(1), Mono.just(2))\n                .then(Mono.fromCallable(() -\u003e \"New value\"))\n                .doFinally(System.out::println);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003csmall\u003eNew in 2023.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReactiveStreamsPublisherImplementation",
          "displayName": "Class implements Publisher",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports classes that directly implement the \u003ccode\u003ePublisher\u003c/code\u003e interface.\u003c/p\u003e\n\u003cp\u003eConsider using static generators from RxJava, Reactor or Mutiny, for example:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eFlux.just()\u003c/code\u003e, \u003ccode\u003eFlux.create()\u003c/code\u003e, \u003ccode\u003eFlux.generate()\u003c/code\u003e, \u003ccode\u003eFlux.from()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eMono.create()\u003c/code\u003e, \u003ccode\u003eMono.from()\u003c/code\u003e, \u003ccode\u003eMono.just()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eFlowable.just()\u003c/code\u003e, \u003ccode\u003eFlowable.from()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eMaybe.just()\u003c/code\u003e, \u003ccode\u003eMaybe.from()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eMulti.createFrom()\u003c/code\u003e, \u003ccode\u003eMulti.createBy()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eUni.createFrom()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReactiveStreamsSubscriberImplementation",
          "displayName": "Class implements Subscriber",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports classes that directly implement the \u003ccode\u003eSubscriber\u003c/code\u003e interface.\u003c/p\u003e\n\u003cp\u003eConsider using static generators from RxJava, Reactor or Mutiny, for example:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eFlux.just()\u003c/code\u003e, \u003ccode\u003eFlux.create()\u003c/code\u003e, \u003ccode\u003eFlux.generate()\u003c/code\u003e, \u003ccode\u003eFlux.from()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eMono.create()\u003c/code\u003e, \u003ccode\u003eMono.from()\u003c/code\u003e, \u003ccode\u003eMono.just()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eFlowable.just()\u003c/code\u003e, \u003ccode\u003eFlowable.from()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eMaybe.just()\u003c/code\u003e, \u003ccode\u003eMaybe.from()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eMulti.createFrom()\u003c/code\u003e, \u003ccode\u003eMulti.createBy()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eUni.createFrom()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReactiveStreamsUnusedPublisher",
          "displayName": "Unused publisher",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unused \u003ccode\u003ePublisher\u003c/code\u003e instances.\u003c/p\u003e\n\u003cp\u003e\n  To use an operator (a method of Mono/Flux/Flowable object that returns a Mono/Flux/Flowable) that produces a new \u003ccode\u003ePublisher\u003c/code\u003e\n  instance,\n  you must subscribe to the created \u003ccode\u003ePublisher\u003c/code\u003e via \u003ccode\u003esubscribe()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Using a factory (for example, \u003ccode\u003eMono.just()\u003c/code\u003e) without subscribing to the returned \u003ccode\u003ePublisher\u003c/code\u003e,\n  creates an object that is never used and is treated as unnecessary memory allocation.\n\u003c/p\u003e\n\u003cp\u003e\n  For example, \u003ccode\u003eMono.just(1, 2, 3).map(i -\u003e i + 3)\u003c/code\u003e won\u0027t be executed unless you subscribe to this \u003ccode\u003ePublisher\u003c/code\u003e,\n  or unless you produce a new \u003ccode\u003ePublisher\u003c/code\u003e by applying operators and subscribe to it.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003eUnused \u003ccode\u003eFlux\u003c/code\u003e instance:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nFlux.just(1, 2, 3);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA \u003ccode\u003eFlux\u003c/code\u003e instance used by consumer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nFlux.just(1, 2, 3).subscribe(System.out::println);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCalls to methods annotated with Error Prone\u0027s or AssertJ\u0027s \u003ccode\u003e@CanIgnoreReturnValue\u003c/code\u003e annotation are not reported.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Pattern validation",
      "inspections": [
        {
          "shortName": "PatternNotApplicable",
          "displayName": "Pattern Annotation not applicable",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports when a \u003ccode\u003e@Pattern\u003c/code\u003e annotation is applied to an element with a type other than \u003ccode\u003eString\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Pattern(\"\\\\d\\\\d\") \u003cb\u003eint\u003c/b\u003e i;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "PatternOverriddenByNonAnnotatedMethod",
          "displayName": "Non-annotated Method overrides @Pattern Method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports when a method without any \u003ccode\u003e@Pattern\u003c/code\u003e annotation overrides a \u003ccode\u003e@Pattern\u003c/code\u003e annotated method.\nThis does not prevent error-highlighting inside the editor, however the overriding method will not be checked at runtime.\n\u003cp\u003e\nA quick fix is provided to add a \u003ccode\u003e@Pattern\u003c/code\u003e annotation that matches the one from the superclass method. This ensures the\nruntime-check instrumentation works correctly.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class Parent {\n    abstract @Pattern(\"\\\\d\\\\d-\\\\d\\\\d\\\\d\") String getId();\n  }\n  class Child extends Parent {\n    @Override String getId() { // warning here\n      return \"12-345\";\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "PatternValidation",
          "displayName": "Validate annotated patterns",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions passed as arguments for \u003ccode\u003e@Pattern\u003c/code\u003e parameters and\nreturned from \u003ccode\u003e@Pattern\u003c/code\u003e-annotated methods that do not match the specified pattern.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Pattern(\"\\\\d\\\\d-\\\\d\\\\d\\\\d\") String getId() {\n    \u003cb\u003ereturn\u003c/b\u003e \"1\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eFlag non compile-time constant expressions\u003c/b\u003e option to let the inspection report expressions with\n  an unknown value and offer to add a substitution (\u003ccode\u003e@Subst\u003c/code\u003e) annotation.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Screen sizes",
      "inspections": [
        {
          "shortName": "ButtonSize",
          "displayName": "Button size",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright (C) 2022 The Android Open Source Project\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nDetects layouts where a button is wider than the recommended 320dp.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Bounds",
          "displayName": "Bounds",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright (C) 2022 The Android Open Source Project\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nDetects layouts where a child view is not fully contained within the bounds of its parent.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Overlap",
          "displayName": "Overlap",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright (C) 2022 The Android Open Source Project\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nDetects layouts where a view is at least 50% covered by another sibling view.\nThe analysis is restricted to covered text views as they are the most likely to be wrongly covered by another view.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LongText",
          "displayName": "Long text",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright (C) 2022 The Android Open Source Project\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nDetects layouts where a line of text is longer than 120 characters.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AccessibilityTestFramework",
          "displayName": "Accessibility",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright (C) 2022 The Android Open Source Project\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nDetects layouts with accessibility issues.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LocaleText",
          "displayName": "Locale text",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright (C) 2022 The Android Open Source Project\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nDetects layouts with text that behaves differently in different locales.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TextFieldSize",
          "displayName": "Text field size",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright (C) 2022 The Android Open Source Project\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nDetects layouts where a text field is wider than the recommended 488dp.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BottomNav",
          "displayName": "Bottom nav",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright (C) 2022 The Android Open Source Project\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nDetects layouts where a BottomNavigationView is wider than 600dp.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BottomAppBar",
          "displayName": "Bottom app bar",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright (C) 2022 The Android Open Source Project\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nDetects layouts where a BottomAppBar is used on non-compact screens.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WearMargin",
          "displayName": "Wear margins",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright (C) 2022 The Android Open Source Project\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nDetects layouts where views are too close to the side of Wear OS devices.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Nullability problems",
      "inspections": [
        {
          "shortName": "NullableProblems",
          "displayName": "@NotNull/@Nullable problems",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports problems related to nullability annotations.\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eOverriding methods are not annotated:\n    \u003cpre\u003e\u003ccode\u003e\nabstract class A {\n  @NotNull abstract String m();\n}\nclass B extends A {\n    String m() { return \"empty string\"; }\n}\n    \u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n  \u003cli\u003eAnnotated primitive types: \u003ccode\u003e@NotNull int myFoo;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003eBoth \u003ccode\u003e@Nullable\u003c/code\u003e and \u003ccode\u003e@NotNull\u003c/code\u003e are present on the same member: \u003ccode\u003e@Nullable @NotNull String myFooString;\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eCollection of nullable elements is assigned into a collection of non-null elements:\n    \u003cpre\u003e\u003ccode\u003e\nvoid testList(List\u0026lt;@Nullable String\u003e nullableList) {\n   List\u0026lt;@NotNull String\u003e list2 \u003d nullableList;\n}\n    \u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eConfigure Annotations\u003c/b\u003e button to specify nullability annotations and the checkboxes to fine-tune where the inspection should provide warnings.\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 5 or higher, \n  and nullability annotations are available on the classpath.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReturnNull",
          "displayName": "Return of \u0027null\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ereturn\u003c/code\u003e statements with \u003ccode\u003enull\u003c/code\u003e return values.\nWhile occasionally useful, this construct may make the code more prone\nto failing with a \u003ccode\u003eNullPointerException\u003c/code\u003e.\n\u003cp\u003e\n  If a method is designed to return \u003ccode\u003enull\u003c/code\u003e, it is suggested to mark it with the\n  \u003ccode\u003e@Nullable\u003c/code\u003e annotation - such methods will be ignored by this inspection.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Person {\n    public String getName () {\n      return null;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Person {\n    @Nullable\n    public String getName () {\n      return null;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  If the return type is \u003ccode\u003ejava.util.Optional\u003c/code\u003e, an additional quick-fix to convert\n  \u003ccode\u003enull\u003c/code\u003e to \u003ccode\u003eOptional.empty()\u003c/code\u003e is suggested.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Whether to ignore \u003ccode\u003eprivate\u003c/code\u003e methods.\n    This will also ignore return of \u003ccode\u003enull\u003c/code\u003e from anonymous classes and lambdas.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether \u003ccode\u003enull\u003c/code\u003e values on array returns, collection\n    object returns, plain object returns, or a combination of the three should be reported.\n    Return of \u003ccode\u003enull\u003c/code\u003e in methods with return type \u003ccode\u003ejava.util.Optional\u003c/code\u003e are always reported.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Click \u003cb\u003eConfigure annotations\u003c/b\u003e to specify which annotations should be considered \u0027nullable\u0027.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnsatisfiedRange",
          "displayName": "Return value is outside of declared range",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports numeric values returned from methods that don\u0027t conform to the declared method return range.\nYou can declare method return range using a number of annotations:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eorg.jetbrains.annotations.Range\u003c/code\u003e from JetBrains annotations package (specify \u0027from\u0027 and \u0027to\u0027)\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eorg.checkerframework.common.value.qual.IntRange\u003c/code\u003e from Checker Framework annotations package (specify \u0027from\u0027 and \u0027to\u0027)\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eorg.checkerframework.checker.index.qual.GTENegativeOne\u003c/code\u003e from Checker Framework annotations package (range is \u0027\u003e\u003d -1\u0027)\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eorg.checkerframework.checker.index.qual.NonNegative\u003c/code\u003e from Checker Framework annotations package (range is \u0027\u003e\u003d 0\u0027)\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eorg.checkerframework.checker.index.qual.Positive\u003c/code\u003e from Checker Framework annotations package (range is \u0027\u003e 0\u0027)\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejavax.annotation.Nonnegative\u003c/code\u003e from JSR 305 annotations package (range is \u0027\u003e\u003d 0\u0027)\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejavax.validation.constraints.Min\u003c/code\u003e (specify minimum value)\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejavax.validation.constraints.Max\u003c/code\u003e (specify maximum value)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Range(from \u003d 0, to \u003d Integer.MAX_VALUE) int getValue() {\n    // Warning: -1 is outside of declared range\n    return -1;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2021.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "NotNullFieldNotInitialized",
          "displayName": "@NotNull field is not initialized",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields annotated as not-null that are not initialized in the constructor.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epublic class MyClass {\n  private @NotNull String value;\n\n  public void setValue(@NotNull String value) {\n    this.value \u003d value;\n  }\n\n  public @NotNull String getValue() {\n    return value;\n  }\n  }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Such fields may violate the not-null constraint. In the example above, the \u003ccode\u003esetValue\u003c/code\u003e parameter is annotated as not-null, but\n  \u003ccode\u003egetValue\u003c/code\u003e may return null if the setter was not called.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore fields which could be initialized implicitly\u003c/b\u003e option to control whether a warning should be issued if the field could be initialized implicitly\n    (e.g. via a dependency injection).\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore fields initialized in setUp() method\u003c/b\u003e option to control whether a warning should be issued if the field is written in the test case \u003ccode\u003esetUp()\u003c/code\u003e method.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Internationalization",
      "inspections": [
        {
          "shortName": "CallToSuspiciousStringMethod",
          "displayName": "Call to suspicious \u0027String\u0027 method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls of:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eequals()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eequalsIgnoreCase()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecompareTo()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecompareToIgnoreCase()\u003c/code\u003e and\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003etrim()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  on \u003ccode\u003eString\u003c/code\u003e objects.\n  Comparison of internationalized strings should probably use a \u003ccode\u003ejava.text.Collator\u003c/code\u003e instead.\n  \u003ccode\u003eString.trim()\u003c/code\u003e only removes control characters between 0x00 and 0x20.\n  The \u003ccode\u003eString.strip()\u003c/code\u003e method introduced in Java 11 is more Unicode aware and can be used as a replacement.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HardCodedStringLiteral",
          "displayName": "Hardcoded strings",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any instances of hardcoded \u003ccode\u003eString\u003c/code\u003e literals.\n\u003cp\u003eHardcoded \u003ccode\u003eString\u003c/code\u003e literals are probably errors in an\ninternationalized environment. This inspection won\u0027t report empty strings and strings consisting only of whitespaces. A quick-fix is available\nto transform a string literal into a \u003ccode\u003ejava.util.ResourceBundle.getString()\u003c/code\u003e method call.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse inspection\u0027s options to further specialize whether this inspection should report strings in:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eAssert statements like in \u003ccode\u003eassert str.equals(\"message\")\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eException constructor calls like in \u003ccode\u003enew Exception(\"message\")\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eJUnit assert calls like in \u003ccode\u003eassertEquals(str, \"message\")\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eThe only argument to a method returning String like in \u003ccode\u003egetStringByKey(\"key\")\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eLiterals with value of legal and existing class name like \u003ccode\u003eClass.forName(\"java.lang.Object\")\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eLiterals with value of legal and existing property key \u003ccode\u003ebundle.getString(\"authentication.failed\")\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringToUpperWithoutLocale",
          "displayName": "Call to \u0027String.toUpperCase()\u0027 or \u0027toLowerCase()\u0027 without locale",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003etoUpperCase()\u003c/code\u003e or \u003ccode\u003etoLowerCase()\u003c/code\u003e calls on \u003ccode\u003eString\u003c/code\u003e objects that do not specify a\n\u003ccode\u003ejava.util.Locale\u003c/code\u003e. In these cases the default system locale is used, which can cause problems in an internationalized\nenvironment.\n\u003cp\u003e\n  For example the code \u003ccode\u003e\"i\".toUpperCase().equals(\"I\")\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e in the Turkish and Azerbaijani locales, where\n  the dotted and dotless \u0027i\u0027 are separate letters. Calling \u003ccode\u003etoUpperCase()\u003c/code\u003e on an English string containing an \u0027i\u0027, when running\n  in a Turkish locale, will return incorrect results. Alternatively, when dealing with strings that should be treated as locale-independent,\n  like HTML tags, this can lead to errors.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DialogTitleCapitalization",
          "displayName": "Incorrect string capitalization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nReports strings in method parameters and return values annotated with \u003ccode\u003e@Nls\u003c/code\u003e and having the capitalization parameter\nto conform to capitalization rules existing in most platform UI guidelines.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void setTitle(@NlsContexts.DialogTitle String title) {}\n  setTitle(\"This is sentence capitalization but should be title\"); \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  setTitle(\"This Is Sentence Capitalization but Should Be Title\"); \n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "StringConcatenation",
          "displayName": "String concatenation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eString\u003c/code\u003e concatenations. Concatenation might be incorrect in an internationalized environment\nand could be replaced by usages of \u003ccode\u003ejava.text.MessageFormat\u003c/code\u003e or similar classes.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AbsoluteAlignmentInUserInterface",
          "displayName": "Absolute alignment in AWT/Swing code",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of absolute alignment constants from AWT and Swing. Internationalized applications use relative alignment because it respects the locale component orientation settings.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  JPanel panel \u003d new JPanel(new BorderLayout(2, 2));\n  JLabel label \u003d new JLabel(\"Hello World\");\n  panel.add(label, BorderLayout.NORTH);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  JPanel panel \u003d new JPanel(new BorderLayout(2, 2));\n  JLabel label \u003d new JLabel(\"Hello World\");\n  panel.add(label, BorderLayout.PAGE_START);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DuplicateStringLiteralInspection",
          "displayName": "Duplicate string literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports string literals that are replicated unchanged throughout the project.\nTwo quick-fixes are provided. One to introduce a constant for a duplicated string and use it throughout the project,\nand one to show the location of all the duplicates of a particular string literal.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class C1 { String CONST1 \u003d \"duplicate string\"; }\n  class C2 { String CONST2 \u003d \"duplicate string\"; }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eMin string length\u003c/b\u003e field to set the minimal string length required to detect duplicates.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore @PropertyKey expressions\u003c/b\u003e option to ignore strings passed as arguments to methods annotated with\n    \u003ccode\u003eorg.jetbrains.annotations.PropertyKey\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CharacterComparison",
          "displayName": "Character comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports ordinal comparisons of \u003ccode\u003echar\u003c/code\u003e values. In an internationalized environment, such comparisons are rarely correct.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ImplicitDefaultCharsetUsage",
          "displayName": "Implicit platform default charset",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method and constructor calls that implicitly use the platform default charset. Such calls can produce different results on\nsystems that use a different default charset and may result in unexpected behaviour.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evoid foo(byte[] bytes) {\n  String s \u003d new String(bytes);\n}\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eYou can use a quick-fix that specifies the explicit UTF-8 charset if the corresponding overloaded method is available.\n  After the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evoid foo(byte[] bytes) {\n  String s \u003d new String(bytes, StandardCharsets.UTF_8);\n}\u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NumericToString",
          "displayName": "Call to \u0027Number.toString()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003etoString()\u003c/code\u003e calls on objects of a class extending \u003ccode\u003eNumber\u003c/code\u003e.\nSuch calls are usually incorrect in an internationalized environment and some locale specific formatting should be used instead.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void print(Double d) {\n    System.out.println(d.toString());\n  }\n\u003c/code\u003e\u003c/pre\u003e\nA possible way to fix this problem could be:\n\u003cpre\u003e\u003ccode\u003e\n  void print(Double d) {\n    System.out.printf(\"%f%n\", d);\n  }\n\u003c/code\u003e\u003c/pre\u003e\nThis formats the number using the default locale which is set during the startup of the JVM and is based on the host environment.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TimeToString",
          "displayName": "Call to \u0027Time.toString()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003etoString()\u003c/code\u003e calls on \u003ccode\u003ejava.sql.Time\u003c/code\u003e objects. Such calls are usually incorrect in an internationalized\nenvironment.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringTokenizer",
          "displayName": "Use of \u0027StringTokenizer\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of the \u003ccode\u003eStringTokenizer\u003c/code\u003e class. Excessive use of \u003ccode\u003eStringTokenizer\u003c/code\u003e is incorrect\nin an internationalized environment.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DateToString",
          "displayName": "Call to \u0027Date.toString()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003etoString()\u003c/code\u003e calls on \u003ccode\u003ejava.util.Date\u003c/code\u003e objects. Such calls are usually incorrect in an internationalized\nenvironment.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MagicCharacter",
          "displayName": "Magic character",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports character literals that are used without constant declaration. These characters might result in\nbad code readability. Also, there might be errors if a character is changed only in one location\nbut not everywhere in code.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003echar c \u003d \u0027c\u0027;\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimpleDateFormatWithoutLocale",
          "displayName": "\u0027SimpleDateFormat\u0027 without locale",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instantiations of \u003ccode\u003ejava.util.SimpleDateFormat\u003c/code\u003e or \u003ccode\u003ejava.time.format.DateTimeFormatter\u003c/code\u003e\nthat do not specify a \u003ccode\u003ejava.util.Locale\u003c/code\u003e.\nThese calls will use the platform default locale, which depends on the OS settings.\nThis can lead to surprising behaviour when the code is run on a different platform or the OS settings are changed.\n\u003cp\u003e\u003ccode\u003eExample:\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  new SimpleDateFormat(\"yyyy\");\n  DateTimeFormatter.ofPattern(\"d/M/y\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConvertToBasicLatin",
          "displayName": "Non-Basic Latin character",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-Basic Latin characters in literals and suggests replacing them with unicode entities.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // © 2021\n  char c \u003d \u0027©\u0027;\n  String s \u003d \"Áî\";\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // \u0026amp;copy; 2021\n  char c \u003d \u0027\\u00a9\u0027;\n  String s \u003d \"\\u00c1\\u00ee\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryUnicodeEscape",
          "displayName": "Unnecessary unicode escape sequence",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary unicode escape sequences. For example, when the file encoding can handle the character without escaping it.\nUnicode control characters are not reported by this inspection (except for a line feed and a tab).\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eString s \u003d \"\\u0062\";\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Validity issues",
      "inspections": [
        {
          "shortName": "IncorrectPluginDslStructure",
          "displayName": "Plugin DSL structure",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e                                            \n\u003cp\u003eDetects disallowed statements before \u0027plugins {}\u0027 block. \u003c/p\u003e\nDue to the limitations of Gradle Plugin DSL, only a restricted set of Groovy statements is available before \u0027\u003ccode\u003eplugins {}\u003c/code\u003e\u0027 block. The only options are \u0027\u003ccode\u003ebuildscript {}\u003c/code\u003e\u0027, \u0027\u003ccode\u003epluginManagement {}\u003c/code\u003e\u0027 and other \u0027\u003ccode\u003eplugins {}\u003c/code\u003e\u0027. \u003cbr\u003e\n  \u003ca href\u003d\"https://docs.gradle.org/current/userguide/plugins.html#plugins_dsl_limitations\"\u003eSee Gradle documentation\u003c/a\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nimport foo.bar.Baz\nplugins {} // reports \u0027plugins\u0027\nplugins {\n  foo() // reporst \u0027foo\u0027\n  id \u0027java\u0027\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DeprecatedConfigurations",
          "displayName": "Deprecated configurations",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e                                            \n\u003cp\u003eDetects usage of configuration methods that were deprecated.\u003c/p\u003e\n\n  Configuration methods may be deprecated because of two possible reasons:\n  \u003cul\u003e\n  \u003cli\u003eThe Gradle API has evolved, so old method choices should be avoided;\u003c/li\u003e\n  \u003cli\u003eSome plugin provides a better version of the deprecated configuration method.\u003c/li\u003e\n  \u003c/ul\u003e\n  Most likely there will be an alternative for the deprecated method.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nplugins {\n  id \u0027java\u0027\n}\n\ndependencies {\n  archive \u0027org.gradle.api:gradle:1.0\u0027 // reports \u0027archive\u0027\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "RESTful Web Service (JAX-RS)",
      "inspections": [
        {
          "shortName": "MultipleMethodDesignatorsInspection",
          "displayName": "Resource method with multiple HTTP method annotations",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.restWebServices",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports resource methods with multiple HTTP method annotations (\u003ccode\u003e@GET\u003c/code\u003e, \u003ccode\u003e@POST\u003c/code\u003e, \u003ccode\u003e@PUT\u003c/code\u003e, and so on).\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RestParamTypeInspection",
          "displayName": "Incorrect parameter type of resource method",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.restWebServices",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports resource method parameters (annotated with \u003ccode\u003e@PathParam\u003c/code\u003e, \u003ccode\u003e@QueryParam\u003c/code\u003e, and so on) with unsupported types.\u003c/p\u003e\n\u003cp\u003eThe type of the annotated parameter, field, or property must meet one of the following requirements:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003eBe a primitive type\u003c/li\u003e\n  \u003cli\u003eHave a constructor that accepts a single \u003ccode\u003eString\u003c/code\u003e argument\u003c/li\u003e\n  \u003cli\u003eHave a static method named \u003ccode\u003evalueOf()\u003c/code\u003e or \u003ccode\u003efromString()\u003c/code\u003e that accepts a single \u003ccode\u003eString\u003c/code\u003e argument,\n    for example, \u003ccode\u003eInteger.valueOf(String)\u003c/code\u003e.\n  \u003c/li\u003e\n  \u003cli\u003eHave a registered implementation of \u003ccode\u003eParamConverterProvider\u003c/code\u003e JAX-RS extension SPI that returns a \u003ccode\u003eParamConverter\u003c/code\u003e instance\n    capable of converting a string to a particular type.\n  \u003c/li\u003e\n  \u003cli\u003eBe \u003ccode\u003eList\u0026lt;T\u0026gt;\u003c/code\u003e, \u003ccode\u003eSet\u0026lt;T\u0026gt;\u003c/code\u003e, or \u003ccode\u003eSortedSet\u0026lt;T\u0026gt;\u003c/code\u003e,\n    where T satisfies 2, 3, or 4 above. The resulting collection is read-only.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WadlDomInspection",
          "displayName": "Incorrect WADL configuration",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.restWebServices",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports configuration errors in WADL files.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RestResourceMethodInspection",
          "displayName": "@Path class without resource methods",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.restWebServices",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports classes annotated with \u003ccode\u003e@Path\u003c/code\u003e that have no resource methods.\n  The root resource class must have at least one resource method annotated with \u003ccode\u003e@Path\u003c/code\u003e\n  or with any of \u003ccode\u003e@HttpMethod\u003c/code\u003e annotations (\u003ccode\u003e@GET\u003c/code\u003e, \u003ccode\u003e@POST\u003c/code\u003e, and so on).\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnresolvedRestParam",
          "displayName": "Unresolved @PathParam reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.restWebServices",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003e@PathParam\u003c/code\u003e parameters that are declared in a method signature and missing in the URL path or visa versa.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Get(\"/path/{myVariable}/\")\n  public String handler(@PathParam(\"\u003cb\u003ename_is_not_equal_to_myVariable\u003c/b\u003e\") String myVariable) { // Error\n    return \"...\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RestWrongDefaultValueInspection",
          "displayName": "Incorrect value of @DefaultValue parameter",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.restWebServices",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports the value of \u003ccode\u003e@DefaultValue\u003c/code\u003e if it cannot be converted to the specified type of parameter.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @GET\n  @Path(\"/{n}\")\n  public String get(@PathParam(\"n\") @DefaultValue(\"\u003cb\u003eIII\u003c/b\u003e\") int n) { // Error: Cannot convert \u0027III\u0027 to int\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "VoidMethodAnnotatedWithGET",
          "displayName": "@GET annotated method returns void value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.restWebServices",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports methods annotated with \u003ccode\u003e@GET\u003c/code\u003e that do not return anything.\n  Methods annotated with \u003ccode\u003e@GET\u003c/code\u003e must have a non-void return type.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "PathAnnotation",
          "displayName": "Incorrect @Path URI template",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.restWebServices",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports syntax errors and unused URI templates inside \u003ccode\u003e@Path\u003c/code\u003e annotations.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @GET\n  @Path(\"/\u003cb\u003e{unused}\u003c/b\u003e\") // Template \u0027unused\u0027 is never used\n  public String get() {\n    return \"\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Data flow",
      "inspections": [
        {
          "shortName": "GroovyVariableNotAssigned",
          "displayName": "Variable not assigned",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports variables that might not have been initialized.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyMissingReturnStatement",
          "displayName": "Missing return statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports missing \u003ccode\u003ereturn\u003c/code\u003e statements at the end of methods with a non-\u003cb\u003evoid\u003c/b\u003e return type.\nThe end of method should be reachable by the method\u0027s execution flow.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nString foo(int a) {\n  if (a \u003e 0) {\n    return \"more than zero\"\n  }\n} // foo(-1) will return \u0027null\u0027\n\nint bar(int a) {\n  if (a \u003e 0) {\n    return a\n  }\n} // bar(-1) will fall with runtime exception\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyUnusedAssignment",
          "displayName": "Unused assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports the cases where a variable is redundant as its value is never used after its assignment.\u003c/p\u003e\n\u003cp\u003eIf the variable is unused, we recommend removing it to shorten the code and to avoid redundant allocations.\u003c/p\u003e\n\u003cp\u003eThe following cases are reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003ethe variable never gets read after assignment\u003c/li\u003e\n  \u003cli\u003ethe value is always overwritten with another assignment before the next variable read\u003c/li\u003e\n  \u003cli\u003ethe variable initializer is redundant (for one of the above two reasons)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e For more info see the same inspection in Java.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyUnusedIncOrDec",
          "displayName": "Unused incrementing or decrementing",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unused incrementing and decrementing expressions.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyVariableCanBeFinal",
          "displayName": "Variable can be final",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports parameters or local variables that may have a final modifier added.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def list \u003d [1,2,3]\n  return list\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\n\u003cpre\u003e\u003ccode\u003e\n  final def list \u003d [1,2,3]\n  return list\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eFor more information, see the same inspection in Java.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Dependency issues",
      "inspections": [
        {
          "shortName": "ClassWithTooManyDependents",
          "displayName": "Class with too many dependents",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a class on which too many other classes are directly dependent.\n\u003cp\u003eAny modification to such a class may require changing many other classes, which may be expensive.\u003c/p\u003e\n\u003cp\u003eOnly top-level classes are reported.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the field below to specify the maximum allowed number of dependents for a class.\u003c/p\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CyclicPackageDependency",
          "displayName": "Cyclic package dependency",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports packages that are mutually or cyclically dependent on other packages.\n\u003cp\u003eSuch cyclic dependencies make code fragile and hard to maintain.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassWithTooManyTransitiveDependencies",
          "displayName": "Class with too many transitive dependencies",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that are directly or indirectly dependent on too many other classes.\n\u003cp\u003eModifications to any dependency of such a class may require changing the class thus making it prone to instability.\u003c/p\u003e\n\u003cp\u003eOnly top-level classes are reported.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eMaximum number of transitive dependencies\u003c/b\u003e field to specify the maximum allowed number of direct or indirect dependencies\n  for a class.\u003c/p\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassWithTooManyDependencies",
          "displayName": "Class with too many dependencies",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that are directly dependent on too many other classes in the project.\n\u003cp\u003eModifications to any dependency of such classes may require changing the class, thus making it prone to instability.\u003c/p\u003e\n\u003cp\u003eOnly top-level classes are reported.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eMaximum number of dependencies\u003c/b\u003e field to specify the maximum allowed number of dependencies for a class.\u003c/p\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CyclicClassDependency",
          "displayName": "Cyclic class dependency",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that are mutually or cyclically dependent on other classes.\n\u003cp\u003eSuch cyclic dependencies make code fragile and hard to maintain.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassWithTooManyTransitiveDependents",
          "displayName": "Class with too many transitive dependents",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a class on which too many other classes are directly or indirectly dependent.\n\u003cp\u003eAny modification to such a class may require changing many other classes, which may be expensive.\u003c/p\u003e\n\u003cp\u003eOnly top-level classes are reported.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eMaximum number of transitive dependents\u003c/b\u003e field to specify the maximum allowed number of direct or indirect dependents\n  for a class.\u003c/p\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Room",
      "inspections": [
        {
          "shortName": "AndroidUnresolvedRoomSqlReference",
          "displayName": "Unresolved reference in Room SQL",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "RoomSql",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks Room SQL queries for unresolved references.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "AndroidRoomQuestionMarkBindParameter",
          "displayName": "\u0027?\u0027 used as parameter in a Room query.",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "RoomSql",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Room SQL queries that use unnamed query parameters (e.g. \u003ccode\u003eWHERE id \u003d ?\u003c/code\u003e). This is not supported by the Room query\nanalyzer which requires named query parameters (e.g. \u003ccode\u003eWHERE id \u003d :id\u003c/code\u003e) that correspond to arguments of the method annotated with\n\u003ccode\u003e@Query\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Spring AOP",
      "inspections": [
        {
          "shortName": "SpringAopPointcutExpressionInspection",
          "displayName": "Incorrect Spring AOP pointcut expression",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "PointcutExpression",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports AspectJ pointcut designators which are not supported by Spring.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;beans \u0026gt;\n  \u0026lt;aop:config \u0026gt;\n      \u0026lt;aop:pointcut expression\u003d\"\u003cstrong\u003e@this\u003c/strong\u003e(Anno)  \u0026lt;!-- \u0027@this\u0027 pointcut designator isn\u0027t supported by Spring --\u0026gt;\n                  and \u003cstrong\u003eadviceexecution\u003c/strong\u003e()\"/\u0026gt; \u0026lt;!--  \u0027adviceexecution\u0027 pointcut designator isn\u0027t supported by Spring --\u0026gt;\n      \u0026lt;aop:pointcut expression\u003d\"!@annotation(Anno)\"/\u0026gt;\n    \u0026lt;/aop:config\u0026gt;\n\u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringAopErrorsInspection",
          "displayName": "Incorrect Spring AOP advice or advisor element",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect advices and advisor elements if there are no \u003ccode\u003epointcut\u003c/code\u003e or \u003ccode\u003epointcut-ref\u003c/code\u003e attributes.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;beans \u0026gt;\n    \u0026lt;aop:config\u0026gt;\n      \u0026lt;aop:pointcut id\u003d\"zzz\" expression\u003d\"args()\"/\u0026gt;\n        \u0026lt;aop:aspect ref\u003d\"xxx\"\u0026gt;\n            \u0026lt;aop:before method\u003d\"writeArg1\" pointcut\u003d\"execution(* *(String))\"/\u0026gt;\n            \u0026lt;aop:after method\u003d\"aaa\" pointcut-ref\u003d\"zzz\"/\u0026gt;\n            \u0026lt;\u003cstrong\u003eaop:after-throwing\u003c/strong\u003e method\u003d\"aaa\"/\u0026gt; \u0026lt;!--Either \u0027pointcut\u0027 or \u0027pointcut-ref\u0027 attribute must be defined --\u0026gt;\n       \u0026lt;/aop:aspect\u0026gt;\n    \u0026lt;/aop:config\u0026gt;\n\u0026lt;/beans\u0026gt;\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringAopWarningsInspection",
          "displayName": "Incorrect Spring AOP aspect or pointcut element",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect aspects and pointcuts.\nWhen some AOP advice matches an aspect bean, it can lead to runtime errors.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;beans \u0026gt;\n  \u0026lt;aop:config\u0026gt;\n    \u0026lt;aop:pointcut expression\u003d\"args()\"/\u0026gt; \u0026lt;!--  Pointcut should have id --\u0026gt;\n    \u0026lt;aop:aspect/\u0026gt; \u0026lt;!-- \u0027ref\u0027 attribute should be defined --\u0026gt;\n  \u0026lt;/aop:config\u0026gt;\n\u0026lt;/beans\u0026gt;\n\n\u0026lt;beans\u0026gt;\n  \u0026lt;bean id\u003d\"aspect1\" class\u003d\"Aspect1\"/\u0026gt;\n  \u0026lt;bean id\u003d\"aspect2\" class\u003d\"Aspect2\"/\u0026gt;\n  \u0026lt;aop:config\u0026gt;\n    \u0026lt;aop:aspect ref\u003d\"aspect1\"\u0026gt; \u0026lt;!-- Some advices are matching this bean --\u0026gt;\n    \u0026lt;aop:before method\u003d\"xxx\" pointcut\u003d\"execution(* foo())\"/\u0026gt;\n    \u0026lt;/aop:aspect\u0026gt;\n    \u0026lt;aop:aspect ref\u003d\"aspect2\"\u0026gt;\n      \u0026lt;aop:before method\u003d\"xxx\" pointcut\u003d\"execution(* foo())\"/\u0026gt;\n    \u0026lt;/aop:aspect\u0026gt;\n  \u0026lt;/aop:config\u0026gt;\n\u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JdkProxiedBeanTypeInspection",
          "displayName": "Incorrect JDK-proxied bean type",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrectly configured JDK-proxied bean types.\u003c/p\u003e\n\n\u003cp\u003eFor more information, see \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-pfb-proxy-types\"\u003eJDK- and CGLIB-based proxies\u003c/a\u003e.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MissingAspectjAutoproxyInspection",
          "displayName": "Missing aspectj-autoproxy",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003e@Aspect\u003c/code\u003e annotations in Spring versions earlier than 2.5\n  if there is no \u003cstrong\u003e\u0026lt;aop:aspectj-autoproxy/\u0026gt;\u003c/strong\u003e element in the XML configuration.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u003cstrong\u003e@Aspect\u003c/strong\u003e // \u0027@AspectJ support isn\u0027t enabled\nclass MyAspect {\n   ...\n}\n\n\u0026lt;beans\u0026gt;\n   \u0026lt;!-- \u0026lt;aop:aspectj-autoproxy/\u0026gt; --\u0026gt;\n\u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Threading issues",
      "inspections": [
        {
          "shortName": "GroovyWaitCallNotInLoop",
          "displayName": "\u0027wait()\u0027 not in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports calls to \u003ccode\u003ewait()\u003c/code\u003e not made inside a loop.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ewait()\u003c/code\u003e is normally used to suspend a thread until a condition is true, and that condition should be checked after the \u003ccode\u003ewait()\u003c/code\u003e\n  returns. A loop is the clearest way to achieve this.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyUnconditionalWait",
          "displayName": "Unconditional \u0027wait\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003cb\u003ewait()\u003c/b\u003e\nbeing called unconditionally within a synchronized context.\nNormally, \u003cb\u003ewait()\u003c/b\u003e is\nused to block a thread until some condition is true. If \u003cb\u003ewait()\u003c/b\u003e\nis called unconditionally, that often indicates that the condition was checked before a lock was\nacquired. In that case, a data race may occur, with the condition becoming true between the time\nit was checked and the time the lock was acquired. While constructs found by this inspection\n  are not necessarily incorrect, they are certainly worth examining.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyNestedSynchronizedStatement",
          "displayName": "Nested \u0027synchronized\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports nested \u003ccode\u003esynchronized\u003c/code\u003e statements.\n\u003cp\u003e\n  Nested \u003ccode\u003esynchronized\u003c/code\u003e statements\n  are either redundant (if the lock objects are identical) or prone to deadlock.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovySynchronizationOnNonFinalField",
          "displayName": "Synchronization on non-final field",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003esynchronized\u003c/code\u003e statements where the lock expression\nis a non-\u003ccode\u003efinal\u003c/code\u003e field.\n\u003cp\u003e\n  Such statements are unlikely to have useful semantics, as different\n  threads may be locking on different objects even when operating on the same object.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyEmptySyncBlock",
          "displayName": "Empty \u0027synchronized\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003esynchronized\u003c/code\u003e statements\nwith empty bodies. While theoretically this may be the semantics intended, this construction is\nconfusing, and often the result of a typo.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nsynchronized(lock) {\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovySystemRunFinalizersOnExit",
          "displayName": "Call to System.runFinalizersOnExit()",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eSystem.runFinalizersOnExit()\u003c/code\u003e.\n\u003cp\u003e\n  This call is one of the most dangerous in the Java language. It is inherently non-thread-safe,\n  may result in data corruption, deadlock, and may affect parts of the program far removed from its call point.\n  It is deprecated, and its use is strongly discouraged.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyWaitWhileNotSynchronized",
          "displayName": "\u0027wait()\u0027 while not synced",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports calls to \u003ccode\u003ewait()\u003c/code\u003e not made inside a corresponding synchronized\n  statement or synchronized method.\u003c/p\u003e\n\u003cp\u003eCalling \u003ccode\u003ewait()\u003c/code\u003e on an object\nwithout holding a lock on that object will result in an \u003ccode\u003eIllegalMonitorStateException\u003c/code\u003e being thrown.\nSuch a construct is not necessarily an error, as the necessary lock may be acquired before\nthe containing method is called, but its worth looking at.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyNotifyWhileNotSynchronized",
          "displayName": "\u0027notify()\u0027 or \u0027notifyAll()\u0027 while not synced",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003enotify()\u003c/code\u003e and \u003ccode\u003enotifyAll()\u003c/code\u003e not within a corresponding\nsynchronized statement or synchronized method.\n\u003cp\u003e\n  Calling these methods on an object\n  without holding a lock on that object will result in an \u003ccode\u003eIllegalMonitorStateException\u003c/code\u003e being thrown.\n  Such a construct is not necessarily an error, as the necessary lock may be acquired before\n  the containing method is called, but it\u0027s worth looking at.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyPublicFieldAccessedInSynchronizedContext",
          "displayName": "Non-private field accessed in synchronized context",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-\u003ccode\u003efinal\u003c/code\u003e, non-\u003ccode\u003eprivate\u003c/code\u003e fields which are accessed in a synchronized context.\n\u003cp\u003e\n  A non-private field cannot be guaranteed to always be accessed in a synchronized manner, and such \"partially synchronized\"\n  access may result in unexpectedly inconsistent data structures. Accesses in constructors an initializers are ignored\n  for purposes of this inspection.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyAccessToStaticFieldLockedOnInstance",
          "displayName": "Access to static field locked on instance data",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports accesses to a non-constant static field which is\nlocked on either \u003ccode\u003ethis\u003c/code\u003e or an instance field of \u003ccode\u003ethis\u003c/code\u003e.\n\u003cp\u003e\n  Locking a static field on instance data does not prevent the field from being\n  modified by other instances, and thus may result in surprising race conditions.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  static String s;\n  def foo() {\n      synchronized (this) {\n          System.out.println(s); // warning\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyDoubleCheckedLocking",
          "displayName": "Double-checked locking",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ca href\u003d\"https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\"\u003edouble-checked locking\u003c/a\u003e.\n\u003cp\u003e\n  Double-checked locking tries to initialize a field on demand and in a thread-safe manner, while avoiding the cost of synchronization.\n  Unfortunately it is not thread-safe when used on a field that is not declared \u003ccode\u003evolatile\u003c/code\u003e.\n  When using Java 1.4 or earlier, double-checked locking doesn\u0027t work even with a \u003ccode\u003evolatile\u003c/code\u003e field.\n  Read the article linked above for a detailed explanation of the problem.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n      private Helper helper \u003d null\n\n      Helper getHelper() {\n          if (helper \u003d\u003d null)\n              synchronized(this) {\n                  if (helper \u003d\u003d null) {\n                      helper \u003d new Helper()\n                  }\n              }\n          }\n          return helper;\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyUnsynchronizedMethodOverridesSynchronizedMethod",
          "displayName": "Unsynchronized method overrides synchronized method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports non-\u003cb\u003esynchronized\u003c/b\u003e methods overriding \u003cb\u003esynchronized\u003c/b\u003e methods.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class Base {\n      \u003cb\u003esynchronized\u003c/b\u003e void foo() {\n          // ...\n      }\n  }\n  class Derived extends Base {\n      @Override\n      \u003cb\u003evoid foo()\u003c/b\u003e {\n          super.foo()\n            // ...\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere the non-synchronized method \u003ccode\u003efoo()\u003c/code\u003e in class \u003ccode\u003eBar\u003c/code\u003e overrides synchronized method.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovySynchronizedMethod",
          "displayName": "Synchronized method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the \u003ccode\u003esynchronized\u003c/code\u003e modifier on methods.\n\u003cp\u003e\n  Some coding standards\n  prohibit the use of the \u003ccode\u003esynchronized\u003c/code\u003e modifier, in favor of \u003ccode\u003esynchronized\u003c/code\u003e statements.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyWhileLoopSpinsOnField",
          "displayName": "While loop spins on field",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003ewhile\u003c/code\u003e loops, which spin on the\n  value of a non-\u003ccode\u003evolatile\u003c/code\u003e field, waiting for it to be changed by another thread.\u003c/p\u003e\n\u003cp\u003e\nIn addition to being potentially extremely CPU intensive when little work is done inside the loop, such\nloops likely have different semantics than intended. The Java Memory Model allows that loop to never complete even\nif another thread changes the field\u0027s value.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class SpinsOnField {\n      boolean ready \u003d false;\n\n      void run() {\n          // the loop may never complete even after\n          // markAsReady call from the other thread\n          while (!ready) {\n          }\n          // do some work\n      }\n\n      void markAsReady() {\n          ready \u003d true;\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nAdditionally since Java 9, calling \u003ccode\u003eThread.onSpinWait()\u003c/code\u003e inside spin loop\non a \u003ccode\u003evolatile\u003c/code\u003e field is recommended, which may significantly improve performance on some hardware.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the checkbox below to have this inspection report only empty \u003ccode\u003ewhile\u003c/code\u003e loops.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyBusyWait",
          "displayName": "Busy wait",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.lang.Thread.sleep()\u003c/code\u003e that occur inside loops.\n\u003cp\u003e\n  Such calls are indicative of \"busy-waiting\". Busy-waiting is often inefficient, and may result in unexpected deadlocks\n  as busy-waiting threads do not release locked resources.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyThreadStopSuspendResume",
          "displayName": "Call to Thread.stop(), Thread.suspend(), or Thread.resume()",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eThread.stop()\u003c/code\u003e,\u003ccode\u003eThread.suspend()\u003c/code\u003e, or \u003ccode\u003eThread.resume()\u003c/code\u003e.\n\u003cp\u003e\n  These calls are inherently prone to data corruption and deadlock, and their use is strongly\n  discouraged.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovySynchronizationOnThis",
          "displayName": "Synchronization on \u0027this\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports synchronization which uses \u003ccode\u003ethis\u003c/code\u003e as its lock expression.\n\u003cp\u003e\n  Constructs reported include \u003ccode\u003esynchronized\u003c/code\u003e\n  blocks which lock \u003ccode\u003ethis\u003c/code\u003e, and calls to \u003ccode\u003ewait()\u003c/code\u003e\n  \u003ccode\u003enotify()\u003c/code\u003e or \u003ccode\u003enotifyAll()\u003c/code\u003e which target \u003ccode\u003ewait()\u003c/code\u003e.\n  Such constructs, like synchronized methods, make it hard to track just who is locking on a given\n  object, and make possible \"denial of service\" attacks on objects. As an alternative, consider\n  locking on a private instance variable, access to which can be completely controlled.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovySynchronizationOnVariableInitializedWithLiteral",
          "displayName": "Synchronization on variable initialized with literal",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports synchronized blocks which lock on an object which is initialized with a literal.\n\u003cp\u003e\n  String literals are interned and \u003ccode\u003eNumber\u003c/code\u003e literals can be allocated from a cache. Because of\n  this, it is possible that some other part of the system which uses an object initialized with the same\n  literal, is actually holding a reference to the exact same object. This can create unexpected dead-lock\n  situations, if the string was thought to be private.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Embedded",
      "inspections": [
        {
          "shortName": "MultiplyOrDivideByPowerOfTwo",
          "displayName": "Multiplication or division by power of two",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports multiplication of an integer value by a constant integer that can be represented as a power of two. Such\nexpressions can be replaced with right or left shift operations\nfor a possible performance improvement.\n\u003cp\u003e\n  Note that this inspection is not relevant for modern JVMs (e. g.,\n  HotSpot or OpenJ9) because their JIT compilers will perform this optimization.\n  It might only be useful in some embedded systems where no JIT compilation is performed.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int y \u003d x * 4;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix is suggested to replace the multiplication or division operation with the shift operation:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int y \u003d x \u0026lt;\u0026lt; 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to make the inspection also report division by a power of two.\n  Note that replacing a power of two division with a shift does not work for negative numbers.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SingleCharacterStartsWith",
          "displayName": "Single character \u0027startsWith()\u0027 or \u0027endsWith()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eString.startsWith()\u003c/code\u003e and\n\u003ccode\u003eString.endsWith()\u003c/code\u003e where single character string literals are passed as an argument.\n\u003cp\u003e\n  A quick-fix is suggested to replace such calls with more efficiently implemented \u003ccode\u003eString.charAt()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  However, the performance gain of such change is minimal and the code becomes less readable because of the extra non-zero length check,\n  so it is recommended to apply the quick-fix only inside tight loops.\n\u003c/p\u003e\n\u003cp\u003e\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean startsWithX(String s) {\n    return s.startsWith(\"x\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean startsWithX(String s) {\n    return !s.isEmpty() \u0026\u0026 s.charAt(0) \u003d\u003d \u0027x\u0027;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PrivateMemberAccessBetweenOuterAndInnerClass",
          "displayName": "Synthetic accessor call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports references from a nested class to non-constant \u003ccode\u003eprivate\u003c/code\u003e members of an outer class.\nFor such references, javac will generate package-private synthetic accessor methods,\nwhich may compromise the security because members appearing to be private will in fact be accessible from the entire package.\n\u003cp\u003e\n  A nested class and its outer class are compiled to separate\n  class files. The Java virtual machine normally prohibits access from a class to private fields and methods of\n  another class. To enable access from a nested class to private members of an outer class, javac creates a package-private\n  synthetic accessor method.\n\u003c/p\u003e\n\u003cp\u003e\n  By making the \u003ccode\u003eprivate\u003c/code\u003e member package-private instead, the actual accessibility is made explicit.\n  This also saves a little bit of memory, which may improve performance in resource constrained environments.\n\u003c/p\u003e\n\u003cp\u003e\n  This inspection only reports if the language level of the project or module is 10 or lower.\n  Under Java 11 and higher accessor methods are not generated anymore,\n  because of nest-based access control (\u003ca href\u003d\"https://openjdk.org/jeps/181\"\u003eJEP 181\u003c/a\u003e).\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Outer {\n    private void x() {}\n\n    class Inner {\n      void y() {\n        x();\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Outer {\n    void x() {}\n\n    class Inner {\n      void y() {\n        x();\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CheckForOutOfMemoryOnLargeArrayAllocation",
          "displayName": "Large array allocation with no OutOfMemoryError check",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports large array allocations which do not check\nfor \u003ccode\u003ejava.lang.OutOfMemoryError\u003c/code\u003e. In memory\nconstrained environments, allocations of large data objects should probably\nbe checked for memory depletion.\n\u003cp\u003e\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to specify the maximum number of elements to allow in unchecked array allocations.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OverlyLargePrimitiveArrayInitializer",
          "displayName": "Overly large initializer for array of primitive type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports array initializer expressions for primitive\narrays that contain too many elements. Such initializers may result in overly large\nclass files because code must be generated to initialize each array element. In memory\nor bandwidth constrained environments, it may be more efficient to load large arrays\nof primitives from resource files.\n\u003cp\u003e\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to specify the maximum number of elements to allow in primitive array initializers.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InterfaceWithOnlyOneDirectInheritor",
          "displayName": "Interface with a single direct inheritor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports interfaces that have precisely one direct inheritor.\nWhile such interfaces may offer admirable clarity of design,\nin memory-constrained or bandwidth-limited environments,\nthey needlessly increase the total footprint of the application. Consider\nmerging the interface with its inheritor.\n\u003cp\u003e\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodCallInLoopCondition",
          "displayName": "Method call in loop condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method calls in the condition part of a\nloop statement. In highly resource constrained environments, such calls may\nhave adverse performance implications.\n\u003cp\u003e\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n  This inspection is intended for Java ME and other highly resource constrained environments.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d \"example\";\n  for (int i \u003d 0; i \u0026lt; s.length(); i++) {\n    System.out.println(s.charAt(i));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d \"example\";\n  int length \u003d s.length();\n  for (int i \u003d 0; i \u0026lt; length; i++) {\n    System.out.println(s.charAt(i));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to ignore calls to common Java iteration methods like \u003ccode\u003eIterator.hasNext()\u003c/code\u003e\n  and known methods with side-effects like \u003ccode\u003eAtomic*.compareAndSet\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AbstractClassWithOnlyOneDirectInheritor",
          "displayName": "Abstract class with a single direct inheritor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports abstract classes that have precisely one\ndirect inheritor. While such classes may offer admirable clarity of design,\nin memory-constrained or bandwidth-limited environments, they needlessly increase\nthe total footprint of the application. Consider merging the abstract class with its inheritor.\n\u003cp\u003e\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class Base {} // will be reported\n\n  class Inheritor extends Base {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConnectionResource",
          "displayName": "Connection opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Java ME \u003ccode\u003ejavax.microedition.io.Connection\u003c/code\u003e resources that are not opened in front of a \u003ccode\u003etry\u003c/code\u003e block and\nclosed in the corresponding \u003ccode\u003efinally\u003c/code\u003e block. Such resources may be inadvertently leaked if an exception is thrown before the\nresource is closed.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void example() throws IOException {\n    Connection c \u003d Connector.open(\"foo\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RecordStoreResource",
          "displayName": "\u0027RecordStore\u0027 opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Java ME \u003ccode\u003ejavax.microedition.rms.RecordStore\u003c/code\u003e resources that are not opened in front\nof a \u003ccode\u003etry\u003c/code\u003e block and closed in the corresponding \u003ccode\u003efinally\u003c/code\u003e block.\n\u003cp\u003eSuch resources may be inadvertently leaked if an exception is thrown before the resource is closed.\u003c/p\u003e\n\u003cp\u003e\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo1() throws RecordStoreException {\n      RecordStore rs \u003d RecordStore.openRecordStore(\"bar\", true); // warning\n  }\n  void foo2() throws RecordStoreException {\n      RecordStore rs \u003d RecordStore.openRecordStore(\"bar\", true); // no warning\n      try {\n          /* ... */\n      } finally {\n          rs.closeRecordStore();\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ArrayLengthInLoopCondition",
          "displayName": "Array.length in loop condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports accesses to the \u003ccode\u003e.length\u003c/code\u003e property of an array in the condition part of a\nloop statement. In highly resource constrained environments, such calls may\nhave adverse performance implications.\n\u003cp\u003e\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(Object[] x) {\n    for (int i \u003d 0; i \u0026lt; x.length; i++) { /**/ }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Unit testing",
      "inspections": [
        {
          "shortName": "KarmaConfigFile",
          "displayName": "Invalid Karma configuration file",
          "defaultSeverity": "WARNING",
          "pluginId": "Karma",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n  --\u003e\n\n\u003chtml\u003e\n\u003cbody\u003e\n  Reports a potential error in a file path (\u0027basePath\u0027, \u0027files\u0027) for a Karma configuration file, for example,  \u003ccode\u003ekarma.conf.js\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSTestFailedLine",
          "displayName": "Highlight failure line in test code",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a failed method call or an assertion in a test.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "SQL",
      "inspections": [
        {
          "shortName": "SqlRedundantLimitInspection",
          "displayName": "Redundant row limiting in queries",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant row limiting clauses like FETCH and LIMIT in queries.\n\u003cp\u003eExample (PostgreSQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo(a INT);\n\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first \u003ccode\u003eN\u003c/code\u003e rows and this will\ninfluence the output.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlDtInspection",
          "displayName": "Ill-formed date/time literals",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQLDateTime",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT TIME \u002710 -12:13:14\u0027 FROM dual;\nSELECT TIME \u0027 12 : 13 : 14 \u0027 FROM dual;\nSELECT TIME \u002712 13 14\u0027 FROM dual;\nSELECT TIME \u002712-13-14\u0027 FROM dual;\nSELECT TIME \u002712.13.14\u0027 FROM dual;\nSELECT TIME \u002712:13:\u0027 FROM dual;\nSELECT TIME \u002712:13\u0027 FROM dual;\nSELECT TIME \u002712:\u0027 FROM dual;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\n  For more information about date and time literals in MySQL, see \u003ca\n    href\u003d\"https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html\"\u003eDate and Time Literals at dev.mysql.com\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe following date and type literals are valid for MySQL.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT TIME \u002712:13:14\u0027 FROM dual;\nSELECT TIME \u002712:13:14.555\u0027 FROM dual;\nSELECT TIME \u002712:13:14.\u0027 FROM dual;\nSELECT TIME \u0027-12:13:14\u0027 FROM dual;\nSELECT TIME \u002710 12:13:14\u0027 FROM dual;\nSELECT TIME \u0027-10 12:13:14\u0027 FROM dual;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlJoinWithoutOnInspection",
          "displayName": "Unsafe \u0027join\u0027 clause in \u0027delete\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports missing conditional checks for statements that might modify the whole database.\n\u003cp\u003eFor example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\n  contents of the entire table.\u003c/p\u003e\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo (a INT,b INT,c INT);\nCREATE TABLE bar (a INT,b INT,c INT);\n\nDELETE table1 FROM foo table1  INNER JOIN bar table2;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SqlAggregatesInspection",
          "displayName": "Aggregate-related problems",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports invalid usages of SQL aggregate functions.\n\u003cp\u003eThe following situations are considered:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cp\u003eColumns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.\u003c/p\u003e\n    \u003cpre\u003e\u003ccode\u003eCREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\nSELECT a, MAX(b) FROM foo GROUP BY a HAVING b \u003e 0;\nSELECT * FROM foo GROUP BY a ORDER BY b;\u003c/code\u003e\u003c/pre\u003e\n    \u003cp\u003eThis rule does not apply when grouping is made by the primary key.\u003c/p\u003e\n    \u003cpre\u003e\u003ccode\u003eSELECT * FROM foo GROUP BY id ORDER BY b;\u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003cp\u003eAggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n    SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.\u003c/p\u003e\n    \u003cpre\u003e\u003ccode\u003eSELECT a FROM foo WHERE MAX(b) \u003e 0;\nSELECT a FROM foo GROUP BY MAX(a);\u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003cp\u003eNested calls of aggregate functions.\u003c/p\u003e\n    \u003cpre\u003e\u003ccode\u003eSELECT MAX(SUM(a)) FROM foo GROUP BY a;\u003c/code\u003e\u003c/pre\u003e\n    \u003cp\u003eThis rule does not apply to analytic functions. The following query is valid and correct.\u003c/p\u003e\n    \u003cpre\u003e\u003ccode\u003eSELECT MAX(SUM(a) OVER ()) FROM foo;\u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003cp\u003eUsages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.\u003c/p\u003e\n    \u003cpre\u003e\u003ccode\u003eSELECT a, MAX(b) FROM foo GROUP BY a HAVING a \u003e 0;\u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlRedundantCodeInCoalesceInspection",
          "displayName": "Redundant code in COALESCE call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT COALESCE(NULL, NULL, NULL, 42, NULL, \u0027string\u0027) as a;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first NOT NULL argument is \u003ccode\u003e42\u003c/code\u003e, all other arguments will be grayed out.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlCaseVsIfInspection",
          "displayName": "Using CASE instead of conditional function and vice versa",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports situations when CASE and IF are interchangeable.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT CASE\nWHEN C1 IS NULL THEN 1\nELSE 0\nEND\nFROM dual;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo keep your code short, you can replace the CASE structure with IF. You can do that by applying the \u003cb\u003eReplace with \u0027IF\u0027 call\u003c/b\u003e\n  intention action. The example code will look as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT IF(C1 IS NULL, 1, 0)\nFROM dual;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo revert IF to CASE, click IF and apply the \u003cb\u003eReplace with CASE expression\u003c/b\u003e intention action.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlTypeInspection",
          "displayName": "Types compatibility",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports type-related errors.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlTransactionStatementInTriggerInspection",
          "displayName": "Use of transaction management statements in triggers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n\u003cp\u003eWith COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\n  The fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\n  COMMIT\n  terminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\n  Changes that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.\u003c/p\u003e\n\u003cp\u003eExample (Oracle):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE employee_audit\n(\n    id          INT  NOT NULL,\n    update_date DATE NOT NULL,\n    old_name    VARCHAR2(100),\n    new_name    VARCHAR2(100)\n);\n\nCREATE TABLE employees\n(\n    id   INT           NOT NULL,\n    name VARCHAR2(100) NOT NULL\n);\n\nCREATE OR REPLACE TRIGGER trig_commit\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    COMMIT;\nEND;\n\nCREATE OR REPLACE TRIGGER trig_rollback\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    ROLLBACK;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlMissingReturnInspection",
          "displayName": "Missing return statement",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports functions that have no RETURN statements.\n\n\u003cp\u003eExample (Oracle):\u003c/p\u003e\n\n\u003cpre\u003e\n\u003ccode\u003eCREATE FUNCTION foo RETURN int AS\nBEGIN\nEND;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ccode\u003efoo\u003c/code\u003e function must return the integer value but the function body returns nothing. To fix the error,\n  add a RETURN statement (for example, \u003ccode\u003ereturn 1;\u003c/code\u003e).\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eCREATE FUNCTION foo RETURN int AS\nBEGIN\n RETURN 1;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlTriggerTransitionInspection",
          "displayName": "Suspicious code in triggers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports incorrect usages of transition table variables in triggers.\n\u003cp\u003eExample (HSQLDB):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo(a INT);\n\nCREATE TRIGGER trg\n AFTER DELETE ON foo\nBEGIN\n   SELECT * FROM NEW;\nEND;\n\nCREATE TRIGGER trig AFTER INSERT ON foo\n   REFERENCING OLD ROW AS newrow\n   FOR EACH ROW WHEN (a \u003e 1)\n   INSERT INTO foo VALUES (1)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\n  example, NEW in \u003ccode\u003eSELECT * FROM NEW;\u003c/code\u003e will be highlighted as well as OLD in \u003ccode\u003eREFERENCING OLD ROW AS newrow\u003c/code\u003e.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlCurrentSchemaInspection",
          "displayName": "Current console schema introspected",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports schemas and databases in the current session that are not introspected.\n\u003cp\u003eFor example, this warning might occur when you try to create a table in the schema that is not introspected.\u003c/p\u003e\n\u003cp\u003eIntrospection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\n  inspected to detect tables, columns, functions, and other elements with their attributes.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlShouldBeInGroupByInspection",
          "displayName": "Column should be in group by clause",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports columns that are not in the GROUP BY clause or inside an aggregate function call.\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE t1 (a INT, b INT);\nSELECT a, b FROM t1 GROUP BY a;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you run the SELECT query, you will receive an error because Microsoft SQL Server expects the \u003ccode\u003eb\u003c/code\u003e column in GROUP BY or used\n  inside an aggregate function. The following two examples will fix the error.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT a, b FROM t1 GROUP BY a, b;\nSELECT a, max(b) max_b FROM t1 GROUP BY a;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlIdentifierInspection",
          "displayName": "Identifier should be quoted",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports situations when you use SQL reserved keywords as identifier names in your query.\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe use \u003ccode\u003eselect\u003c/code\u003e, \u003ccode\u003eidentity\u003c/code\u003e, and \u003ccode\u003eorder\u003c/code\u003e as table and column names.\n  But they are also reserved keywords in Microsoft SQL Server.\n  Therefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n  \u003cb\u003eQuote identifier\u003c/b\u003e quick-fix.\u003c/p\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlIllegalCursorStateInspection",
          "displayName": "Illegal cursor state",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports illegal cursor states inside SQL routines.\n\u003cul\u003e\n  \u003cli\u003eA routine has CLOSE or FETCH statements but a cursor might be closed.\u003c/li\u003e\n  \u003cli\u003eA routine has the OPEN statement but a cursor might be opened.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE t(col INT);\n\nCREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAccording to \u003ca href\u003d\"https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql\"\u003eCLOSE (Transact-SQL) at\n  docs.microsoft.com\u003c/a\u003e, CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\n  already closed. So, we need to open the cursor to fix the warning.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nOPEN my_cursor;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlNoDataSourceInspection",
          "displayName": "No data sources configured",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the absence of data sources in the \u003cb\u003eDatabase\u003c/b\u003e tool window\n  (\u003cb\u003eView | Tool Windows | Database\u003c/b\u003e).\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlNamedArgumentsInspection",
          "displayName": "Named arguments should be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports arguments that are used without names in routine calls. By default, this inspection is disabled.\n\u003cp\u003eFor more information about the difference between named and unnamed parameters, see \u003ca\n    href\u003d\"https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters\"\u003e\n    Binding Parameters by Name (Named Parameters) at docs.microsoft.com\n  \u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\nBEGIN\n    RETURN n + m;\nEND;\n\nCREATE PROCEDURE test AS\nBEGIN\n    foo n \u003d 1, m \u003d 2;\n\n--- The following call misses parameter names and will be highlighted\n    foo 1, 2;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eParameters \u003ccode\u003e1, 2\u003c/code\u003e in the \u003ccode\u003efoo 1, 2;\u003c/code\u003e call are highlighted because they miss names.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlNullComparisonInspection",
          "displayName": "Null comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators.\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo ( id int );\n\nSELECT * FROM foo WHERE NULL \u003d NULL;\nSELECT * FROM foo WHERE NULL !\u003d NULL;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eNULL \u003d NULL\u003c/code\u003e can be replaced with \u003ccode\u003eIS NULL\u003c/code\u003e, the \u003ccode\u003eNULL !\u003d NULL\u003c/code\u003e comparison\n  with \u003ccode\u003eIS NOT NULL\u003c/code\u003e. To do this replacement, you can use \u003cb\u003eUse IS NULL operator\u003c/b\u003e or \u003cb\u003eUse IS NOT NULL operator\u003c/b\u003e\n  quick-fixes.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM foo WHERE NULL IS NULL;\nSELECT * FROM foo WHERE NULL IS NOT NULL;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlInsertIntoGeneratedColumnInspection",
          "displayName": "Insertion into generated columns",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly\n  written.\n\u003cp\u003eExample (PostgreSQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo\n(\n   col1 INT,\n   col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n);\nINSERT INTO foo(col1, col2) VALUES (1, 2);\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eYou cannot insert \u003ccode\u003e2\u003c/code\u003e into the \u003ccode\u003ecol2\u003c/code\u003e column because this column is generated.\n  For this script to work, you can change \u003ccode\u003e2\u003c/code\u003e to DEFAULT.\u003c/p\u003e\n\u003ccode\u003eINSERT INTO foo(col1, col2) VALUES (1, DEFAULT);\u003c/code\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlGotoInspection",
          "displayName": "Usages of GOTO statements",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of backward GOTO statements and GOTO statements used to exit a loop.\n\u003cp\u003eThe extensive use of GOTO statements is generally\n  not recommended. For details, see \u003ca href\u003d\"https://www.ibm.com/docs/no/db2/11.5?topic\u003dprocedures-goto-statement-in-sql\"\u003eGOTO statement in\n    SQL\n    procedures at ibm.com\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eInstead of jumping back to a previous statement using GOTO, consider using a loop.\u003c/p\u003e\n\u003cp\u003eInstead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).\u003c/p\u003e\n\u003cp\u003eExample (Oracle):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE PROCEDURE test(n INT) AS\nDECLARE\n    x INT;\nBEGIN\n    x :\u003d 0;\n    GOTO a;\n    \u0026lt;\u0026lt;a\u0026gt;\u0026gt; x :\u003d 1;\n    IF (n \u003d 0) THEN\n        GOTO a;\n    END IF;\n    WHILE TRUE\n        LOOP\n            GOTO b;\n        END LOOP;\n    \u0026lt;\u0026lt;b\u0026gt;\u0026gt; x :\u003d 3;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlUnusedCteInspection",
          "displayName": "Unused common table expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unused common table expressions (CTE) inside the query.\n\u003cp\u003eExample (PostgreSQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo(a INT);\n\nWITH a AS (SELECT 1 AS x FROM foo)\nSELECT 1 + 2 FROM foo;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy using WITH, we create a temporary named result set with the name \u003ccode\u003ea\u003c/code\u003e, also known as a common table expression (CTE). But\n  we do not use this CTE later in the code. The unused CTE is greyed out.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlMisleadingReferenceInspection",
          "displayName": "Misleading references",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports ambiguous references in SQL code.\n\u003cp\u003eFor example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\n    results due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.\u003c/p\u003e\n    \u003cp\u003eExample (PostgreSQL):\u003c/p\u003e\n    \u003cpre\u003e\u003ccode\u003eCREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\nDECLARE\n    b INT;\nBEGIN\n      -- `name` is ambiguous as it is used as a column name and a parameter\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name \u003d name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;\u003c/code\u003e\u003c/pre\u003e\n  \u003cp\u003eIn PostgreSQL, you can use the \u003ccode\u003e#variable_conflict\u003c/code\u003e directives to explicitly specify a correct reference. For example,\n    use \u003ccode\u003e#variable_conflict use_column\u003c/code\u003e to refer to a column name, or \u003ccode\u003e#variable_conflict use_variable\u003c/code\u003e to refer to a\n    parameter.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\n    #variable_conflict use_column\nDECLARE\n    b INT;\nBEGIN\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name \u003d name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SqlAutoIncrementDuplicateInspection",
          "displayName": "Auto-increment duplicate",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can\n  have only one field with a auto-increment option, and this field must be a key.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT,\n    c2 INT AUTO_INCREMENT,\n);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe AUTO_INCREMENT constraint for \u003ccode\u003ec2\u003c/code\u003e will be highlighted as \u003ccode\u003ec1\u003c/code\u003e already has this constraint. To fix the warning,\n  you can make \u003ccode\u003eid\u003c/code\u003e a primary key and delete AUTO_INCREMENT for \u003ccode\u003ec2\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    c2 INT,\n);\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SqlDeprecateTypeInspection",
          "displayName": "Deprecated type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of types that are deprecated and might disappear in future versions of DBMS.\n\u003cp\u003eReported types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eLONG in Oracle (see \u003ca href\u003d\"https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690\" target\u003d\"_blank\"\u003eDeprecated\n    and Desupported Features at docs.oracle.com\u003c/a\u003e).\n  \u003c/li\u003e\n  \u003cli\u003eTEXT, NTEXT, and IMAGE in Microsoft SQL Server (see \u003ca\n      href\u003d\"https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view\u003dsql-server-ver15\"\n      target\u003d\"_blank\"\u003eDeprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com\u003c/a\u003e).\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample (Oracle):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE ot.foo(\na NUMBER GENERATED BY DEFAULT AS IDENTITY,\nb LONG NOT NULL\n);\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlMissingColumnAliasesInspection",
          "displayName": "Missing column aliases",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n\u003cp\u003eExample (PostgreSQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo(a INT, b INT);\n\nSELECT 1, a + 1 AS A2, MAX(b) AS M\nFROM foo;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlConstantExpressionInspection",
          "displayName": "Constant expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditions and expressions that are always true, false or null.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE \u0027Cat\u0027 \u003d \u0027Cat\u0027;\nSELECT a FROM t1 WHERE \u0027Cat\u0027 \u003d null;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0027Cat\u0027 \u003d \u0027Cat\u0027\u003c/code\u003e is always true and will be reported.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0027Cat\u0027 \u003d null\u003c/code\u003e is always null and will be reported.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlResolveInspection",
          "displayName": "Unresolved reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved SQL references.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE users(id INT, name VARCHAR(40));\nCREATE TABLE admins(id INT, col1 INT);\n\nSELECT users.id, admins.id FROM admins WHERE admins.id \u003e 1;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eusers.id\u003c/code\u003e column is unresolved because the \u003ccode\u003eusers\u003c/code\u003e table is missing in the FROM clause.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlAmbiguousColumnInspection",
          "displayName": "Ambiguous reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports columns that have identical names but belong to different tables.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo(id INT PRIMARY KEY);\nCREATE TABLE bar(id INT PRIMARY KEY);\n\nSELECT foo.id, bar.id FROM foo, bar WHERE id \u003e 0;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eid\u003c/code\u003e column appears in \u003ccode\u003efoo\u003c/code\u003e and \u003ccode\u003ebar\u003c/code\u003e tables. You need to qualify the column name to\n  make the query correct.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT foo.id, bar.id FROM foo, bar WHERE foo.id \u003e 0;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlDuplicateColumnInspection",
          "displayName": "Duplicating column name in SELECT",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicated names of column aliases in SELECT lists.\n\u003cp\u003eExample (Sybase ASE):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE t1 (a TEXT, b INT, c INT);\n\nSELECT a AS x, b AS x FROM t1;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ex\u003c/code\u003e alias name is used for \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e columns. These assignments are highlighted as errors because\n  you cannot use identical alias names for columns in Sybase ASE.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlUnicodeStringLiteralInspection",
          "displayName": "Unicode usage in SQL",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports string literals that use national characters without the \u003ccode\u003eN\u003c/code\u003e prefix.\n\u003cp\u003eWithout the N prefix, the string is converted to the default\n  code page of the database. This default code page may not recognize certain characters. For more information, see\n  \u003ca href\u003d\"https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql\" target\u003d\"_blank\"\u003enchar and nvarchar\n    (Transact-SQL)\n    at docs.microsoft.com\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT \u0027abcde\u0027 AS a;\nSELECT N\u0027abcde\u0027 AS b;\nSELECT \u0027абвгд\u0027 AS c;\nSELECT N\u0027абвгд\u0027 AS d;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eSELECT \u0027абвгд\u0027 AS c;\u003c/code\u003e does not have the \u003ccode\u003eN\u003c/code\u003e prefix, the \u003ccode\u003e\u0027абвгд\u0027\u003c/code\u003e part will be highlighted.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlSignatureInspection",
          "displayName": "Function signature",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports signature issues for built-in functions.\n\u003cp\u003eThe inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.\u003c/p\u003e\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo (a INT, b INT, c INT)\n\nSELECT IFNULL() FROM foo; -- error\nSELECT IFNULL(a) FROM foo; -- error\nSELECT IFNULL(a, b) FROM foo; -- OK\nSELECT IFNULL(a, b, c) FROM foo; -- error\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn MySQL, the \u003ccode\u003eIFNULL()\u003c/code\u003e function accepts strictly two arguments. So, only the \u003ccode\u003eSELECT IFNULL(a, b) FROM foo;\u003c/code\u003e\n  query is correct.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlSideEffectsInspection",
          "displayName": "Statement with side effects",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports statements that might lead to modification of a database during a read-only connection. \u003cp\u003eTo enable read-only mode for a\n  connection,\n  right-click a data source in the \u003cb\u003eDatabase\u003c/b\u003e tool window (\u003cb\u003eView | Tool Windows | Database\u003c/b\u003e) and select \u003cb\u003eProperties\u003c/b\u003e.\n  In the \u003cb\u003eData Sources and Drivers\u003c/b\u003e dialog, click the \u003cb\u003eOptions\u003c/b\u003e tab and select the \u003cb\u003eRead-only\u003c/b\u003e checkbox.\u003c/p\u003e\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo(a INT);\nINSERT INTO foo VALUES (1);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs \u003ccode\u003eCREATE TABLE\u003c/code\u003e and \u003ccode\u003eINSERT INTO\u003c/code\u003e statements lead to a database modification, these statements will be highlighted\n  in read-only connection mode.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlCheckUsingColumnsInspection",
          "displayName": "Check using clause columns",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports columns in the USING clause that does not exist in both tables.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE t1 (i INT, j INT);\nCREATE TABLE t2 (k INT, l INT);\nSELECT * FROM t1 JOIN t2 USING (j);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\n  those tables by using the given column name. As we do not have the \u003ccode\u003ej\u003c/code\u003e column in \u003ccode\u003et2\u003c/code\u003e, we can\n  rewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT * FROM t1 JOIN t2 ON t1.j \u003d t2.l;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlUnreachableCodeInspection",
          "displayName": "Unreachable code",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unreachable statements inside SQL routines.\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE FUNCTION foo() RETURNS INT AS\nBEGIN\n    THROW;\n    RETURN 1;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn Microsoft SQL Server, the \u003ccode\u003eTHROW\u003c/code\u003e statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\n  construct. Therefore, the \u003ccode\u003eRETURN 1;\u003c/code\u003e part will never be executed.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlAddNotNullColumnInspection",
          "displayName": "Adding not null column without default value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports attempts to create NOT NULL columns without DEFAULT values.\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo (a INT, b  INT)\n\nALTER TABLE foo ADD c INT NOT NULL;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\n  If we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can quickly add the DEFAULT value by using the \u003cb\u003eAdd DEFAULT value\u003c/b\u003e quick-fix.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlWithoutWhereInspection",
          "displayName": "Delete or update statement without where clauses",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of DELETE or UPDATE statements without WHERE clauses.\n  \u003cp\u003eWithout WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.\u003c/p\u003e\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nupdate t1 set  a \u003d \u0027Smith\u0027;\ndelete from t1;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SqlStorageInspection",
          "displayName": "SQL source modification detection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports situations when source code of a database object has been changed.\n  \u003cp\u003eThe inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\n  object, run statements, and perform code refactoring.\n  Also, you can run introspection by right-clicking an object and selecting \u003cb\u003eRefresh\u003c/b\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe inspection covers the following situations:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eObject source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server,\n  Oracle, and Sybase ASE.\u003c/li\u003e\n  \u003cli\u003eYou changed the object source code, introspected the database, but source code has been already changed by someone else.\u003c/li\u003e\n  \u003cli\u003eThe database introspector was updated in the IDE and you need to download new object properties that were missing in the previous\n    introspector version.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlDropIndexedColumnInspection",
          "displayName": "Index is dependent on column",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE test_index\n(\ncol  INT NOT NULL,\ncol2 INT NOT NULL,\ncol3 INT NOT NULL UNIQUE,\ncol4 VARCHAR(200)\n);\n\nCREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\nALTER TABLE test_index\nDROP COLUMN col;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou cannot delete the \u003ccode\u003ecol\u003c/code\u003e column because it is in the indexed table. To delete the column, you need to delete the\n  \u003ccode\u003eaaaa\u003c/code\u003e index first (for example, DROP INDEX aaaa).\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SqlUnusedSubqueryItemInspection",
          "displayName": "Unused subquery item",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n\u003cp\u003eExample (PostgreSQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE for_subquery(id INT);\nSELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n      FROM for_subquery) x;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe reference \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eq\u003c/code\u003e aliases from a subquery. But the \u003ccode\u003eb\u003c/code\u003e alias and the \u003ccode\u003eid\u003c/code\u003e column are\n  not referenced in the outer SELECT statement. Therefore, \u003ccode\u003eb\u003c/code\u003e and \u003ccode\u003eid\u003c/code\u003e are grayed out.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlUnusedVariableInspection",
          "displayName": "Unused variable",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unused arguments, variables, or parameters.\n\u003cp\u003eExample (PostgreSQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n$$\nBEGIN\n    RETURN PARAMUSED;\nEND\n$$ LANGUAGE plpgsql;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ePARAMUNUSED\u003c/code\u003e parameter is not used in the function and might be deleted.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlStringLengthExceededInspection",
          "displayName": "Implicit string truncation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports variables that exceed the defined length in characters.\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) \u003d \u0027abcde\u0027;\nDECLARE myVarExceeded VARCHAR(5) \u003d \u0027abcde12345\u0027;\n\nSET myVarOk \u003d \u0027xyz\u0027;\nSET myVarExceeded \u003d \u0027123456789\u0027;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003emyVarExceeded\u003c/code\u003e variable is defined as \u003ccode\u003eVARCHAR(5)\u003c/code\u003e but both assigned values (\u003ccode\u003e\u0027abcde12345\u0027\u003c/code\u003e and\n  \u003ccode\u003e\u0027123456789\u0027\u003c/code\u003e) exceed this limitation. You can truncate assigned values or increase the defined length.\n  To increase the length, use the \u003cb\u003eIncrease type length\u003c/b\u003e quick-fix.\n\u003c/p\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) \u003d \u0027abcde\u0027;\nDECLARE myVarExceeded VARCHAR(10) \u003d \u0027abcde12345\u0027;\n\nSET myVarOk \u003d \u0027xyz\u0027;\nSET myVarExceeded \u003d \u0027123456789\u0027;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlCaseVsCoalesceInspection",
          "displayName": "Using CASE instead of COALESCE function and vice versa",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: \u003cb\u003eReplace\n  with \u0027COALESCE\u0027 call\u003c/b\u003e and the opposite one \u003cb\u003eReplace with CASE expression\u003c/b\u003e.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT\n  -- this CASE may be replaced by COALESCE\n\tCASE\n\t\tWHEN C1 IS NOT NULL THEN C1\n\t\tELSE 0\n\t\tEND\nFROM dual;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn the example, the CASE statement can be replaced with \u003ccode\u003eSELECT COALESCE(C1, 0)\u003c/code\u003e that produces the same output.\u003c/p\u003e\n\u003cp\u003eIf you prefer using CASE expressions, select the \u003cb\u003ePrefer CASE expressions over COALESCE function\u003c/b\u003e option on\nthe inspection page.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlDerivedTableAliasInspection",
          "displayName": "Each derived table should have alias",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports derived tables without aliases.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\nCREATE TABLE table2 (id INT, age INTEGER);\n\nSELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id \u003d table2.id);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAccording to \u003ca href\u003d\"https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html\"\u003eDerived Tables at dev.mysql.com\u003c/a\u003e, an alias is\n  mandatory. You can add the alias by using the \u003cb\u003eIntroduce alias\u003c/b\u003e quick-fix.\u003c/p\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id \u003d table2.id);\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlConstantConditionInspection",
          "displayName": "Constant condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE \u0027Cat\u0027 \u003d \u0027Cat\u0027;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003e\u0027Cat\u0027 \u003d \u0027Cat\u0027\u003c/code\u003e is always true and will be reported.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SqlInsertNullIntoNotNullInspection",
          "displayName": "Insert NULL into NOT NULL column",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports cases when you insert NULL values into columns that accept only NOT NULL values.\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE br2 (\nid INT NOT NULL,\ncol1 NVARCHAR (20) NOT NULL,\ncol2 NVARCHAR (20) NOT NULL,\n);\n--\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, NULL, NULL);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou cannot insert NULL values in \u003ccode\u003ecol1\u003c/code\u003e and \u003ccode\u003ecol2\u003c/code\u003e because they are defined as NOT NULL. If you run the script as\n  is,\n  you will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, \u003ccode\u003e42\u003c/code\u003e and\n  \u003ccode\u003e\u0027bird\u0027\u003c/code\u003e).\u003c/p\u003e\n\u003cpre\u003eINSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, \u0027bird\u0027);\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlRedundantAliasInspection",
          "displayName": "Redundant alias expressions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports alias expressions that duplicate names of columns in tables and might be redundant.\n\u003cp\u003eExample (PostgreSQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo(a INT, b INT);\n\nSELECT * FROM foo foo(a, b);\nSELECT * FROM foo foo(a);\nSELECT * FROM foo foo(x);\nSELECT * FROM foo foo(x, y);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe first two aliases use the same column names as in the \u003ccode\u003efoo\u003c/code\u003e table. They are considered redundant because they\n  column names are identical.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlRedundantElseNullInspection",
          "displayName": "Redundant ELSE NULL clause",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant ELSE NULL clauses.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT CASE WHEN 2 \u003e 1 THEN \u0027OK\u0027 ELSE NULL END AS alias FROM foo;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eELSE NULL\u003c/code\u003e part will never be executed and may be omitted.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlRedundantOrderingDirectionInspection",
          "displayName": "Redundant ordering direction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo(a INT, b INT, c INT);\nSELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe ORDER BY keyword sorts the records in the ascending order by default. So, the \u003ccode\u003eASC\u003c/code\u003e keyword for \u003ccode\u003ea\u003c/code\u003e and\n  \u003ccode\u003ec\u003c/code\u003e columns is redundant.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlCallNotationInspection",
          "displayName": "Using of named and positional arguments",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n\u003cp\u003eExample (In PostgreSQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE FUNCTION foo(a int, b int, c int) RETURNS int\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    RETURN a + b + c;\nEND\n$$;\nSELECT foo(a \u003d\u003e 1, b \u003d\u003e 2, c \u003d\u003e 3);\n  -- `3` goes after the named argument\nSELECT foo(1, b \u003d\u003e 2, 3);\n  -- `1` and `3` go after the named argument\nSELECT foo(b \u003d\u003e 2, 1, 3);\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlMultipleLimitClausesInspection",
          "displayName": "Multiple row limiting/offset clauses in queries",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of multiple row limiting clauses in a single query.\n\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecreate table foo(a int);\nselect top 1 * from foo order by a offset 10 rows fetch next 20 rows only;\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe SELECT TOP clause is used to specify that only 1 record must be\n  returned. The FETCH clause specifies the number of rows to return after the OFFSET\n  clause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlInsertValuesInspection",
          "displayName": "VALUES clause cardinality",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports situations when a number of parameters in VALUES does not match a number of columns\n  in a target table.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo(a INT, b INT, c INT);\n\nINSERT INTO foo VALUES (1,2,3,4)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003efoo\u003c/code\u003e table has three columns but in the INSERT INTO statement we pass four.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlShadowingAliasInspection",
          "displayName": "Column is shadowed by alias",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports SELECT aliases with names that match column names in the FROM clause.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo (a INT, b INT, c INT);\nSELECT a b, c FROM foo;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ea\u003c/code\u003e column uses the \u003ccode\u003eb\u003c/code\u003e alias but the \u003ccode\u003eb\u003c/code\u003e name is also used by the column from the \u003ccode\u003efoo\u003c/code\u003e\ntable.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SqlDialectInspection",
          "displayName": "SQL dialect detection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports situations when a dialect is not assigned to an SQL file.\n\u003cp\u003eFor example, when you open a new SQL file without assigning a dialect\n  to it, you see a notification where the best matching dialect is advised. Click the \u003cb\u003eUse \u0026lt;dialect\u0026gt;\u003c/b\u003e link to use the advised\n  dialect. Alternatively, click the \u003cb\u003eChange dialect to\u003c/b\u003e link to select the other dialect.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Code quality tools",
      "inspections": [
        {
          "shortName": "TsLint",
          "displayName": "TSLint",
          "defaultSeverity": "WARNING",
          "pluginId": "tslint",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a discrepancy detected by the \u003ca href\u003d\"https://github.com/palantir/tslint\"\u003eTSLint\u003c/a\u003e linter.\n\u003c!-- tooltip end --\u003e\n\u003cbr/\u003e\u003cbr/\u003e\nThe highlighting is based on the rule severity specified in the \u003ca href\u003d\"https://palantir.github.io/tslint/usage/configuration/\"\u003eTSLint configuration file\u003c/a\u003e for each individual rule.\n\u003cbr/\u003e\u003cbr/\u003e\nClear the \u0027Use rule severity from the configuration file\u0027 checkbox to use the severity configured in this inspection for all TSLint rules.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Eslint",
          "displayName": "ESLint",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a discrepancy detected by the \u003ca href\u003d\"https://eslint.org\"\u003eESLint\u003c/a\u003e linter.\n\u003c!-- tooltip end --\u003e\n\u003cbr/\u003e\u003cbr/\u003e\nThe highlighting is based on the rule severity specified in the \u003ca href\u003d\"https://eslint.org/docs/user-guide/configuring\"\u003eESLint configuration file\u003c/a\u003e for each individual rule.\n\u003cbr/\u003e\u003cbr/\u003e\nClear the  \u0027Use rule severity from the configuration file\u0027 checkbox to use the severity configured in this inspection for all ESLint rules.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StandardJS",
          "displayName": "Standard code style",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a discrepancy detected by the \u003ca href\u003d\"https://standardjs.com/\"\u003eJavaScript Standard Style\u003c/a\u003e linter.\n\u003c!-- tooltip end --\u003e\n\u003cbr/\u003e\u003cbr/\u003e\nThe highlighting severity in the editor is based on the severity level the linter reports.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSHint",
          "displayName": "JSHint",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a problem detected by the \u003ca href\u003d\"https://jshint.com/\"\u003eJSHint\u003c/a\u003e linter.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "EL",
      "inspections": [
        {
          "shortName": "ELValidationInspection",
          "displayName": "EL validation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.javaee.el",
          "pluginVersion": "231.9011.34",
          "language": "EL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports possible EL problems, such as unresolved references and invalid EL locations.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Description file",
      "inspections": [
        {
          "shortName": "PostfixTemplateDescriptionNotFound",
          "displayName": "Postfix template description checker",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports postfix templates missing an HTML description file, \u003ccode\u003ebefore.template\u003c/code\u003e file or \u003ccode\u003eafter.template\u003c/code\u003e file.\nThese are shown in \u003ca href\u003d\"settings://reference.settingsdialog.IDE.editor.postfix.templates\"\u003eSettings | Editor | General | Postfix Completion\u003c/a\u003e.\n\u003cp\u003e\n  The \u003cb\u003eCreate description file\u003c/b\u003e quick-fix creates a template HTML description file.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "InspectionDescriptionNotFoundInspection",
          "displayName": "Inspection description checker",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports inspections that are missing an HTML description file, i.e. a file containing a text like this.\n\u003cp\u003e\n  The \u003cb\u003eCreate description file\u003c/b\u003e quick-fix creates a template HTML description file.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "IntentionDescriptionNotFoundInspection",
          "displayName": "Intention description checker",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports intentions that are missing an HTML description file, \u003ccode\u003ebefore.template\u003c/code\u003e file or \u003ccode\u003eafter.template\u003c/code\u003e file.\nThese are shown in \u003ca href\u003d\"settings://preferences.intentionPowerPack\"\u003eSettings | Editor | Intentions\u003c/a\u003e.\n\u003cp\u003e\n  The \u003cb\u003eCreate description file\u003c/b\u003e quick-fix creates a template HTML description file.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Other",
      "inspections": [
        {
          "shortName": "TypeCustomizer",
          "displayName": "Type customizer inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports files which can be custom type checkers and are not added to compiler resources yet.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "GrMethodMayBeStatic",
          "displayName": "Method can be made \u0027static\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods which may safely be made \u003ccode\u003estatic\u003c/code\u003e.\n\u003cp\u003e\n  A method may be \u003ccode\u003estatic\u003c/code\u003e if it is not \u003ccode\u003esynchronized\u003c/code\u003e,\n  it does not reference any of its class\u0027 instance methods and instance fields,\n  and it is not overridden in a subclass.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "AOP",
      "inspections": [
        {
          "shortName": "DeclareParentsInspection",
          "displayName": "Introductions (declare parents) errors",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.aop",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003e@AspectJ\u003c/code\u003e Introduction inconsistency: it checks whether the \u003ccode\u003edefaultImpl\u003c/code\u003e is required and if yes, whether it implements\nthe given interface.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ArgNamesErrorsInspection",
          "displayName": "Advice parameters (argNames, returning, throwing) consistency check",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.aop",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports if an \u003ccode\u003e@AspectJ\u003c/code\u003e \u003ccode\u003eargNames\u003c/code\u003e attribute value does not correspond to the actual method parameter name.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ArgNamesWarningsInspection",
          "displayName": "Warning: argNames not defined ",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.aop",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports if an \u003ccode\u003eargNames\u003c/code\u003e attribute is not defined in an \u003ccode\u003e@AspectJ\u003c/code\u003e annotation.\n\u003cp\u003eDefining \u003ccode\u003eargNames\u003c/code\u003e attributes in \u003ccode\u003e@AspectJ\u003c/code\u003e annotations is recommended since the method parameter names\nmay not be available at runtime.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PointcutMethodStyleInspection",
          "displayName": "Pointcut method style",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.aop",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nValidates \u003ccode\u003e@Pointcut\u003c/code\u003e methods: the \u003ccode\u003evoid\u003c/code\u003e return type, no \u003ccode\u003ethrows\u003c/code\u003e clause, and an empty method body.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AroundAdviceStyleInspection",
          "displayName": "Around advice style inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.aop",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eWhen using \u003ccode\u003e@Around\u003c/code\u003e advice, remember two things:\n\u003cul\u003e\n  \u003cli\u003eCalling \u003ccode\u003eorg.aspectj.lang.ProceedingJoinPoint#proceed\u003c/code\u003e is necessary, otherwise the call won\u0027t reach the target.\u003c/li\u003e\n  \u003cli\u003eReturning the result value (typed \u003ccode\u003ejava.lang.Object\u003c/code\u003e) of that call is necessary, otherwise the return value will never\n    reach the original caller.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, the following two conditions almost always indicate a coding error:\u003cp\u003e\n\u003cul\u003e\n  \u003cli\u003eThe signature for the \u003ccode\u003e@Around\u003c/code\u003e method does not have \u003ccode\u003eProceedingJoinPoint\u003c/code\u003e as the first argument: in this case,\n    it\u0027s impossible for the call to reach the target.\u003c/li\u003e\n  \u003cli\u003eThe signature for the \u003ccode\u003e@Around\u003c/code\u003e method does not have \u003ccode\u003eObject\u003c/code\u003e as a return type: in this case, the return\n    value of the target method is always lost.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Internationalization",
      "inspections": [
        {
          "shortName": "NonAsciiCharacters",
          "displayName": "Non-ASCII characters",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code elements that use non-ASCII symbols in an unusual context.\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eNon-ASCII characters used in identifiers, strings, or comments.\u003c/li\u003e\n  \u003cli\u003eIdentifiers written in different languages, such as \u003ccode\u003emy\u003cb\u003eС\u003c/b\u003eollection\u003c/code\u003e with the\n    letter \u003ccode\u003e\u003cb\u003eC\u003c/b\u003e\u003c/code\u003e written in Cyrillic.\u003c/li\u003e\n  \u003cli\u003eComments or strings containing Unicode symbols, such as long dashes and arrows.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LossyEncoding",
          "displayName": "Lossy encoding",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\nReports characters that cannot be displayed because of the current document encoding.\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eIf you type international characters in a document with the \u003cb\u003eUS-ASCII\u003c/b\u003e charset, some characters will be lost on save.\u003c/li\u003e\n  \u003cli\u003eIf you load a \u003cb\u003eUTF-8\u003c/b\u003e-encoded file using the \u003cb\u003eISO-8859-1\u003c/b\u003e one-byte charset, some characters will be displayed incorrectly.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing \u003ccode\u003eencoding\u003d\u003c/code\u003e attribute in the XML prolog of XML file,\n  or by changing the corresponding options in \u003cb\u003eSettings | Editor | File Encodings\u003c/b\u003e.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "NewGroovyClassNamingConvention",
          "displayName": "Class naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports classes whose names are too short, too long, or do not follow\n  the specified regular expression pattern.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eFor each class type, specify the minimum length, maximum length, and the regular expression expected for class names using the\n  provided input fields.\u003c/p\u003e\n\u003cp\u003eRegular expressions should be specified in the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyInstanceMethodNamingConvention",
          "displayName": "Instance method naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instance methods whose names are too short, too long, or do not follow\nthe specified regular expression pattern. Instance methods that override library\nmethods are ignored by this inspection.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the fields provided below to specify minimum length, maximum length and regular expression expected for instance method names.\u003c/p\u003e\n\u003cp\u003eRegular expressions should be specified in the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyLocalVariableNamingConvention",
          "displayName": "Local variable naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names.\u003c/p\u003e\n\u003cp\u003eRegular expressions should be specified in the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyStaticVariableNamingConvention",
          "displayName": "Static variable naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003estatic\u003c/code\u003e variables whose names are too short, too long,\nor do not follow\nthe specified regular expression pattern.\n\u003cp\u003e\n  Constants, i.e. variables of immutable type declared\n  \u003ccode\u003estatic final\u003c/code\u003e, are not checked by this inspection\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for static variable names.\n\u003cp\u003eRegular expressions should be specified in the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyInstanceVariableNamingConvention",
          "displayName": "Instance variable naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instance variables whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for\n  instance variable names.\u003c/p\u003e\n\u003cp\u003eRegular expressions should be specified in the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyStaticMethodNamingConvention",
          "displayName": "Static method naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports static methods whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the fields provided below to specify minimum length, maximum length and regular expression expected for static method names.\u003c/p\u003e\n\u003cp\u003eRegular expressions should be specified in the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyParameterNamingConvention",
          "displayName": "Method parameter naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method parameters whose names are either too short, too\nlong, or do not follow\nthe specified regular expression pattern.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the fields provided below to specify minimum length, maximum length and regular expression\n  expected for method parameter names.\u003c/p\u003e\n\u003cp\u003eRegular expressions should be specified in the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyConstantNamingConvention",
          "displayName": "Constant naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports constant with names which don\u0027t match the specified convention.\n\u003cp\u003eConstants are fields of immutable type declared with \u003ccode\u003estatic\u003c/code\u003e and \u003ccode\u003efinal\u003c/code\u003e modifiers.\u003c/p\u003e\nReports constants whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003ePattern\u003c/b\u003e field to specify \u003ccode\u003ejava.util.regex.Pattern\u003c/code\u003e which a constant name is expected to match.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eMin length\u003c/b\u003e field to specify the minimum length of a constant name.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eMax length\u003c/b\u003e field to specify the maximum length of a constant name.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Code quality tools",
      "inspections": [
        {
          "shortName": "Stylelint",
          "displayName": "Stylelint",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a discrepancy detected by the \u003ca href\u003d\"http://stylelint.io\"\u003eStylelint\u003c/a\u003e linter.\n\u003c!-- tooltip end --\u003e\n\u003cbr/\u003e\u003cbr/\u003e\nThe highlighting is based on the rule severity specified in the \u003ca href\u003d\"https://stylelint.io/user-guide/configure\"\u003eStylelint configuration file\u003c/a\u003e for each individual rule.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Compose preview",
      "inspections": [
        {
          "shortName": "PreviewNotSupportedInUnitTestFiles",
          "displayName": "Preview is not supported in unit test files.",
          "defaultSeverity": "ERROR",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks that preview is not used in unit test files.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TransitionPropertiesLabel",
          "displayName": "Transition property label parameter not set",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nChecks that the label parameter is set for \u003ccode\u003eanimate*\u003c/code\u003e (e.g. \u003ccode\u003eanimateFloat\u003c/code\u003e, \u003ccode\u003eanimateColor\u003c/code\u003e) calls that create Compose transition properties.\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "PreviewMultipleParameterProviders",
          "displayName": "Multiple @PreviewParameter are not allowed.",
          "defaultSeverity": "ERROR",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nDetects multiple @PreviewParameter annotations. Multiple @PreviewParameter are not allowed.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PreviewPickerAnnotation",
          "displayName": "Preview device parameter must have valid syntax",
          "defaultSeverity": "ERROR",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks that preview device parameter has valid syntax.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PreviewMustBeTopLevelFunction",
          "displayName": "Preview must be a top level declarations or in a top level class with a default constructor.",
          "defaultSeverity": "ERROR",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nChecks that Preview is only used with a top level declarations or in a top level class with a default constructor.\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "PreviewFontScaleMustBeGreaterThanZero",
          "displayName": "Non-positive fontScale parameter",
          "defaultSeverity": "ERROR",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks that preview \u003ccode\u003efontScale\u003c/code\u003e value is greater than zero.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UpdateTransitionLabel",
          "displayName": "Transition label parameter not set",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nChecks that the \u003ccode\u003elabel\u003c/code\u003e parameter is set for updateTransition calls that create Compose transition animations.\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "PreviewAnnotationInFunctionWithParameters",
          "displayName": "Preview used on a Composable function with parameters",
          "defaultSeverity": "ERROR",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nChecks that Preview is not used with Composable functions with parameters. Composable functions with parameters are not supported in Preview.\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "PreviewApiLevelMustBeValid",
          "displayName": "Preview apiLevel must correspond to a supported API level",
          "defaultSeverity": "ERROR",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks that preview \u003ccode\u003eapiLevel\u003c/code\u003e corresponds to a supported API level.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PreviewDimensionRespectsLimit",
          "displayName": "Preview dimension has a maximum limit",
          "defaultSeverity": "WARNING",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nChecks that Preview dimensions (width and height) have a maximum limit.\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "PreviewNeedsComposableAnnotation",
          "displayName": "Preview used on a non-Composable function",
          "defaultSeverity": "ERROR",
          "pluginId": "com.android.tools.design",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nChecks that Preview is only used with Composable functions.\n\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Finalization",
      "inspections": [
        {
          "shortName": "FinalizeNotProtected",
          "displayName": "\u0027finalize()\u0027 should be protected, not public",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any implementations of the \u003ccode\u003eObject.finalize()\u003c/code\u003e method that are\ndeclared \u003ccode\u003epublic\u003c/code\u003e.\n\u003cp\u003e\n  According to the contract of the \u003ccode\u003eObject.finalize()\u003c/code\u003e, only the garbage\n  collector calls this method. Making this method public may be confusing, because it\n  means that the method can be used from other code.\n\u003c/p\u003e\n\u003cp\u003e\n  A quick-fix is provided to make the method \u003ccode\u003eprotected\u003c/code\u003e, to prevent it from being invoked\n  from other classes.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eclass\u003c/b\u003e X {\n    \u003cb\u003epublic void\u003c/b\u003e finalize() {\n      /* ... */\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eclass\u003c/b\u003e X {\n    \u003cb\u003eprotected void\u003c/b\u003e finalize() {\n      /* ... */\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Finalize",
          "displayName": "\u0027finalize()\u0027 should not be overridden",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports overriding the \u003ccode\u003eObject.finalize()\u003c/code\u003e method.\n\u003cp\u003eAccording to the \u003ccode\u003eObject.finalize()\u003c/code\u003e documentation:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003e\n    The finalization mechanism is inherently problematic. Finalization can lead\n    to performance issues, deadlocks, and hangs. Errors in finalizers can lead\n    to resource leaks; there is no way to cancel finalization if it is no longer\n    necessary; and no ordering is specified among calls to \u003ccode\u003efinalize\u003c/code\u003e\n    methods of different objects. Furthermore, there are no guarantees regarding\n    the timing of finalization. The \u003ccode\u003efinalize\u003c/code\u003e method might be called\n    on a finalizable object only after an indefinite delay, if at all.\n  \u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eIgnore for trivial \u0027finalize()\u0027 implementations\u003c/b\u003e option to ignore\n    \u003ccode\u003efinalize()\u003c/code\u003e implementations with an empty method body or a body\n    containing only \u003ccode\u003eif\u003c/code\u003e statements that have a condition which evaluates\n    to \u003ccode\u003efalse\u003c/code\u003e and is a compile-time constant. For performance reasons it\n    can be beneficial to override a non-trivial \u003ccode\u003efinalize()\u003c/code\u003e with an empty\n    implementation in a subclass. An empty final \u003ccode\u003efinalize()\u003c/code\u003e implementation\n    can also be used to prevent subclasses from overriding.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NoExplicitFinalizeCalls",
          "displayName": "\u0027finalize()\u0027 called explicitly",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eObject.finalize()\u003c/code\u003e.\n\u003cp\u003eCalling \u003ccode\u003eObject.finalize()\u003c/code\u003e explicitly may result in objects being placed in an\ninconsistent state.\n  The garbage collector automatically calls this method on an object when it determines that there are no references to this object.\u003c/p\u003e\n\u003cp\u003eThe inspection doesn\u0027t report calls to \u003ccode\u003esuper.finalize()\u003c/code\u003e from within implementations of \u003ccode\u003efinalize()\u003c/code\u003e as\n  they\u0027re benign.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  MyObject m \u003d new MyObject();\n  m.finalize();\n  System.gc()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Package Search",
      "inspections": [
        {
          "shortName": "GradlePackageUpdate",
          "displayName": "Check for new dependency versions (Gradle)",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.packagesearch.intellij-plugin",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "Detects when a newer version is available for a dependency in Gradle projects"
        },
        {
          "shortName": "GradlePackageVersionRange",
          "displayName": "Check for ranges in dependency versions (Gradle)",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.packagesearch.intellij-plugin",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "Detects whether a dependency version is a range in Gradle projects"
        },
        {
          "shortName": "MavenPackageVersionRange",
          "displayName": "Check for ranges in dependency versions (Maven)",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.packagesearch.intellij-plugin",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "Detects whether a dependency version is a range in Maven projects"
        },
        {
          "shortName": "MavenPackageUpdate",
          "displayName": "Check for new dependency versions (Maven)",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.packagesearch.intellij-plugin",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "Detects when a newer version is available for a dependency in Maven projects"
        }
      ]
    },
    {
      "name": "toString() issues",
      "inspections": [
        {
          "shortName": "ClassHasNoToStringMethod",
          "displayName": "Class does not override \u0027toString()\u0027 method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes without a \u003ccode\u003etoString()\u003c/code\u003e method.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FieldNotUsedInToString",
          "displayName": "Field not used in \u0027toString()\u0027 method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any fields that are not used in the \u003ccode\u003etoString()\u003c/code\u003e method of a class.\n\u003cp\u003eThis inspection can help discover the\nfields that were added after the \u003ccode\u003etoString()\u003c/code\u003e method was created and for which the \u003ccode\u003etoString()\u003c/code\u003e method was not\n  updated. The quick-fix regenerates the \u003ccode\u003etoString()\u003c/code\u003e method.\u003c/p\u003e\n\u003cp\u003e\nIn the \u003cb\u003eGenerate | toString()\u003c/b\u003e dialog, it is possible to exclude fields from this check.\nThis inspection will also check for problems with getter methods if the \u003cem\u003eEnable getters in code generation\u003c/em\u003e option is enabled there.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Relevant {\n    \u003cb\u003eprivate\u003c/b\u003e String name; // not used in toString()\n    \u003cb\u003eprivate int\u003c/b\u003e index;\n    \u003cb\u003eprivate int\u003c/b\u003e length;\n\n    @Override\n    \u003cb\u003epublic\u003c/b\u003e String toString() {\n        \u003cb\u003ereturn\u003c/b\u003e \"Relevant{\" + \"index\u003d\" + index +\n          \", length\u003d\" + length + \u0027}\u0027;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Relevant {\n    \u003cb\u003eprivate\u003c/b\u003e String name;\n    \u003cb\u003eprivate int\u003c/b\u003e index;\n    \u003cb\u003eprivate int\u003c/b\u003e length;\n\n    @Override\n    \u003cb\u003epublic\u003c/b\u003e String toString() {\n        \u003cb\u003ereturn\u003c/b\u003e \"Relevant{\" + \"name\u003d\u0027\" + name + \u0027\\\u0027\u0027 +\n          \", index\u003d\" + index + \", length\u003d\" + length + \u0027}\u0027;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java 10",
      "inspections": [
        {
          "shortName": "VariableTypeCanBeExplicit",
          "displayName": "Variable type can be explicit",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables of the \u003ccode\u003evar\u003c/code\u003e type that can be replaced with an explicit type.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  var str \u003d \"Hello\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String str \u003d \"Hello\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ccode\u003evar\u003c/code\u003e \u003ci\u003ekeyword\u003c/i\u003e appeared in Java 10.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantExplicitVariableType",
          "displayName": "Local variable type can be omitted",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant local variable types.\n\u003cp\u003eThese types can be inferred from the context and thus replaced with \u003ccode\u003evar\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(InputStream s) {\n    try (InputStream in \u003d s) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(InputStream s) {\n    try (var in \u003d s) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "JUnit",
      "inspections": [
        {
          "shortName": "UseOfObsoleteAssert",
          "displayName": "Usage of obsolete \u0027junit.framework.Assert\u0027 method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any calls to methods from the \u003ccode\u003ejunit.framework.Assert\u003c/code\u003e class. This class is\nobsolete and the calls can be replaced by calls to methods from the \u003ccode\u003eorg.junit.Assert\u003c/code\u003e class.\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eimport\u003c/b\u003e org.junit.*;\n  \u003cb\u003epublic class\u003c/b\u003e NecessaryTest {\n    @Test\n    \u003cb\u003epublic void\u003c/b\u003e testIt() {\n      junit.framework.Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied, the result looks like the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eimport\u003c/b\u003e org.junit;\n  \u003cb\u003epublic class\u003c/b\u003e NecessaryTest {\n\n    \u003cb\u003epublic void\u003c/b\u003e testIt() {\n      Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TestCaseWithNoTestMethods",
          "displayName": "Test class with no tests",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-\u003ccode\u003eabstract\u003c/code\u003e test cases without any test methods.\n\u003cp\u003eSuch test cases usually indicate unfinished code\n  or could be a refactoring leftover that should be removed.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e CrucialTest {\n    @Before\n    \u003cb\u003epublic void\u003c/b\u003e setUp() {\n      System.out.println(\"setting up\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore test cases which have superclasses with test methods\u003c/b\u003e option to ignore test cases which have super classes\n  with test methods.\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ParameterizedParametersStaticCollection",
          "displayName": "Parameterized test class without data provider method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JUnit 4 \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/parameterized-tests\"\u003eparameterized test\u003c/a\u003e classes that are annotated\nwith \u003ccode\u003e@RunWith(Parameterized.class)\u003c/code\u003e but either do not include a data provider method annotated with \u003ccode\u003e@Parameterized.Parameters\u003c/code\u003e or\nthis method has an incorrect signature. Such test classes cannot be run.\nThe data provider method should be \u003ccode\u003epublic\u003c/code\u003e and \u003ccode\u003estatic\u003c/code\u003e and have a return type of \u003ccode\u003eIterable\u003c/code\u003e or\n\u003ccode\u003eObject[]\u003c/code\u003e.\n\u003cp\u003eSuggests creating an empty parameter provider method or changing the signature of the incorrect data provider method.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003cp\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @RunWith(Parameterized.class)\n  \u003cb\u003epublic class\u003c/b\u003e ImportantTest {\n    \u003cb\u003eprivate int\u003c/b\u003e input;\n    \u003cb\u003eprivate int\u003c/b\u003e expected;\n\n    ImportantTest(\u003cb\u003eint\u003c/b\u003e input, \u003cb\u003eint\u003c/b\u003e expected) {\n      \u003cb\u003ethis\u003c/b\u003e.input \u003d input;\n      \u003cb\u003ethis\u003c/b\u003e.expected \u003d expected;\n    }\n\n    // ... test cases\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @RunWith(Parameterized.class)\n  \u003cb\u003epublic class\u003c/b\u003e ImportantTest {\n    \u003cb\u003eprivate int\u003c/b\u003e input;\n    \u003cb\u003eprivate int\u003c/b\u003e expected;\n\n    ImportantTest(\u003cb\u003eint\u003c/b\u003e input, \u003cb\u003eint\u003c/b\u003e expected) {\n      \u003cb\u003ethis\u003c/b\u003e.input \u003d input;\n      \u003cb\u003ethis\u003c/b\u003e.expected \u003d expected;\n    }\n\n    @Parameters\n    \u003cb\u003epublic static\u003c/b\u003e Iterable\u0026lt;Object[]\u003e parameters() {\n      \u003cb\u003ereturn null\u003c/b\u003e;\n    }\n\n    // ... test cases\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MetaAnnotationWithoutRuntimeRetention",
          "displayName": "Test annotation without \u0027@Retention(RUNTIME)\u0027 annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports annotations with a \u003ccode\u003eSOURCE\u003c/code\u003e or \u003ccode\u003eCLASS\u003c/code\u003e retention policy that are supposed to be used by JUnit 5.\nSuch annotations are not available at runtime and most probably their retention policy should be fixed to be accessible through reflection.\n\u003cp\u003eNote that if the retention policy is not specified, then the default retention policy \u003ccode\u003eCLASS\u003c/code\u003e is used.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Testable\n  public @interface UnitTest {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Retention(RetentionPolicy.RUNTIME)\n  @Testable\n  public @interface UnitTest {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c!--\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\u003c/p\u003e--\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExpectedExceptionNeverThrown",
          "displayName": "Expected exception never thrown in test method body",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports checked exceptions expected by a JUnit 4 test-method that are never thrown inside the method body.\nSuch test methods will never succeed.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test(expected \u003d CloneNotSupportedException.class)\n  \u003cb\u003epublic void\u003c/b\u003e testIt() {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JUnit3StyleTestMethodInJUnit4Class",
          "displayName": "Old style JUnit test method in JUnit 4 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JUnit 3 style test methods that are located inside a class\nthat does not extend the JUnit 3 \u003ccode\u003eTestCase\u003c/code\u003e class and contains JUnit 4 or JUnit 5 \u003ccode\u003e@Test\u003c/code\u003e annotated methods.\nSuch test methods cannot be run.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MultipleExceptionsDeclaredOnTestMethod",
          "displayName": "Multiple exceptions declared on test method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JUnit test method \u003ccode\u003ethrows\u003c/code\u003e clauses with more than one exception.\nSuch clauses are unnecessarily verbose.\nTest methods will not be called from other project code, so there is no need to handle these exceptions separately.\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test\n  \u003cb\u003epublic void\u003c/b\u003e testReflection() \u003cb\u003ethrows\u003c/b\u003e NoSuchMethodException,\n      InvocationTargetException, IllegalAccessException {\n    String result \u003d (String) String.class.getMethod(\"trim\")\n        .invoke(\" hello \");\n    assertEquals(\"hello\", result);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick fix is provided to replace the exception declarations with a single exception:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test\n  \u003cb\u003epublic void\u003c/b\u003e testReflection() \u003cb\u003ethrows\u003c/b\u003e Exception {\n    String result \u003d (String) String.class.getMethod(\"trim\")\n        .invoke(\" hello \");\n    assertEquals(\"hello\", result);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java interop issues",
      "inspections": [
        {
          "shortName": "PlatformExtensionReceiverOfInline",
          "displayName": "\u0027inline fun\u0027 with nullable receiver until Kotlin 1.2",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports potentially unsafe calls of inline functions with flexible nullable (platform type with unknown nullability) extension receivers.\u003c/p\u003e\n\u003cp\u003e\n    Before Kotlin 1.2, calls of \u003ccode\u003einline fun\u003c/code\u003e with flexible nullable extension receiver (a platform type with an unknown\n    nullability) did not include nullability checks in bytecode. Since Kotlin 1.2, nullability checks are included into the bytecode\n    (see \u003ca href\u003d\"https://youtrack.jetbrains.com/issue/KT-12899\"\u003eKT-12899\u003c/a\u003e).\n\u003c/p\u003e\n\u003cp\u003e\n    It\u0027s recommended to add an explicit \u003ccode\u003e!!\u003c/code\u003e you want an exception to be thrown,\n    or consider changing the function\u0027s receiver type to nullable if it should work without exceptions.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  inline fun String.removePrefix(prefix: String): String {\n      return this.substring(prefix.length)\n  }\n\n  fun main() {\n      // `System.getProperty` returns not denotable `String!` type\n      val property \u003d System.getProperty(\"user.dir\")\n      println(property.removePrefix(\"/home\"))\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  inline fun String.removePrefix(prefix: String): String {\n      return this.substring(prefix.length)\n  }\n\n  fun main() {\n      // `System.getProperty` returns not denotable `String!` type\n      val property \u003d System.getProperty(\"user.dir\")\n      println(property!!.removePrefix(\"/home\"))\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is lower than 1.2.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantNotNullExtensionReceiverOfInline",
          "displayName": "\u0027inline fun\u0027 extension receiver can be explicitly nullable until Kotlin 1.2",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports inline functions with non-nullable extension receivers which don\u0027t use the fact that extension receiver is not nullable.\u003c/p\u003e\n\u003cp\u003e\n    Before Kotlin 1.2, calls of \u003ccode\u003einline fun\u003c/code\u003e with flexible nullable extension receiver (a platform type with an unknown\n    nullability) did not include nullability checks in bytecode. Since Kotlin 1.2, nullability checks are included into the bytecode\n    (see \u003ca href\u003d\"https://youtrack.jetbrains.com/issue/KT-12899\"\u003eKT-12899\u003c/a\u003e).\n\u003c/p\u003e\n\u003cp\u003e\n    Thus functions which do not use the fact that extension receiver is not nullable are dangerous in Kotlin until 1.2 and it\u0027s\n    recommended to make such functions to have nullable receiver.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  inline fun String.greet() {\n      println(\"Hello, $this!\")\n  }\n\n  fun main() {\n      // `System.getProperty` returns not denotable `String!` type\n      val user \u003d System.getProperty(\"user.name\")\n      user.greet()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  inline fun String.greet() {\n      println(\"Hello, $this!\")\n  }\n\n  fun main() {\n      // `System.getProperty` returns not denotable `String!` type\n      val user \u003d System.getProperty(\"user.name\")\n      user.greet()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is lower than 1.2.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "KotlinJvmAnnotationInJava",
          "displayName": "Kotlin JVM annotation in Java",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports useless Kotlin JVM annotations in Java code.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import kotlin.jvm.Volatile;\n\n  public class Test {\n      @Volatile\n      public int i;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "KotlinSealedInheritorsInJava",
          "displayName": "Inheritance of Kotlin sealed interface/class from Java",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports attempts to inherit from Kotlin sealed interfaces or classes in Java code.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n// Kotlin file: MathExpression.kt\n\nsealed class MathExpression\n\ndata class Const(val number: Double) : MathExpression()\ndata class Sum(val e1: MathExpression, val e2: MathExpression) : MathExpression()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e\n// Java file: NotANumber.java\n\npublic class NotANumber extends MathExpression {\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PackageDirectoryMismatch",
          "displayName": "Package name does not match containing directory",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003epackage\u003c/code\u003e directives that do not match the location of the file.\n\u003cp\u003e\n    When applying fixes, \"Move refactoring\" defaults are used to update usages of changed declarations, namely:\n\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\"Search in comments and strings\"\u003c/li\u003e\n    \u003cli\u003e\"Search for text occurrences\"\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "HasPlatformType",
          "displayName": "Function or property has platform type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports functions and properties that have a platform type.\n\u003cp\u003eTo prevent unexpected errors, the type should be declared explicitly.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() \u003d java.lang.String.valueOf(1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix allows you to specify the return type:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(): String \u003d java.lang.String.valueOf(1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JavaCollectionsStaticMethodOnImmutableList",
          "displayName": "Call of Java mutator method on immutable Kotlin collection",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Java mutator methods calls (like \u003ccode\u003efill\u003c/code\u003e, \u003ccode\u003ereverse\u003c/code\u003e, \u003ccode\u003eshuffle\u003c/code\u003e, \u003ccode\u003esort\u003c/code\u003e) on an immutable Kotlin collection.\n\u003cp\u003eThis can lead to \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e at runtime.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import java.util.Collections\n\n  fun test() {\n      val immutableList \u003d listOf(1, 2)\n      Collections.reverse(immutableList)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the problem make the list mutable.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "FakeJvmFieldConstant",
          "displayName": "Kotlin non-const property used as Java constant",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Kotlin properties that are not \u003ccode\u003econst\u003c/code\u003e and used as Java annotation arguments.\n\u003cp\u003e\nFor example, a property with the \u003ccode\u003e@JvmField\u003c/code\u003e annotation has an initializer that can be evaluated at compile-time,\nand it has a primitive or \u003ccode\u003eString\u003c/code\u003e type.\n\u003c/p\u003e\n\n\u003cp\u003e\nSuch properties have a \u003ccode\u003eConstantValue\u003c/code\u003e attribute in bytecode in Kotlin 1.1-1.2.\nThis attribute allows javac to fold usages of the corresponding field and use that field in annotations.\nThis can lead to incorrect behavior in the case of separate or incremental compilation in mixed Java/Kotlin code.\nThis behavior is subject to change in Kotlin 1.3 (no \u003ccode\u003eConstantValue\u003c/code\u003e attribute any more).\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003eKotlin code in foo.kt file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  annotation class Ann(val s: String)\n  @JvmField val importantString \u003d \"important\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eJava code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class JavaUser {\n      // This is dangerous\n      @Ann(s \u003d FooKt.importantString)\n      public void foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the problem replace the \u003ccode\u003e@JvmField\u003c/code\u003e annotation with the \u003ccode\u003econst\u003c/code\u003e modifier on a relevant Kotlin property or inline it.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "KotlinInternalInJava",
          "displayName": "Usage of Kotlin internal declarations from Java",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of Kotlin \u003ccode\u003einternal\u003c/code\u003e declarations in Java code that is located in a different module.\n\u003cp\u003e\n    The \u003ccode\u003einternal\u003c/code\u003e keyword is designed to restrict access to a class, function, or property from other modules.\n    Due to JVM limitations, \u003ccode\u003einternal\u003c/code\u003e classes, functions, and properties can still be\n    accessed from outside Kotlin, which may later lead to compatibility problems.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "DependencyNotationArgument",
          "displayName": "Unrecognized dependency notation",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e                                            \n\u003cp\u003eDetects incorrect dependency notations. \u003c/p\u003e\n  The following types/formats are supported by Gradle:\n  \u003cul\u003e\n  \u003cli\u003e Instances of \u003ccode\u003eDependency\u003c/code\u003e; \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eString\u003c/code\u003e or \u003ccode\u003eCharSequence\u003c/code\u003e values, for example \u003ccode\u003e\u0027org.gradle:gradle-core:1.0\u0027\u003c/code\u003e; \u003c/li\u003e\n  \u003cli\u003e Maps, for example \u003ccode\u003e[group: \u0027org.gradle\u0027, name: \u0027gradle-core\u0027, version: \u00271.0\u0027]\u003c/code\u003e; \u003c/li\u003e\n  \u003cli\u003e FileCollections, for example \u003ccode\u003efiles(\u0027some.jar\u0027, \u0027someOther.jar\u0027)\u003c/code\u003e; \u003c/li\u003e\n  \u003cli\u003e Projects, for example \u003ccode\u003eproject(\u0027:some:project:path\u0027)\u003c/code\u003e; \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eClassPathNotation\u003c/code\u003e, for example \u003ccode\u003egradleApi()\u003c/code\u003e; \u003c/li\u003e\n  \u003cli\u003e Lists of dependency notations, for example \u003ccode\u003e[\u0027org.gradle:gradle-core:1.0\u0027]\u003c/code\u003e; \u003c/li\u003e\n  \u003cli\u003e (Gradle 7.0+) \u003ca href\u003d\"https://docs.gradle.org/current/userguide/platforms.html\"\u003eVersion catalog accessors\u003c/a\u003e, for example \u003ccode\u003elibs.groovy.core\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n  \u003ca href\u003d\"https://docs.gradle.org/current/userguide/declaring_dependencies.html#sec:dependency-types\"\u003eSee Gradle documentation\u003c/a\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\ndependencies {\n  implementation(1) // reports \u00271\u0027\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ForeignDelegate",
          "displayName": "Possibly misplaced call to Gradle method",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e                                            \n\u003cp\u003eDetects possibly misplaced calls to Gradle methods.\u003c/p\u003e\n  Gradle buildscripts comprise a lot of nested closures, making the code structure similar to a markup language.\n  Due to the behavior of DSL languages, the methods that you can write in the outer closures are also available in the inner ones.\n  Such methods may have no meaning when written outside their scope. \u003cbr\u003e\n  Sometimes it may be hard to detect this situation.\n  This inspection aims to detect such methods.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nrepositories {\n  // the delegate of \u0027repositories\u0027 has method \u0027exclusiveContent\u0027, which can be written here\n  maven {\n    // the delegate of \u0027maven\u0027 has method \u0027content\u0027, which can be written here\n    // but \u0027exclusiveContent\u0027 is also available\n    exclusiveContent {} // reports \u0027exclusiveContent\u0027\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MultipleRepositoryUrls",
          "displayName": "Multiple repository urls",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the usage of multiple URLs per repository (maven or ivy) block.\nThe problem is that only one URL can be picked up for the repository, the other URLs will be ignored.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BintrayPublishingPlugin",
          "displayName": "Bintray publishing plugin may stop working on May 1st, 2021",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e                                            \n\u003cp\u003eDetects usages of Gradle plugin \u003ccode\u003ecom.jfrog.bintray\u003c/code\u003e.\n  The plugin is used for publishing build results to Bintray.\n  Publishing to\n  \u003ca href\u003d\"https://www.jfrog.com/confluence/display/BT/Welcome+to+JFrog+Bintray\"\u003eBintray\u003c/a\u003e service is disabled.\n  \u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JCenterRepository",
          "displayName": "Builds will no longer be able to resolve artifacts from JCenter after February 1st, 2022",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nDetects usages of the JCenter repository to resolve dependencies.\nBuilds will no longer be able to resolve artifacts from JCenter after February 1st, 2022.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Concurrency annotation issues",
      "inspections": [
        {
          "shortName": "UnknownGuard",
          "displayName": "Unknown \u0027@GuardedBy\u0027 field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003e@GuardedBy\u003c/code\u003e annotations in which the specified guarding field is unknown.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    private Object state;\n\n    @GuardedBy(\"lock\") //unknown guard reference\n    public void bar() {\n        state \u003d new Object();\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eSupported \u003ccode\u003e@GuardedBy\u003c/code\u003e annotations are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003enet.jcip.annotations.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejavax.annotation.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eorg.apache.http.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.android.annotations.concurrency.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eandroidx.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.google.errorprone.annotations.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonFinalGuard",
          "displayName": "Non-final \u0027@GuardedBy\u0027 field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003e@GuardedBy\u003c/code\u003e annotations in which the guarding field\nis not \u003ccode\u003efinal\u003c/code\u003e.\n\u003cp\u003eGuarding on a non-final field may result in unexpected race conditions, as locks will\n  be held on the value of the field (which may change), rather than the field itself.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    private ReadWriteLock lock \u003d new ReentrantReadWriteLock(); //not final guarding field\n    private Object state;\n\n    @GuardedBy(\"lock\")\n    public void bar() {\n        state \u003d new Object();\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eSupported \u003ccode\u003e@GuardedBy\u003c/code\u003e annotations are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003enet.jcip.annotations.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejavax.annotation.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eorg.apache.http.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.android.annotations.concurrency.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eandroidx.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.google.errorprone.annotations.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InstanceGuardedByStatic",
          "displayName": "Instance member guarded by static field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003e@GuardedBy\u003c/code\u003e annotations on instance fields or methods\nin which the guard is a \u003ccode\u003estatic\u003c/code\u003e field. Guarding a non-static by a static may result in excessive lock contention,\nas access to each locked field in any object instance will prevent simultaneous access to that field in every object instance.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    private static ReadWriteLock lock \u003d new ReentrantReadWriteLock(); //static guarding field\n    private Object state;\n\n    @GuardedBy(\"lock\")\n    public void bar() {\n        state \u003d new Object();\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eSupported \u003ccode\u003e@GuardedBy\u003c/code\u003e annotations are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003enet.jcip.annotations.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejavax.annotation.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eorg.apache.http.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.android.annotations.concurrency.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eandroidx.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.google.errorprone.annotations.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonFinalFieldInImmutable",
          "displayName": "Non-final field in \u0027@Immutable\u0027 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any non-final field in a class with the \u003ccode\u003e@Immutable\u003c/code\u003e annotation.\nThis violates the contract of the \u003ccode\u003e@Immutable\u003c/code\u003e annotation.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import javax.annotation.concurrent.Immutable;\n  @Immutable\n  class Foo {\n    String bar \u003d \"foo\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eSupported \u003ccode\u003e@GuardedBy\u003c/code\u003e annotations are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003enet.jcip.annotations.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejavax.annotation.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eorg.apache.http.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.android.annotations.concurrency.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eandroidx.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.google.errorprone.annotations.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StaticGuardedByInstance",
          "displayName": "Static member guarded by instance field or this",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003e@GuardedBy\u003c/code\u003e annotations on \u003ccode\u003estatic\u003c/code\u003e fields or methods in which the guard is either a non-static field or\n\u003ccode\u003ethis\u003c/code\u003e.\n\u003cp\u003eGuarding a static element with a non-static element may result in\n  excessive concurrency, multiple threads may be able to access the guarded field simultaneously by locking in different object contexts.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    private ReadWriteLock lock \u003d new ReentrantReadWriteLock();\n\n    @GuardedBy(\"lock\")\n    public static void bar() {\n        // ...\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eSupported \u003ccode\u003e@GuardedBy\u003c/code\u003e annotations are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003enet.jcip.annotations.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejavax.annotation.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eorg.apache.http.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.android.annotations.concurrency.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eandroidx.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.google.errorprone.annotations.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FieldAccessNotGuarded",
          "displayName": "Unguarded field access or method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports accesses of fields declared as \u003ccode\u003e@GuardedBy\u003c/code\u003e that are not guarded by an appropriate synchronization structure.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    @GuardedBy(\"this\")\n    void x() {\n        notify();\n    }\n    void y() {\n        x(); // unguarded method call\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eSupported \u003ccode\u003e@GuardedBy\u003c/code\u003e annotations are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003enet.jcip.annotations.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejavax.annotation.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eorg.apache.http.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.android.annotations.concurrency.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eandroidx.annotation.GuardedBy\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.google.errorprone.annotations.concurrent.GuardedBy\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Packaging issues",
      "inspections": [
        {
          "shortName": "ClassUnconnectedToPackage",
          "displayName": "Class independent of its package",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that don\u0027t depend on any other class in their package and are not a dependency for any other class in their package.\nSuch classes indicate ad-hoc or incoherent packaging strategies and often may be profitably moved.\nClasses that are the only class in their package are not reported.\n  \u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassOnlyUsedInOnePackage",
          "displayName": "Class only used from one other package",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that don\u0027t depend on any other class in their package, depend on classes from another package, and are themselves a dependency\nonly for classes from this other package.\nConsider moving such classes to the package on which they depend.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PackageInMultipleModules",
          "displayName": "Package with classes in multiple modules",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-empty packages that are present in several modules.\nWhen packages are contained in several modules, it is very easy to create a class with the same name in two modules.\nA module which depends on these modules will see a conflict if it tries to use such a class.\nThe Java Platform Module System disallows packages contained in more than one module (also called \u003cem\u003esplit packages\u003c/em\u003e)\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExceptionPackage",
          "displayName": "Exception package",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports packages that only contain classes that extend \u003ccode\u003ejava.lang.Throwable\u003c/code\u003e, either directly or indirectly.\n  \u003cp\u003eAlthough exceptions usually don\u0027t depend on other classes for their implementation, they are normally not used separately.\n    It is often a better design to locate exceptions in the same package as the classes that use them.\u003c/p\u003e\n  \u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PackageWithTooManyClasses",
          "displayName": "Package with too many classes",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports packages that contain too many classes.\n\u003cp\u003eOverly large packages may indicate a lack of design clarity.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eMaximum number of classes\u003c/b\u003e field to specify the maximum allowed number of classes in a package.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PackageWithTooFewClasses",
          "displayName": "Package with too few classes",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports packages that contain fewer classes than the specified minimum.\n\u003cp\u003ePackages which contain subpackages are not reported. Overly small packages may indicate a fragmented design.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eMinimum number of classes\u003c/b\u003e field to specify the minimum allowed number of classes in a package.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DisjointPackage",
          "displayName": "Package with disjoint dependency graph",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports packages whose classes can be separated into mutually independent subsets.\n\u003cp\u003eSuch disjoint packages indicate ad-hoc packaging or a lack of conceptual cohesion.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "CSS",
      "inspections": [
        {
          "shortName": "CssUnusedSymbol",
          "displayName": "Unused selector",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\u003cp\u003e\n  Note that complete inspection results are available only when running it via \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e.\n  Due to performance reasons, style sheet files are not inspected on the fly.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssOverwrittenProperties",
          "displayName": "Overwritten property",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n.foo {\n  margin-bottom: 1px;\n  margin-bottom: 1px; /* duplicates margin-bottom */\n  margin: 0; /* overrides margin-bottom */\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssReplaceWithShorthandUnsafely",
          "displayName": "Properties may probably be replaced with a shorthand",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form,\nwhich is however not 100% equivalent in this case.\n\u003cp\u003e\n  For example, 2 properties: \u003ccode\u003eoutline-color\u003c/code\u003e and \u003ccode\u003eoutline-style\u003c/code\u003e may be replaced with a single \u003ccode\u003eoutline\u003c/code\u003e.\n  Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\n  In this example, switching to the \u003ccode\u003eoutline\u003c/code\u003e shorthand means that \u003ccode\u003eoutline-width\u003c/code\u003e is also set to its initial value,\n  which is \u003ccode\u003emedium\u003c/code\u003e.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  This inspection doesn\u0027t handle full sets of longhand properties (when switching to shorthand is 100% safe).\n  For such cases see the \u0027Properties may be safely replaced with a shorthand\u0027 inspection instead.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssConvertColorToHexInspection",
          "displayName": "Color could be replaced with #-hex",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an \u003ccode\u003ergb()\u003c/code\u003e, \u003ccode\u003ehsl()\u003c/code\u003e, or other color function.\n\u003cp\u003eSuggests replacing a color function with an equivalent hexadecimal notation.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ergb(12, 15, 255)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#0c0fff\u003c/code\u003e.\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssReplaceWithShorthandSafely",
          "displayName": "Properties may be safely replaced with a shorthand",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\u003cp\u003e\n  For example, 4 properties: \u003ccode\u003epadding-top\u003c/code\u003e, \u003ccode\u003epadding-right\u003c/code\u003e, \u003ccode\u003epadding-bottom\u003c/code\u003e, and\n  \u003ccode\u003epadding-left\u003c/code\u003e\n  can be safely replaced with a single \u003ccode\u003epadding\u003c/code\u003e property.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that this inspection doesn\u0027t show up if the set of longhand properties is incomplete\n  (e.g. only 3 \u003ccode\u003epadding-xxx\u003c/code\u003e properties in a ruleset)\n  because switching to a shorthand may change the result.\n  For such cases consider the \u0027Properties may probably be replaced with a shorthand\u0027\n  inspection.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssConvertColorToRgbInspection",
          "displayName": "Color could be replaced with rgb()",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an \u003ccode\u003ehsl()\u003c/code\u003e or \u003ccode\u003ehwb()\u003c/code\u003e color function or a hexadecimal color notation.\n\u003cp\u003eSuggests replacing such color value with an equivalent \u003ccode\u003ergb()\u003c/code\u003e or \u003ccode\u003ergba()\u003c/code\u003e color function.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e#0c0fff\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ergb(12, 15, 255)\u003c/code\u003e.\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssBrowserCompatibilityForProperties",
          "displayName": "Property is incompatible with selected browsers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a CSS property that is not supported by the specified browsers.\nBased on the \u003ca href\u003d\"https://github.com/mdn/browser-compat-data\"\u003eMDN Compatibility Data\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Node.js",
      "inspections": [
        {
          "shortName": "NodeCoreCodingAssistance",
          "displayName": "Unresolved Node.js APIs",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nSuggests configuring coding assistance for Node.js, for example, \u003ccode\u003erequire\u003c/code\u003e and/or core modules (\u0027path\u0027, \u0027http\u0027, \u0027fs\u0027, etc.).\n\u003cp\u003e\nSee \u003ca href\u003d\"https://nodejs.org/api/\"\u003ehttps://nodejs.org/api/\u003c/a\u003e for the complete list.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "XSLT",
      "inspections": [
        {
          "shortName": "XsltUnusedDeclaration",
          "displayName": "Unused variable or parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables and parameters that are never used.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XsltDeclarations",
          "displayName": "Incorrect declaration",
          "defaultSeverity": "ERROR",
          "pluginId": "XPathView",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicate declarations and illegal identifiers in XSLT variables, parameters, and named templates:\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XsltTemplateInvocation",
          "displayName": "Incorrect template invocation",
          "defaultSeverity": "ERROR",
          "pluginId": "XPathView",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports missing arguments, passing arguments that are not declared, and passing arguments for parameters more than once\nin named XSLT template invocations.\n\n\u003cp\u003e\nParameters declared with a default value are optional and will not be reported as missing.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XsltVariableShadowing",
          "displayName": "Shadowed variable",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports shadowed XSLT variables.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Imports",
      "inspections": [
        {
          "shortName": "SingleClassImport",
          "displayName": "Single class import",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eimport\u003c/code\u003e statements that import single classes (as opposed to entire packages).\n\u003cp\u003eSome coding standards prohibit such \u003ccode\u003eimport\u003c/code\u003e statements.\u003c/p\u003e\n\u003cp\u003e\n  You can configure IntelliJ IDEA to detect and fix such statements with its \u003cb\u003eOptimize Imports\u003c/b\u003e command. Go to\n  \u003ca href\u003d\"settings://preferences.sourceCode.Java?Use%20single%20class%20import\"\u003eSettings | Editor | Code Style | Java | Imports\u003c/a\u003e\n  and clear the \u003cb\u003eUse single class import\u003c/b\u003e checkbox. Thus this inspection is mostly useful for\n  offline reporting on code bases that you don\u0027t intend to change.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SamePackageImport",
          "displayName": "Unnecessary import from the same package",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eimport\u003c/code\u003e statements that refer to the same package as the\ncontaining file.\n\u003cp\u003e\n  Same-package files are always implicitly imported, so such \u003ccode\u003eimport\u003c/code\u003e\n  statements are redundant and confusing.\n\u003c/p\u003e\n\u003cp\u003e\n  Since IntelliJ IDEA can automatically detect and fix such statements with its \u003cb\u003eOptimize Imports\u003c/b\u003e\n  command, this inspection is mostly useful for offline reporting on code bases that you\n  don\u0027t intend to change.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OnDemandImport",
          "displayName": "\u0027*\u0027 import",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any \u003ccode\u003eimport\u003c/code\u003e statements that cover entire packages (\u0027* imports\u0027).\n\u003cp\u003eSome coding standards prohibit such \u003ccode\u003eimport\u003c/code\u003e statements.\u003c/p\u003e\n\u003cp\u003e\n  You can configure IntelliJ IDEA to detect and fix such statements with its \u003cb\u003eOptimize Imports\u003c/b\u003e\n  command. Go to \u003ca href\u003d\"settings://preferences.sourceCode.Java?Use%20single%20class%20import\"\u003eSettings | Editor | Code Style | Java | Imports\u003c/a\u003e,\n  make sure that the \u003cb\u003eUse single class import\u003c/b\u003e option is enabled, and specify values in the\n  \u003cb\u003eClass count to use import with \u0027*\u0027\u003c/b\u003e and \u003cb\u003eNames count to use static import with \u0027*\u0027\u003c/b\u003e fields.\n  Thus this inspection is mostly useful for offline reporting on code bases that you don\u0027t\n  intend to change.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StaticImport",
          "displayName": "Static import",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eimport static\u003c/code\u003e statements.\n\u003cp\u003eSuch \u003ccode\u003eimport\u003c/code\u003e statements are not supported under Java 1.4 or earlier JVMs.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the table below to specify the classes that will be ignored by the inspection when used in an \u003ccode\u003eimport static\u003c/code\u003e\n    statement.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore single field static imports\u003c/b\u003e checkbox to ignore single-field \u003ccode\u003eimport static\u003c/code\u003e statements.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore single method static imports\u003c/b\u003e checkbox to ignore single-method \u003ccode\u003eimport static\u003c/code\u003e statements.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UNUSED_IMPORT",
          "displayName": "Unused import",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant \u003ccode\u003eimport\u003c/code\u003e statements.\n\u003cp\u003eRegular \u003ccode\u003eimport\u003c/code\u003e statements are unnecessary when not using imported classes and packages in the source file.\nThe same applies to imported \u003ccode\u003estatic\u003c/code\u003e fields and methods that aren\u0027t used in the source file.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import java.util.ArrayList;\n  public class Example {\n    public static void main(String[] args) {\n      System.out.println(\"Hello World!\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\n\u003cpre\u003e\u003ccode\u003e\n  public class Example {\n    public static void main(String[] args) {\n      System.out.println(\"Hello World!\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaLangImport",
          "displayName": "Unnecessary import from the \u0027java.lang\u0027 package",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eimport\u003c/code\u003e statements that refer to the \u003ccode\u003ejava.lang\u003c/code\u003e package.\n\u003cp\u003e\n  \u003ccode\u003ejava.lang\u003c/code\u003e classes are always implicitly imported, so such import statements are\n  redundant and confusing.\n\u003c/p\u003e\n\u003cp\u003e\n  Since IntelliJ IDEA can automatically detect and fix such statements with its \u003cb\u003eOptimize Imports\u003c/b\u003e command, this inspection is mostly useful for offline reporting on code bases that you don\u0027t intend to change.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Spring Cloud",
      "inspections": [
        {
          "shortName": "SpringBootBootstrapConfigurationInspection",
          "displayName": "Bootstrap configuration included in application context",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.spring.cloud",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003eBootstrapConfiguration\u003c/code\u003e included into the Spring Boot application context via a component scan where it might not be needed.\u003c/p\u003e\n\u003cp\u003eFor more information, see \u003ca href\u003d\"https://docs.spring.io/spring-cloud-commons/docs/current/reference/html/#customizing-the-bootstrap-configuration\"\u003eSpring Cloud Commons documentation\u003c/a\u003e.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "DotEnv",
      "inspections": [
        {
          "shortName": "DotEnvLeadingCharacterInspection",
          "displayName": "Invalid leading character",
          "defaultSeverity": "WARNING",
          "pluginId": "ru.adelf.idea.dotenv",
          "pluginVersion": "2023.1",
          "language": "DotEnv",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports keys with invalid leading character in .env files. Only A-Z and \u0027_\u0027 are allowed as first char of a key.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DotEnvDuplicateKeyInspection",
          "displayName": "Duplicate keys",
          "defaultSeverity": "WARNING",
          "pluginId": "ru.adelf.idea.dotenv",
          "pluginVersion": "2023.1",
          "language": "DotEnv",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicate keys in .env files.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DotEnvSpaceAroundSeparatorInspection",
          "displayName": "Extra spaces surrounding \u0027\u003d\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "ru.adelf.idea.dotenv",
          "pluginVersion": "2023.1",
          "language": "DotEnv",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports spaces surrounding separator.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DotEnvSpaceInsideNonQuotedInspection",
          "displayName": "Space inside non-quoted value",
          "defaultSeverity": "WARNING",
          "pluginId": "ru.adelf.idea.dotenv",
          "pluginVersion": "2023.1",
          "language": "DotEnv",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports spaces inside non-quoted values. Some .env libraries ignore everything after first space.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DotEnvLowercaseKeyInspection",
          "displayName": "Key uses lowercase chars",
          "defaultSeverity": "WARNING",
          "pluginId": "ru.adelf.idea.dotenv",
          "pluginVersion": "2023.1",
          "language": "DotEnv",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports keys, which use lowercase chars. Keys should be written in uppercase.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DotEnvExtraBlankLineInspection",
          "displayName": "Extra blank line",
          "defaultSeverity": "WARNING",
          "pluginId": "ru.adelf.idea.dotenv",
          "pluginVersion": "2023.1",
          "language": "DotEnv",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports extra blank lines in .env files.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DotEnvIncorrectDelimiterInspection",
          "displayName": "Incorrect delimiter",
          "defaultSeverity": "WARNING",
          "pluginId": "ru.adelf.idea.dotenv",
          "pluginVersion": "2023.1",
          "language": "DotEnv",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports incorrect delimiter in .env files (\u0027-\u0027 instead of\u0027_\u0027).\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DotEnvTrailingWhitespaceInspection",
          "displayName": "Value has trailing whitespace",
          "defaultSeverity": "WARNING",
          "pluginId": "ru.adelf.idea.dotenv",
          "pluginVersion": "2023.1",
          "language": "DotEnv",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports trailing whitespaces.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Redundant definitions",
      "inspections": [
        {
          "shortName": "RedundantSlf4jDefinition",
          "displayName": "@Slf4j",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports explicitly defined \u003cem\u003eSlf4j\u003c/em\u003e Loggers. The \u003ccode\u003e@Slf4j\u003c/code\u003e annotation can be used instead.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Data flow",
      "inspections": [
        {
          "shortName": "ReuseOfLocalVariableJS",
          "displayName": "Reuse of local variable",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports reusing a local variable and overwriting its\nvalue with a new value that is not related to the original variable usage.  Reusing a local variable in this way may be confusing\nbecause the intended semantics of the local variable may vary with each usage.  It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live.   It is good practices to keep variable lifetimes as short as possible, and not\nreuse local variables for the sake of brevity.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryLocalVariableJS",
          "displayName": "Redundant local variable",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unnecessary local variable that does not make\na function more comprehensible: \u003cul\u003e\n\u003cli\u003ea local variable that is immediately returned\u003c/li\u003e\n\u003cli\u003ea local variable that is immediately assigned to another variable and is not used anymore\u003c/li\u003e\n\u003cli\u003ea local variable that always has the same value as another local variable or parameter.\u003c/li\u003e\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the checkbox below to have this inspection ignore variables that are immediately\nreturned or thrown.  Some coding styles suggest using such variables for clarity and\nease of debugging.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Properties files",
      "inspections": [
        {
          "shortName": "UseEllipsisInPropertyInspection",
          "displayName": "Three dot characters instead of the ellipsis",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "TrailingSpacesInProperty",
          "displayName": "Trailing spaces in property",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports properties whose keys or values end with a whitespace.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnusedProperty",
          "displayName": "Unused property",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports properties that are not referenced outside of the .properties file they are contained in.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "WrongPropertyKeyValueDelimiter",
          "displayName": "Property key/value delimiter doesn\u0027t match code style settings",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports properties in which key or value delimiters do not match code style settings.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousLocalesLanguages",
          "displayName": "Suspicious resource bundle locale languages",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports locales with language codes that are not supported by Java.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AlphaUnsortedPropertiesFile",
          "displayName": "Properties file or resource bundle is alphabetically unsorted",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports alphabetically unsorted resource bundles or .properties files.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InconsistentResourceBundle",
          "displayName": "Inconsistent resource bundle",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports problems in the properties files contained in the resource bundle.\n\u003cul\u003e\n  \u003cli\u003e\u003cb\u003eReport missing translation\u003c/b\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\noption controls search for an untranslated properties. \u003cbr\u003e\nIt reports properties contained in parent properties file that are missing in inherited (unless it\u0027s a language dialect). \u003cbr\u003e\nE.g. having this resource bundle: \u003cbr\u003e\n\n\u003cb\u003emessages.properties\u003c/b\u003e : \u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003dxxx\u003c/b\u003e\u003c/font\u003e \u003cbr\u003e\n\u003cb\u003emessages_fr.properties\u003c/b\u003e : empty \u003cbr\u003e\n\nProperty \u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003c/b\u003e\u003c/font\u003e will be reported as untranslated.\n\u003cul\u003e\n  \u003cli\u003e\n\n    \u003cb\u003eReport inconsistent properties\u003c/b\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\noption controls invalid resource bundle structure inspection. \u003cbr\u003e\nIt reports properties contained in inherited properties file that are missing in parent (or in sibling if there is no parent). \u003cbr\u003e\nE.g. having this resource bundle: \u003cbr\u003e\n\u003cb\u003emessages.properties\u003c/b\u003e : empty \u003cbr\u003e\n\u003cb\u003emessages_fr.properties\u003c/b\u003e : \u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003dxxx\u003c/b\u003e\u003c/font\u003e \u003cbr\u003e\n\nProperty \u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003c/b\u003e\u003c/font\u003e translation here is not available for any language except French,\nand, thus, will be reported as missing in the (default) properties file \u003cb\u003emessages.properties\u003c/b\u003e .\n\n\u003cul\u003e\n  \u003cli\u003e\n\n    \u003cb\u003eReport properties overridden with the same value\u003c/b\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\noption checks for properties which are copy-pasted into several properties files verbatim. \u003cbr\u003e\nE.g. in this resource bundle: \u003cbr\u003e\n\u003cb\u003emessages.properties\u003c/b\u003e : \u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003dxxx\u003c/b\u003e\u003c/font\u003e \u003cbr\u003e\n\u003cb\u003emessages_fr.properties\u003c/b\u003e : \u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003dxxx\u003c/b\u003e\u003c/font\u003e \u003cbr\u003e\n\nProperty \u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003c/b\u003e\u003c/font\u003e will be reported as unnecessarily inherited in the file \u003cb\u003emessages_fr.properties\u003c/b\u003e .\n\u003cbr\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n\n    \u003cb\u003eReport properties overridden with different placeholders\u003c/b\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\noption checks for properties which are overridden for placeholder consistency. \u003cbr\u003e\nE.g. in this resource bundle: \u003cbr\u003e\n\u003cb\u003emessages.properties\u003c/b\u003e : \u003cbr\u003e\n\u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eqwe\u003d{0}xxx{1}\u003c/b\u003e\u003c/font\u003e \u003cbr\u003e\n\u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003d{0}yyy{1}\u003c/b\u003e\u003c/font\u003e \u003cbr\u003e\n\u003cb\u003emessages_fr.properties\u003c/b\u003e : \u003cbr\u003e\n\u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eqwe\u003d{0}xxx{0}xxx{1}\u003c/b\u003e\u003c/font\u003e \u003cbr\u003e\n\u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003d{0}yyy\u003c/b\u003e\u003c/font\u003e \u003cbr\u003e\n\n\nProperty \u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003c/b\u003e\u003c/font\u003e will be reported as property contains message format placeholders\nwith value not corresponding to \u003cb\u003emessages.properties\u003c/b\u003e .\n\u003cbr\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n\n    \u003cb\u003eReport properties overridden with different values endings\u003c/b\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\noption checks for properties which are overridden for ending consistency. \u003cbr\u003e\nE.g. in this resource bundle: \u003cbr\u003e\n\u003cb\u003emessages.properties\u003c/b\u003e : \u003cbr\u003e\n\u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003dxxxzzz\u003c/b\u003e\u003c/font\u003e \u003cbr\u003e\n\u003cb\u003emessages_fr.properties\u003c/b\u003e : \u003cbr\u003e\n\u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003dxxx;\u003c/b\u003e\u003c/font\u003e \u003cbr\u003e\n\n\nProperty \u003cfont color\u003d\"#000080\"\u003e\u003cb\u003eabc\u003c/b\u003e\u003c/font\u003e will be reported as property contains special signs\n( \u003cb\u003e\u0027!\u0027\u003c/b\u003e , \u003cb\u003e\u0027?\u0027\u003c/b\u003e , \u003cb\u003e\u0027.\u0027\u003c/b\u003e , \u003cb\u003e\u0027:\u0027\u003c/b\u003e or \u003cb\u003e\u0027;\u0027\u003c/b\u003e ) at the end of value but\nvalue in \u003cb\u003emessages.properties\u003c/b\u003e doesn\u0027t.\n\u003cbr\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnusedMessageFormatParameter",
          "displayName": "Missing message format parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports properties values\nthat look like \u003ccode\u003ejava.text.MessageFormat\u003c/code\u003e format strings\nbut do not use some the parameters of the \u003ccode\u003e{xx}\u003c/code\u003e kind.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n# parameter {0} is not used\n\u003cb\u003eerror.message\u003c/b\u003e\u003dSomething happened in line \u003cb\u003e{1}\u003c/b\u003e\n  \u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "DuplicatePropertyInspection",
          "displayName": "Duplicate property",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nproperty1\u003d\u003cb\u003e\u003cfont color\u003d\"#000080\"\u003evalue\u003c/font\u003e\u003c/b\u003e;\nproperty2\u003d\u003cb\u003e\u003cfont color\u003d\"#000080\"\u003evalue\u003c/font\u003e\u003c/b\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003cb\u003eOptions\u003c/b\u003e list allows selecting the area in which the inspection should search for duplicates.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Class",
      "inspections": [
        {
          "shortName": "ExceptionNameDoesntEndWithException",
          "displayName": "Exception class name does not end with \u0027Exception\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports exception classes whose names don\u0027t end with \u003ccode\u003eException\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e \u003ccode\u003eclass NotStartedEx extends Exception {}\u003c/code\u003e\n\u003cp\u003eA quick-fix that renames such classes is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ClassNameSameAsAncestorName",
          "displayName": "Class name same as ancestor name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that have the same name as one of their superclasses, while their fully qualified names remain different.\nSuch class names may be very confusing.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n  \u003cpre\u003e\u003ccode\u003e\n  package util;\n  abstract class Iterable\u0026lt;T\u0026gt; implements java.lang.Iterable\u0026lt;T\u0026gt; {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix that renames such classes is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonExceptionNameEndsWithException",
          "displayName": "Non-exception class name ends with \u0027Exception\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-\u003ccode\u003eexception\u003c/code\u003e classes whose names end with \u003ccode\u003eException\u003c/code\u003e.\n\u003cp\u003eSuch classes may cause confusion by breaking a common naming convention and\n  often indicate that the \u003ccode\u003eextends Exception\u003c/code\u003e clause is missing.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n  \u003cpre\u003e\u003ccode\u003epublic class NotStartedException {}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix that renames such classes is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassNamePrefixedWithPackageName",
          "displayName": "Class name prefixed with package name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes whose names are prefixed with their package names, ignoring differences in\ncapitalization.\n\u003cp\u003eWhile occasionally having such names is reasonable, they are often used due to a poor naming scheme, may be redundant and\n  annoying.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n  \u003cpre\u003e\u003ccode\u003e\n  package byteCode;\n  class ByteCodeAnalyzer {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix that renames such classes is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NewClassNamingConvention",
          "displayName": "Class naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e if the inspection is enabled for tests, and the specified length for the minimum class name is 8 (the default), the following test class\n   produces a warning because the length of its name is 6, which is less than 8: \u003ccode\u003epublic class MyTest{}\u003c/code\u003e.\n\u003cp\u003eA quick-fix that renames such classes is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003e\n  Use the list in the \u003cb\u003eOptions\u003c/b\u003e section to specify which classes should be checked. Deselect the checkboxes for the classes for which\n  you want to skip the check.\u003c/p\u003e\n\u003cp\u003eFor each class type, specify the minimum length, maximum length, and the regular expression expected for class names using the\n  provided input fields. Specify \u003cb\u003e0\u003c/b\u003e in the length fields to skip corresponding checks.\u003c/p\u003e\n\u003cp\u003eRegular expressions should be specified in the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Error handling",
      "inspections": [
        {
          "shortName": "GroovyEmptyFinallyBlock",
          "displayName": "Empty \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty \u003ccode\u003efinally\u003c/code\u003e blocks.\nEmpty \u003ccode\u003efinally\u003c/code\u003e blocks usually indicate coding errors.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ntry {\n  throw new Exception()\n}\nfinally {\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyUnusedCatchParameter",
          "displayName": "Unused \u0027catch\u0027 parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003cb\u003ecatch\u003c/b\u003e parameters that are unused in their\ncorresponding blocks. This inspection will not report any \u003cb\u003ecatch\u003c/b\u003e parameters\nnamed \"ignore\" or \"ignored\".\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n      def arr \u003d new int[3]\n      arr[5] \u003d 5\n  } catch(Exception \u003cb\u003eex\u003c/b\u003e) {\n      println(\u0027Catching the exception\u0027)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere the parameter \u003cb\u003eex\u003c/b\u003e is never used in \u003cb\u003ecatch\u003c/b\u003e block.\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n      def arr \u003d new int[3]\n      arr[5] \u003d 5\n  } catch(Exception \u003cb\u003eignored\u003c/b\u003e) {\n      println(\u0027Catching the exception\u0027)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyEmptyCatchBlock",
          "displayName": "Empty \u0027catch\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty \u003ccode\u003ecatch\u003c/code\u003e blocks. While occasionally intended,\nempty \u003ccode\u003ecatch\u003c/code\u003e blocks can make debugging extremely difficult.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ntry {\n  throw new Exception()\n}\ncatch (Exception e) {\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ntry {\n  throw new Exception()\n}\ncatch (Exception ignored) {\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyContinueOrBreakFromFinallyBlock",
          "displayName": "\u0027continue\u0027 or \u0027break\u0027 from \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e statements inside of \u003ccode\u003efinally\u003c/code\u003e blocks.\n\u003cp\u003eWhile occasionally intended, such statements are very confusing, may mask thrown exceptions, and tremendously complicate debugging.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyThrowFromFinallyBlock",
          "displayName": "\u0027throw\u0027 inside \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ethrow\u003c/code\u003e statements inside of \u003ccode\u003efinally\u003c/code\u003e blocks.\n\u003cp\u003e\n  While occasionally intended, such \u003ccode\u003ethrow\u003c/code\u003e statements may mask exceptions thrown and\n  tremendously complicate debugging.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyEmptyTryBlock",
          "displayName": "Empty \u0027try\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty \u003ccode\u003etry\u003c/code\u003e blocks.\nEmpty \u003ccode\u003etry\u003c/code\u003e blocks usually indicate coding errors.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ntry {\n}\nfinally {\n  close()\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyReturnFromFinallyBlock",
          "displayName": "\u0027return\u0027 inside \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ereturn\u003c/code\u003e statements inside of \u003ccode\u003efinally\u003c/code\u003e blocks.\n\u003cp\u003e\n  While occasionally intended, such \u003ccode\u003ereturn\u003c/code\u003e statements may mask exceptions thrown, and\n  complicate debugging.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Plugin descriptor",
      "inspections": [
        {
          "shortName": "PluginXmlValidity",
          "displayName": "Plugin.xml validity",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports problems in \u003ccode\u003eplugin.xml\u003c/code\u003e.\n\u003cp\u003e\n  Invalid configuration can lead to problems at runtime.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PluginXmlCapitalization",
          "displayName": "Plugin.xml text capitalization",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports text capitalization problems in \u003ccode\u003eplugin.xml\u003c/code\u003e.\n\u003cp\u003e\n  The following elements are checked:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;name\u003e\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;action\u003e, \u0026lt;group\u003e\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;separator, \u0026lt;synonym\u003e, \u0026lt;override-text\u003e\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eextension point properties annotated with \u003ccode\u003eorg.jetbrains.annotations.Nls\u003c/code\u003e specifying required \u003ccode\u003ecapitalization\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  Please see \u003ca href\u003d\"https://jetbrains.design/intellij/text/capitalization/\"\u003eCapitalization\u003c/a\u003e in IntelliJ Platform UI Guidelines for more\n  information.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinObjectExtensionRegistration",
          "displayName": "Extension class is a Kotlin object",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports extensions which are instantiated by the IntelliJ Platform, but are declared as Kotlin objects.\n\u003cp\u003e\n  Extensions lifecycle is managed by the IntelliJ Platform.\n  Using Kotlin objects for extension registration may cause creation of unnecessary extension instances and make plugin unloading\n  impossible.\n\u003c/p\u003e\n\u003ch2\u003eExample\u003c/h2\u003e\n\u003cp\u003eExtension registration:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;annotator language\u003d\"myLang\" implementationClass\u003d\"com.example.MyAnnotator\"/\u0026gt;\n\u003c/pre\u003e\n\n\u003cp\u003eExtension implementation:\u003c/p\u003e\n\u003cpre\u003e\n// bad:\nobject MyAnnotator : Annotator {\n  ...\n}\n\n// good:\nclass MyAnnotator : Annotator {\n  ...\n}\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2023.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "PluginXmlExtensionRegistration",
          "displayName": "Plugin.xml extension registration",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports problems with extension registration in \u003ccode\u003eplugin.xml\u003c/code\u003e.\n\u003cp\u003e\n  The following problems are reported:\n\u003cul\u003e\n  \u003cli\u003eMissing \u003ccode\u003elanguage\u003c/code\u003e declaration.\n    If the extension does not target a specific language, use quick fix to create an\n    explicit declaration for \"any language\".\n  \u003c/li\u003e\n  \u003cli\u003eInspections: missing attributes\u003c/li\u003e\n  \u003cli\u003eServices: redundant \u003ccode\u003eserviceInterface\u003c/code\u003e declaration\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.intellij.stubElementTypeHolder\u003c/code\u003e without \u003ccode\u003eexternalIdPrefix\u003c/code\u003e, see \u003ca\n    href\u003d\u0027https://plugins.jetbrains.com/docs/intellij/stub-indexes.html?from\u003d?from\u003dDevkitPluginXmlInspectionDescription\u0027\u003eStub Indexes\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.3\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PluginXmlI18n",
          "displayName": "Plugin.xml i18n verification",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports hardcoded texts in \u003ccode\u003eplugin.xml\u003c/code\u003e.\n\u003cp\u003e\n  Using texts defined in resource bundles allows supporting multiple languages in the IDE.\n\u003c/p\u003e\n\u003cp\u003e\n  The following elements are checked:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;action\u003e, \u0026lt;group\u003e\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;separator, \u0026lt;override-text\u003e\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eknown extension points having \u003ccode\u003ebundle/key\u003c/code\u003e alternative\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PluginXmlDynamicPlugin",
          "displayName": "Plugin.xml dynamic plugin verification",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports dynamic plugin problems.\n\u003cp\u003e\n  Dynamic plugins can be installed, updated and uninstalled without restarting the IDE (supported in 2020.1 and later).\n\u003c/p\u003e\n\u003cp\u003e\n  Please see \u003ca href\u003d\"https://plugins.jetbrains.com/docs/intellij/dynamic-plugins.html?from\u003dPluginXmlDynamicPlugin\"\u003eDynamic Plugins\u003c/a\u003e for further reference.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java 11",
      "inspections": [
        {
          "shortName": "StringRepeatCanBeUsed",
          "displayName": "String.repeat() can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports loops that can be replaced with a single \u003ccode\u003eString.repeat()\u003c/code\u003e method (available since Java 11).\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void append(StringBuilder sb, int count, Object obj) {\n    for (int i \u003d 0; i \u0026lt; count; i++) {\n      sb.append(obj);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void append(StringBuilder sb, int count, Object obj) {\n    sb.append(String.valueOf(obj).repeat(Math.max(0, count)));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  By default, the inspection may wrap \u003ccode\u003ecount\u003c/code\u003e with \u003ccode\u003eMath.max(0, count)\u003c/code\u003e if it cannot prove statically that \u003ccode\u003ecount\u003c/code\u003e is\n  not negative. This is done to prevent possible semantics change, as \u003ccode\u003eString.repeat()\u003c/code\u003e rejects negative numbers.\n  Use the \u003cb\u003eAdd Math.max(0,count) to avoid possible semantics change\u003c/b\u003e option to disable this behavior if required.\u003c/p\u003e\n  \u003cp\u003eSimilarly, a string you want to repeat can be wrapped in\n  \u003ccode\u003eString.valueOf\u003c/code\u003e to prevent possible \u003ccode\u003eNullPointerException\u003c/code\u003e if it\u0027s unknown whether it can be \u003ccode\u003enull\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 11 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReadWriteStringCanBeUsed",
          "displayName": "\u0027Files.readString()\u0027 or \u0027Files.writeString()\u0027 can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method calls that read or write a \u003ccode\u003eString\u003c/code\u003e as bytes using \u003ccode\u003ejava.nio.file.Files\u003c/code\u003e.\nSuch calls can be replaced with a call to a \u003ccode\u003eFiles.readString()\u003c/code\u003e or \u003ccode\u003eFiles.writeString()\u003c/code\u003e method introduced in Java 11.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d \"example\";\n  Files.write(Paths.get(\"out.txt\"), s.getBytes(StandardCharsets.UTF_8), StandardOpenOption.WRITE);\n  s \u003d new String(Files.readAllBytes(Paths.get(\"in.txt\")), StandardCharsets.ISO_8859_1);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d \"example\";\n  Files.writeString(Paths.get(\"out.txt\"), s, StandardOpenOption.WRITE);\n  s \u003d Files.readString(Paths.get(\"in.txt\"), StandardCharsets.ISO_8859_1);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Lombok",
      "inspections": [
        {
          "shortName": "SpringQualifierCopyableLombok",
          "displayName": "@Qualifier not copyable by lombok",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports  Spring \u003ccode\u003e@Qualifier\u003c/code\u003e annotations on class fields that are ignored by the corresponding Lombok\n\u003ccode\u003e@RequiredArgsConstructor\u003c/code\u003e and \u003ccode\u003e@AllArgsConstructor\u003c/code\u003e annotations.\nThe generated constructors will not receive the \u003ccode\u003e@Qualifier\u003c/code\u003e annotation without\na \u003ccode\u003elombok.copyableAnnotations\u003c/code\u003e definition inside the \u003ccode\u003elombok.config\u003c/code\u003e file.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "DeprecatedLombok",
          "displayName": "Deprecated Lombok annotations",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports deprecated Lombok annotations and suggests quick-fixes to replace them with the ones promoted to the main package.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "Lombok",
          "displayName": "Lombok annotations",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nOffers general inspections for Lombok annotations.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "RELAX NG",
      "inspections": [
        {
          "shortName": "UnusedDefine",
          "displayName": "Unused define",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unused named pattern (\u003ccode\u003edefine\u003c/code\u003e) in a RELAX-NG file (XML or Compact Syntax).\n\u003ccode\u003edefine\u003c/code\u003e elements that are used through an include in another file are ignored.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnresolvedReference",
          "displayName": "Unresolved reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved reference to a named pattern (\u003ccode\u003edefine\u003c/code\u003e) in RELAX-NG files that use XML syntax.\nSuggests creating the referenced \u003ccode\u003edefine\u003c/code\u003e element.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Async code and promises",
      "inspections": [
        {
          "shortName": "ES6MissingAwait",
          "displayName": "Missing await for an async function call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an \u003ccode\u003easync\u003c/code\u003e function call without an expected \u003ccode\u003eawait\u003c/code\u003e prefix inside an \u003ccode\u003easync\u003c/code\u003e function.\nSuch call returns a \u003ccode\u003ePromise\u003c/code\u003e and control flow is continued immediately.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nasync function bar() { /* ... */ }\nasync function foo() {\n    bar(); // bad\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nAfter the quick-fix is applied, the \u003ccode\u003eawait\u003c/code\u003e prefix is added:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nasync function bar() { /* ... */ }\nasync function foo() {\n    await bar(); // good\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cbr/\u003e\nWhen the \u0027Report for promises in return statements\u0027 checkbox is selected, also suggests adding \u003ccode\u003eawait\u003c/code\u003e in return statements.\u003cbr/\u003e\nWhile this is generally not necessary, it gives two main benefits.\u003cbr/\u003e\u003cul\u003e\u003cli\u003e\nYou won\u0027t forget to add \u003ccode\u003eawait\u003c/code\u003e when surrounding your code with \u003ccode\u003etry-catch\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAn explicit \u003ccode\u003eawait\u003c/code\u003e helps V8 runtime to provide \u003ca href\u003d\"https://bit.ly/v8-zero-cost-async-stack-traces\"\u003easync stack traces\u003c/a\u003e.\u003c/li\u003e\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6TopLevelAwaitExpression",
          "displayName": "Top-level \u0027await\u0027 expression",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of a top-level \u003ccode\u003eawait\u003c/code\u003e expression.\n\u003c!-- tooltip end --\u003e\nWhile the new \u0027top-level async\u0027 proposal is on its way, using \u003ccode\u003eawait\u003c/code\u003e outside async functions is not allowed.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSIgnoredPromiseFromCall",
          "displayName": "Result of method call returning a promise is ignored",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function call that returns a \u003ccode\u003ePromise\u003c/code\u003e that is not used later.\nSuch calls are usually unintended and indicate an error.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6PossiblyAsyncFunction",
          "displayName": "\u0027await\u0027 in non-async function",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of \u003ccode\u003eawait\u003c/code\u003e in a function that was possibly intended to be async but is actually missing the \u003ccode\u003easync\u003c/code\u003e modifier.\n\u003c!-- tooltip end --\u003e\nAlthough \u003ccode\u003eawait\u003c/code\u003e can be used as an identifier, it is likely that it was intended to be used as an operator, so\nthe containing function should be made \u003ccode\u003easync\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6RedundantAwait",
          "displayName": "Redundant \u0027await\u0027 expression",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a redundant usage of \u003ccode\u003eawait\u003c/code\u003e, such as \u003ccode\u003eawait await\u003c/code\u003e, or awaiting a non-promise result.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  When the \u0027Report for promises\u0027 option is selected, suggests removing \u003ccode\u003eawait\u003c/code\u003e before promises when applicable\n  (in \u003ccode\u003ereturn\u003c/code\u003e statements, and with \u003ccode\u003ePromise.resolve/reject\u003c/code\u003e).\n\u003c/p\u003e\n\u003cp\u003eRemoving \u003ccode\u003eawait\u003c/code\u003e in such contexts causes two problems.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Surrounding your code with \u003ccode\u003etry-catch\u003c/code\u003e and forgetting to add\n    \u003ccode\u003eawait\u003c/code\u003e will change code semantics while you may fail to notice that.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Having an explicit \u003ccode\u003eawait\u003c/code\u003e may prevent the V8 runtime from providing\n    \u003ca href\u003d\"http://bit.ly/v8-zero-cost-async-stack-traces\"\u003easync stack traces\u003c/a\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": " Android Lint: Correctness",
      "inspections": [
        {
          "shortName": "AndroidLintScrollViewSize",
          "displayName": "ScrollView size validation",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eScrollView size validation\u003cbr\u003e\u003cbr\u003eScrollView children must set their \u003ccode\u003elayout_width\u003c/code\u003e or \u003ccode\u003elayout_height\u003c/code\u003e attributes to \u003ccode\u003ewrap_content\u003c/code\u003e rather than \u003ccode\u003efill_parent\u003c/code\u003e or \u003ccode\u003ematch_parent\u003c/code\u003e in the scrolling dimension\u003cbr\u003e\u003cbr\u003eIssue id: ScrollViewSize\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Threading issues",
      "inspections": [
        {
          "shortName": "NotifyWithoutCorrespondingWait",
          "displayName": "\u0027notify()\u0027 without corresponding \u0027wait()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eObject.notify()\u003c/code\u003e or \u003ccode\u003eObject.notifyAll()\u003c/code\u003e for which no call to a corresponding\n\u003ccode\u003eObject.wait()\u003c/code\u003e can be found.\n\u003cp\u003eOnly calls that target fields of the current class are reported by this inspection.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  synchronized (synList) {\n    synList.notify(); //synList.wait() is never called\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WaitWithoutCorrespondingNotify",
          "displayName": "\u0027wait()\u0027 without corresponding \u0027notify()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eObject.wait()\u003c/code\u003e, for which no call to the corresponding \u003ccode\u003eObject.notify()\u003c/code\u003e or\n\u003ccode\u003eObject.notifyAll()\u003c/code\u003e can be found.\n\u003cp\u003eThis inspection only reports calls with qualifiers referencing fields of the current class.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Foo {\n    public Object foo \u003d new Object();\n\n    void bar() throws InterruptedException {\n      this.foo.wait();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WaitCalledOnCondition",
          "displayName": "\u0027wait()\u0027 called on \u0027java.util.concurrent.locks.Condition\u0027 object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ewait()\u003c/code\u003e made on a \u003ccode\u003ejava.util.concurrent.locks.Condition\u003c/code\u003e\nobject. This is probably a programming error, and some variant of the \u003ccode\u003eawait()\u003c/code\u003e method was intended instead.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void acquire(Condition released) throws InterruptedException {\n    while (acquired) {\n      released.wait();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGood code would look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void acquire(Condition released) throws InterruptedException {\n    while (acquired) {\n      released.await();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SynchronizationOnLocalVariableOrMethodParameter",
          "displayName": "Synchronization on local variable or method parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports synchronization on a local variable or parameter. \n\u003cp\u003e\n  It is very difficult to guarantee correct operation when such synchronization is used.\n  It may be possible to improve such code, for example, by controlling access using a synchronized wrapper class or by synchronizing on a\n  field.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void bar() {\n    final Object lock \u003d new Object();\n    synchronized (lock) { }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "NotifyCalledOnCondition",
          "displayName": "\u0027notify()\u0027 or \u0027notifyAll()\u0027 called on \u0027java.util.concurrent.locks.Condition\u0027 object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003enotify()\u003c/code\u003e or \u003ccode\u003enotifyAll()\u003c/code\u003e made on\n\u003ccode\u003ejava.util.concurrent.locks.Condition\u003c/code\u003e object.\n\u003cp\u003e\n  This is probably a programming error, and some variant of the \u003ccode\u003esignal()\u003c/code\u003e or\n  \u003ccode\u003esignalAll()\u003c/code\u003e method was intended instead, otherwise \u003ccode\u003eIllegalMonitorStateException\u003c/code\u003e may occur.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class C {\n    final Lock l \u003d new ReentrantLock();\n    final Condition c \u003d l.newCondition();\n\n    void release() {\n      l.lock();\n      try {\n        c.notifyAll(); // probably \u0027signalAll()\u0027 was intended here\n      } finally {\n        l.unlock();\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConditionSignal",
          "displayName": "Call to \u0027signal()\u0027 instead of \u0027signalAll()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.util.concurrent.locks.Condition.signal()\u003c/code\u003e. While occasionally useful, in almost all cases\n\u003ccode\u003esignalAll()\u003c/code\u003e is a better and safer choice.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThreadStartInConstruction",
          "displayName": "Call to \u0027Thread.start()\u0027 during object construction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003estart()\u003c/code\u003e on \u003ccode\u003ejava.lang.Thread\u003c/code\u003e\nor any of its subclasses during object construction.\n\u003cp\u003e\n  While occasionally useful, such constructs should be avoided due to inheritance issues.\n  Subclasses of a class that launches a thread during the object construction will not have finished\n  any initialization logic of their own before the thread has launched.\n\u003c/p\u003e\n\u003cp\u003eThis inspection does not report if the class that starts a thread is declared \u003ccode\u003efinal\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyThread extends Thread {\n    MyThread() {\n      start();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VolatileArrayField",
          "displayName": "Volatile array field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports array fields that are declared \u003ccode\u003evolatile\u003c/code\u003e. Such declarations\nmay be confusing because accessing the array itself follows the rules for \u003ccode\u003evolatile\u003c/code\u003e\nfields, but accessing the array\u0027s contents does not.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Data {\n    private volatile int[] idx \u003d new int[0];\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  If such volatile access is needed for array contents, consider using\n  \u003ccode\u003ejava.util.concurrent.atomic\u003c/code\u003e classes instead:\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Data {\n    private final AtomicIntegerArray idx \u003d new AtomicIntegerArray(new int[0]);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SynchronizeOnThis",
          "displayName": "Synchronization on \u0027this\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports synchronization on \u003ccode\u003ethis\u003c/code\u003e or \u003ccode\u003eclass\u003c/code\u003e expressions.\nThe reported constructs include \u003ccode\u003esynchronized\u003c/code\u003e blocks and calls to \u003ccode\u003ewait()\u003c/code\u003e,\n\u003ccode\u003enotify()\u003c/code\u003e or \u003ccode\u003enotifyAll()\u003c/code\u003e.\n\u003cp\u003eThere are several reasons synchronization on \u003ccode\u003ethis\u003c/code\u003e or \u003ccode\u003eclass\u003c/code\u003e expressions may be a bad idea:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\n    it makes synchronization a part of the external interface of the class,\n    which makes a future change to a different locking mechanism difficult,\n  \u003c/li\u003e\n  \u003cli\u003e\n    it becomes hard to track just who is locking on a given object,\n  \u003c/li\u003e\n  \u003cli\u003e\n    it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing.\n  \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAs an alternative, consider synchronizing on a \u003ccode\u003eprivate final\u003c/code\u003e lock object, access to which can be completely controlled.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public void print() {\n    synchronized(this) { // warning: Lock operations on \u0027this\u0027 may have unforeseen side-effects\n      System.out.println(\"synchronized\");\n    }\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CallToNativeMethodWhileLocked",
          "displayName": "Call to a \u0027native\u0027 method while locked",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls \u003ccode\u003enative\u003c/code\u003e methods within a \u003ccode\u003esynchronized\u003c/code\u003e block or method.\n\u003cp\u003e\n  When possible, it\u0027s better to keep calls to \u003ccode\u003enative\u003c/code\u003e methods out of the synchronized context\n  because such calls cause an expensive context switch and may lead to performance issues.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  native void nativeMethod();\n\n  void example(){\n    synchronized (lock){\n      nativeMethod();//warning\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NakedNotify",
          "displayName": "\u0027notify()\u0027 or \u0027notifyAll()\u0027 without corresponding state change",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eObject.notify()\u003c/code\u003e or \u003ccode\u003eObject.notifyAll()\u003c/code\u003e being called without any detectable state change occurring.\n\u003cp\u003e\n  Normally, \u003ccode\u003eObject.notify()\u003c/code\u003e and \u003ccode\u003eObject.notifyAll()\u003c/code\u003e are used to inform other threads that a state change has\n  occurred. That state change should occur in a synchronized context that contains the \u003ccode\u003eObject.notify()\u003c/code\u003e or\n  \u003ccode\u003eObject.notifyAll()\u003c/code\u003e call, and prior to the call. While not having such a state change isn\u0027t necessarily incorrect, it is\n  certainly worth examining.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  synchronized (this) {\n    notify();\n  }\n  // no state change\n  synchronized (this) {\n    notify(); // this notify might be redundant\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestedSynchronizedStatement",
          "displayName": "Nested \u0027synchronized\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports nested \u003ccode\u003esynchronized\u003c/code\u003e statements.\nIt is recommended to avoid nested synchronization if possible, because in some cases it may lead to a deadlock.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  synchronized (lockA){\n    //thread 1 is waiting for lockB\n    synchronized (lockB){ //warning\n    }\n  }\n  ...\n  synchronized (lockB) {\n    //thread 2 is waiting for lockA\n    synchronized (lockA) { //warning\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SynchronizeOnLock",
          "displayName": "Synchronization on a \u0027Lock\u0027 object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003esynchronized\u003c/code\u003e blocks that lock on an instance of \u003ccode\u003ejava.util.concurrent.locks.Lock\u003c/code\u003e.\nSuch synchronization is almost certainly unintended, and appropriate versions of \u003ccode\u003e.lock()\u003c/code\u003e\nand \u003ccode\u003e.unlock()\u003c/code\u003e should be used instead.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  final ReentrantLock lock \u003d new ReentrantLock();\n\n  public void foo() {\n    synchronized (lock) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThreadLocalNotStaticFinal",
          "displayName": "\u0027ThreadLocal\u0027 field not declared \u0027static final\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields of type \u003ccode\u003ejava.lang.ThreadLocal\u003c/code\u003e that are not declared \u003ccode\u003estatic final\u003c/code\u003e.\n\u003cp\u003e\n  In the most common case, a \u003ccode\u003ejava.lang.ThreadLocal\u003c/code\u003e instance associates state with a thread.\n  A non-static non-final \u003ccode\u003ejava.lang.ThreadLocal\u003c/code\u003e field associates state with an instance-thread combination.\n  This is usually unnecessary and quite often is a bug that can cause memory leaks and incorrect behavior.\n\u003c/p\u003e\n\u003cp\u003e\n  A quick-fix is suggested to make the field \u003ccode\u003estatic final\u003c/code\u003e.\n\u003cp\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  private ThreadLocal tl \u003d ThreadLocal.withInitial(() -\u003e Boolean.TRUE);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WaitNotInLoop",
          "displayName": "\u0027wait()\u0027 not called in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ewait()\u003c/code\u003e that are not made inside a loop.\n\u003cp\u003e\n  \u003ccode\u003ewait()\u003c/code\u003e is normally used to suspend a thread until some condition becomes true.\n  As the thread could have been waken up for a different reason,\n  the condition should be checked after the \u003ccode\u003ewait()\u003c/code\u003e call returns.\n  A loop is a simple way to achieve this.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class BoundedCounter {\n    private int count;\n    synchronized void inc() throws InterruptedException {\n      if (count \u003e\u003d 10) wait();\n      ++count;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGood code should look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class BoundedCounter {\n    private int count;\n    synchronized void inc() throws InterruptedException {\n      while (count \u003e\u003d 10) wait();\n      ++count;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WaitOrAwaitWithoutTimeout",
          "displayName": "\u0027wait()\u0027 or \u0027await()\u0027 without timeout",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eObject.wait()\u003c/code\u003e or \u003ccode\u003eCondition.await()\u003c/code\u003e without specifying a timeout.\n\u003cp\u003e\n  Such calls may be dangerous in high-availability programs, as failures in one\n  component may result in blockages of the waiting component\n  if \u003ccode\u003enotify()\u003c/code\u003e/\u003ccode\u003enotifyAll()\u003c/code\u003e\n  or \u003ccode\u003esignal()\u003c/code\u003e/\u003ccode\u003esignalAll()\u003c/code\u003e never get called.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(Object bar) throws InterruptedException {\n    bar.wait();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WaitWhileHoldingTwoLocks",
          "displayName": "\u0027wait()\u0027 while holding two locks",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ewait()\u003c/code\u003e methods that may occur while the current thread is holding two locks.\n\u003cp\u003e\n  Since calling \u003ccode\u003ewait()\u003c/code\u003e only releases one lock on its target,\n  waiting with two locks held can easily lead to a deadlock.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  synchronized (lockA) {\n    synchronized (lockB) {\n      lockB.wait(); //warning\n      //thread A is stuck here holding lockA\n    }\n  }\n\n  synchronized (lockA) { //thread B can\u0027t enter the block and release thread A\n    lockB.notify();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExtendsThread",
          "displayName": "Class directly extends \u0027Thread\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that directly extend \u003ccode\u003ejava.lang.Thread\u003c/code\u003e.\nIt is usually recommended to prefer composition over inheritance to create more reusable code that is easier to modify later.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MainThread extends Thread {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonSynchronizedMethodOverridesSynchronizedMethod",
          "displayName": "Unsynchronized method overrides \u0027synchronized\u0027 method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-\u003ccode\u003esynchronized\u003c/code\u003e methods overriding \u003ccode\u003esynchronized\u003c/code\u003e methods.\n\u003cp\u003e\n  The overridden method will not be automatically synchronized if the superclass method\n  is declared as \u003ccode\u003esynchronized\u003c/code\u003e. This may result in unexpected race conditions when using the subclass.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Super {\n    synchronized void process() {}\n  }\n  class Sub extends Super {\n    // Unsynchronized method \u0027process()\u0027 overrides synchronized method\n    void process() {}\n  }  \n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PublicFieldAccessedInSynchronizedContext",
          "displayName": "Non-private field accessed in \u0027synchronized\u0027 context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-\u003ccode\u003efinal\u003c/code\u003e, non-\u003ccode\u003eprivate\u003c/code\u003e fields that are accessed in a synchronized context.\n\u003cp\u003e\n  A non-\u003ccode\u003eprivate\u003c/code\u003e field cannot be guaranteed to always be accessed in a synchronized manner, and such \"partially synchronized\"\n  access may result in unexpectedly inconsistent data structures.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Bar {\n    public String field1;\n  }\n  public Bar myBar;\n\n  synchronized public void sample() {\n   myBar.field1 \u003d \"bar\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AtomicFieldUpdaterNotStaticFinal",
          "displayName": "\u0027AtomicFieldUpdater\u0027 field not declared \u0027static final\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields of types:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.concurrent.atomic.AtomicLongFieldUpdater\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.concurrent.atomic.AtomicIntegerFieldUpdater\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.concurrent.atomic.AtomicReferenceFieldUpdater\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\nthat are not \u003ccode\u003estatic final\u003c/code\u003e.\nBecause only one atomic field updater is needed for updating a \u003ccode\u003evolatile\u003c/code\u003e field in all instances\nof a class, it can almost always be \u003ccode\u003estatic\u003c/code\u003e.\n\n\u003cp\u003eMaking the updater \u003ccode\u003efinal\u003c/code\u003e allows the JVM to optimize access for improved performance.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    private volatile int id;\n    private AtomicIntegerFieldUpdater\u0026lt;Main\u0026gt; idFieldUpdater \u003d AtomicIntegerFieldUpdater.newUpdater(Main.class, \"id\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    private volatile int id;\n    private static final AtomicIntegerFieldUpdater\u0026lt;Main\u0026gt; idFieldUpdater \u003d AtomicIntegerFieldUpdater.newUpdater(Main.class, \"id\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StaticInitializerReferencesSubClass",
          "displayName": "Static initializer references subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that refer to their subclasses in static initializers or static fields.\n\u003cp\u003eSuch references can cause JVM-level deadlocks in multithreaded environment, when one thread tries to load the superclass\n  and another thread tries to load the subclass at the same time.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Parent {\n    static final Child field \u003d new Child();\n  }\n  class Child extends Parent { }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SynchronizeOnNonFinalField",
          "displayName": "Synchronization on a non-final field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003esynchronized\u003c/code\u003e statement lock expressions\nthat consist of a non-\u003ccode\u003efinal\u003c/code\u003e field reference.\nSuch statements are unlikely to have useful semantics, as different\nthreads may acquire different locks even when operating on the same object.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  private Object o;\n  public void foo() {\n    synchronized (o) // synchronization on a non-final field\n    { }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AccessToStaticFieldLockedOnInstance",
          "displayName": "Access to \u0027static\u0027 field locked on instance data",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports access to non-constant static fields that are\nlocked on either \u003ccode\u003ethis\u003c/code\u003e or an instance field of \u003ccode\u003ethis\u003c/code\u003e.\n\u003cp\u003e\n  Locking a static field on instance data does not prevent the field from being\n  modified by other instances, and thus may result in unexpected race conditions.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  static String test;\n  public void foo() {\n      synchronized (this) {\n          System.out.println(test); // warning\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  There is a quick-fix that allows ignoring static fields of specific types.\n  You can manage those ignored types in the inspection options.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the inspection options to specify which classes used for static fields should be ignored.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AccessToNonThreadSafeStaticFieldFromInstance",
          "displayName": "Non-thread-safe \u0027static\u0027 field access",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports access to \u003ccode\u003estatic\u003c/code\u003e fields that are of a non-thread-safe type.\n\u003cp\u003e\n  When a \u003ccode\u003estatic\u003c/code\u003e field is accessed from an instance method or a non-synchronized block,\n  multiple threads can access that field.\n  This can lead to unspecified side effects, like exceptions and incorrect results.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Sample {\n    private static final SimpleDateFormat df \u003d new SimpleDateFormat(\"yyyy-MM-dd\");\n    String method() {\n      return df.format(\"\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  You can specify which types should be considered not thread-safe.\n  Only fields with these exact types or initialized with these exact types are reported,\n  because there may exist thread-safe subclasses of these types.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FieldAccessedSynchronizedAndUnsynchronized",
          "displayName": "Field accessed in both \u0027synchronized\u0027 and unsynchronized contexts",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-final fields that are accessed in both \u003ccode\u003esynchronized\u003c/code\u003e and\nnon-\u003ccode\u003esynchronized\u003c/code\u003e contexts.\n\u003ccode\u003evolatile\u003c/code\u003e fields as well as accesses in constructors and initializers are ignored by this inspection.\n\u003cp\u003e\n  Such \"partially synchronized\" access is often the result of a coding oversight\n  and may lead to unexpectedly inconsistent data structures.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Program {\n    Console console; // warning: Field \u0027console\u0027 is accessed in both synchronized and unsynchronized contexts\n\n    public synchronized void execute() {\n      console.print(\"running\");\n    }\n\n    public void check() {\n      console.check();\n    }\n  }\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to specify if simple getters and setters are counted as accesses too.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SystemRunFinalizersOnExit",
          "displayName": "Call to \u0027System.runFinalizersOnExit()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eSystem.runFinalizersOnExit()\u003c/code\u003e.\n\u003cp\u003e\n  This call is one of the most dangerous in the Java language. It is inherently non-thread-safe,\n  may result in data corruption, a deadlock, and may affect parts of the program far removed from its call point.\n  It is deprecated and was removed in JDK 11, and its use is strongly discouraged.\n\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 10 or lower.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SynchronizedOnLiteralObject",
          "displayName": "Synchronization on an object initialized with a literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003esynchronized\u003c/code\u003e blocks that lock on an object initialized with a literal.\n\u003cp\u003e\n  String literals are interned and \u003ccode\u003eCharacter\u003c/code\u003e, \u003ccode\u003eBoolean\u003c/code\u003e and \u003ccode\u003eNumber\u003c/code\u003e literals can be allocated from a cache.\n  Because of this, it is possible that some other part of the system, which uses an object initialized with the same literal, is actually\n  holding a reference to the exact same object. This can create unexpected dead-lock situations, if the lock object was thought to be private.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    final String mutex \u003d \"Mutex\";\n    void method() {\n      synchronized (mutex) {\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cstrong\u003eWarn on all possible literals\u003c/strong\u003e option to report any synchronization on\n  \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eCharacter\u003c/code\u003e, \u003ccode\u003eBoolean\u003c/code\u003e and \u003ccode\u003eNumber\u003c/code\u003e objects.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SynchronizedMethod",
          "displayName": "\u0027synchronized\u0027 method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the \u003ccode\u003esynchronized\u003c/code\u003e modifier on methods.\n\u003cp\u003e\n  There are several reasons a \u003ccode\u003esynchronized\u003c/code\u003e modifier on a method may be a bad idea:\n\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\n    As little work as possible should be performed under a lock. Therefore it is often better to use a \u003ccode\u003esynchronized\u003c/code\u003e block and\n    keep there only the code that works with shared state.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Synchronization becomes a part of a method\u0027s interface. This makes a transition to a different locking mechanism difficult.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Keeping track of what is locking a particular object gets harder.\n  \u003c/li\u003e\n  \u003cli\u003e\n    The DoS (denial-of-service) attack becomes feasible either on purpose or unknowingly when inheriting the method\u0027s class.\n  \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\n  As an alternative, consider synchronizing on a \u003ccode\u003eprivate final\u003c/code\u003e lock object, access to which can be completely controlled.\n\u003c/p\u003e\n\u003cp\u003eA quick-fix is provided to wrap the method body with \u003ccode\u003esynchronized(this)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    public synchronized void fooBar() {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    public void fooBar() {\n      synchronized (this) {\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eYou can configure the following options for this inspection:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003eInclude native methods\u003c/strong\u003e - include native methods into the inspection\u0027s scope.\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eIgnore methods overriding a synchronized method\u003c/strong\u003e -\n    do not report methods that override a \u003ccode\u003esynchronized\u003c/code\u003e method.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SynchronizationOnGetClass",
          "displayName": "Synchronization on \u0027getClass()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports synchronization on a call to \u003ccode\u003egetClass()\u003c/code\u003e.\n\u003cp\u003e\n  If the class containing the synchronization is subclassed, the subclass\n  will\n  synchronize on a different class object. Usually the call to \u003ccode\u003egetClass()\u003c/code\u003e can be replaced with a class literal expression, for\n  example \u003ccode\u003eString.class\u003c/code\u003e. An even better solution is synchronizing on a \u003ccode\u003eprivate static final\u003c/code\u003e lock object, access to\n  which can be completely controlled.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e synchronized(getClass()) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SafeLock",
          "displayName": "Lock acquired but not safely unlocked",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ejava.util.concurrent.locks.Lock\u003c/code\u003e resources that are not acquired in front of a\n\u003ccode\u003etry\u003c/code\u003e block or not unlocked in the corresponding \u003ccode\u003efinally\u003c/code\u003e block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  lock.lock(); // will be reported since the \u0027finally\u0027 block is missing\n  try {\n    doSmthWithLock();\n  } catch (IOException e) {\n    throw new UncheckedIOException(e);\n  }\n  lock.unlock();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WaitNotifyNotInSynchronizedContext",
          "displayName": "\u0027wait()\u0027 or \u0027notify()\u0027 is not in synchronized context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ewait()\u003c/code\u003e, \u003ccode\u003enotify()\u003c/code\u003e, and \u003ccode\u003enotifyAll()\u003c/code\u003e\nthat are not made inside a corresponding synchronized statement or synchronized method.\n\u003cp\u003e\n  Calling these methods on an object\n  without holding a lock on that object causes \u003ccode\u003eIllegalMonitorStateException\u003c/code\u003e.\n  Such a construct is not necessarily an error, as the necessary lock may be acquired before\n  the containing method is called, but it\u0027s worth looking at.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Sync {\n    private final Object lock \u003d new Object();\n\n    void test() throws InterruptedException {\n      synchronized (this) {\n        lock.wait(); // \u0027lock.wait()\u0027 is not synchronized on \u0027lock\u0027\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BusyWait",
          "displayName": "Busy wait",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.lang.Thread.sleep()\u003c/code\u003e that occur inside loops.\n\u003cp\u003eSuch calls\n  are indicative of \"busy-waiting\". Busy-waiting is often inefficient, and may result in unexpected deadlocks\n  as busy-waiting threads do not release locked resources.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X {\n     volatile int x;\n     public void waitX() throws Exception {\n      while (x \u0026gt; 0) {\n        Thread.sleep(10);//warning: Call to \u0027Thread.sleep()\u0027 in a loop, probably busy-waiting\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThreadYield",
          "displayName": "Call to \u0027Thread.yield()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eThread.yield()\u003c/code\u003e.\n\u003cp\u003e\n  The behavior of \u003ccode\u003eyield()\u003c/code\u003e is non-deterministic and platform-dependent, and it is rarely appropriate to use this method.\n  Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public static void main(String[] args) {\n    Runnable r \u003d () -\u003e {\n      for (int i \u003d 0; i \u0026lt; 10; i++) {\n        System.out.println(i);\n        Thread.yield();\n      }\n    };\n    new Thread(r).start();\n    new Thread(r).start();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnconditionalWait",
          "displayName": "Unconditional \u0027wait()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ewait()\u003c/code\u003e being called unconditionally within a synchronized context.\n\u003cp\u003e\n  Normally, \u003ccode\u003ewait()\u003c/code\u003e is used to block a thread until some condition is true. If\n  \u003ccode\u003ewait()\u003c/code\u003e is called unconditionally, it often indicates that the condition was\n  checked before a lock was acquired. In that case a data race may occur, with the condition\n  becoming true between the time it was checked and the time the lock was acquired.\n\u003c/p\u003e\n\u003cp\u003e\n  While constructs found by this inspection are not necessarily incorrect, they are certainly worth examining.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Bar {\n      void foo() throws InterruptedException {\n          synchronized (this) {\n              wait(); // warning\n          }\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThreadWithDefaultRunMethod",
          "displayName": "Instantiating a \u0027Thread\u0027 with default \u0027run()\u0027 method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code that instantiates \u003ccode\u003eThread\u003c/code\u003e without specifying\na \u003ccode\u003eRunnable\u003c/code\u003e parameter or overriding the \u003ccode\u003erun()\u003c/code\u003e method.\n\u003cp\u003e\n  Such threads do nothing useful.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObjectNotify",
          "displayName": "Call to \u0027notify()\u0027 instead of \u0027notifyAll()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eObject.notify()\u003c/code\u003e. While occasionally useful, in almost all cases\n\u003ccode\u003eObject.notifyAll()\u003c/code\u003e is a better choice because calling \u003ccode\u003eObject.notify()\u003c/code\u003e may lead to deadlocks.\nSee Doug Lea\u0027s \u003ci\u003eConcurrent Programming in Java\u003c/i\u003e for a discussion.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EmptySynchronizedStatement",
          "displayName": "Empty \u0027synchronized\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003esynchronized\u003c/code\u003e statements with empty bodies.\n\u003cp\u003e\n  Empty \u003ccode\u003esynchronized\u003c/code\u003e statements are sometimes used to wait for other threads to\n  release a particular resource. However, there is no guarantee that the same resource\n  won\u0027t be acquired again right after the empty \u003ccode\u003esynchronized\u003c/code\u003e statement finishes.\n  For proper synchronization, the resource should be utilized inside the \u003ccode\u003esynchronized\u003c/code\u003e block.\n\u003c/p\u003e\n\u003cp\u003e\n  Also, an empty \u003ccode\u003esynchronized\u003c/code\u003e block may appear after a refactoring\n  when redundant code was removed. In this case, the \u003ccode\u003esynchronized\u003c/code\u003e block\n  itself will be redundant and should be removed as well.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  synchronized(lock) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  A quick-fix is suggested to remove the empty synchronized statement.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  This inspection is disabled in JSP files.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AwaitWithoutCorrespondingSignal",
          "displayName": "\u0027await()\u0027 without corresponding \u0027signal()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eCondition.await()\u003c/code\u003e,\nfor which no call to a corresponding \u003ccode\u003eCondition.signal()\u003c/code\u003e or \u003ccode\u003eCondition.signalAll()\u003c/code\u003e can be found.\n\u003cp\u003e\n  Calling \u003ccode\u003eCondition.await()\u003c/code\u003e in a thread without corresponding \u003ccode\u003eCondition.signal()\u003c/code\u003e may cause the thread\n  to become disabled until it is interrupted or \"spurious wakeup\" occurs.\n\u003c/p\u003e\n\u003cp\u003eOnly calls that target fields of the current class are reported by this inspection.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Queue {\n    private final Condition isEmpty \u003d ...;\n\n    void add(Object elem) {\n      // ...\n      // isEmpty.signal();\n      // ...\n    }\n\n    void remove(Object elem) throws InterruptedException {\n      // ...\n      isEmpty.await(); // \u0027await()\u0027 doesn\u0027t contain corresponding \u0027signal()\u0027/\u0027signalAll()\u0027 call\n      // ...\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AtomicFieldUpdaterIssues",
          "displayName": "Inconsistent \u0027AtomicFieldUpdater\u0027 declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports issues with \u003ccode\u003eAtomicLongFieldUpdater\u003c/code\u003e,\n\u003ccode\u003eAtomicIntegerFieldUpdater\u003c/code\u003e, or \u003ccode\u003eAtomicReferenceFieldUpdater\u003c/code\u003e fields (the \u003ccode\u003ejava.util.concurrent.atomic\u003c/code\u003e package).\n\u003cp\u003eThe reported issues are identical to the runtime problems that can happen with atomic field updaters:\n  specified field not found, specified field not accessible, specified field has a wrong type, and so on.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cpre\u003e\u003ccode\u003e\n  class A {\n    private static volatile int value \u003d 0;\n    private static final AtomicIntegerFieldUpdater updater \u003d\n    AtomicIntegerFieldUpdater.newUpdater((A.class), \"value\"); // warning: Field \u0027value\u0027 has \u0027static\u0027 modifier\n  }\n  \u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cpre\u003e\u003ccode\u003e\n  class B {\n    private static final AtomicIntegerFieldUpdater updater \u003d\n      AtomicIntegerFieldUpdater.newUpdater(B.class, \"value\"); // warning: No field named \u0027value\u0027 found in class \u0027B\u0027\n  }\n  \u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SleepWhileHoldingLock",
          "displayName": "Call to \u0027Thread.sleep()\u0027 while synchronized",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.lang.Thread.sleep()\u003c/code\u003e methods that occur\nwithin a \u003ccode\u003esynchronized\u003c/code\u003e block or method.\n\u003cp\u003e\n  \u003ccode\u003esleep()\u003c/code\u003e within a\n  \u003ccode\u003esynchronized\u003c/code\u003e block may result in decreased performance, poor scalability, and possibly\n  even deadlocking. Consider using \u003ccode\u003ewait()\u003c/code\u003e instead,\n  as it will release the lock held.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  synchronized (lock) {\n    Thread.sleep(100);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonAtomicOperationOnVolatileField",
          "displayName": "Non-atomic operation on \u0027volatile\u0027 field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-atomic operations on volatile fields.\n\u003cp\u003e\n  An example of a non-atomic operation is updating the field using the increment operator.\n  As the operation involves read and write, and other modifications may happen in between, data may become corrupted.\n  The operation can be made atomic by surrounding it with a \u003ccode\u003esynchronized\u003c/code\u003e block or\n  using one of the classes from the \u003ccode\u003ejava.util.concurrent.atomic\u003c/code\u003e package.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  private volatile int v \u003d 1;\n\n  void foo() {\n    v \u003d 2 * v;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SignalWithoutCorrespondingAwait",
          "displayName": "\u0027signal()\u0027 without corresponding \u0027await()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eCondition.signal()\u003c/code\u003e or \u003ccode\u003eCondition.signalAll()\u003c/code\u003e\nfor which no call to a corresponding \u003ccode\u003eCondition.await()\u003c/code\u003e can be found.\n\u003cp\u003eOnly calls that target fields of the current class are reported by this inspection.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Queue {\n    private final Condition isEmpty \u003d ...;\n\n    void add(Object elem) {\n      // ...\n      isEmpty.signal(); // warning: Call to \u0027signal()\u0027 without corresponding \u0027await()\u0027\n      // ...\n    }\n\n    void remove(Object elem) throws InterruptedException {\n      // ...\n      //      isEmpty.await();\n      // ...\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DoubleCheckedLocking",
          "displayName": "Double-checked locking",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ca href\u003d\"https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\"\u003edouble-checked locking\u003c/a\u003e.\n\u003cp\u003e\n  Double-checked locking tries to initialize a field on demand and in a thread-safe manner, while avoiding the cost of synchronization.\n  Unfortunately it is not thread-safe when used on a field that is not declared \u003ccode\u003evolatile\u003c/code\u003e.\n  When using Java 1.4 or earlier, double-checked locking doesn\u0027t work even with a \u003ccode\u003evolatile\u003c/code\u003e field.\n  Read the article linked above for a detailed explanation of the problem.\n\u003c/p\u003e\n\u003cp\u003eExample of incorrect double-checked locking:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    private Helper helper \u003d null;\n    public Helper getHelper() {\n      if (helper \u003d\u003d null)\n        synchronized(this) {\n          if (helper \u003d\u003d null) helper \u003d new Helper();\n        }\n        return helper;\n      }\n    }\n    // other functions and members...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SynchronizationOnStaticField",
          "displayName": "Synchronization on \u0027static\u0027 field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports synchronization on \u003ccode\u003estatic\u003c/code\u003e fields. While not strictly incorrect,\nsynchronization on \u003ccode\u003estatic\u003c/code\u003e fields can lead to bad performance because of contention.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ThreadStopSuspendResume",
          "displayName": "Call to \u0027Thread.stop()\u0027, \u0027suspend()\u0027 or \u0027resume()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eThread.stop()\u003c/code\u003e,\n\u003ccode\u003eThread.suspend()\u003c/code\u003e, and \u003ccode\u003eThread.resume()\u003c/code\u003e.\n\u003cp\u003e\n  These calls are inherently prone to data corruption and deadlocks, and their use is strongly discouraged.\n  It is better to use cooperative cancellation instead of \u003ccode\u003estop\u003c/code\u003e, and\n  interruption instead of direct calls to \u003ccode\u003esuspend\u003c/code\u003e and \u003ccode\u003eresume\u003c/code\u003e.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodMayBeSynchronized",
          "displayName": "Method with single \u0027synchronized\u0027 block can be replaced with \u0027synchronized\u0027 method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods whose body contains a single \u003ccode\u003esynchronized\u003c/code\u003e statement.\nA lock expression for this \u003ccode\u003esynchronized\u003c/code\u003e statement must be equal to\n\u003ccode\u003ethis\u003c/code\u003e for instance methods or \u003ccode\u003e[ClassName].class\u003c/code\u003e for static methods.\n\u003cp\u003e\n  To improve readability of such methods,\n  you can remove the \u003ccode\u003esynchronized\u003c/code\u003e wrapper and mark the method as \u003ccode\u003esynchronized\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public int generateInt(int x) {\n    synchronized (this) {\n      return 1;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public synchronized int generateInt(int x) {\n    return 1;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThreadPriority",
          "displayName": "Call to \u0027Thread.setPriority()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eThread.setPriority()\u003c/code\u003e.\nModifying priorities of threads is an inherently non-portable operation, as no guarantees\nare given in the Java specification of how priorities are used in scheduling threads, or even\nwhether they are used at all.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WhileLoopSpinsOnField",
          "displayName": "\u0027while\u0027 loop spins on field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ewhile\u003c/code\u003e loops that spin on the\nvalue of a non-\u003ccode\u003evolatile\u003c/code\u003e field, waiting for it to be changed by another thread.\n\u003cp\u003e\nIn addition to being potentially extremely CPU intensive when little work is done inside the loop, such\nloops are likely to have different semantics from what was intended.\nThe Java Memory Model allows such loops to never complete even if another thread changes the field\u0027s value.\n\u003c/p\u003e\n\u003cp\u003e\nAdditionally, since Java 9 it\u0027s recommended to call \u003ccode\u003eThread.onSpinWait()\u003c/code\u003e inside a spin loop\non a \u003ccode\u003evolatile\u003c/code\u003e field, which may significantly improve performance on some hardware.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class SpinsOnField {\n    boolean ready \u003d false;\n\n    void run() {\n      while (!ready) {\n      }\n      // do some work\n    }\n\n    void markAsReady() {\n      ready \u003d true;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class SpinsOnField {\n    volatile boolean ready \u003d false;\n\n    void run() {\n      while (!ready) {\n        Thread.onSpinWait();\n      }\n      // do some work\n    }\n\n    void markAsReady() {\n      ready \u003d true;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the inspection options to only report empty \u003ccode\u003ewhile\u003c/code\u003e loops.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AwaitNotInLoop",
          "displayName": "\u0027await()\u0027 not called in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ejava.util.concurrent.locks.Condition.await()\u003c/code\u003e not being called inside a loop.\n\u003cp\u003e\n  \u003ccode\u003eawait()\u003c/code\u003e and related methods are normally used to suspend a thread until some condition becomes true.\n  As the thread could have been woken up for a different reason,\n  the condition should be checked after the \u003ccode\u003eawait()\u003c/code\u003e call returns.\n  A loop is a simple way to achieve this.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void acquire(Condition released) throws InterruptedException {\n    released.await();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGood code should look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void acquire(Condition released) throws InterruptedException {\n    while (acquired) {\n      released.await();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SharedThreadLocalRandom",
          "displayName": "\u0027ThreadLocalRandom\u0027 instance might be shared",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ejava.util.concurrent.ThreadLocalRandom\u003c/code\u003e instances which might be shared between threads.\n\u003cp\u003e\n  A \u003ccode\u003eThreadLocalRandom\u003c/code\u003e should not be shared between threads because that is not thread-safe.\n  The inspection reports instances that are assigned to a field used as a method argument,\n  or assigned to a local variable and used in anonymous or nested classes as they might get shared between threads.\n\u003c/p\u003e\n\u003cp\u003e\n  Usages of \u003ccode\u003eThreadLocalRandom\u003c/code\u003e should typically look like \u003ccode\u003eThreadLocalRandom.current().nextInt(...)\u003c/code\u003e\n  (or \u003ccode\u003enextDouble(...)\u003c/code\u003e etc.).\n  When all usages are in this form, \u003ccode\u003eThreadLocalRandom\u003c/code\u003e instances cannot be used accidentally by multiple threads.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    class Main {\n      void printRandomNumbersAsync() {\n        ThreadLocalRandom random \u003d ThreadLocalRandom.current();\n        CompletableFuture.supplyAsync(() -\u0026gt; generateNumbers(random))\n          .thenAccept(numbers -\u0026gt; System.out.println(Arrays.toString(numbers)));\n      }\n\n      private int[] generateNumbers(Random random) {\n        return random.ints(1000, 0, 100).toArray();\n      }\n    }\n  \u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the options to list methods that are safe to be passed to \u003ccode\u003eThreadLocalRandom\u003c/code\u003e instances as an argument.\n  It\u0027s possible to use regular expressions for method names.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "LocalVariableName",
          "displayName": "Local variable naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables that do not follow the naming conventions.\n\u003cp\u003eYou can specify the required pattern in the inspection options.\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#function-names\"\u003eRecommended naming conventions\u003c/a\u003e: it has to start with a lowercase letter, use camel case and no underscores.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun fibonacciNumber(index: Int): Long \u003d when(index) {\n      0 -\u003e 0\n      else -\u003e {\n          // does not follow naming conventions: contains underscore symbol (`_`)\n          var number_one: Long \u003d 0\n          // does not follow naming conventions: starts with an uppercase letter\n          var NUMBER_TWO: Long \u003d 1\n          // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n          var numberThree: Long \u003d number_one + NUMBER_TWO\n\n          for(currentIndex in 2..index) {\n              numberThree \u003d number_one + NUMBER_TWO\n              number_one \u003d NUMBER_TWO\n              NUMBER_TWO \u003d numberThree\n          }\n          numberThree\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FunctionName",
          "displayName": "Function naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports function names that do not follow the recommended naming conventions.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun Foo() {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the problem change the name of the function to match the recommended naming conventions.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassName",
          "displayName": "Class naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports class names that do not follow the recommended naming conventions.\n\u003cp\u003e\n    Consistent naming allows for easier code reading and understanding.\n    According to the \u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#naming-rules\"\u003eKotlin official style guide\u003c/a\u003e,\n    class names should start with an uppercase letter and use camel case.\n\u003c/p\u003e\n\u003cp\u003eIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class user(val name: String)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix renames the class according to the Kotlin naming conventions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class User(val name: String)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PackageName",
          "displayName": "Package naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports package names that do not follow the naming conventions.\n\u003cp\u003eYou can specify the required pattern in the inspection options.\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#naming-rules\"\u003eRecommended naming conventions\u003c/a\u003e: names of packages are always lowercase and should not contain underscores.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003ccode\u003eorg.example.project\u003c/code\u003e\n\u003cp\u003eUsing multi-word names is generally discouraged, but if you do need to use multiple words, you can either just concatenate them together or use camel case\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003ccode\u003eorg.example.myProject\u003c/code\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PrivatePropertyName",
          "displayName": "Private property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports private property names that do not follow the recommended naming conventions.\u003c/p\u003e\n\u003cp\u003e\n    Consistent naming allows for easier code reading and understanding.\n    According to the \u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#naming-rules\"\u003eKotlin official style guide\u003c/a\u003e,\n    private property names should start with a lowercase letter and use camel case.\n    Optionally, underscore prefix is allowed but only for \u003cb\u003eprivate\u003c/b\u003e properties.\n\u003c/p\u003e\n\u003cp\u003eIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val _My_Cool_Property \u003d \"\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix renames the class according to the Kotlin naming conventions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val _myCoolProperty \u003d \"\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TestFunctionName",
          "displayName": "Test function naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports test function names that do not follow the \u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#names-for-test-methods\"\u003erecommended naming conventions\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PropertyName",
          "displayName": "Property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports property names that do not follow the recommended naming conventions.\u003c/p\u003e\n\u003cp\u003e\n    Consistent naming allows for easier code reading and understanding.\n    According to the \u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#naming-rules\"\u003eKotlin official style guide\u003c/a\u003e,\n    property names should start with a lowercase letter and use camel case.\n\u003c/p\u003e\n\u003cp\u003eIt is possible to introduce other naming rules by changing the \"Pattern\" regular expression.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val My_Cool_Property \u003d \"\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix renames the class according to the Kotlin naming conventions:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val myCoolProperty \u003d \"\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstPropertyName",
          "displayName": "Const property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003econst\u003c/code\u003e property names that do not follow the recommended naming conventions.\n\u003cp\u003e\n    Consistent naming allows for easier code reading and understanding.\n    According to the \u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#property-names\"\u003eKotlin official style guide\u003c/a\u003e,\n    \u003ccode\u003econst\u003c/code\u003e properties should use uppercase underscore-separated names.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  const val Planck: Double \u003d 6.62607015E-34\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix renames the property:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  const val PLANCK: Double \u003d 6.62607015E-34\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObjectPrivatePropertyName",
          "displayName": "Object private property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports properties that do not follow the naming conventions.\n\u003cp\u003eThe following properties are reported:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003ePrivate properties in objects and companion objects\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can specify the required pattern in the inspection options.\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#naming-rules\"\u003eRecommended naming conventions\u003c/a\u003e: it has to start with an underscore or an uppercase letter, use camel case.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Person {\n    companion object {\n      // property in companion object\n      private val NO_NAME \u003d Person()\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EnumEntryName",
          "displayName": "Enum entry naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports enum entry names that do not follow the recommended naming conventions.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum class Foo {\n    _Foo,\n    foo\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the problem rename enum entries to match the recommended naming conventions.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObjectPropertyName",
          "displayName": "Object property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports properties that do not follow the naming conventions.\n\u003cp\u003eThe following properties are reported:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003eTop-level properties\u003c/li\u003e\n    \u003cli\u003eProperties in objects and companion objects\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can specify the required pattern in the inspection options.\u003c/p\u003e\n\u003cp\u003e\u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#naming-rules\"\u003eRecommended naming conventions\u003c/a\u003e: it has to start with an uppercase letter, use camel case and no underscores.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // top-level property\n  val USER_NAME_FIELD \u003d \"UserName\"\n  // top-level property holding reference to singleton object\n  val PersonComparator: Comparator\u0026lt;Person\u0026gt; \u003d /*...*/\n\n  class Person {\n    companion object {\n      // property in companion object\n      val NO_NAME \u003d Person()\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InconsistentCommentForJavaParameter",
          "displayName": "Inconsistent comment for Java parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports inconsistent parameter names for \u003cb\u003eJava\u003c/b\u003e method calls specified in a comment block.\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Java\n  public class JavaService {\n      public void invoke(String command) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Kotlin\n  fun main() {\n      JavaService().invoke(/* name \u003d */ \"fix\")\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix corrects the parameter name in the comment block:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      JavaService().invoke(/* command \u003d */ \"fix\")\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Hibernate",
      "inspections": [
        {
          "shortName": "HibernateMappingDomInspection",
          "displayName": "Invalid Hibernate XML mappings",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.hibernate",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports Hibernate XML configuration mapping errors including:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eReferences to non-instantiable classes\u003c/li\u003e\n  \u003cli\u003eReferences to classes that do not extend the required class\u003c/li\u003e\n  \u003cli\u003eReferences to classes with inappropriate scope\u003c/li\u003e\n  \u003cli\u003eEmpty tag and attribute values\u003c/li\u003e\n  \u003cli\u003eTag and attribute values that do not match the required pattern (for example, Java Identifiers)\u003c/li\u003e\n  \u003cli\u003eTags that do not include the required children tags or attributes\u003c/li\u003e\n  \u003cli\u003eTags that define objects with duplicate names\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HibernateConfigDomFacetInspection",
          "displayName": "Hibernate configuration XML is not added to facet",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.hibernate",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports missing Hibernate XML configuration files.\u003c/p\u003e\n\u003cp\u003eThe quick-fix creates a facet if necessary and adds a configuration file to it.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HibernateConfigDomInspection",
          "displayName": "Invalid Hibernate XML configuration",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.hibernate",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports Hibernate XML configuration errors including:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eReferences to non-instantiable classes\u003c/li\u003e\n  \u003cli\u003eReferences to classes that do not extend the required class\u003c/li\u003e\n  \u003cli\u003eReferences to classes with inappropriate scope\u003c/li\u003e\n  \u003cli\u003eEmpty tag and attribute values\u003c/li\u003e\n  \u003cli\u003eTag and attribute values that do not match the required pattern (for example, Java Identifiers)\u003c/li\u003e\n  \u003cli\u003eTags that do not include the required children tags or attributes\u003c/li\u003e\n  \u003cli\u003eTags that define objects with duplicate names\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CriteriaApiResolveInspection",
          "displayName": "Hibernate Criteria API unrecognized property",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.hibernate",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unrecognized properties in Hibernate Criteria API usages\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HibernateMappingDatasourceDomInspection",
          "displayName": "Invalid Hibernate DB-related XML mappings",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.hibernate",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports Hibernate XML configuration DB-related mapping errors including:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eReferences to unrecognized catalogs/schemas/tables\u003c/li\u003e\n  \u003cli\u003eReferences to unrecognized columns\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Class metrics",
      "inspections": [
        {
          "shortName": "AnonymousClassComplexity",
          "displayName": "Overly complex anonymous class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports anonymous inner classes whose total complexity exceeds the specified maximum.\n\u003cp\u003eThe total complexity of a class is the sum of cyclomatic complexities of all the methods\n  and initializers the class declares. Inherited methods and initializers are not counted\n  toward the total complexity.\u003c/p\u003e\n\u003cp\u003eAnonymous classes should have very low complexity otherwise they are hard to understand and should be promoted to become named inner classes.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eCyclomatic complexity limit\u003c/b\u003e field to specify the maximum allowed complexity for a class.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AnonymousClassMethodCount",
          "displayName": "Anonymous inner class with too many methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports anonymous inner classes whose method count exceeds the specified maximum.\n\u003cp\u003eAnonymous classes with numerous methods may be\n  difficult to understand and should be promoted to become named inner classes.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eMethod count limit\u003c/b\u003e field to specify the maximum allowed number of methods in an anonymous inner class.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassNestingDepth",
          "displayName": "Inner class too deeply nested",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes whose number of nested inner classes exceeds the specified maximum.\n\u003cp\u003eNesting inner classes inside other inner classes is confusing and indicates that a refactoring may be necessary.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eNesting limit\u003c/b\u003e field to specify the maximum allowed nesting depth for a class.\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassCoupling",
          "displayName": "Overly coupled class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that reference too many other classes.\n\u003cp\u003eClasses with too high coupling can be very fragile, and should probably be split into smaller classes.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eClass coupling limit\u003c/b\u003e field to specify the maximum allowed coupling for a class.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eInclude couplings to java system classes\u003c/b\u003e option to specify whether references to system classes\n    (those in the \u003ccode\u003ejava.\u003c/code\u003eor \u003ccode\u003ejavax.\u003c/code\u003e packages) should be counted.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eInclude couplings to library classes\u003c/b\u003e option to specify whether references to any library classes should be counted.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassComplexity",
          "displayName": "Overly complex class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes whose total complexity exceeds the specified maximum.\n\u003cp\u003eThe total complexity of a class is the sum of cyclomatic complexities of all the methods\n  and initializers the class declares. Inherited methods and initializers are not counted\n  toward the total complexity.\u003c/p\u003e\n\u003cp\u003eToo high complexity indicates that the class should be refactored into several smaller classes.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eCyclomatic complexity limit\u003c/b\u003e field below to specify the maximum allowed complexity for a class.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodCount",
          "displayName": "Class with too many methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes whose number of methods exceeds the specified maximum.\n\u003cp\u003eClasses with too many methods are often trying to \u0027do too much\u0027. Consider splitting such a class into multiple smaller classes.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eMethod count limit\u003c/b\u003e field to specify the maximum allowed number of methods in a class.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore simple getter and setter methods\u003c/b\u003e option to ignore simple getters and setters in method count.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore methods overriding/implementing a super method\u003c/b\u003e to ignore methods that override or implement a method\n    from a superclass.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstructorCount",
          "displayName": "Class with too many constructors",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes whose number of constructors exceeds the specified maximum.\n\u003cp\u003eClasses with too many constructors are prone to initialization errors, and often modeling such a class as multiple subclasses is preferable.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eConstructor count limit\u003c/b\u003e field to specify the maximum allowed number of constructors in a class.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore deprecated constructors\u003c/b\u003e option to avoid adding deprecated constructors to the total count.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassInheritanceDepth",
          "displayName": "Class too deep in inheritance tree",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that are too deep in the inheritance hierarchy.\n\u003cp\u003eClasses that are too deeply inherited may be confusing and indicate that a refactoring is necessary.\u003c/p\u003e\n\u003cp\u003eAll superclasses from a library are treated as a single superclass, libraries are considered unmodifiable.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eInheritance depth limit\u003c/b\u003e field to specify the maximum inheritance depth for a class.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FieldCount",
          "displayName": "Class with too many fields",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes whose number of fields exceeds the specified maximum.\n\u003cp\u003eClasses with a large number of fields are often trying to do too much. Consider splitting such a class into multiple smaller classes.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eField count limit\u003c/b\u003e field to specify the maximum allowed number of fields in a class.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eInclude constant fields in count\u003c/b\u003e option to indicate whether constant fields should be counted.\u003c/li\u003e\n  \u003cli\u003eBy default only immutable \u003ccode\u003estatic final\u003c/code\u003e objects are counted as constants. Use the \u003cb\u003e\u0027static final\u0027 fields count as constant\u003c/b\u003e option\n    to count any \u003ccode\u003estatic final\u003c/code\u003e field as constant.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eInclude enum constants in count\u003c/b\u003e option to specify whether \u003ccode\u003eenum\u003c/code\u003e constants in \u003ccode\u003eenum\u003c/code\u003e classes\n    should be counted.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "NegatedIfElse",
          "displayName": "\u0027if\u0027 statement with negated condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements\nthat contain \u003ccode\u003eelse\u003c/code\u003e branches and whose conditions are negated.\n\u003cp\u003eFlipping the order of the \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e\n  branches usually increases the clarity of such statements.\u003c/p\u003e\n\u003cp\u003eThere is a fix that inverts the current \u003ccode\u003eif\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    void m(Object o1, Object o2) {\n        if (o1 !\u003d o2) {\n            System.out.println(1);\n        }\n        else {\n            System.out.println(2);\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter applying the quick-fix:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    void m(Object o1, Object o2) {\n        if (o1 \u003d\u003d o2) {\n            System.out.println(2);\n        } else {\n            System.out.println(1);\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore \u0027!\u003d null\u0027 comparisons\u003c/b\u003e option to ignore comparisons of the \u003ccode\u003e!\u003d null\u003c/code\u003e form.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore \u0027!\u003d 0\u0027 comparisons\u003c/b\u003e option to ignore comparisons of the \u003ccode\u003e!\u003d 0\u003c/code\u003e form.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IfStatementWithTooManyBranches",
          "displayName": "\u0027if\u0027 statement with too many branches",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements with too many branches.\n\u003cp\u003eSuch statements may be confusing and are often a sign of inadequate levels of design\n  abstraction.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eMaximum number of branches\u003c/b\u003e field to specify the maximum number of branches an \u003ccode\u003eif\u003c/code\u003e statement is allowed to have.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ContinueStatementWithLabel",
          "displayName": "\u0027continue\u0027 statement with label",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003econtinue\u003c/code\u003e statements with labels.\n\u003cp\u003eLabeled \u003ccode\u003econtinue\u003c/code\u003e statements complicate refactoring and can be confusing.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void handle(List\u0026lt;String\u0026gt; strs) {\n    outer:\n    for (String s: strs) {\n      for (char ch : s.toCharArray()) {\n        if (\u0027s\u0027 \u003d\u003d ch) continue outer;\n        handleChar(ch);\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NegatedEqualityExpression",
          "displayName": "Negated equality expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports equality expressions which are negated by a prefix expression.\n\u003cp\u003eSuch expressions can be simplified using the \u003ccode\u003e!\u003d\u003c/code\u003e operator.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  !(i \u003d\u003d 1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  i !\u003d 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SwitchStatementDensity",
          "displayName": "\u0027switch\u0027 statement with too low of a branch density",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eswitch\u003c/code\u003e statements or expressions\nwith a too low ratio of switch labels to executable statements.\n\u003cp\u003eSuch \u003ccode\u003eswitch\u003c/code\u003e statements\nmay be confusing and should probably be refactored.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    switch (i) { // one case and 5 executable statements -\u003e 20% density\n        case 1:\n            System.out.println(\"1\");\n            System.out.println(\"2\");\n            System.out.println(\"3\");\n            System.out.println(\"4\");\n            System.out.println(\"5\");\n            break;\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003cp\u003eUse the \u003cb\u003eMinimum density of branches\u003c/b\u003e field to specify the allowed ratio of the switch labels to executable statements.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifiableBooleanExpression",
          "displayName": "Simplifiable boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports boolean expressions that can be simplified.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(boolean foo, boolean bar) {\n    boolean b \u003d !(foo ^ bar);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(boolean foo, boolean bar) {\n    boolean b \u003d foo \u003d\u003d bar;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(boolean foo, boolean bar) {\n    boolean b \u003d (foo \u0026\u0026 bar) || !foo;\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(boolean foo, boolean bar) {\n    boolean b \u003d !foo || bar;\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LoopConditionNotUpdatedInsideLoop",
          "displayName": "Loop variable not updated inside loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any variables and parameters that are used in a loop condition\nand are not updated inside the loop.\n\u003cp\u003eSuch variables and parameters are usually used by mistake as they\n  may cause an infinite loop if they are executed.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void loopDoesNotLoop(boolean b) {\n    while (b) {\n      System.out.println();\n      break;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore possible non-local changes\u003c/b\u003e option to disable this inspection\n  if the condition can be updated indirectly (e.g. via the called method or concurrently from another thread).\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ContinueStatement",
          "displayName": "\u0027continue\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003econtinue\u003c/code\u003e statements.\n\u003cp\u003e\u003ccode\u003econtinue\u003c/code\u003e statements complicate refactoring and can be confusing.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(List\u0026lt;String\u0026gt; strs) {\n    for (String str : strs) {\n      if (str.contains(\"skip\")) continue;\n      handleStr(str);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SwitchExpressionCanBePushedDown",
          "displayName": "Common subexpression can be extracted from \u0027switch\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports switch expressions and statements where every branch has a common subexpression, and the \u003ccode\u003eswitch\u003c/code\u003e can be moved inside.\nThis action shortens the code. In many cases, it\u0027s reasonable to extract the resulting switch expression to a separate variable or\nmethod.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  switch (value) {\n    case 0 -\u003e System.out.println(\"zero\");\n    case 1 -\u003e System.out.println(\"one\");\n    case 2, 3, 4 -\u003e System.out.println(\"few\");\n    default -\u003e System.out.println(\"many\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println(switch (value) {\n    case 0 -\u003e \"zero\";\n    case 1 -\u003e \"one\";\n    case 2, 3, 4 -\u003e \"few\";\n    default -\u003e \"many\";\n  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  This inspection is applicable only for enhanced switches with arrow syntax.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FallthruInSwitchStatement",
          "displayName": "Fallthrough in \u0027switch\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u0027fall-through\u0027 in a \u003ccode\u003eswitch\u003c/code\u003e statement.\n\u003cp\u003eFall-through occurs when a series of executable statements after a \u003ccode\u003ecase\u003c/code\u003e label is not guaranteed\nto transfer control before the next \u003ccode\u003ecase\u003c/code\u003e label. For example, this can happen if the branch is missing a \u003ccode\u003ebreak\u003c/code\u003e statement.\nIn that case, control falls through to the statements after\nthat \u003ccode\u003eswitch\u003c/code\u003e label, even though the \u003ccode\u003eswitch\u003c/code\u003e expression is not equal to\n  the value of the fallen-through label. While occasionally intended, this construction is confusing and is often the result of a typo.\u003c/p\u003e\n\u003cp\u003e\nThis inspection ignores any fall-through commented with a text matching the regex pattern \u003ccode\u003e(?i)falls?\\s*thro?u\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003eThere is a fix that adds a \u003ccode\u003ebreak\u003c/code\u003e to the branch that can fall through to the next branch.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    switch(x) {\n      case (4):\n          if (condition) {\n              System.out.println(\"3\");\n              // no break here\n          } else {\n              break;\n          }\n      case (6):\n          System.out.println(\"4\");\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    switch(x) {\n        case (4):\n            if (condition) {\n                System.out.println(\"3\");\n            } else {\n                break;\n            }\n            break;\n        case (6):\n            System.out.println(\"4\");\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantConditionalExpression",
          "displayName": "Constant conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditional expressions in which the condition is either a \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e constant.\nThese expressions sometimes occur as a result of automatic refactorings and may be simplified.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  return true ? \"Yes\" : \"No\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  return \"Yes\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SwitchStatement",
          "displayName": "\u0027switch\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eswitch\u003c/code\u003e statements.\n\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e statements often (but not always) indicate a poor object-oriented design.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  switch (i) {\n    // code\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DoubleNegation",
          "displayName": "Double negation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports double negations that can be simplified.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (!!functionCall()) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (functionCall()) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (!(a !\u003d b)) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (a \u003d\u003d b) {}\n\u003c/code\u003e\u003c/pre\u003e\n  \u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConditionalBreakInInfiniteLoop",
          "displayName": "Conditional break inside loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditional breaks at the beginning or at the end of a loop and suggests adding a loop condition instead to shorten the code.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003ewhile\u003c/b\u003e (true) {\n    \u003cb\u003eif\u003c/b\u003e (i  \u003d\u003d 23) \u003cb\u003ebreak\u003c/b\u003e;\n    i++;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003ewhile\u003c/b\u003e (i !\u003d 23) {\n    i++;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestedSwitchStatement",
          "displayName": "Nested \u0027switch\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports nested \u003ccode\u003eswitch\u003c/code\u003e statements or expressions.\n\u003cp\u003eNested \u003ccode\u003eswitch\u003c/code\u003e statements\nmay result in extremely confusing code. These statements may be extracted to a separate method.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int res \u003d switch (i) {\n            case 0 -\u003e 0;\n            default -\u003e switch (i) {\n                case 100 -\u003e 0;\n                default -\u003e i;\n            };\n        };\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DuplicateCondition",
          "displayName": "Duplicate condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicate conditions in \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e expressions\nand branches of \u003ccode\u003eif\u003c/code\u003e statements.\nWhile sometimes duplicate conditions are intended, in most cases they the result of an oversight.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean result \u003d digit1 !\u003d digit2 || digit1 !\u003d digit2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  To ignore conditions that may produce side effects, use the \u003cb\u003eIgnore conditions with side effects\u003c/b\u003e option.\nDisabling this option may lead to false-positives, for example, when the same method returns different values on subsequent invocations.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (iterator.next() !\u003d null || iterator.next() !\u003d null) {\n    System.out.println(\"Got it\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDue to possible side effects of \u003ccode\u003eiterator.next()\u003c/code\u003e (on the example), the warning will only be\n  triggered if the \u003cb\u003eIgnore conditions with side effects\u003c/b\u003e option is disabled.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConditionalExpressionWithIdenticalBranches",
          "displayName": "Conditional expression with identical branches",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditional expressions with identical \u003ccode\u003ethen\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e branches.\n\u003cp\u003eSuch expressions almost certainly indicate bugs. The inspection provides a fix that collapses conditional expressions.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int y \u003d x \u003d\u003d 10 ? 4 : 4;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int y \u003d 4;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConfusingElse",
          "displayName": "Redundant \u0027else\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant \u003ccode\u003eelse\u003c/code\u003e keywords in \u003ccode\u003eif\u003c/code\u003e\u0026mdash;\u003ccode\u003eelse\u003c/code\u003e statements and statement chains.\n\u003cp\u003e\nThe \u003ccode\u003eelse\u003c/code\u003e keyword is redundant when all previous branches end with a\n\u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ethrow\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e, or \u003ccode\u003econtinue\u003c/code\u003e statement. In this case,\nthe statements from the \u003ccode\u003eelse\u003c/code\u003e branch can be placed after the \u003ccode\u003eif\u003c/code\u003e statement, and the\n\u003ccode\u003eelse\u003c/code\u003e keyword can be removed.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (name \u003d\u003d null) {\n      throw new IllegalArgumentException();\n  } else {\n      System.out.println(name);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (name \u003d\u003d null) {\n      throw new IllegalArgumentException();\n  }\n  System.out.println(name);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eDisable the \u003cb\u003eReport when there are no more statements after the \u0027if\u0027 statement\u003c/b\u003e option to ignore cases where the \u003ccode\u003eif\u003c/code\u003e\u0026mdash;\u003ccode\u003eelse\u003c/code\u003e statement is the last statement in a code block.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InfiniteLoopStatement",
          "displayName": "Infinite loop statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e,\nor \u003ccode\u003edo\u003c/code\u003e statements that\ncan only exit by throwing an exception. While such statements may be correct, they\noften happen due to coding errors.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (;;) {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore when placed in Thread.run\u003c/b\u003e option to ignore the\n  infinite loop statements inside \u003ccode\u003eThread.run\u003c/code\u003e.\nIt may be useful for the daemon threads.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  new Thread(() -\u0026gt; {\n    while (true) {\n    }\n  }).start();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SwitchStatementWithConfusingDeclaration",
          "displayName": "Local variable used and declared in different \u0027switch\u0027 branches",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables declared in one branch of a \u003ccode\u003eswitch\u003c/code\u003e statement\nand used in another branch. Such declarations can be extremely confusing.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    switch(i) {\n      case 2:\n          int x \u003d 0;\n          break;\n      case 3:\n          x \u003d 3;\n          System.out.println(x);\n          break;\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PointlessNullCheck",
          "displayName": "Unnecessary \u0027null\u0027 check before method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003enull\u003c/code\u003e checks followed by a method call that will definitely return\n\u003ccode\u003efalse\u003c/code\u003e when \u003ccode\u003enull\u003c/code\u003e is passed (e.g. \u003ccode\u003eClass.isInstance\u003c/code\u003e).\n\u003cp\u003eSuch a check seems excessive as the method call will always return \u003ccode\u003efalse\u003c/code\u003e in this case.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (x !\u003d null \u0026\u0026 myClass.isInstance(x)) { ... }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (myClass.isInstance(x)) { ... }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "IfCanBeAssertion",
          "displayName": "Statement can be replaced with \u0027assert\u0027 or \u0027Objects.requireNonNull\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements that throw only \u003ccode\u003ejava.lang.Throwable\u003c/code\u003e from a \u003ccode\u003ethen\u003c/code\u003e branch\nand do not have an \u003ccode\u003eelse\u003c/code\u003e branch. Such statements can be converted to more compact \u003ccode\u003eassert\u003c/code\u003e statements.\n\u003cp\u003e\nThe inspection also reports Guava\u0027s \u003ccode\u003ePreconditions.checkNotNull()\u003c/code\u003e.\n  They can be replaced with a \u003ccode\u003eObjects.requireNonNull()\u003c/code\u003e call for which a library may not be needed.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eif\u003c/b\u003e (x \u003d\u003d 2) \u003cb\u003ethrow new\u003c/b\u003e RuntimeException(\"fail\");\n  \u003cb\u003eif\u003c/b\u003e (y \u003d\u003d null) \u003cb\u003ethrow new\u003c/b\u003e AssertionError();\n  Preconditions.checkNotNull(z, \"z\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eassert\u003c/b\u003e x !\u003d 2 : \"fail\";\n  Objects.requireNonNull(y);\n  Objects.requireNonNull(z, \"z\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eBy default, this inspection provides a quick-fix in the editor without code highlighting.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SwitchStatementWithTooManyBranches",
          "displayName": "Maximum \u0027switch\u0027 branches",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eswitch\u003c/code\u003e statements or expressions with too many \u003ccode\u003ecase\u003c/code\u003e labels.\n\u003cp\u003eSuch a long switch statement may be confusing and should probably be refactored.\n  Sometimes, it is not a problem (for example, a domain is very complicated and has enums with a lot of constants).\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    switch (x) {\n        case 1 -\u003e {}\n        case 2 -\u003e {}\n        case 3 -\u003e {}\n        case 4 -\u003e {}\n        case 5 -\u003e {}\n        case 6 -\u003e {}\n        case 7 -\u003e {}\n        case 8 -\u003e {}\n        case 9 -\u003e {}\n        case 10 -\u003e {}\n        case 11,12,13 -\u003e {}\n        default -\u003e {}\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eMaximum number of branches\u003c/b\u003e field to specify the maximum number of \u003ccode\u003ecase\u003c/code\u003e labels expected.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ForLoopReplaceableByWhile",
          "displayName": "\u0027for\u0027 loop may be replaced by \u0027while\u0027 loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efor\u003c/code\u003e loops that contain neither initialization nor update components, and suggests converting them to \u003ccode\u003ewhile\u003c/code\u003e\nloops. This makes the code easier to read.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for(; exitCondition(); ) {\n    process();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  while(exitCondition()) {\n    process();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix is also available for other \u003ccode\u003efor\u003c/code\u003e loops, so you can replace any \u003ccode\u003efor\u003c/code\u003e loop with a\n  \u003ccode\u003ewhile\u003c/code\u003e loop.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore \u0027infinite\u0027 for loops without conditions\u003c/b\u003e option if you want to ignore \u003ccode\u003efor\u003c/code\u003e\n  loops with trivial or non-existent conditions.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LoopWithImplicitTerminationCondition",
          "displayName": "Loop with implicit termination condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any \u003ccode\u003ewhile\u003c/code\u003e,\n\u003ccode\u003edo-while\u003c/code\u003e, and \u003ccode\u003efor\u003c/code\u003e\nloops that have the \u003ccode\u003etrue\u003c/code\u003e constant as their\nonly condition. At the same time, such loops can be still terminated by a containing\n\u003ccode\u003eif\u003c/code\u003e statement which can break out of the loop.\n\u003cp\u003eSuch an \u003ccode\u003eif\u003c/code\u003e statement must be the first or the only statement\nin a \u003ccode\u003ewhile\u003c/code\u003e or \u003ccode\u003efor\u003c/code\u003e\nloop and the last or the only statement in a \u003ccode\u003edo-while\u003c/code\u003e loop.\u003c/p\u003e\n\n\u003cp\u003eRemoving the \u003ccode\u003eif\u003c/code\u003e statement and making its condition an explicit\n  loop condition simplifies the loop.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TrivialIf",
          "displayName": "Redundant \u0027if\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements that can be simplified to a single assignment,\n\u003ccode\u003ereturn\u003c/code\u003e, or \u003ccode\u003eassert\u003c/code\u003e statement.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (foo()) {\n    return true;\n  } else {\n    return false;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  return foo();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore chained \u0027if\u0027 statements \u003c/b\u003e option if want to hide a warning for chained \u003ccode\u003eif\u003c/code\u003e statements.\u003c/p\u003e\n\u003cp\u003eFor example, in the following code the warning will be hidden, but the quick-fix will still be available:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (condition1) return true;\n  if (condition2) return false;\n  return true;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that replacing \u003ccode\u003eif (isTrue()) assert false;\u003c/code\u003e with \u003ccode\u003eassert isTrue();\u003c/code\u003e may change the program semantics\n  when asserts are disabled if condition has side effects.\n  Use the \u003cb\u003eIgnore \u0027if\u0027 statements with trivial \u0027assert\u0027\u003c/b\u003e option if you want to hide a warning for \u003ccode\u003eif\u003c/code\u003e statements\n  containing only \u003ccode\u003eassert\u003c/code\u003e statement in their bodies.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConditionalExpression",
          "displayName": "Conditional expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of the ternary condition operator and suggests converting them to \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e statements.\n\u003cp\u003eSome code standards prohibit the use of the condition operator.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Object result \u003d (condition) ? foo() : bar();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Object result;\n  if (condition) {\n    comp \u003d foo();\n  }\n  else {\n    comp \u003d bar();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore for simple assignments and returns \u003c/b\u003e option to ignore simple assignments and returns and allow the following constructs:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d (foo \u003d\u003d null) ? \"\" : foo.toString();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore places where an if statement is not possible \u003c/b\u003e option to ignore conditional expressions in contexts in which automatic\n  replacement with an if statement is not possible (for example, when the conditional expression is used as an argument to a\n  \u003ccode\u003esuper()\u003c/code\u003e constructor call).\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SwitchStatementWithTooFewBranches",
          "displayName": "Minimum \u0027switch\u0027 branches",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eswitch\u003c/code\u003e statements and expressions with too few \u003ccode\u003ecase\u003c/code\u003e labels, and suggests rewriting them as \u003ccode\u003eif\u003c/code\u003e\nand \u003ccode\u003eelse if\u003c/code\u003e statements.\n\u003cp\u003eExample (minimum branches \u003d\u003d 3):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  switch (expression) {\n    case \"foo\" -\u0026gt; foo();\n    case \"bar\" -\u0026gt; bar();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (\"foo\".equals(expression)) {\n    foo();\n  } else if (\"bar\".equals(expression)) {\n    bar();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExhaustive switch expressions (Java 14+) or pattern switch statements (Java 17 preview) without the \u0027default\u0027 branch are not reported.\n  That\u0027s because compile-time exhaustiveness check will be lost when the \u003ccode\u003eswitch\u003c/code\u003e is converted to \u003ccode\u003eif\u003c/code\u003e\n  which might be undesired.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eMinimum number of branches\u003c/b\u003e field to specify the minimum expected number of \u003ccode\u003ecase\u003c/code\u003e labels.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eDo not report pattern switch statements\u003c/b\u003e option to avoid reporting switch statements and expressions that\nhave pattern branches. E.g.:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String result \u003d switch(obj) {\n    case String str -\u003e str.trim();\n    default -\u003e \"none\";\n  };\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIt might be preferred to keep the switch even with a single pattern branch, rather than using the \u003ccode\u003einstanceof\u003c/code\u003e statement.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BreakStatementWithLabel",
          "displayName": "\u0027break\u0027 statement with label",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ebreak\u003c/code\u003e statements with labels.\n\u003cp\u003eLabeled \u003ccode\u003ebreak\u003c/code\u003e statements complicate refactoring and can be confusing.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void handle(List\u0026lt;String\u0026gt; strs) {\n    outer:\n    for (String s: strs) {\n      for (char ch : s.toCharArray()) {\n        if (\u0027s\u0027 \u003d\u003d ch) break outer;\n        handleChar(ch);\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssertionCanBeIf",
          "displayName": "Assertion can be replaced with \u0027if\u0027 statement",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eassert\u003c/code\u003e statements and suggests replacing them with\n\u003ccode\u003eif\u003c/code\u003e statements that throw \u003ccode\u003ejava.lang.AssertionError\u003c/code\u003e.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  assert param !\u003d null;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (param \u003d\u003d null) throw new AssertionError();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ForLoopWithMissingComponent",
          "displayName": "\u0027for\u0027 loop with missing components",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efor\u003c/code\u003e loops\nthat lack initialization, condition, or update clauses. Some coding styles prohibit such loops.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (int i \u003d 0;;i++) {\n    // body\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore collection iterations\u003c/b\u003e option to ignore loops which use an iterator.\nThis is a standard way to iterate over a collection in which the \u003ccode\u003efor\u003c/code\u003e loop does not have an update clause.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifiableConditionalExpression",
          "displayName": "Simplifiable conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditional expressions and suggests simplifying them.\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econdition ? true : foo \u0026rarr; condition || foo\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econdition ? false : foo \u0026rarr; !condition \u0026\u0026 foo\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econdition ? foo : !foo \u0026rarr; condition \u003d\u003d foo\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003econdition ? true : false \u0026rarr; condition\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003ea \u003d\u003d b ? b : a \u0026rarr; a\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eresult !\u003d null ? result : null \u0026rarr; result\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NegatedConditional",
          "displayName": "Conditional expression with negated condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditional expressions whose conditions are negated.\n\u003cp\u003eFlipping the order of the conditional expression branches usually increases the clarity of such statements.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore \u0027!\u003d null\u0027 comparisons\u003c/b\u003e and \u003cb\u003eIgnore \u0027!\u003d 0\u0027 comparisons\u003c/b\u003e options to ignore comparisons of the form\n  \u003ccode\u003eobj !\u003d null\u003c/code\u003e or \u003ccode\u003enum !\u003d 0\u003c/code\u003e.\n  Since \u003ccode\u003eobj !\u003d null\u003c/code\u003e effectively means \"obj exists\",\n  the meaning of the whole expression does not involve any negation\n  and is therefore easy to understand.\n\u003cp\u003e\n  The same reasoning applies to \u003ccode\u003enum !\u003d 0\u003c/code\u003e expressions, especially when using bit masks.\n\u003cp\u003e\n  These forms have the added benefit of mentioning the interesting case first.\n  In most cases, the value for the \u003ccode\u003e\u003d\u003d null\u003c/code\u003e branch is \u003ccode\u003enull\u003c/code\u003e itself,\n  like in the following examples:\n\n\u003cpre\u003e\u003ccode\u003e\n    static String getName(Person p) {\n        return p !\u003d null ? p.getName() : null;\n    }\n\n    static String getExecutableString(int fileMode) {\n        return (fileMode \u0026 0b001001001) !\u003d 0 ? \"executable\" : \"non-executable\";\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestedConditionalExpression",
          "displayName": "Nested conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports nested conditional expressions as they\nmay result in extremely confusing code.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int y \u003d a \u003d\u003d 10 ? b \u003d\u003d 20 ? 10 : a : b;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OverlyComplexBooleanExpression",
          "displayName": "Overly complex boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports boolean expressions with too many terms. Such expressions may be confusing and bug-prone.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  cond(x1) \u0026amp;\u0026amp; cond(x2) ^ cond(x3) \u0026amp;\u0026amp; cond(x4);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eMaximum number of terms\u003c/b\u003e field to specify the maximum number of terms allowed in a boolean expression.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore pure conjunctions and disjunctions\u003c/b\u003e option to ignore boolean expressions which use only a single boolean operator repeatedly.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BreakStatement",
          "displayName": "\u0027break\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ebreak\u003c/code\u003e statements that are used in places\nother than at the end of a \u003ccode\u003eswitch\u003c/code\u003e statement branch.\n\u003cp\u003e\u003ccode\u003ebreak\u003c/code\u003e statements complicate refactoring and can be confusing.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nvoid foo(List\u0026lt;String\u0026gt; strs) {\n  for (String str : strs) {\n    if (str.contains(\"stop\")) break;\n    handleStr(str);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EnumSwitchStatementWhichMissesCases",
          "displayName": "Enum \u0027switch\u0027 statement that misses case",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eswitch\u003c/code\u003e statements over enumerated types that are not exhaustive.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eenum\u003c/b\u003e AlphaBetaGamma {\n    A, B, C;\n\n    \u003cb\u003evoid\u003c/b\u003e x(AlphaBetaGamma e) {\n      \u003cb\u003eswitch\u003c/b\u003e (e) {\n\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eenum\u003c/b\u003e AlphaBetaGamma {\n    A, B, C;\n\n    \u003cb\u003evoid\u003c/b\u003e x(AlphaBetaGamma e) {\n      \u003cb\u003eswitch\u003c/b\u003e (e) {\n        \u003cb\u003ecase\u003c/b\u003e A -\u003e {}\n        \u003cb\u003ecase\u003c/b\u003e B -\u003e {}\n        \u003cb\u003ecase\u003c/b\u003e C -\u003e {}\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore switch statements with a default branch \u003c/b\u003e option to ignore \u003ccode\u003eswitch\u003c/code\u003e\n  statements that have a \u003ccode\u003edefault\u003c/code\u003e branch.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LabeledStatement",
          "displayName": "Labeled statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports labeled statements that can complicate refactorings and control flow of the method.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  label:\n  while (true) {\n      // code\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExpressionMayBeFactorized",
          "displayName": "Expression can be factorized",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2021 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports expressions that can be factorized, i.e. reorganized to pull out a common factor.\nThis reduces redundancy and could improve the readability of your code.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a \u0026amp;\u0026amp; b || a \u0026amp;\u0026amp; c\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a \u0026amp;\u0026amp; (b || c)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2021.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "IdempotentLoopBody",
          "displayName": "Idempotent loop body",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports loops whose second and all subsequent iterations do not produce any additional side effects other\nthan the one produced by the first iteration, which can indicate a programming error.\n\u003cp\u003eSuch loops may iterate only zero, one, or infinite number of times.\nIf the infinite number of times case is unreachable, such a loop can be replaced with an \u003ccode\u003eif\u003c/code\u003e statement.\n  Otherwise, there\u0027s a possibility that the program can get stuck.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    public void foo(String baseName, String names) {\n        int suffix \u003d 1;\n        String name \u003d baseName;\n        while (names.contains(name)) {\n            // error: suffix is not updated making loop body idempotent\n            name \u003d baseName + suffix;\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PointlessBooleanExpression",
          "displayName": "Pointless boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary or overly complicated boolean expressions.\n\u003cp\u003eSuch expressions include \u003ccode\u003e\u0026\u0026\u003c/code\u003e-ing with \u003ccode\u003etrue\u003c/code\u003e,\n\u003ccode\u003e||\u003c/code\u003e-ing with \u003ccode\u003efalse\u003c/code\u003e,\n  equality comparison with a boolean literal, or negation of a boolean literal. Such expressions can be simplified.\u003c/p\u003e\n\u003cp\u003eExample:\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eboolean\u003c/b\u003e a \u003d !(x \u0026\u0026 \u003cb\u003efalse\u003c/b\u003e);\n  \u003cb\u003eboolean\u003c/b\u003e b \u003d \u003cb\u003efalse\u003c/b\u003e || x;\n  \u003cb\u003eboolean\u003c/b\u003e c \u003d x !\u003d \u003cb\u003etrue\u003c/b\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eboolean\u003c/b\u003e a \u003d \u003cb\u003etrue\u003c/b\u003e;\n  \u003cb\u003eboolean\u003c/b\u003e b \u003d x;\n  \u003cb\u003eboolean\u003c/b\u003e c \u003d !x;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\nUse the \u003cb\u003eIgnore named constants in determining pointless expressions \u003c/b\u003e option to ignore named constants when determining if an expression is pointless.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PointlessIndexOfComparison",
          "displayName": "Pointless \u0027indexOf()\u0027 comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary comparisons with\n\u003ccode\u003e.indexOf()\u003c/code\u003e expressions. An example of such an expression\nis comparing the result of \u003ccode\u003e.indexOf()\u003c/code\u003e with numbers smaller than -1.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IfStatementWithIdenticalBranches",
          "displayName": "\u0027if\u0027 statement with identical branches",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements in which common parts can be extracted from the branches.\n\u003cp\u003eThese common parts are independent from the condition and make \u003ccode\u003eif\u003c/code\u003e statements harder to understand.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (x \u0026gt; 12) {\n    doSomethingBefore();\n    doSomethingDifferent1();\n    doSomethingAfter();\n  } else {\n    doSomethingBefore();\n    doSomethingDifferent2();\n    doSomethingAfter();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  doSomethingBefore();\n  if (x \u0026gt; 12) {\n    doSomethingDifferent1();\n  } else {\n    doSomethingDifferent2();\n  }\n  doSomethingAfter();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eUpdated in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SwitchStatementsWithoutDefault",
          "displayName": "\u0027switch\u0027 statement without \u0027default\u0027 branch",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eswitch\u003c/code\u003e statements that do not contain \u003ccode\u003edefault\u003c/code\u003e labels.\n\u003cp\u003eAdding the \u003ccode\u003edefault\u003c/code\u003e label guarantees that all possible scenarios are covered, and it becomes\neasier to make assumptions about the current state of the program.\u003c/p\u003e\n\u003cp\u003e\n\u003c!-- tooltip end --\u003e\n  Note that by default, the inspection does not report \u003ccode\u003eswitch\u003c/code\u003e statements if all cases for enums or \u003ccode\u003esealed\u003c/code\u003e classes are covered.\n  Use the \u003cb\u003eIgnore exhaustive switch statements\u003c/b\u003e option if you want to change this behavior.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConditionalCanBePushedInsideExpression",
          "displayName": "Conditional can be pushed inside branch expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditional expressions with \u003ccode\u003ethen\u003c/code\u003e and \u003cc\u003eelse\u003c/c\u003e branches that are similar enough so that the expression can be moved\ninside. This action shortens the code.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  double g(int a, int b) {\n    return a \u003d\u003d b ? Math.cos(0) : Math.cos(1);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  double g(int a, int b) {\n    return Math.cos(a \u003d\u003d b ? 0 : 1);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DefaultNotLastCaseInSwitch",
          "displayName": "\u0027default\u0027 not last case in \u0027switch\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eswitch\u003c/code\u003e statements or expressions in which the \u003ccode\u003edefault\u003c/code\u003e branch\nis positioned before another case.\nSuch a construct is unnecessarily confusing.\nA quick-fix is provided to move the \u003ccode\u003edefault\u003c/code\u003e branch to the last position, if possible.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  switch (n) {\n      default:\n          System.out.println();\n          break;\n      case 1:\n          break;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  switch (n) {\n    case 1:\n        break;\n    default:\n        System.out.println();\n        break;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LoopStatementsThatDontLoop",
          "displayName": "Loop statement that does not loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any instance of \u003ccode\u003efor\u003c/code\u003e,\n\u003ccode\u003ewhile\u003c/code\u003e, and \u003ccode\u003edo\u003c/code\u003e statements whose\nbodies will be executed once at most. Normally, this is an indication of a bug.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore enhanced for loops\u003c/b\u003e option to ignore the foreach loops.\nThey are sometimes used to perform an action only on the first item of an iterable in a compact way.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003efor\u003c/b\u003e (String s : stringIterable) {\n    doSomethingOnFirstString(s);\n    \u003cb\u003ebreak\u003c/b\u003e;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BooleanExpressionMayBeConditional",
          "displayName": "Boolean expression could be replaced with conditional expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any \u003ccode\u003eboolean\u003c/code\u003e expressions which can be formulated in a more compact and, arguably, clear way than by using a conditional expression.\n\u003cp\u003eUse the quick-fix to replace the \u003ccode\u003eboolean\u003c/code\u003e expression by a conditional expression.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a \u0026amp;\u0026amp; b || !a \u0026amp;\u0026amp; c;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a ? b : c;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NegatedConditionalExpression",
          "displayName": "Negated conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditional expressions which are negated with a prefix expression, as\nsuch constructions may be confusing.\n\u003cp\u003eThere is a fix that propagates the outer negation to both branches.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  !(i \u003d\u003d 1 ? a : b)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  i \u003d\u003d 1 ? !a : !b\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Numeric issues",
      "inspections": [
        {
          "shortName": "InsertLiteralUnderscores",
          "displayName": "Unreadable numeric literal",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports long numeric literals without underscores and suggests adding them. Underscores make such literals easier to read.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  1000000\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  1_000_000\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project of module is 7 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnaryPlus",
          "displayName": "Unary plus",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of the \u003ccode\u003e+\u003c/code\u003e unary operator. The unary plus is usually a null operation, and\nits presence might represent a coding error. For example, in a combination with the increment operator (like in \u003ccode\u003e+++\u003c/code\u003e)\nor with the equal operator (like in \u003ccode\u003e\u003d+\u003c/code\u003e).\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void unaryPlus(int i) {\n    int x \u003d + +i;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe following quick fixes are suggested:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cp\u003eRemove \u003ccode\u003e+\u003c/code\u003e operators before the \u003ccode\u003ei\u003c/code\u003e variable:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void unaryPlus(int i) {\n    int x \u003d i;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003cp\u003eReplace \u003ccode\u003e+\u003c/code\u003e operators with the prefix increment operator:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void unaryPlus(int i) {\n    int x \u003d ++i;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the checkbox below to report unary pluses that are used together with a binary or another unary expression.\nIt means the inspection will not report situations when a unary plus expression is used in array\ninitializer expressions or as a method argument.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnpredictableBigDecimalConstructorCall",
          "displayName": "Unpredictable \u0027BigDecimal\u0027 constructor call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eBigDecimal\u003c/code\u003e constructors that accept a \u003ccode\u003edouble\u003c/code\u003e value.\nThese constructors produce \u003ccode\u003eBigDecimal\u003c/code\u003e that is exactly equal to the supplied \u003ccode\u003edouble\u003c/code\u003e value.\nHowever, because doubles are encoded in the IEEE 754 64-bit double-precision binary floating-point format, the exact value can be unexpected.\n\u003cp\u003eFor example, \u003ccode\u003enew BigDecimal(0.1)\u003c/code\u003e yields a \u003ccode\u003eBigDecimal\u003c/code\u003e object. Its value is\n  \u003csmall\u003e\u003ccode\u003e0.1000000000000000055511151231257827021181583404541015625\u003c/code\u003e\u003c/small\u003e\n  which is the nearest number to 0.1 representable as a double.\n  To get \u003ccode\u003eBigDecimal\u003c/code\u003e that stores the same value as written in the source code,\n  use either \u003ccode\u003enew BigDecimal(\"0.1\")\u003c/code\u003e or \u003ccode\u003eBigDecimal.valueOf(0.1)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Constructor {\n    void foo() {\n      new BigDecimal(0.1);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Constructor {\n    void foo() {\n      new BigDecimal(\"0.1\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OctalAndDecimalIntegersMixed",
          "displayName": "Octal and decimal integers in same array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports mixed octal and decimal integer literals in a single array initializer.\nThis situation might happen when you copy a list of numbers into an array initializer.\nSome numbers in the array might be zero-padded and the compiler will interpret them as octal.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint[] elapsed \u003d {1, 13, 052};\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix that removes a leading zero is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint[] elapsed \u003d {1, 13, 52};\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf it is an octal number (for example, after a variable inline), then you can use another quick-fix that converts octal to decimal:\u003c/p\u003e\n\u003ccode\u003eint[] elapsed \u003d {1, 13, 42};\u003c/code\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FloatingPointEquality",
          "displayName": "Floating-point equality comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports floating-point values that are being compared using the \u003ccode\u003e\u003d\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e operator.\n\u003cp\u003eFloating-point values are inherently inaccurate, and comparing them for exact equality is seldom the desired semantics.\u003c/p\u003e\n\u003cp\u003eThis inspection ignores comparisons with zero and infinity literals.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void m(double d1, double d2) {\n    if (d1 \u003d\u003d d2) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NumericOverflow",
          "displayName": "Numeric overflow",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions that overflow during computation.\nUsually, this happens by accident and indicates a bug. For example, a wrong type is used or a shift should be done in an opposite direction .\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  float a \u003d 1.0f/0.0f;\n  long b \u003d 30 * 24 * 60 * 60 * 1000;\n  long c \u003d 1000L \u0026lt;\u0026lt; 62;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PointlessArithmeticExpression",
          "displayName": "Pointless arithmetic expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports pointless arithmetic expressions. Such expressions include adding or subtracting zero,\nmultiplying by zero or one, and division by one.\n\u003cp\u003eSuch expressions may be the result of automated refactorings and they are unlikely to be what the developer intended to do.\u003c/p\u003e\n\u003cp\u003eThe quick-fix simplifies such expressions.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(int a) {\n    int x \u003d a - a;\n    int y \u003d a + 0;\n    int res \u003d x / x;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(int a) {\n    int x \u003d 0;\n    int y \u003d a;\n    int res \u003d 1;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Note that in rare cases, the suggested replacement might not be completely equivalent to the original code\n  for all possible inputs. For example, the inspection suggests replacing \u003ccode\u003ex / x\u003c/code\u003e with \u003ccode\u003e1\u003c/code\u003e.\n  However, if \u003ccode\u003ex\u003c/code\u003e is zero, the original code throws \u003ccode\u003eArithmeticException\u003c/code\u003e or results in \u003ccode\u003eNaN\u003c/code\u003e.\n  Also, if \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003eNaN\u003c/code\u003e, then the result is also \u003ccode\u003eNaN\u003c/code\u003e. It\u0027s very unlikely that such behavior is  intended.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryUnaryMinus",
          "displayName": "Unnecessary unary minus",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary unary minuses. Such expressions might be hard to understand and might contain errors.\n\u003cp\u003e\u003cb\u003eFor example:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evoid unaryMinus(int i) {\n    int x \u003d - -i;\n  }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe following quick fixes are suggested here:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cp\u003eRemove \u003ccode\u003e-\u003c/code\u003e operators before the \u003ccode\u003ei\u003c/code\u003e variable:\u003c/p\u003e\n    \u003cpre\u003e\u003ccode\u003evoid unaryMinus(int i) {\n    int x \u003d i;\n  }\u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n \u003cp\u003eReplace \u003ccode\u003e-\u003c/code\u003e operators with the prefix decrement operator:\u003c/p\u003e\n    \u003cpre\u003e\u003ccode\u003evoid unaryMinus(int i) {\n    int x \u003d --i;\n  }\u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eAnother example:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evoid unaryMinus(int i) {\n    i +\u003d - 8;\n  }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evoid unaryMinus(int i) {\n    i -\u003d 8;\n  }\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ComparisonToNaN",
          "displayName": "Comparison to \u0027Double.NaN\u0027 or \u0027Float.NaN\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any comparisons to \u003ccode\u003eDouble.NaN\u003c/code\u003e or \u003ccode\u003eFloat.NaN\u003c/code\u003e.\nSuch comparisons are never meaningful, as NaN is not equal to anything, including itself.\nUse the \u003ccode\u003eDouble.isNaN()\u003c/code\u003e or \u003ccode\u003eFloat.isNaN()\u003c/code\u003e methods instead.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (x \u003d\u003d Double.NaN) {...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (Double.isNaN(x)) {...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BadOddness",
          "displayName": "Suspicious oddness check",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports odd-even checks of the following form: \u003ccode\u003ex % 2 \u003d\u003d 1\u003c/code\u003e.\nSuch checks fail when used with negative odd values.\nConsider using \u003ccode\u003ex % 2 !\u003d 0\u003c/code\u003e or \u003ccode\u003e(x \u0026 1) \u003d\u003d 1\u003c/code\u003e instead.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantMathCall",
          "displayName": "Constant call to \u0027Math\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.lang.Math\u003c/code\u003e or \u003ccode\u003ejava.lang.StrictMath\u003c/code\u003e methods that can be replaced with simple compile-time constants.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edouble v \u003d Math.sin(0.0);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edouble v \u003d 0.0;\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "IntegerDivisionInFloatingPointContext",
          "displayName": "Integer division in floating-point context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports integer divisions where the result is used as a floating-point number.\nSuch division is often an error and may have unexpected results\ndue to the truncation that happens in integer division.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  float x \u003d 3.0F + 3 * 2 / 5;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  float x \u003d 3.0F + ((float) (3 * 2)) /5;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DivideByZero",
          "displayName": "Division by zero",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports division by zero or remainder by zero.\nSuch expressions will produce an \u003ccode\u003eInfinity\u003c/code\u003e, \u003ccode\u003e-Infinity\u003c/code\u003e or \u003ccode\u003eNaN\u003c/code\u003e result for doubles or floats,\nand will throw an \u003ccode\u003eArithmeticException\u003c/code\u003e for integers.\n\u003cp\u003eWhen the expression has a \u003ccode\u003eNaN\u003c/code\u003e result, the fix suggests replacing the division expression with the \u003ccode\u003eNaN\u003c/code\u003e constant.\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ComparisonOfShortAndChar",
          "displayName": "Comparison of \u0027short\u0027 and \u0027char\u0027 values",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports equality comparisons between \u003ccode\u003eshort\u003c/code\u003e and \u003ccode\u003echar\u003c/code\u003e values.\n\u003cp\u003eSuch comparisons may cause subtle bugs because while both values are 2-byte long, \u003ccode\u003eshort\u003c/code\u003e values are\n  signed, and \u003ccode\u003echar\u003c/code\u003e values are unsigned.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nif (Character.MAX_VALUE \u003d\u003d shortValue()) {} //never can be true\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LongLiteralsEndingWithLowercaseL",
          "displayName": "\u0027long\u0027 literal ending with \u0027l\u0027 instead of \u0027L\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003elong\u003c/code\u003e literals ending with lowercase \u0027l\u0027. These\nliterals may be confusing, as the lowercase \u0027l\u0027 looks very similar to a literal \u00271\u0027 (one).\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  long nights \u003d 100l;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  long nights \u003d 100L;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousLiteralUnderscore",
          "displayName": "Suspicious underscore in number literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports decimal number literals that use the underscore numeric separator with groups where the number of digits is not three.\nSuch literals may contain a typo.\n\u003cp\u003eThis inspection will not warn on literals containing two consecutive underscores.\nIt is also allowed to omit underscores in the fractional part of \u003ccode\u003edouble\u003c/code\u003e and \u003ccode\u003efloat\u003c/code\u003e literals.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e \u003ccode\u003eint oneMillion \u003d 1_000_0000;\u003c/code\u003e\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonReproducibleMathCall",
          "displayName": "Non-reproducible call to \u0027Math\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.lang.Math\u003c/code\u003e methods, which results are not guaranteed to be reproduced precisely.\n\u003cp\u003eIn environments where reproducibility of results is required, \u003ccode\u003ejava.lang.StrictMath\u003c/code\u003e\n  should be used instead.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveLiteralUnderscores",
          "displayName": "Underscores in numeric literal",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports numeric literals with underscores and suggests removing them with a quick-fix.\nThis may be useful if you need to lower the language level.\n\u003cp\u003eThe quick-fix removes underscores from numeric literals. For example \u003ccode\u003e1_000_000\u003c/code\u003e will be converted to \u003ccode\u003e1000000\u003c/code\u003e.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ci\u003eNumeric literals with underscores\u003c/i\u003e appeared in Java 7.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OctalLiteral",
          "displayName": "Octal integer",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports octal integer literals. Some coding standards prohibit the\nuse of octal literals, as they may be easily confused with decimal literals.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int i \u003d 015;\n  int j \u003d 0_777;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis inspection has two different quick-fixes.\n  After the \u003cb\u003eConvert octal literal to decimal literal\u003c/b\u003e quick-fix is applied, the code changes to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int i \u003d 13;\n  int j \u003d 511;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the \u003cb\u003eRemove leading zero to make decimal\u003c/b\u003e quick-fix is applied, the code changes to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int i \u003d 15;\n  int j \u003d 777;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ImplicitNumericConversion",
          "displayName": "Implicit numeric conversion",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports implicit conversion between numeric types.\n\u003cp\u003eImplicit numeric conversion is not a problem in itself but, if unexpected, may cause difficulties when tracing bugs.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  double m(int i) {\n    return i * 10;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  double m(int i) {\n    return (double) (i * 10);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore widening conversions\u003c/b\u003e option to ignore implicit conversion that cannot result in data loss\n    (for example, \u003ccode\u003eint\u003c/code\u003e-\u0026gt;\u003ccode\u003elong\u003c/code\u003e).\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore conversions from and to \u0027char\u0027\u003c/b\u003e option to ignore conversion from and to \u003ccode\u003echar\u003c/code\u003e. The inspection will\n    still report conversion from and to floating-point numbers.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore conversion from constants and literals\u003c/b\u003e to make the inspection ignore conversion from literals and\n    compile-time constants.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConfusingFloatingPointLiteral",
          "displayName": "Confusing floating-point literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any floating point numbers that don\u0027t have a decimal point, numbers before the decimal point,\nor numbers after the decimal point.\n\u003cp\u003eSuch literals may be confusing, and violate several coding standards.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edouble d \u003d .03;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edouble d \u003d 0.03;\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore floating point literals in scientific notation\u003c/b\u003e option to ignore floating point numbers in scientific notation.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NegativeIntConstantInLongContext",
          "displayName": "Negative int hexadecimal constant in long context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports negative int hexadecimal constants in long context. Such constants are implicitly widened to\nlong, which means their higher bits will become 1 rather than 0 (e.g., 0xFFFF_FFFF will become 0xFFFF_FFFF_FFFF_FFFFL).\nUnlikely this is intended, and even if it is, using an explicit long constant would be less confusing.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Warning: this is int constant -1 which is widened to long\n  // becoming 0xFFFF_FFFF_FFFF_FFFFL.\n  long mask \u003d 0xFFFF_FFFF;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BigDecimalMethodWithoutRoundingCalled",
          "displayName": "Call to \u0027BigDecimal\u0027 method without a rounding mode argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003edivide()\u003c/code\u003e or \u003ccode\u003esetScale()\u003c/code\u003e without a rounding mode argument.\n\u003cp\u003eSuch calls can lead to an \u003ccode\u003eArithmeticException\u003c/code\u003e when the exact value cannot be represented in the result\n  (for example, because it has a non-terminating decimal expansion).\u003c/p\u003e\n\u003cp\u003eSpecifying a rounding mode prevents the \u003ccode\u003eArithmeticException\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  BigDecimal.valueOf(1).divide(BigDecimal.valueOf(3));\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CharUsedInArithmeticContext",
          "displayName": "\u0027char\u0027 expression used in arithmetic context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions of the \u003ccode\u003echar\u003c/code\u003e type used in addition or subtraction expressions.\n\u003cp\u003eSuch code is not necessarily an issue but may result in bugs (for example,\n  if a string is expected).\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e \u003ccode\u003eint a \u003d \u0027a\u0027 + 42;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eAfter the quick-fix is applied: \u003ccode\u003eint a \u003d (int) \u0027a\u0027 + 42;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eFor the \u003ccode\u003eString\u003c/code\u003e context:\n\u003cpre\u003e\u003ccode\u003eint i1 \u003d 1;\nint i2 \u003d 2;\nSystem.out.println(i2 + \u0027-\u0027 + i1 + \u0026quot; \u003d \u0026quot; + (i2 - i1));\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003ccode\u003eSystem.out.println(i2 + \u0026quot;-\u0026quot; + i1 + \u0026quot; \u003d \u0026quot; + (i2 - i1));\u003c/code\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BigDecimalEquals",
          "displayName": "\u0027equals()\u0027 called on \u0027BigDecimal\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eequals()\u003c/code\u003e calls that compare two \u003ccode\u003ejava.math.BigDecimal\u003c/code\u003e numbers.\nThis is normally a mistake, as two \u003ccode\u003ejava.math.BigDecimal\u003c/code\u003e numbers are only equal if\nthey are equal in both value and scale.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (new BigDecimal(\"2.0\").equals(\n    new BigDecimal(\"2.00\"))) {} // false\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (new BigDecimal(\"2.0\").compareTo(\n    new BigDecimal(\"2.00\")) \u003d\u003d 0) {} // true\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OverlyComplexArithmeticExpression",
          "displayName": "Overly complex arithmetic expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports arithmetic expressions with the excessive number of terms. Such expressions might be hard to understand and might contain errors.\n\u003cp\u003eParameters, field references, and other primary expressions are counted as a term.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n  \u003cpre\u003e\u003ccode\u003eint calc(int a, int b) {\n        return a + a + a + b + b + b + b; // The line contains 7 terms and will be reported.\n    }\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the field below to specify a number of terms allowed in arithmetic expressions.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CachedNumberConstructorCall",
          "displayName": "Number constructor call with primitive argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instantiations of new \u003ccode\u003eLong\u003c/code\u003e,\n\u003ccode\u003eInteger\u003c/code\u003e, \u003ccode\u003eShort\u003c/code\u003e, or\n\u003ccode\u003eByte\u003c/code\u003e objects that have a primitive \u003ccode\u003elong\u003c/code\u003e,\n\u003ccode\u003einteger\u003c/code\u003e, \u003ccode\u003eshort\u003c/code\u003e, or\n\u003ccode\u003ebyte\u003c/code\u003e\nargument.\n\u003cp\u003eIt is recommended that you use the static method \u003ccode\u003evalueOf()\u003c/code\u003e\n  introduced in Java 5. By default, this method caches objects for values between -128 and\n  127 inclusive.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Integer i \u003d new Integer(1);\n  Long l \u003d new Long(1L);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied, the code changes to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Integer i \u003d Integer.valueOf(1);\n  Long l \u003d Long.valueOf(1L);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 5 or higher\u003c/p\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore new number expressions with a String argument\u003c/b\u003e option to ignore calls to number constructors with a \u003ccode\u003eString\u003c/code\u003e argument.\u003c/p\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eReport only when constructor is @Deprecated\u003c/b\u003e  option to only report calls to deprecated constructors.\n  \u003ccode\u003eLong\u003c/code\u003e, \u003ccode\u003eInteger\u003c/code\u003e, \u003ccode\u003eShort\u003c/code\u003e and \u003ccode\u003eByte\u003c/code\u003e constructors are deprecated since JDK 9.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java 16",
      "inspections": [
        {
          "shortName": "ClassCanBeRecord",
          "displayName": "Class can be a record",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nSuggests replacing classes with records.\n\u003cp\u003eThe inspection can be useful if you need to focus on modeling immutable data rather than extensible behavior.\n  Automatic implementation of data-driven methods, such as equals and accessors, helps to get rid of boilerplate.\u003c/p\u003e\n\u003cp\u003e\n  Note that not every class can be a record. Here are some of the restrictions:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eA class must contain no inheritors and must be a top-level class.\u003c/li\u003e\n  \u003cli\u003eAll the non-static fields in class must be final.\u003c/li\u003e\n  \u003cli\u003eClass must contain no instance initializers, generic constructors, nor native methods.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo get a full list of the restrictions, refer to the\n  \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se15/preview/specs/records-jls.html\"\u003eOracle documentation\u003c/a\u003e.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Point {\n    private final double x;\n    private final double y;\n\n    Point(double x, double y) {\n      this.x \u003d x;\n      this.y \u003d y;\n    }\n\n    double getX() {\n      return x;\n    }\n\n    double getY() {\n      return y;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  record Point(int x, int y) {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEnable the \u003cb\u003eSuggest renaming get/is-accessors\u003c/b\u003e option to allow renaming \u003ccode\u003egetX()\u003c/code\u003e/\u003ccode\u003eisX()\u003c/code\u003e accessors to \u003ccode\u003ex()\u003c/code\u003e automatically.\u003c/p\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eWhen conversion makes a member more accessible\u003c/b\u003e options to specify if the conversion may violate class encapsulation:\n\u003cul\u003e\n  \u003cli\u003eChoose \u003cb\u003eDo not suggest conversion\u003c/b\u003e option to never violate class encapsulation\u003c/li\u003e\n  \u003cli\u003eChoose \u003cb\u003eShow affected members in conflicts view\u003c/b\u003e option to apply conversion with notification about encapsulation violation issues\u003c/li\u003e\n  \u003cli\u003eChoose \u003cb\u003eConvert silently\u003c/b\u003e option to apply conversion silently whether encapsulation violation issues exist or not\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUse the \u003cb\u003eSuppress conversion if class is annotated by\u003c/b\u003e list to exclude classes from conversion when annotated by annotations matching the specified patterns.\n\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 16 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PatternVariableCanBeUsed",
          "displayName": "Pattern variable can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variable declarations that can be replaced with pattern variables, which are usually more compact.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (obj instanceof String) {\n    String str \u003d (String) obj;\n    System.out.println(str);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCan be replaced with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (obj instanceof String str) {\n    System.out.println(str);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 16 or higher\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "GroovyLabeledStatement",
          "displayName": "Labeled statement inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports labels already used in parent workflow.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef list \u003d [\"foo\"]\ncycle:\nfor (element in list) {\n  cycle: // confusing label repeat\n  element.chars().forEach {\n  }\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SecondUnsafeCall",
          "displayName": "Second unsafe call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports possible \u003cb\u003eNullPointerException\u003c/b\u003e during chain methods or properties call.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  domain?.getZone().getName()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  domain?.getZone()?.getName()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyNonShortCircuitBoolean",
          "displayName": "Non short-circuit boolean",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the non-short-circuit forms of boolean operators \u0027and\u0027 and \u0027or\u0027 ( \u003ccode\u003e\u0026\u003c/code\u003e\nand \u003ccode\u003e|\u003c/code\u003e ).\n\u003cp\u003e\n  The non-short-circuit versions are occasionally useful, but\n  their presence is often due to typos of the short-circuit forms ( \u003ccode\u003e\u0026\u0026\u003c/code\u003e\n  and \u003ccode\u003e||\u003c/code\u003e ), and may lead to subtle bugs.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nif (a \u0026 b) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nif (a \u0026\u0026 b) {}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyInArgumentCheck",
          "displayName": "Incompatible \u0027in\u0027 argument types",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of membership operator \u003ccode\u003ein\u003c/code\u003e with items and containers of incompatible types.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef list \u003d [1, 2]\nif (\"foo\" in list) {} // list of Integers can\u0027t contain String\n\u003c/code\u003e\n\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyDivideByZero",
          "displayName": "Division by zero",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports divisions by zero or remainders by zero.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def a \u003d 42\n  a / 0 // warning\n  a % 0.0 // warning\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrEqualsBetweenInconvertibleTypes",
          "displayName": "\u0027equals()\u0027 between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eequals()\u003c/code\u003e where the target and argument are of incompatible types.\n\u003cp\u003eWhile such a call might theoretically be useful, most likely it represents a bug.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    new HashSet\u0026lt;String\u0026gt;() \u003d\u003d new TreeSet\u0026lt;Integer\u0026gt;())\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyAccessibility",
          "displayName": "Inaccessible element",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports references which exceed access rights.\n\u003cp\u003eAccess to private members breaks encapsulation.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyUntypedAccess",
          "displayName": "Untyped reference expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports reference expressions whose type can\u0027t be determined.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyResultOfObjectAllocationIgnored",
          "displayName": "Result of object allocation ignored",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports object allocation where the result of this operation is ignored.\n\u003cp\u003e\n  Such allocation expressions are legal Groovy, but are usually either inadvertent, or\n  evidence of a complicated object initialization strategy.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyRangeTypeCheck",
          "displayName": "Incorrect range arguments",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports types used in ranges that do not have a \u003ccode\u003enext()\u003c/code\u003e or \u003ccode\u003eprevious()\u003c/code\u003e method\nor do not implement the \u003ccode\u003ejava.lang.Comparable\u003c/code\u003e interface.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyInfiniteLoopStatement",
          "displayName": "Infinite loop statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, or \u003ccode\u003edo\u003c/code\u003e statements which\ncan only exit by throwing an exception. While such statements may be correct, they usually\nhappen by mistake.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nwhile(true) {\n  Thread.sleep(1000)\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyDocCheck",
          "displayName": "Unresolved GroovyDoc reference",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references inside GroovyDoc comments.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrUnresolvedAccess",
          "displayName": "Unresolved reference expression",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports reference expressions which cannot be resolved.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyInfiniteRecursion",
          "displayName": "Infinite recursion",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods which must either recurse infinitely or throw an exception.\nMethods reported by this inspection could not be finished correct.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\n// this function always dive deeper\ndef fibonacci(int n) {\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrPermitsClause",
          "displayName": "Non-extending permitted subclasses",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports permitted classes that do not extend the sealed base class.\u003cp\u003e\n\u003cp\u003eGroovy does not require that all permitted classes should be available in compile-time and compiled along with base class. Compiler will not warn the user on dealing with non-extending permitted subclass, but it contradicts the nature of sealed classes.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A permits B {} // reports B\n  class B {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrSwitchExhaustivenessCheck",
          "displayName": "Exhaustiveness check for switch expressions",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports switch expressions that do not cover all possible outcomes of the matched expression.\u003cp\u003e\n\u003cp\u003eGroovy does not require that switch expression must be exhaustive. It acts as if an implicit \u003ccode\u003edefault -\u003e null\u003c/code\u003e branch is inserted.\n  It may cause unexpected nulls if a developer forgets to insert necessary \u003ccode\u003ecase\u003c/code\u003e branches.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum A { X, Y }\n\n  def foo(A a) {\n    def x \u003d switch (a) { // reports switch\n      case A.X -\u003e ...\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyConstructorNamedArguments",
          "displayName": "Named arguments of constructor call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports named arguments of a default class constructor call which don\u0027t correspond to properties of this class.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Person {\n      def name\n      def age\n  }\n\n  // \u0027firstName\u0027 property doesn\u0027t exist\n  new Person(firstName: \"John\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Logging",
      "inspections": [
        {
          "shortName": "PlaceholderCountMatchesArgumentCount",
          "displayName": "Number of placeholders does not match number of arguments in logging call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports SLF4J or Log4j 2 logging calls, such as \u003ccode\u003elogger.info(\"{}: {}\", key)\u003c/code\u003e where the number of \u003ccode\u003e{}\u003c/code\u003e placeholders\nin the logger message doesn\u0027t match the number of other arguments to the logging call.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the inspection option to specify which implementation SLF4J uses.\nIf \u003cstrong\u003eCheck automatically\u003c/strong\u003e is chosen, then \u003ccode\u003eorg.apache.logging.slf4j.Log4jLogger\u003c/code\u003e is searched in the classpath.\nIf this file is founded or \u003cstrong\u003eYes\u003c/strong\u003e is chosen, then cases, when the last parameter with an exception type has a placeholder, will\n  not be reported for SLFJ4 API.\nFor example:\n\u003cpre\u003e\u003ccode\u003e\n// will not be reported\nlog.error(\"For id {}: {}\", id, new RuntimeException());\n\u003c/code\u003e\u003c/pre\u003e\nThis option works only for SLF4J.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PublicMethodWithoutLogging",
          "displayName": "\u0027public\u0027 method without logging",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any public methods that do not contain a logging statement. This inspection does not report\nsimple getters and setters.\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Crucial {\n    \u003cb\u003eprivate static final \u003c/b\u003eLogger LOG \u003d LoggerFactory.getLogger(Crucial.class);\n    \u003cb\u003epublic void\u003c/b\u003e doImportantStuff() {\n      // warning on this method\n    }\n\n    \u003cb\u003epublic void\u003c/b\u003e doOtherStuff() {\n      LOG.info(\"do other stuff\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the table below to specify Logger class names.\nPublic methods that do not use instance methods of the specified classes will be reported by this inspection.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringConcatenationArgumentToLogCall",
          "displayName": "Non-constant string concatenation as argument to logging call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-constant string concatenations that are used as arguments to \u003cb\u003eSLF4J\u003c/b\u003e and \u003cb\u003eLog4j 2\u003c/b\u003e logging methods.\nNon-constant concatenations are evaluated at runtime even when the logging message is not logged; this can negatively impact performance.\nIt is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Vital {\n    \u003cb\u003eprivate static final\u003c/b\u003e Logger LOG \u003d LoggerFactory.getLogger(Vital.class);\n\n    \u003cb\u003epublic void\u003c/b\u003e saveTheWorld(\u003cb\u003eint\u003c/b\u003e i, String s, \u003cb\u003eboolean\u003c/b\u003e b) {\n      LOG.info(\"saveTheWorld(\" + i + \", \" + s + \", \"  + b + \")\");\n      // todo\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Vital {\n    \u003cb\u003eprivate static final\u003c/b\u003e Logger LOG \u003d LoggerFactory.getLogger(Vital.class);\n\n    \u003cb\u003epublic void\u003c/b\u003e saveTheWorld(\u003cb\u003eint\u003c/b\u003e i, String s, \u003cb\u003eboolean\u003c/b\u003e b) {\n      LOG.info(\"saveTheWorld({}, {}, {})\", i, s, b);\n      // todo\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eWarn on\u003c/b\u003e list to ignore certain higher logging levels. Higher logging levels may be enabled even in production, and the arguments will always be evaluated.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassWithMultipleLoggers",
          "displayName": "Class with multiple loggers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that have multiple loggers declared.\nEnsuring that every class has a single dedicated logger is an important step in providing a unified logging\nimplementation for an application.\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Critical {\n    \u003cb\u003eprotected static final\u003c/b\u003e Logger LOG \u003d Logger.getLogger(Critical.class);\n\n    \u003cb\u003eprotected static final\u003c/b\u003e Logger myLogger \u003d Logger.getLogger(getClass());\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the table below to specify Logger class names.\nClasses which declare multiple fields that have the type of one of the specified classes will be reported by this inspection.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassWithoutLogger",
          "displayName": "Class without logger",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes which do not have a declared logger.\n\u003cp\u003eEnsuring that every class has a dedicated logger is an important step in providing a unified logging\n  implementation for an application. Interfaces, enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e NoLoggerDeclared {\n\n    \u003cb\u003eint\u003c/b\u003e calculateNthDigitOfPi(\u003cb\u003eint\u003c/b\u003e n) {\n      // todo\n      \u003cb\u003ereturn\u003c/b\u003e 1;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the table in the \u003cb\u003eOptions\u003c/b\u003e section to specify logger class names.\nClasses which do not declare a field with the type of one of the specified classes will be reported by this inspection.\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonStaticFinalLogger",
          "displayName": "Non-constant logger",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports logger fields that are not declared \u003ccode\u003estatic\u003c/code\u003e and/or \u003ccode\u003efinal\u003c/code\u003e.\nEnsuring that every class logger is effectively constant and bound to that class\nsimplifies the task of providing a unified logging implementation for an application.\n\u003cp\u003eA quick-fix is provided to change the logger modifiers to \u003ccode\u003estatic final\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Significant {\n    \u003cb\u003eprivate\u003c/b\u003e Logger LOG \u003d Logger.getLogger(Critical.class);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Significant {\n    \u003cb\u003eprivate static final\u003c/b\u003e Logger LOG \u003d Logger.getLogger(Critical.class);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eLogger class name\u003c/b\u003e table to specify logger class names. The inspection will report the fields that are not \u003ccode\u003estatic\u003c/code\u003e and \u003ccode\u003efinal\u003c/code\u003e and are of the type equal to one of the specified class names.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LoggingConditionDisagreesWithLogStatement",
          "displayName": "Log condition does not match logging call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003cem\u003eis log enabled for\u003c/em\u003e conditions of \u003ccode\u003eif\u003c/code\u003e statements that\ndo not match the log level of the contained logging call.\n\u003cp\u003e\nFor example:\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eif\u003c/b\u003e (LOG.isTraceEnabled()) {\n    // debug level logged, but checked for trace level\n    LOG.debug(\"some log message\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection understands the \u003cem\u003ejava.util.logging\u003c/em\u003e, \u003cem\u003elog4j\u003c/em\u003e, \u003cem\u003eLog4j 2\u003c/em\u003e, \u003cem\u003eApache Commons Logging\u003c/em\u003e\nand the \u003cem\u003eSLF4J\u003c/em\u003e logging frameworks.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LogStatementGuardedByLogCondition",
          "displayName": "Logging call not guarded by log condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports logging calls with non-constant arguments that are not surrounded by a guard condition.\nThe evaluation of the arguments of a logging call can be expensive.\nSurrounding a logging call with a guard clause prevents that cost when logging\nis disabled for the level used by the logging statement. This is especially useful for the\nleast serious level (trace, debug, finest) of logging calls, because those are\nmost often disabled in a production environment.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Principal {\n    \u003cb\u003evoid\u003c/b\u003e bad(Object object) {\n      \u003cb\u003eif\u003c/b\u003e (true) {\n        LOG.debug(\"log log log \" + expensiveCalculation(object));\n      }\n      LOG.debug(\"some more logging \" + expensiveCalculation(1));\n    }\n\n    \u003cb\u003evoid\u003c/b\u003e good(Object) {\n      \u003cb\u003eif\u003c/b\u003e (LOG.isDebug()) {\n        LOG.debug(\"value: \" + expensiveCalculation(object));\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n      Use the \u003cb\u003eLogger class name\u003c/b\u003e field to specify the logger class name used.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\n      Use the table to specify the logging methods this inspection should warn on, with the corresponding log condition text.\n  \u003c/li\u003e\n  \u003cli\u003e\n      Use the \u003cb\u003eFlag all unguarded logging calls\u003c/b\u003e option to have the inspection flag all unguarded log calls, not only those with non-constant arguments.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LoggerInitializedWithForeignClass",
          "displayName": "Logger initialized with foreign class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eLogger\u003c/code\u003e instances that are initialized with a \u003ccode\u003eclass\u003c/code\u003e literal from a different class than the \u003ccode\u003eLogger\u003c/code\u003e\nis contained in. This can easily happen when copy-pasting some code from another class and\nmay result in logging events under an unexpected category and cause filters to be applied incorrectly.\n\u003cp\u003eA quick-fix is provided to replace the foreign class literal with one from the surrounding class.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Paramount {\n    \u003cb\u003eprotected static final\u003c/b\u003e Logger LOG \u003d Logger.getLogger(Critical.class);\n\n    // ... other fields and methods\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Paramount {\n    \u003cb\u003eprotected static final\u003c/b\u003e Logger LOG \u003d Logger.getLogger(Paramount.class);\n\n    // ... other fields and methods\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the table to specify the logger factory classes and logger factory methods recognized by this inspection.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore loggers initialized with a superclass\u003c/b\u003e option to ignore loggers that are initialized with a superclass of\n  the class containing the logger.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore loggers in non-public classes\u003c/b\u003e to only warn on loggers in \u003ccode\u003epublic\u003c/code\u003e classes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Android Lint: Performance",
      "inspections": [
        {
          "shortName": "AndroidLintWakelockTimeout",
          "displayName": "Using wakeLock without timeout",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing wakeLock without timeout\u003cbr\u003e\u003cbr\u003eWakelocks have two acquire methods: one with a timeout, and one without. You should generally always use the one with a timeout. A typical timeout is 10 minutes. If the task takes longer than it is critical that it happens (i.e. can\u0027t use \u003ccode\u003eJobScheduler\u003c/code\u003e) then maybe they should consider a foreground service instead (which is a stronger run guarantee and lets the user know something long/important is happening).\u003cbr\u003e\u003cbr\u003eIssue id: WakelockTimeout\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUseCompoundDrawables",
          "displayName": "Node can be replaced by a TextView with compound drawables",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNode can be replaced by a \u003ccode\u003eTextView\u003c/code\u003e with compound drawables\u003cbr\u003e\u003cbr\u003eA \u003ccode\u003eLinearLayout\u003c/code\u003e which contains an \u003ccode\u003eImageView\u003c/code\u003e and a \u003ccode\u003eTextView\u003c/code\u003e can be more efficiently handled as a compound drawable (a single TextView, using the \u003ccode\u003edrawableTop\u003c/code\u003e, \u003ccode\u003edrawableLeft\u003c/code\u003e, \u003ccode\u003edrawableRight\u003c/code\u003e and/or \u003ccode\u003edrawableBottom\u003c/code\u003e attributes to draw one or more images adjacent to the text).\u003cbr/\u003e\n\u003cbr/\u003e\nIf the two widgets are offset from each other with margins, this can be replaced with a \u003ccode\u003edrawablePadding\u003c/code\u003e attribute.\u003cbr/\u003e\n\u003cbr/\u003e\nThere\u0027s a lint quickfix to perform this conversion in the Eclipse plugin.\u003cbr\u003e\u003cbr\u003eIssue id: UseCompoundDrawables\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTestAppLink",
          "displayName": "Unmatched URLs",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnmatched URLs\u003cbr\u003e\u003cbr\u003eUsing one or more \u003ccode\u003etools:validation testUrl\u003d\"some url\"/\u003e\u003c/code\u003e elements in your manifest allows the link attributes in your intent filter to be checked for matches.\u003cbr\u003e\u003cbr\u003eIssue id: TestAppLink\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintObsoleteLayoutParam",
          "displayName": "Obsolete layout params",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eObsolete layout params\u003cbr\u003e\u003cbr\u003eThe given layout_param is not defined for the given layout, meaning it has no effect. This usually happens when you change the parent layout or move view code around without updating the layout params. This will cause useless attribute processing at runtime, and is misleading for others reading the layout so the parameter should be removed.\u003cbr\u003e\u003cbr\u003eIssue id: ObsoleteLayoutParam\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNotifyDataSetChanged",
          "displayName": "Invalidating All RecyclerView Data",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalidating All RecyclerView Data\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003eRecyclerView\u003c/code\u003e adapter\u0027s \u003ccode\u003eonNotifyDataSetChanged\u003c/code\u003e method does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. `LayoutManager`s will be forced to fully rebind and relayout all visible views.\u003cbr\u003e\u003cbr\u003eIssue id: NotifyDataSetChanged\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNotificationTrampoline",
          "displayName": "Notification Trampolines",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNotification Trampolines\u003cbr\u003e\u003cbr\u003eActivities should not be launched indirectly from a notification via an intermediate \u003ccode\u003eBroadcastReceiver\u003c/code\u003e or \u003ccode\u003eService\u003c/code\u003e. This can lead to significant lags in some scenarios, and is forbidden if \u003ccode\u003etargetSdkVersion\u003c/code\u003e is set to the API level for Android 12 or higher.\u003cbr/\u003e\n\u003cbr/\u003e\nTo fix this, launch the \u003ccode\u003eActivity\u003c/code\u003e directly from the notification.\u003cbr\u003e\u003cbr\u003eIssue id: NotificationTrampoline\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUselessLeaf",
          "displayName": "Useless leaf layout",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnnecessary leaf layout\u003cbr\u003e\u003cbr\u003eA layout that has no children or no background can often be removed (since it is invisible) for a flatter and more efficient layout hierarchy.\u003cbr\u003e\u003cbr\u003eIssue id: UselessLeaf\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDuplicateDivider",
          "displayName": "Unnecessary Divider Copy",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnnecessary Divider Copy\u003cbr\u003e\u003cbr\u003eOlder versions of the RecyclerView library did not include a divider decorator, but one was provided as a sample in the support demos. This divider class has been widely copy/pasted into various projects.\u003cbr/\u003e\n\u003cbr/\u003e\nIn recent versions of the support library, the divider decorator is now included, so you can replace custom copies with the \"built-in\" version, \u003ccode\u003eandroid.support.v7.widget.DividerItemDecoration\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: DuplicateDivider\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSyntheticAccessor",
          "displayName": "Synthetic Accessor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eSynthetic Accessor\u003cbr\u003e\u003cbr\u003eA private inner class which is accessed from the outer class will force the compiler to insert a synthetic accessor; this means that you are causing extra overhead. This is not important in small projects, but is important for large apps running up against the 64K method handle limit, and especially for \u003cb\u003elibraries\u003c/b\u003e where you want to make sure your library is as small as possible for the cases where your library is used in an app running up against the 64K limit.\u003cbr\u003e\u003cbr\u003eIssue id: SyntheticAccessor\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLogConditional",
          "displayName": "Unconditional Logging Calls",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eUnconditional Logging Calls\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003eBuildConfig\u003c/code\u003e class provides a constant, \u003ccode\u003eDEBUG\u003c/code\u003e, which indicates whether the code is being built in release mode or in debug mode. In release mode, you typically want to strip out all the logging calls. Since the compiler will automatically remove all code which is inside a \u003ccode\u003eif (false)\u003c/code\u003e check, surrounding your logging calls with a check for \u003ccode\u003eBuildConfig.DEBUG\u003c/code\u003e is a good idea.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you \u003cb\u003ereally\u003c/b\u003e intend for the logging to be present in release mode, you can suppress this warning with a \u003ccode\u003e@SuppressLint\u003c/code\u003e annotation for the intentional logging calls.\u003cbr\u003e\u003cbr\u003eIssue id: LogConditional\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAssertionSideEffect",
          "displayName": "Assertions with Side Effects",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAssertions with Side Effects\u003cbr\u003e\u003cbr\u003eAssertion conditions can have side effects. This is risky because the behavior depends on whether assertions are on or off. This is usually not intentional, and can lead to bugs where the production version differs from the version tested during development.\u003cbr/\u003e\n\u003cbr/\u003e\nGenerally, you\u0027ll want to perform the operation with the side effect before the assertion, and then assert that the result was what you expected.\u003cbr\u003e\u003cbr\u003eIssue id: AssertionSideEffect\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintExpensiveAssertion",
          "displayName": "Expensive Assertions",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eExpensive Assertions\u003cbr\u003e\u003cbr\u003eIn Kotlin, assertions are not handled the same way as from the Java programming language. In particular, they\u0027re just implemented as a library call, and inside the library call the error is only thrown if assertions are enabled.\u003cbr/\u003e\n\u003cbr/\u003e\nThis means that the arguments to the \u003ccode\u003eassert\u003c/code\u003e call will \u003cb\u003ealways\u003c/b\u003e be evaluated. If you\u0027re doing any computation in the expression being asserted, that computation will unconditionally be performed whether or not assertions are turned on. This typically turns into wasted work in release builds.\u003cbr/\u003e\n\u003cbr/\u003e\nThis check looks for cases where the assertion condition is nontrivial, e.g. it is performing method calls or doing more work than simple comparisons on local variables or fields.\u003cbr/\u003e\n\u003cbr/\u003e\nYou can work around this by writing your own inline assert method instead:\u003cbr/\u003e\n\n\u003cpre\u003e\n@Suppress(\"INVISIBLE_REFERENCE\", \"INVISIBLE_MEMBER\")\ninline fun assert(condition: () -\u003e Boolean) {\n    if (_Assertions.ENABLED \u0026amp;\u0026amp; !condition()) {\n        throw AssertionError()\n    }\n}\n\u003c/pre\u003e\n\u003cbr/\u003e\nIn Android, because assertions are not enforced at runtime, instead use this:\u003cbr/\u003e\n\n\u003cpre\u003e\ninline fun assert(condition: () -\u003e Boolean) {\n    if (BuildConfig.DEBUG \u0026amp;\u0026amp; !condition()) {\n        throw AssertionError()\n    }\n}\n\u003c/pre\u003e\n\u003cbr\u003e\u003cbr\u003eIssue id: ExpensiveAssertion\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDisableBaselineAlignment",
          "displayName": "Missing baselineAligned attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing \u003ccode\u003ebaselineAligned\u003c/code\u003e attribute\u003cbr\u003e\u003cbr\u003eWhen a \u003ccode\u003eLinearLayout\u003c/code\u003e is used to distribute the space proportionally between nested layouts, the baseline alignment property should be turned off to make the layout computation faster.\u003cbr\u003e\u003cbr\u003eIssue id: DisableBaselineAlignment\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintViewHolder",
          "displayName": "View Holder Candidates",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eView Holder Candidates\u003cbr\u003e\u003cbr\u003eWhen implementing a view Adapter, you should avoid unconditionally inflating a new layout; if an available item is passed in for reuse, you should try to use that one instead. This helps make for example \u003ccode\u003eListView\u003c/code\u003e scrolling much smoother.\u003cbr\u003e\u003cbr\u003eIssue id: ViewHolder\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/ui/layout/recyclerview#ViewHolder\"\u003ehttps://developer.android.com/guide/topics/ui/layout/recyclerview#ViewHolder\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintStringFormatTrivial",
          "displayName": "String.format string only contains trivial conversions",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003eString.format\u003c/code\u003e string only contains trivial conversions\u003cbr\u003e\u003cbr\u003eEvery call to \u003ccode\u003eString.format\u003c/code\u003e creates a new \u003ccode\u003eFormatter\u003c/code\u003e instance, which will decrease the performance of your app. \u003ccode\u003eString.format\u003c/code\u003e should only be used when necessary--if the formatted string contains only trivial conversions (e.g. \u003ccode\u003eb\u003c/code\u003e, \u003ccode\u003es\u003c/code\u003e, \u003ccode\u003ec\u003c/code\u003e) and there are no translation concerns, it will be more efficient to replace them and concatenate with \u003ccode\u003e+\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: StringFormatTrivial\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLaunchActivityFromNotification",
          "displayName": "Notification Launches Services or BroadcastReceivers",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNotification Launches Services or BroadcastReceivers\u003cbr\u003e\u003cbr\u003eNotifications should only launch activities -- that\u0027s what users expect (and has been the guidance in both the Android SDK and Material Design documentation for a while).\u003cbr/\u003e\n\u003cbr/\u003e\nA \u003ccode\u003eService\u003c/code\u003e or a \u003ccode\u003eBroadcastReceiver\u003c/code\u003e should not be used as an intermediate, because this can lead to significant performance problems, and as a result, this will not be allowed in Android 12.\u003cbr\u003e\u003cbr\u003eIssue id: LaunchActivityFromNotification\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/ui/notifiers/notifications?hl\u003den#Actions\"\u003ehttps://developer.android.com/guide/topics/ui/notifiers/notifications?hl\u003den#Actions\u003c/a\u003e\u003cbr\u003e\u003ca href\u003d\"https://material.io/design/platform-guidance/android-notifications.html#behavior\"\u003ehttps://material.io/design/platform-guidance/android-notifications.html#behavior\u003c/a\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/ui/notifiers/notifications?hl\u003den\"\u003ehttps://developer.android.com/guide/topics/ui/notifiers/notifications?hl\u003den\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUseSparseArrays",
          "displayName": "HashMap can be replaced with SparseArray",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eHashMap can be replaced with SparseArray\u003cbr\u003e\u003cbr\u003eFor maps where the keys are of type integer, it\u0027s typically more efficient to use the Android \u003ccode\u003eSparseArray\u003c/code\u003e API. This check identifies scenarios where you might want to consider using \u003ccode\u003eSparseArray\u003c/code\u003e instead of \u003ccode\u003eHashMap\u003c/code\u003e for better performance.\u003cbr/\u003e\n\u003cbr/\u003e\nThis is \u003cb\u003eparticularly\u003c/b\u003e useful when the value types are primitives like ints, where you can use \u003ccode\u003eSparseIntArray\u003c/code\u003e and avoid auto-boxing the values from \u003ccode\u003eint\u003c/code\u003e to \u003ccode\u003eInteger\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you need to construct a \u003ccode\u003eHashMap\u003c/code\u003e because you need to call an API outside of your control which requires a \u003ccode\u003eMap\u003c/code\u003e, you can suppress this warning using for example the \u003ccode\u003e@SuppressLint\u003c/code\u003e annotation.\u003cbr\u003e\u003cbr\u003eIssue id: UseSparseArrays\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAnimatorKeep",
          "displayName": "Missing @Keep for Animated Properties",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing @Keep for Animated Properties\u003cbr\u003e\u003cbr\u003eWhen you use property animators, properties can be accessed via reflection. Those methods should be annotated with @Keep to ensure that during release builds, the methods are not potentially treated as unused and removed, or treated as internal only and get renamed to something shorter.\u003cbr/\u003e\n\u003cbr/\u003e\nThis check will also flag other potential reflection problems it encounters, such as a missing property, wrong argument types, etc.\u003cbr\u003e\u003cbr\u003eIssue id: AnimatorKeep\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRecycle",
          "displayName": "Missing recycle() calls",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing \u003ccode\u003erecycle()\u003c/code\u003e calls\u003cbr\u003e\u003cbr\u003eMany resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a \u003ccode\u003erecycle()\u003c/code\u003e call) after use. This lint check looks for missing \u003ccode\u003erecycle()\u003c/code\u003e calls.\u003cbr\u003e\u003cbr\u003eIssue id: Recycle\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDevModeObsolete",
          "displayName": "Dev Mode Obsolete",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDev Mode Obsolete\u003cbr\u003e\u003cbr\u003eIn the past, our documentation recommended creating a \u003ccode\u003edev\u003c/code\u003e product flavor with has a minSdkVersion of 21, in order to enable multidexing to speed up builds significantly during development.\u003cbr/\u003e\n\u003cbr/\u003e\nThat workaround is no longer necessary, and it has some serious downsides, such as breaking API access checking (since the true \u003ccode\u003eminSdkVersion\u003c/code\u003e is no longer known).\u003cbr/\u003e\n\u003cbr/\u003e\nIn recent versions of the IDE and the Gradle plugin, the IDE automatically passes the API level of the connected device used for deployment, and if that device is at least API 21, then multidexing is automatically turned on, meaning that you get the same speed benefits as the \u003ccode\u003edev\u003c/code\u003e product flavor but without the downsides.\u003cbr\u003e\u003cbr\u003eIssue id: DevModeObsolete\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInefficientWeight",
          "displayName": "Inefficient layout weight",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInefficient layout weight\u003cbr\u003e\u003cbr\u003eWhen only a single widget in a \u003ccode\u003eLinearLayout\u003c/code\u003e defines a weight, it is more efficient to assign a width/height of \u003ccode\u003e0dp\u003c/code\u003e to it since it will absorb all the remaining space anyway. With a declared width/height of \u003ccode\u003e0dp\u003c/code\u003e it does not have to measure its own size first.\u003cbr\u003e\u003cbr\u003eIssue id: InefficientWeight\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintStaticFieldLeak",
          "displayName": "Static Field Leaks",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eStatic Field Leaks\u003cbr\u003e\u003cbr\u003eA static field will leak contexts.\u003cbr/\u003e\n\u003cbr/\u003e\nNon-static inner classes have an implicit reference to their outer class. If that outer class is for example a \u003ccode\u003eFragment\u003c/code\u003e or \u003ccode\u003eActivity\u003c/code\u003e, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.\u003cbr/\u003e\n\u003cbr/\u003e\nSimilarly, direct field references to activities and fragments from these longer running instances can cause leaks.\u003cbr/\u003e\n\u003cbr/\u003e\nViewModel classes should never point to Views or non-application Contexts.\u003cbr\u003e\u003cbr\u003eIssue id: StaticFieldLeak\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintVectorPath",
          "displayName": "Long vector paths",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eLong vector paths\u003cbr\u003e\u003cbr\u003eUsing long vector paths is bad for performance. There are several ways to make the \u003ccode\u003epathData\u003c/code\u003e shorter:\u003cbr/\u003e\n* Using less precision\u003cbr/\u003e\n* Removing some minor details\u003cbr/\u003e\n* Using the Android Studio vector conversion tool\u003cbr/\u003e\n* Rasterizing the image (converting to PNG)\u003cbr\u003e\u003cbr\u003eIssue id: VectorPath\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNestedWeights",
          "displayName": "Nested layout weights",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNested layout weights\u003cbr\u003e\u003cbr\u003eLayout weights require a widget to be measured twice. When a \u003ccode\u003eLinearLayout\u003c/code\u003e with non-zero weights is nested inside another \u003ccode\u003eLinearLayout\u003c/code\u003e with non-zero weights, then the number of measurements increase exponentially.\u003cbr\u003e\u003cbr\u003eIssue id: NestedWeights\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTooManyViews",
          "displayName": "Layout has too many views",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eLayout has too many views\u003cbr\u003e\u003cbr\u003eUsing too many views in a single layout is bad for performance. Consider using compound drawables or other tricks for reducing the number of views in this layout.\u003cbr/\u003e\n\u003cbr/\u003e\nThe maximum view count defaults to 80 but can be configured with the environment variable \u003ccode\u003eANDROID_LINT_MAX_VIEW_COUNT\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: TooManyViews\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRedundantNamespace",
          "displayName": "Redundant namespace",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eRedundant namespace\u003cbr\u003e\u003cbr\u003eIn Android XML documents, only specify the namespace on the root/document element. Namespace declarations elsewhere in the document are typically accidental leftovers from copy/pasting XML from other files or documentation.\u003cbr\u003e\u003cbr\u003eIssue id: RedundantNamespace\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUseOfBundledGooglePlayServices",
          "displayName": "Use of bundled version of Google Play services",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUse of bundled version of Google Play services\u003cbr\u003e\u003cbr\u003eGoogle Play services SDK\u0027s can be selectively included, which enables a smaller APK size. Consider declaring dependencies on individual Google Play services SDK\u0027s. If you are using Firebase API\u0027s (\u003ca href\u003d\"https://firebase.google.com/docs/android/setup\"\u003ehttps://firebase.google.com/docs/android/setup\u003c/a\u003e), Android Studio\u0027s Tools \u0026#8594; Firebase assistant window can automatically add just the dependencies needed for each feature.\u003cbr\u003e\u003cbr\u003eIssue id: UseOfBundledGooglePlayServices\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developers.google.com/android/guides/setup#split\"\u003ehttps://developers.google.com/android/guides/setup#split\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUsableSpace",
          "displayName": "Using getUsableSpace()",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing getUsableSpace()\u003cbr\u003e\u003cbr\u003eWhen you need to allocate disk space for large files, consider using the new \u003ccode\u003eallocateBytes(FileDescriptor, long)\u003c/code\u003e API, which will automatically clear cached files belonging to other apps (as needed) to meet your request.\u003cbr/\u003e\n\u003cbr/\u003e\nWhen deciding if the device has enough disk space to hold your new data, call \u003ccode\u003egetAllocatableBytes(UUID)\u003c/code\u003e instead of using \u003ccode\u003egetUsableSpace()\u003c/code\u003e, since the former will consider any cached data that the system is willing to clear on your behalf.\u003cbr/\u003e\n\u003cbr/\u003e\nNote that these methods require API level 26. If your app is running on older devices, you will probably need to use both APIs, conditionally switching on \u003ccode\u003eBuild.VERSION.SDK_INT\u003c/code\u003e. Lint only looks in the same compilation unit to see if you are already using both APIs, so if it warns even though you are already using the new API, consider moving the calls to the same file or suppressing the warning.\u003cbr\u003e\u003cbr\u003eIssue id: UsableSpace\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintOverdraw",
          "displayName": "Overdraw: Painting regions more than once",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eOverdraw: Painting regions more than once\u003cbr\u003e\u003cbr\u003eIf you set a background drawable on a root view, then you should use a custom theme where the theme background is null. Otherwise, the theme background will be painted first, only to have your custom background completely cover it; this is called \"overdraw\".\u003cbr/\u003e\n\u003cbr/\u003e\nNOTE: This detector relies on figuring out which layouts are associated with which activities based on scanning the Java code, and it\u0027s currently doing that using an inexact pattern matching algorithm. Therefore, it can incorrectly conclude which activity the layout is associated with and then wrongly complain that a background-theme is hidden.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you want your custom background on multiple pages, then you should consider making a custom theme with your custom background and just using that theme instead of a root element background.\u003cbr/\u003e\n\u003cbr/\u003e\nOf course it\u0027s possible that your custom drawable is translucent and you want it to be mixed with the background. However, you will get better performance if you pre-mix the background with your drawable and use that resulting image or color as a custom theme background instead.\u003cbr\u003e\u003cbr\u003eIssue id: Overdraw\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAnnotationProcessorOnCompilePath",
          "displayName": "Annotation Processor on Compile Classpath",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAnnotation Processor on Compile Classpath\u003cbr\u003e\u003cbr\u003eThis dependency is identified as an annotation processor. Consider adding it to the processor path using \u003ccode\u003eannotationProcessor\u003c/code\u003e instead of including it to the compile path.\u003cbr\u003e\u003cbr\u003eIssue id: AnnotationProcessorOnCompilePath\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnusedResources",
          "displayName": "Unused resources",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnused resources\u003cbr\u003e\u003cbr\u003eUnused resources make applications larger and slow down builds.\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cbr/\u003e\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.\u003cbr/\u003e\n\u003cbr/\u003e\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests \u003dtrue, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests \u003dtrue.\u003cbr/\u003e\n,\u003cbr\u003e\u003cbr\u003eIssue id: UnusedResources\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDuplicateStrings",
          "displayName": "Duplicate Strings",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eDuplicate Strings\u003cbr\u003e\u003cbr\u003eDuplicate strings can make applications larger unnecessarily.\u003cbr/\u003e\n\u003cbr/\u003e\nThis lint check looks for duplicate strings, including differences for strings where the only difference is in capitalization. Title casing and all uppercase can all be adjusted in the layout or in code.\u003cbr\u003e\u003cbr\u003eIssue id: DuplicateStrings\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/android/widget/TextView.html#attr_android:inputType\"\u003ehttps://developer.android.com/reference/android/widget/TextView.html#attr_android:inputType\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTooDeepLayout",
          "displayName": "Layout hierarchy is too deep",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eLayout hierarchy is too deep\u003cbr\u003e\u003cbr\u003eLayouts with too much nesting is bad for performance. Consider using a flatter layout (such as \u003ccode\u003eRelativeLayout\u003c/code\u003e or \u003ccode\u003eGridLayout\u003c/code\u003e).The default maximum depth is 10 but can be configured with the environment variable \u003ccode\u003eANDROID_LINT_MAX_DEPTH\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: TooDeepLayout\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintObsoleteSdkInt",
          "displayName": "Obsolete SDK_INT Version Check",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eObsolete SDK_INT Version Check\u003cbr\u003e\u003cbr\u003eThis check flags version checks that are not necessary, because the \u003ccode\u003eminSdkVersion\u003c/code\u003e (or surrounding known API level) is already at least as high as the version checked for.\u003cbr/\u003e\n\u003cbr/\u003e\nSimilarly, it also looks for resources in \u003ccode\u003e-vNN\u003c/code\u003e folders, such as \u003ccode\u003evalues-v14\u003c/code\u003e where the version qualifier is less than or equal to the \u003ccode\u003eminSdkVersion\u003c/code\u003e, where the contents should be merged into the best folder.\u003cbr\u003e\u003cbr\u003eIssue id: ObsoleteSdkInt\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLifecycleAnnotationProcessorWithJava8",
          "displayName": "Lifecycle Annotation Processor with Java 8 Compile Option",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eLifecycle Annotation Processor with Java 8 Compile Option\u003cbr\u003e\u003cbr\u003eFor faster incremental build, switch to the Lifecycle Java 8 API with these steps:\u003cbr/\u003e\n\u003cbr/\u003e\nFirst replace\n\u003cpre\u003e\nannotationProcessor \"androidx.lifecycle:lifecycle-compiler:*version*\"\nkapt \"androidx.lifecycle:lifecycle-compiler:*version*\"\n\u003c/pre\u003e\nwith\n\u003cpre\u003e\nimplementation \"androidx.lifecycle:lifecycle-common-java8:*version*\"\n\u003c/pre\u003e\nThen remove any \u003ccode\u003eOnLifecycleEvent\u003c/code\u003e annotations from \u003ccode\u003eObserver\u003c/code\u003e classes and make them implement the \u003ccode\u003eDefaultLifecycleObserver\u003c/code\u003e interface.\u003cbr\u003e\u003cbr\u003eIssue id: LifecycleAnnotationProcessorWithJava8\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://d.android.com/r/studio-ui/lifecycle-release-notes\"\u003ehttps://d.android.com/r/studio-ui/lifecycle-release-notes\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnusedIds",
          "displayName": "Unused id",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eUnused id\u003cbr\u003e\u003cbr\u003eThis resource id definition appears not to be needed since it is not referenced from anywhere. Having id definitions, even if unused, is not necessarily a bad idea since they make working on layouts and menus easier, so there is not a strong reason to delete these.\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cbr/\u003e\nThe unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.\u003cbr/\u003e\n\u003cbr/\u003e\nYou can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests \u003dtrue, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests \u003dtrue.\u003cbr/\u003e\n\u003cbr\u003e\u003cbr\u003eIssue id: UnusedIds\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUselessParent",
          "displayName": "Useless parent layout",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnnecessary parent layout\u003cbr\u003e\u003cbr\u003eA layout with children that has no siblings, is not a scrollview or a root layout, and does not have a background, can be removed and have its children moved directly into the parent for a flatter and more efficient layout hierarchy.\u003cbr\u003e\u003cbr\u003eIssue id: UselessParent\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDrawAllocation",
          "displayName": "Memory allocations within drawing code",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMemory allocations within drawing code\u003cbr\u003e\u003cbr\u003eYou should avoid allocating objects during a drawing or layout operation. These are called frequently, so a smooth UI can be interrupted by garbage collection pauses caused by the object allocations.\u003cbr/\u003e\n\u003cbr/\u003e\nThe way this is generally handled is to allocate the needed objects up front and to reuse them for each drawing operation.\u003cbr/\u003e\n\u003cbr/\u003e\nSome methods allocate memory on your behalf (such as \u003ccode\u003eBitmap.create\u003c/code\u003e), and these should be handled in the same way.\u003cbr\u003e\u003cbr\u003eIssue id: DrawAllocation\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintHandlerLeak",
          "displayName": "Handler reference leaks",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eHandler reference leaks\u003cbr\u003e\u003cbr\u003eSince this Handler is declared as an inner class, it may prevent the outer class from being garbage collected. If the Handler is using a \u003ccode\u003eLooper\u003c/code\u003e or \u003ccode\u003eMessageQueue\u003c/code\u003e for a thread other than the main thread, then there is no issue. If the \u003ccode\u003eHandler\u003c/code\u003e is using the \u003ccode\u003eLooper\u003c/code\u003e or \u003ccode\u003eMessageQueue\u003c/code\u003e of the main thread, you need to fix your \u003ccode\u003eHandler\u003c/code\u003e declaration, as follows: Declare the \u003ccode\u003eHandler\u003c/code\u003e as a static class; In the outer class, instantiate a \u003ccode\u003eWeakReference\u003c/code\u003e to the outer class and pass this object to your \u003ccode\u003eHandler\u003c/code\u003e when you instantiate the \u003ccode\u003eHandler\u003c/code\u003e; Make all references to members of the outer class using the \u003ccode\u003eWeakReference\u003c/code\u003e object.\u003cbr\u003e\u003cbr\u003eIssue id: HandlerLeak\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUseValueOf",
          "displayName": "Should use valueOf instead of new",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eShould use \u003ccode\u003evalueOf\u003c/code\u003e instead of \u003ccode\u003enew\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eYou should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the \u003ccode\u003evalueOf\u003c/code\u003e factory method, such as \u003ccode\u003eInteger.valueOf(42)\u003c/code\u003e. This will typically use less memory because common integers such as 0 and 1 will share a single instance.\u003cbr\u003e\u003cbr\u003eIssue id: UseValueOf\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMergeRootFrame",
          "displayName": "FrameLayout can be replaced with \u003cmerge\u003e tag",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eFrameLayout can be replaced with \u003ccode\u003e\u0026lt;merge\u003e\u003c/code\u003e tag\u003cbr\u003e\u003cbr\u003eIf a \u003ccode\u003e\u0026lt;FrameLayout\u003e\u003c/code\u003e is the root of a layout and does not provide background or padding etc, it can often be replaced with a \u003ccode\u003e\u0026lt;merge\u003e\u003c/code\u003e tag which is slightly more efficient. Note that this depends on context, so make sure you understand how the \u003ccode\u003e\u0026lt;merge\u003e\u003c/code\u003e tag works before proceeding.\u003cbr\u003e\u003cbr\u003eIssue id: MergeRootFrame\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://android-developers.googleblog.com/2009/03/android-layout-tricks-3-optimize-by.html\"\u003ehttps://android-developers.googleblog.com/2009/03/android-layout-tricks-3-optimize-by.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "JSP",
      "inspections": [
        {
          "shortName": "UnhandledExceptionInJSP",
          "displayName": "Unhandled Exception in JSP",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports exceptions that are thrown by top-level JSP scriptlets.\u003cbr/\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;%!\n  String getFormattedDate() {\n    ...\n    throw new IllegalArgumentException(...); // Error\n  }\n  %\u0026gt;\n  \u0026lt;html\u0026gt;\n  \u0026lt;head\u0026gt;\n    \u0026lt;meta http-equiv\u003d\"Content-Type\" content\u003d\"text/html; charset\u003dUTF-8\"\u0026gt;\n    \u0026lt;title\u0026gt;Hello, JSP!\u0026lt;/title\u0026gt;\n  \u0026lt;/head\u0026gt;\n  \u0026lt;body\u0026gt;\n  \u0026lt;i\u0026gt;Today is \u0026lt;%\u003d getFormattedDate() %\u0026gt;\u0026lt;/i\u0026gt;\n  \u0026lt;/body\u0026gt;\n  \u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cbr/\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003cb\u003eNOTE:\u003c/b\u003e Such JSP pages will compile, because the servlet container wraps\n  all JSP code in a \u003cb\u003etry {} catch() {}\u003c/b\u003e block,\n  but they will produce runtime exceptions when deployed on the server.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JspUnescapedEl",
          "displayName": "Unescaped EL Expressions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "EL",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unescaped EL expressions in JSP pages.\n\u003cp\u003eUnescaped EL expressions may lead to \u003ca href\u003d\"http://en.wikipedia.org/wiki/Cross-site_scripting\"\u003ecross-site scripting\n  (XSS)\u003c/a\u003e vulnerability.\u003c/p\u003e\n\u003cp\u003eThe quick-fix wraps raw a EL expression with the JSTL \u003ccode\u003e\u0026lt;out\u0026gt;\u003c/code\u003e  tag.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n${foo}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;%@ taglib prefix\u003d\u0026quot;c\u0026quot; uri\u003d\u0026quot;http://java.sun.com/jsp/jstl/core\u0026quot; %\u0026gt;\n\u0026lt;c:out value\u003d\u0026quot;${foo}\u0026quot;/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JspTagBodyContent",
          "displayName": "Tag body content type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JSP tag body content that does not conform to the TLD body-content specification.\n\u003cp\u003eIf empty body content is specified, the tag should have an empty body.\u003c/p\u003e\n\u003cp\u003eIf scriptless body content is specified, the tag\u0027s body should not contain JSP scriptlets.\u003c/p\u003e\n\u003cp\u003eThe quick-fix removes a tag\u0027s body for empty content type, and removes scriptlets if scriptless content type is specified.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;s:empty\u0026gt;body not allowed here\u0026lt;/s:empty\u0026gt;\n\u0026lt;s:scriptless\u0026gt;say: \u0026lt;% System.out.println(\u0026quot;hey\u0026quot;); %\u0026gt;\u0026lt;/s:scriptless\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;s:empty/\u0026gt;\n\u0026lt;s:scriptless\u0026gt;say: \u0026lt;/s:scriptless\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReferencesToClassesFromDefaultPackagesInJSPFile",
          "displayName": "References to classes from the default package in JSP files",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any references to classes from the default package in JSP files.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;%!\n  Integer countSomeUsefulStuff() {\n    ...\n    new ClassFromDefaultPackage(...); // Error\n    new com.example.GoodClass(...); // Good\n  }\n  %\u0026gt;\n  \u0026lt;html\u0026gt;\n    \u0026lt;head\u0026gt;\n      \u0026lt;title\u0026gt;Hello, JSP!\u0026lt;/title\u0026gt;\n    \u0026lt;/head\u0026gt;\n  \u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cbr/\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003cb\u003eNOTE:\u003c/b\u003e Such references will not be resolved during compilation of the JSP\n  because a compiled class for the JSP will be usually placed in non-default package\n  (for example, \"org.apache.jsp\" in case of Tomcat, \"com.ibm._jsp\" in case of WebSphere),\n  but importing from the default package is not allowed in Java.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JspPropertiesInspection",
          "displayName": "Jsp properties inspection",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved properties from \u003ccode\u003e*.properties\u003c/code\u003e files.\n\n\u003cp\u003e\u003cb\u003eExample JSP file:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;%@ page contentType\u003d\"text/html;charset\u003dUTF-8\" language\u003d\"java\" %\u0026gt;\n\u0026lt;%@ taglib uri\u003d\"/tags/fmt\" prefix\u003d\"fmt\" %\u0026gt;\n\n\u0026lt;fmt:message bundle\u003d\"bundle.properties\" key\u003d\"unknown.property\"/\u0026gt; // Error: no such property inside referenced file\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ELSpecValidationInJSP",
          "displayName": "JSP EL specification validation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "EL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports possible problems caused by non-standard EL extensions:\nJSF EL expressions outside attributes, non-standard EL expressions, and so on.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;f:view\u0026gt;\n  \u0026lt;h:form\u0026gt;\n    \u0026lt;f:loadBundle var\u003d\"example\"/\u0026gt;\n    \u0026lt;h:commandButton action\u003d\"${example.size()}\"/\u0026gt; // Warning: method call is nonstandard extension\n  \u0026lt;/h:form\u0026gt;\n\u0026lt;/f:view\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "TaglibDomModelInspection",
          "displayName": "Tag library descriptor inspection",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports problems in JSP TLD files.\n\u003cp\u003eTLD files should conform to the JSP tag library schema.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JspAbsolutePathInspection",
          "displayName": "Absolute paths",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports absolute paths in JSP files.\n\u003cp\u003eAbsolute paths are prohibited in JSP, because they won\u0027t be resolved if your application context is not empty.\u003c/p\u003e\n\u003cp\u003eThe quick-fix adds a dynamic prefix to your path.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;%@page contentType\u003d\u0026quot;text/html; ISO-8859-1\u0026quot; %\u0026gt;\n\n  \u0026lt;a href\u003d\u0026quot;/hey.jsp\u0026quot;\u0026gt;hey\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;%@page contentType\u003d\u0026quot;text/html; ISO-8859-1\u0026quot; %\u0026gt;\n\n  \u0026lt;a href\u003d\u0026quot;${pageContext.request.contextPath}/hey.jsp\u0026quot;\u0026gt;hey\u0026lt;/a\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JspDirectiveInspection",
          "displayName": "Jsp directive inspection",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JSP import directives without a URI or tagdir attributes.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;html\u0026gt;\n  \u0026lt;body\u0026gt;\n    \u0026lt;%@ taglib prefix\u003d\"html\"%\u0026gt; // Error: either `uri` or `tagdir` attribute should be specified\n    ...\n  \u0026lt;/body\u0026gt;\n\u0026lt;/html\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ELMethodSignatureInspection",
          "displayName": "EL method signature inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "EL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method calls in EL that don\u0027t match \u003ccode\u003emethod-signature\u003c/code\u003e constraints in TLD files.\n\n\u003cp\u003e\u003cb\u003eExample Java class:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\npublic class ExampleAction {\n  public void goodAction() { ... }\n  public void badAction(String str) { ... }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cb\u003eExample JSP file:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;jsp:useBean id\u003d\"example\" scope\u003d\"request\" type\u003d\"org.example.ExampleAction\"/\u0026gt;\n\u0026lt;f:view\u0026gt;\n  \u0026lt;h:commandButton action\u003d\"#{example.goodAction}\"/\u0026gt; // Good: method accepts zero arguments and returns `void`\n  \u0026lt;h:commandButton action\u003d\"#{example.badAction}\"/\u0026gt; // Error: method `void badAction(String)` returns `java.lang.String` type instead of `void`\n\u0026lt;/f:view\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SelfIncludingJspFiles",
          "displayName": "Self-including JSP files",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any include directives in a JSP file which refer to the containing JSP file.\u003cbr/\u003e\n\n\u003cp\u003e\u003cb\u003eExample JSP file named main.jsp:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;jsp:include page\u003d\"./main.jsp\" /\u0026gt; // Error: attempt to include the containing file\n  ...\n\u003c/code\u003e\u003c/pre\u003e\u003cbr/\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003cb\u003eNOTE:\u003c/b\u003e Such self-including leads to infinite recursion and so the JSP file cannot be compiled.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n\n"
        },
        {
          "shortName": "FunctionELReferenceInspection",
          "displayName": "EL method function parameters count",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "EL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports different number of formal and actual parameters in EL function call.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ELDeferredExpressionsInspection",
          "displayName": "EL deferred expressions inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.jsp",
          "pluginVersion": "231.9011.34",
          "language": "EL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports dynamic expressions where deferred expressions are expected and vice versa.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;jsp:useBean id\u003d\"exampleBean\" scope\u003d\"request\" type\u003d\"java.util.Date\"/\u0026gt;\n\n\u0026lt;h:outputText id\u003d\"${exampleBean.day}\" value\u003d\"#{exampleBean.day}\" /\u0026gt; // Good\n\u0026lt;h:outputText id\u003d\"#{exampleBean.day}\" value\u003d\"${exampleBean.day}\" /\u0026gt; // Error: `id` attribute requires dynamic expression, `value` - deferred \n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Dockerfile",
      "inspections": [
        {
          "shortName": "DockerFileArgumentCount",
          "displayName": "Wrong number of arguments",
          "defaultSeverity": "ERROR",
          "pluginId": "Docker",
          "pluginVersion": "231.9011.34",
          "language": "Dockerfile",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports invalid number of arguments for the Dockerfile commands.\u003c/p\u003e\n\u003cp\u003e\n  Docker build will fail after reaching the instruction with an invalid number of arguments.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DockerFileAddOrCopyPaths",
          "displayName": "Invalid destination for \u0027\u0027ADD\u0027\u0027/\u0027\u0027COPY\u0027\u0027 commands",
          "defaultSeverity": "WARNING",
          "pluginId": "Docker",
          "pluginVersion": "231.9011.34",
          "language": "Dockerfile",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports invalid destination directories in \u003ccode\u003eADD\u003c/code\u003e and \u003ccode\u003eCOPY\u003c/code\u003e commands.\u003c/p\u003e\n\u003cp\u003e\n  According to the \u003ca href\u003d\"https://docs.docker.com/engine/reference/builder/#add\"\u003eDockerfile specification\u003c/a\u003e,\n  if multiple sources are specified, then the destination must be a directory, and it must end with a slash \u0027/\u0027.\n  Otherwise, Docker build will fail.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  # all the commands below will fail\n  ADD textA.txt textB.txt relativeDir\n  ADD [\"binaryA.jar\", \"binary2.jar\", \"destination\"]\n  COPY text3.txt text4.txt /absolute/path\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ADD textA.txt textB.txt relativeDir/\n  ADD [\"binaryA.jar\", \"binary2.jar\", \"destination/\"]\n  COPY text3.txt text4.txt /absolute/path/\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DockerFileAssignments",
          "displayName": "Invalid spaces in \u0027\u0027key\u003dvalue\u0027\u0027 pair",
          "defaultSeverity": "ERROR",
          "pluginId": "Docker",
          "pluginVersion": "231.9011.34",
          "language": "Dockerfile",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect spacing for key-value pairs in \u003ccode\u003eARG\u003c/code\u003e, \u003ccode\u003eENV\u003c/code\u003e, and \u003ccode\u003eLABEL\u003c/code\u003e commands.\u003c/p\u003e\n\u003cp\u003e\n  While it is not explicitly specified in the \u003ca href\u003d\"https://docs.docker.com/engine/reference/builder/#arg\"\u003eDockerfile specification\u003c/a\u003e,\n  some combinations of spacing for key-value pairs are not allowed.\n  Docker build will fail after reaching the problem instruction.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eThe \u003ccode\u003eARG\u003c/code\u003e command does not allow any spaces around \u0027\u003d\u0027\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eENV\u003c/code\u003e and \u003ccode\u003eLABEL\u003c/code\u003e do not allow spaces after \u0027\u003d\u0027\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e\n  # all the commands below will fail\n  ARG answer \u003d 42\n  ARG version\u003d \"1.0.0\"\n  LABEL \"maintained.by\"\u003d someone@gmail.com\n  ENV JAVA_HOME\u003d \"/docker-java-home\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ARG answer\u003d2\n  ARG version\u003d\"1.0.0\"\n  LABEL \"maintained.by\"\u003dsomeone@gmail.com\n  ENV JAVA_HOME\u003d\"/docker-java-home\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DockerJsonFormStringLiterals",
          "displayName": "A single quoted string in JSON array format",
          "defaultSeverity": "WARNING",
          "pluginId": "Docker",
          "pluginVersion": "231.9011.34",
          "language": "Dockerfile",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports a single quoted string in JSON array format.\n\u003c/p\u003e\n\u003cp\u003e\n  JSON array form, must use double-quotes (\") around words not single-quotes (\u0027). Otherwise, Docker build will fail.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  # all the commands below will fail\n  RUN [\u0027/bin/bash\u0027, \u0027-c\u0027, \u0027echo hello\u0027]\n  ADD [\u0027binaryA.jar\u0027, \u0027binary2.jar\u0027, \u0027destination/\u0027]\n  COPY [\u0027binaryA.jar\u0027, \u0027binary2.jar\u0027, \u0027destination/\u0027]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  RUN [\"/bin/bash\", \"-c\", \"echo hello\"]\n  ADD [\"binaryA.jar\", \"binary2.jar\", \"destination/\"]\n  COPY [\"binaryA.jar\", \"binary2.jar\", \"destination/\"]\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DockerFileRunCommandMissingContinuation",
          "displayName": "Missing continuation character for \u0027\u0027RUN\u0027\u0027 command",
          "defaultSeverity": "ERROR",
          "pluginId": "Docker",
          "pluginVersion": "231.9011.34",
          "language": "Dockerfile",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports missing continuation characters in \u003ccode\u003eRUN\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003e\n  In the \u003ci\u003eshell\u003c/i\u003e form of \u003ccode\u003eRUN\u003c/code\u003e command you should use a \u0027\\\u0027 (backslash)\n  to continue a single \u003ccode\u003eRUN\u003c/code\u003e instruction onto the next line.\n  Otherwise, Docker build will fail.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  # the command below will fail\n  RUN /bin/bash -c \u0027source $HOME/.bashrc;\n      echo $HOME\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  RUN /bin/bash -c \u0027source $HOME/.bashrc; \\\n      echo $HOME\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Potentially undesirable code constructs",
      "inspections": [
        {
          "shortName": "CommaExpressionJS",
          "displayName": "Comma expression",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a comma expression. Such\nexpressions are often a sign of overly clever code, and may lead to subtle bugs.\nComma expressions in the initializer or in the update section of \u003ccode\u003efor\u003c/code\u003e\nloops are ignored.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VoidExpressionJS",
          "displayName": "\u0027void\u0027 expression",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003evoid\u003c/code\u003e expression.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BreakStatementWithLabelJS",
          "displayName": "\u0027break\u0027 statement with label",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a labeled \u003ccode\u003ebreak\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AnonymousFunctionJS",
          "displayName": "Anonymous function",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an anonymous function. An explicit name of a function expression may be helpful for debugging.\nIgnores function expressions without names if they have a \u003ccode\u003ename\u003c/code\u003e property specified in the ECMAScript 6 standard.\nFor example, \u003ccode\u003evar bar \u003d function() {};\u003c/code\u003e is not reported.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConditionalExpressionJS",
          "displayName": "Conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a ternary conditional expression.  Some coding standards\nprohibit such expressions in favor of explicit \u003ccode\u003eif\u003c/code\u003e\nstatements.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DebuggerStatementJS",
          "displayName": "\u0027debugger\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003edebugger\u003c/code\u003e statement used for interaction\nwith the Javascript debuggers.  Such statements should not appear in production code.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ContinueStatementWithLabelJS",
          "displayName": "\u0027continue\u0027 statement with label",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a labeled \u003ccode\u003econtinue\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LabeledStatementJS",
          "displayName": "Labeled statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a labeled statement.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WithStatementJS",
          "displayName": "\u0027with\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003ewith\u003c/code\u003e statements. Such \nstatements result in potentially confusing implicit bindings, and may behave\nstrangely in setting new variables.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ContinueStatementJS",
          "displayName": "\u0027continue\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003econtinue\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BreakStatementJS",
          "displayName": "\u0027break\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003ebreak\u003c/code\u003e statements. Ignores \u003ccode\u003ebreak\u003c/code\u003e statements that end case blocks.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Test frameworks",
      "inspections": [
        {
          "shortName": "ConstantAssertArgument",
          "displayName": "Constant assert argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports constant arguments in \u003ccode\u003eassertTrue()\u003c/code\u003e, \u003ccode\u003eassertFalse()\u003c/code\u003e,\n\u003ccode\u003eassertNull()\u003c/code\u003e, and \u003ccode\u003eassertNotNull()\u003c/code\u003e calls.\n\u003cp\u003e\n  Calls to these methods with\n  constant arguments will either always succeed or always fail.\n  Such statements can easily be left over after refactoring and are probably not intended.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  assertNotNull(\"foo\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MisorderedAssertEqualsArguments",
          "displayName": "Misordered \u0027assertEquals()\u0027 arguments",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eassertEquals()\u003c/code\u003e that have the expected argument and the actual argument in the wrong order.\n\u003cp\u003e\n  For JUnit 3, 4, and 5 the correct order is \u003ccode\u003e(expected, actual)\u003c/code\u003e.\n  For TestNG the correct order is \u003ccode\u003e(actual, expected)\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Such calls will behave fine for assertions that pass, but may give confusing error reports on failure.\n  Use the quick-fix to flip the order of the arguments.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample (JUnit):\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  assertEquals(actual, expected)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  assertEquals(expected, actual)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifiableAssertion",
          "displayName": "Simplifiable assertion",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any \u003ccode\u003eassert\u003c/code\u003e calls that can be replaced with simpler and equivalent calls.\n\u003ctable\u003e\n  \u003ctr\u003e\u003cth\u003eExample\u003c/th\u003e\u003cth\u003e\u0026rarr;\u003c/th\u003e\u003cth\u003eReplacement\u003c/th\u003e\u003c/tr\u003e\n\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eassertEquals(\u003cb\u003etrue\u003c/b\u003e, x());\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003eassertTrue(x());\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eassertTrue(y() !\u003d null);\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003eassertNotNull(y());\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eassertTrue(z \u003d\u003d z());\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003eassertSame(z, z());\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eassertTrue(a.equals(a()));\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003eassertEquals(a, a());\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003ctd\u003e\u003ccode\u003eassertTrue(\u003cb\u003efalse\u003c/b\u003e);\u003c/code\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003c/td\u003e\n    \u003ctd\u003e\u003ccode\u003efail();\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MaskedAssertion",
          "displayName": "Assertion is suppressed by \u0027catch\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eassert\u003c/code\u003e statements and test framework assertions that are suppressed by a surrounding catch block.\nSuch assertions will never fail, as the thrown \u003ccode\u003eAssertionError\u003c/code\u003e will be caught and silently ignored.\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void javaAssertion() {\n    try {\n      ...\n      assert 1 \u003d\u003d 2;\n    } catch (AssertionError e) {\n      // the assertion is silently ignored\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test\n  void testWithAssertJ() {\n    try {\n      ...\n      assertThat(1).as(\"test\").isEqualTo(2);\n    } catch (AssertionError e) {\n      // the assertion is silently ignored\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cb\u003eExample 3:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test\n  void testWithJunit() {\n    try {\n      ...\n      assertEquals(1, 2);\n    } catch (AssertionError e) {\n      // the assertion is silently ignored\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssertWithoutMessage",
          "displayName": "Message missing on assertion",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eassertXXX()\u003c/code\u003e or \u003ccode\u003efail()\u003c/code\u003e without an error message string argument.\nAn error message on assertion failure may help clarify the test case\u0027s intent.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  assertTrue(checkValid());\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eassertTrue(checkValid(), \"|\");\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  The message argument is added before or after the existing arguments according to the assertions framework that you use.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Style issues",
      "inspections": [
        {
          "shortName": "SimplifiableCallChain",
          "displayName": "Call chain on collection type can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports two-call chains replaceable by a single call.\n\u003cp\u003eIt can help you to avoid redundant code execution.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the call chain with a single call.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      listOf(1, 2, 3).filter { it \u0026gt; 1 }.count()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      listOf(1, 2, 3).count { it \u0026gt; 1 }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceCallWithBinaryOperator",
          "displayName": "Can be replaced with binary operator",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports function calls that can be replaced with binary operators, in particular comparison-related ones.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun test(): Boolean {\n      return 2.compareTo(1) \u003e 0 // replaceable \u0027compareTo()\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun test(): Boolean {\n      return 2 \u003e 1\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceSizeZeroCheckWithIsEmpty",
          "displayName": "Size zero check can be replaced with \u0027isEmpty()\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003esize \u003d\u003d 0\u003c/code\u003e checks on \u003ccode\u003eCollections/Array/String\u003c/code\u003e that should be replaced with \u003ccode\u003eisEmpty()\u003c/code\u003e.\n\u003cp\u003eUsing \u003ccode\u003eisEmpty()\u003c/code\u003e makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the size check with \u003ccode\u003eisEmpty()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n      val arrayOf \u003d arrayOf(1, 2, 3)\n      arrayOf.size \u003d\u003d 0\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n      val arrayOf \u003d arrayOf(1, 2, 3)\n      arrayOf.isEmpty()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConvertCallChainIntoSequence",
          "displayName": "Call chain on collection could be converted into \u0027Sequence\u0027 to improve performance",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports call chain on a \u003ccode\u003eCollection\u003c/code\u003e that should be converted into \u003cb\u003eSequence\u003c/b\u003e.\n\u003cp\u003eEach \u003ccode\u003eCollection\u003c/code\u003e transforming function (such as \u003ccode\u003emap()\u003c/code\u003e or \u003ccode\u003efilter()\u003c/code\u003e) creates a new\n    \u003ccode\u003eCollection\u003c/code\u003e (typically \u003ccode\u003eList\u003c/code\u003e or \u003ccode\u003eSet\u003c/code\u003e) under the hood.\n    In case of multiple consequent calls, and a huge number of items in \u003ccode\u003eCollection\u003c/code\u003e, memory traffic might be significant.\n    In such a case, using \u003ccode\u003eSequence\u003c/code\u003e is preferred.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Entity(val key: String, val value: String)\n\n  fun getValues(lines: List\u0026lt;String\u0026gt;) \u003d lines\n      .filter { it.isNotEmpty() }\n      .map { it.split(\u0027,\u0027, limit \u003d 2) }\n      .filter { it.size \u003d\u003d 2 }\n      .map { Entity(it[0], it[1]) }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix wraps call chain into \u003ccode\u003easSequence()\u003c/code\u003e and \u003ccode\u003etoList()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Entity(val key: String, val value: String)\n\n  fun getValues(lines: List\u0026lt;String\u0026gt;) \u003d lines\n      .asSequence()\n      .filter { it.isNotEmpty() }\n      .map { it.split(\u0027,\u0027, limit \u003d 2) }\n      .filter { it.size \u003d\u003d 2 }\n      .map { Entity(it[0], it[1]) }\n      .toList()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FunctionWithLambdaExpressionBody",
          "displayName": "Function with \u0027\u003d { ... }\u0027 and inferred return type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports functions with \u003ccode\u003e\u003d { ... }\u003c/code\u003e and inferred return type.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun sum(a: Int, b: Int) \u003d { a + b } // The return type of this function is \u0027() -\u003e Int\u0027.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix removes braces:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun sum(a: Int, b: Int) \u003d a + b\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UseWithIndex",
          "displayName": "Manually incremented index variable can be replaced with use of \u0027withIndex()\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efor\u003c/code\u003e loops with a manually incremented index variable.\n\u003cp\u003e\u003ccode\u003efor\u003c/code\u003e loops with a manually incremented index variable can be simplified with the \u003ccode\u003ewithIndex()\u003c/code\u003e function.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eUse withIndex() instead of manual index increment\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(list: List\u0026lt;String\u0026gt;): Int? {\n      var index \u003d 0\n      for (s in list) { \u0026lt;\u003d\u003d can be simplified\n          val x \u003d s.length * index\n          index++\n          if (x \u003e 0) return x\n      }\n      return null\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(list: List\u0026lt;String\u0026gt;): Int? {\n      for ((index, s) in list.withIndex()) {\n          val x \u003d s.length * index\n          if (x \u003e 0) return x\n      }\n      return null\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "AddVarianceModifier",
          "displayName": "Type parameter can have \u0027in\u0027 or \u0027out\u0027 variance",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports type parameters that can have \u003ccode\u003ein\u003c/code\u003e or \u003ccode\u003eout\u003c/code\u003e variance.\n\u003cp\u003eUsing \u003ccode\u003ein\u003c/code\u003e and \u003ccode\u003eout\u003c/code\u003e variance provides more precise type inference in Kotlin and clearer code semantics.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Box\u0026lt;T\u0026gt;(val obj: T)\n\n  fun consumeString(box: Box\u0026lt;String\u0026gt;) {}\n  fun consumeCharSequence(box: Box\u0026lt;CharSequence\u0026gt;) {}\n\n  fun usage(box: Box\u0026lt;String\u0026gt;) {\n      consumeString(box)\n      consumeCharSequence(box) // Compilation error\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix adds the matching variance modifier:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Box\u0026lt;out T\u0026gt;(val obj: T)\n\n  fun consumeString(box: Box\u0026lt;String\u0026gt;) {}\n  fun consumeCharSequence(box: Box\u0026lt;CharSequence\u0026gt;) {}\n\n  fun usage(box: Box\u0026lt;String\u0026gt;) ++{\n      consumeString(box)\n      consumeCharSequence(box) // OK\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SafeCastWithReturn",
          "displayName": "Safe cast with \u0027return\u0027 should be replaced with \u0027if\u0027 type check",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports safe cast with \u003ccode\u003ereturn\u003c/code\u003e that can be replaced with \u003ccode\u003eif\u003c/code\u003e type check.\n\u003cp\u003eUsing corresponding functions makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the safe cast with \u003ccode\u003eif\u003c/code\u003e type check.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(x: Any) {\n      x as? String ?: return\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(x: Any) {\n      if (x !is String) return\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConvertLambdaToReference",
          "displayName": "Can be replaced with function reference",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports function literal expressions that can be replaced with function references.\n\u003cp\u003eReplacing lambdas with function references often makes code look more concise and understandable.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun Int.isEven() \u003d this % 2 \u003d\u003d 0\n\n  fun example() {\n      val numbers \u003d listOf(1, 2, 4, 7, 9, 10)\n      val evenNumbers \u003d numbers.filter { it.isEven() }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun Int.isEven() \u003d this % 2 \u003d\u003d 0\n\n  fun example() {\n      val numbers \u003d listOf(1, 2, 4, 7, 9, 10)\n      val evenNumbers \u003d numbers.filter(Int::isEven)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplacePutWithAssignment",
          "displayName": "\u0027map.put()\u0027 can be converted to assignment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003emap.put\u003c/code\u003e function calls that can be replaced with indexing operator (\u003ccode\u003e[]\u003c/code\u003e).\n\u003cp\u003eUsing syntactic sugar makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces \u003ccode\u003eput\u003c/code\u003e call with the assignment.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(map: MutableMap\u0026lt;Int, String\u0026gt;) {\n      map.put(42, \u0026quot;foo\u0026quot;)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(map: MutableMap\u0026lt;Int, String\u0026gt;) {\n      map[42] \u003d \u0026quot;foo\u0026quot;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceStringFormatWithLiteral",
          "displayName": "\u0027String.format\u0027 call can be replaced with string templates",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eString.format\u003c/code\u003e calls that can be replaced with string templates.\n\u003cp\u003eUsing string templates makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the call with a string template.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      val id \u003d \u0026quot;abc\u0026quot;\n      val date \u003d \u0026quot;123\u0026quot;\n      val s \u003d String.format(\u0026quot;%s_%s_%s\u0026quot;, id, date, id)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      val id \u003d \u0026quot;abc\u0026quot;\n      val date \u003d \u0026quot;123\u0026quot;\n      val s \u003d \u0026quot;${id}_${date}_$id\u0026quot;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnlabeledReturnInsideLambda",
          "displayName": "Unlabeled return inside lambda",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unlabeled \u003ccode\u003ereturn\u003c/code\u003e expressions inside inline lambda.\n\u003cp\u003eSuch expressions can be confusing because it might be unclear which scope belongs to \u003ccode\u003ereturn\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eChange to return@…\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;Int\u0026gt;) {\n      list.forEach {\n          // This return expression returns from the function test\n          // One can change it to return@forEach to change the scope\n          if (it \u003d\u003d 10) return\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;Int\u0026gt;) {\n      list.forEach {\n          if (it \u003d\u003d 10) return@test\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SimplifyAssertNotNull",
          "displayName": "\u0027assert\u0027 call can be replaced with \u0027!!\u0027 or \u0027?:\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eassert\u003c/code\u003e calls that check a not null value of the declared variable.\n\u003cp\u003eUsing \u003ccode\u003e!!\u003c/code\u003e or \u003ccode\u003e?:\u003c/code\u003e makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces \u003ccode\u003eassert\u003c/code\u003e with \u003ccode\u003e!!\u003c/code\u003e or \u003ccode\u003e?:\u003c/code\u003e operator in the variable initializer.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(p: Array\u0026lt;String?\u0026gt;) {\n      val v \u003d p[0]\n      assert(v !\u003d null, { \u0026quot;Should be not null\u0026quot; })\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(p: Array\u0026lt;String?\u0026gt;) {\n      val v \u003d p[0] ?: error(\u0026quot;Should be not null\u0026quot;)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ConvertTwoComparisonsToRangeCheck",
          "displayName": "Two comparisons should be converted to a range check",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports two consecutive comparisons that can be converted to a range check.\n\u003cp\u003eChecking against a range makes code simpler by removing test subject duplication.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun checkMonth(month: Int): Boolean {\n      return month \u003e\u003d 1 \u0026\u0026 month \u0026lt;\u003d 12\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix replaces the comparison-based check with a range one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun checkMonth(month: Int): Boolean {\n      return month in 1..12\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifiableCall",
          "displayName": "Library function call could be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports library function calls which could be replaced by simplified one.\n\u003cp\u003eUsing corresponding functions makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the function calls with another one.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;Any\u0026gt;) {\n      list.filter { it is String }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;Any\u0026gt;) {\n      list.filterIsInstance\u0026lt;String\u0026gt;()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BooleanLiteralArgument",
          "displayName": "Boolean literal argument without parameter name",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports call arguments with \u003ccode\u003eBoolean\u003c/code\u003e type without explicit parameter names specified.\n\u003cp\u003e\n    When multiple boolean literals are passed sequentially, it\u0027s easy to forget parameter ordering that could lead to mistakes.\n    Explicit parameter names allow for easier code reading and understanding.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun check(checkName: Boolean, checkAddress: Boolean, checkPhone: Boolean) {}\n\n  fun usage() {\n      check(true, false, true) // What does this mean?\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix adds missing parameter names:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun check(checkName: Boolean, checkAddress: Boolean, checkPhone: Boolean) {}\n\n  fun usage() {\n      check(checkName \u003d true, checkAddress \u003d false, checkPhone \u003d true)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MoveVariableDeclarationIntoWhen",
          "displayName": "Variable declaration could be moved inside \u0027when\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports variable declarations that can be moved inside a \u003ccode\u003ewhen\u003c/code\u003e expression.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun someCalc(x: Int) \u003d x * 42\n\nfun foo(x: Int): Int {\n  val a \u003d someCalc(x)\n  return when (a) {\n    1 -\u0026gt; a\n    2 -\u0026gt; 2 * a\n    else -\u0026gt; 24\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun foo(x: Int): Int {\n  return when (val a \u003d someCalc(x)) {\n    1 -\u0026gt; a\n    2 -\u0026gt; 2 * a\n    else -\u0026gt; 24\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceSubstringWithSubstringAfter",
          "displayName": "\u0027substring\u0027 call should be replaced with \u0027substringAfter\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls like \u003ccode\u003es.substring(s.indexOf(x))\u003c/code\u003e that can be replaced with \u003ccode\u003es.substringAfter(x)\u003c/code\u003e.\n\u003cp\u003eUsing \u003ccode\u003es.substringAfter(x)\u003c/code\u003e makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the \u003ccode\u003esubstring\u003c/code\u003e call with \u003ccode\u003esubstringAfter\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(s: String) {\n      s.substring(s.indexOf(\u0027x\u0027))\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(s: String) {\n      s.substringAfter(\u0027x\u0027)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LoopToCallChain",
          "displayName": "Loop can be replaced with stdlib operations",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efor\u003c/code\u003e loops that can be replaced with a sequence of stdlib operations (like \u003ccode\u003emap\u003c/code\u003e, \u003ccode\u003efilter\u003c/code\u003e, and so on).\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun foo(list: List\u0026lt;String\u0026gt;): List\u0026lt;Int\u0026gt; {\n  val result \u003d ArrayList\u0026lt;Int\u0026gt;()\n  for (s in list) {\n     if (s.length \u0026gt; 0)\n       result.add(s.hashCode())\n     }\n  return result\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun foo(list: List\u0026lt;String\u0026gt;): List\u0026lt;Int\u0026gt; {\n  val result \u003d list\n    .filter { it.length \u0026gt; 0 }\n    .map { it.hashCode() }\n  return result\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantAsSequence",
          "displayName": "Redundant \u0027asSequence\u0027 call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant \u003ccode\u003easSequence()\u003c/code\u003e call that can never have a positive performance effect.\u003c/p\u003e\n\u003cp\u003e\n    \u003ccode\u003easSequence()\u003c/code\u003e speeds up collection processing that includes multiple operations because it performs operations lazily\n    and doesn\u0027t create intermediate collections.\n\u003c/p\u003e\n\u003cp\u003e\n    However, if a terminal operation (such as \u003ccode\u003etoList()\u003c/code\u003e) is used right after \u003ccode\u003easSequence()\u003c/code\u003e, this doesn\u0027t give\n    you any positive performance effect.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;String\u0026gt;) {\n      list.\u003cb\u003easSequence()\u003c/b\u003e.last()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;String\u0026gt;) {\n      list.last()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ScopeFunctionConversion",
          "displayName": "Scope function can be converted to another one",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports scope functions (\u003ccode\u003elet\u003c/code\u003e, \u003ccode\u003erun\u003c/code\u003e, \u003ccode\u003eapply\u003c/code\u003e, \u003ccode\u003ealso\u003c/code\u003e) that can be converted between each other.\n\u003cp\u003eUsing corresponding functions makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the scope function to another one.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val x \u003d \u0026quot;\u0026quot;.let {\n      it.length\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val x \u003d \u0026quot;\u0026quot;.run {\n      length\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MapGetWithNotNullAssertionOperator",
          "displayName": "\u0027map.get()\u0027 with not-null assertion operator (!!)",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003emap.get()!!\u003c/code\u003e that can be replaced with \u003ccode\u003emap.getValue()\u003c/code\u003e, \u003ccode\u003emap.getOrElse()\u003c/code\u003e, and so on.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun test(map: Map\u0026lt;Int, String\u0026gt;): String \u003d map.get(0)!!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun test(map: Map\u0026lt;Int, String\u0026gt;): String \u003d map.getValue(0)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifyBooleanWithConstants",
          "displayName": "Boolean expression can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports boolean expression parts that can be reduced to constants.\n\u003cp\u003eThe quick-fix simplifies the condition.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun use(arg: Boolean) {\n      if (false \u003d\u003d arg) {\n\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun use(arg: Boolean) {\n      if (!arg) {\n\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifyNestedEachInScopeFunction",
          "displayName": "Scope function with nested forEach can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eforEach\u003c/code\u003e functions in the scope functions such as \u003ccode\u003ealso\u003c/code\u003e or \u003ccode\u003eapply\u003c/code\u003e that can be simplified.\n\u003cp\u003e\u003cb\u003eConvert forEach call to onEach\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;Int\u0026gt;) {\n      val x \u003d list.also { it.forEach { it + 4 } }.toString()\n      val y \u003d list.apply { forEach { println(it) } }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;Int\u0026gt;) {\n      val x \u003d list.onEach { it + 4 }.toString()\n      val y \u003d list.onEach { println(it) }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MoveLambdaOutsideParentheses",
          "displayName": "Lambda argument inside parentheses",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambda expressions in parentheses which can be moved outside.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun square(a: Int, b: (Int) -\u0026gt; Int) {\n  b(a * a)\n}\n\nfun foo() {\n  square(2, { it })\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun foo() {\n  square(2){ it }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceIsEmptyWithIfEmpty",
          "displayName": "\u0027if\u0027 condition can be replaced with lambda call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eisEmpty\u003c/code\u003e, \u003ccode\u003eisBlank\u003c/code\u003e, \u003ccode\u003eisNotEmpty\u003c/code\u003e, or \u003ccode\u003eisNotBlank\u003c/code\u003e calls in an \u003ccode\u003eif\u003c/code\u003e statement to assign a default value.\n\u003cp\u003eThe quick-fix replaces the \u003ccode\u003eif\u003c/code\u003e condition with \u003ccode\u003eifEmpty\u003c/code\u003e or \u003ccode\u003eifBlank\u003c/code\u003e calls.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;Int\u0026gt;): List\u0026lt;Int\u0026gt; {\n      return if (list.isEmpty()) {\n          println()\n          foo()\n      } else {\n          list\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;Int\u0026gt;): List\u0026lt;Int\u0026gt; {\n      return list.ifEmpty {\n          println()\n          foo()\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language version of the project or module is 1.3 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IfThenToElvis",
          "displayName": "If-Then foldable to \u0027?:\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif-then\u003c/code\u003e expressions that can be folded into elvis (\u003ccode\u003e?:\u003c/code\u003e) expressions.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun maybeFoo(): String? \u003d \"foo\"\n\n  var foo \u003d maybeFoo()\n  val bar \u003d if (foo \u003d\u003d null) \"hello\" else foo\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix converts the \u003ccode\u003eif-then\u003c/code\u003e expression into an elvis (\u003ccode\u003e?:\u003c/code\u003e) expression:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun maybeFoo(): String? \u003d \"foo\"\n\n  var foo \u003d maybeFoo()\n  val bar \u003d foo ?: \"hello\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceJavaStaticMethodWithKotlinAnalog",
          "displayName": "Java methods should be replaced with Kotlin analog",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a Java method call that can be replaced with a Kotlin function, for example, \u003ccode\u003eSystem.out.println()\u003c/code\u003e.\n\u003cp\u003eReplacing the code gets rid of the dependency to Java and makes the idiomatic Kotlin code.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the Java method calls on the same Kotlin call.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import java.util.Arrays\n\n  fun main() {\n      val a \u003d Arrays.asList(1, 3, null)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      val a \u003d listOf(1, 3, null)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CanBeVal",
          "displayName": "Local \u0027var\u0027 is never modified and can be declared as \u0027val\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables declared with the \u003ccode\u003evar\u003c/code\u003e keyword that are never modified.\n\u003cp\u003eKotlin encourages to declare practically immutable variables using the \u003ccode\u003eval\u003c/code\u003e keyword, ensuring that their value will never change.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun example() {\n      var primeNumbers \u003d listOf(1, 2, 3, 5, 7, 11, 13)\n      var fibonacciNumbers \u003d listOf(1, 1, 2, 3, 5, 8, 13)\n      print(\"Same numbers: \" + primeNumbers.intersect(fibonacciNumbers))\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix replaces the \u003ccode\u003evar\u003c/code\u003e keyword with \u003ccode\u003eval\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun example() {\n      val primeNumbers \u003d listOf(1, 2, 3, 5, 7, 11, 13)\n      val fibonacciNumbers \u003d listOf(1, 1, 2, 3, 5, 8, 13)\n      print(\"Same numbers: \" + primeNumbers.intersect(fibonacciNumbers))\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceRangeStartEndInclusiveWithFirstLast",
          "displayName": "Boxed properties should be replaced with unboxed",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003cb\u003eboxed\u003c/b\u003e \u003ccode\u003eRange.start\u003c/code\u003e and \u003ccode\u003eRange.endInclusive\u003c/code\u003e properties.\n\u003cp\u003eThese properties can be replaced with \u003cb\u003eunboxed\u003c/b\u003e \u003ccode\u003efirst\u003c/code\u003e and \u003ccode\u003elast\u003c/code\u003e properties to avoid redundant calls.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces \u003ccode\u003estart\u003c/code\u003e and \u003ccode\u003eendInclusive\u003c/code\u003e properties with the corresponding \u003ccode\u003efirst\u003c/code\u003e and \u003ccode\u003elast\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(range: CharRange) {\n      val lastElement \u003d range.endInclusive\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(range: CharRange) {\n      val lastElement \u003d range.last\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConvertSecondaryConstructorToPrimary",
          "displayName": "Convert to primary constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a secondary constructor that can be replaced with a more concise primary constructor.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class User {\n      val name: String\n\n      constructor(name: String) {\n          this.name \u003d name\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix converts code automatically:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class User(val name: String) {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceMapIndexedWithListGenerator",
          "displayName": "Replace \u0027mapIndexed\u0027 with List generator",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003emapIndexed\u003c/code\u003e call that can be replaced by \u003ccode\u003eList\u003c/code\u003e generator.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val a \u003d listOf(1, 2, 3).mapIndexed { i, _ -\u003e\n      i + 42\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val a \u003d List(listOf(1, 2, 3).size) { i -\u003e\n          i + 42\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnusedMainParameter",
          "displayName": "Main parameter is not necessary",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003emain\u003c/code\u003e function with an unused single parameter.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceSizeCheckWithIsNotEmpty",
          "displayName": "Size check can be replaced with \u0027isNotEmpty()\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports size checks of \u003ccode\u003eCollections/Array/String\u003c/code\u003e that should be replaced with \u003ccode\u003eisNotEmpty()\u003c/code\u003e.\n\u003cp\u003eUsing \u003ccode\u003eisNotEmpty()\u003c/code\u003e makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the size check with \u003ccode\u003eisNotEmpty()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n      val arrayOf \u003d arrayOf(1, 2, 3)\n      arrayOf.size \u0026gt; 0\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n      val arrayOf \u003d arrayOf(1, 2, 3)\n      arrayOf.isNotEmpty()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NullableBooleanElvis",
          "displayName": "Equality check can be used instead of elvis for nullable boolean check",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports cases when an equality check should be used instead of the elvis operator.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun check(a: Boolean? \u003d\u003d null) {\n    if (a ?: false) throw IllegalStateException()\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun check(a: Boolean? \u003d\u003d null) {\n    if (a \u003d\u003d true) throw IllegalStateException()\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceSubstringWithTake",
          "displayName": "\u0027substring\u0027 call should be replaced with \u0027take\u0027 call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls like \u003ccode\u003es.substring(0, x)\u003c/code\u003e that can be replaced with \u003ccode\u003es.take(x)\u003c/code\u003e.\n\u003cp\u003eUsing \u003ccode\u003etake()\u003c/code\u003e makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the \u003ccode\u003esubstring\u003c/code\u003e call with \u003ccode\u003etake()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(s: String) {\n      s.substring(0, 10)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(s: String) {\n      s.take(10)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantRunCatching",
          "displayName": "Redundant \u0027runCatching\u0027 call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003erunCatching\u003c/code\u003e calls that are immediately followed by \u003ccode\u003egetOrThrow\u003c/code\u003e.\nSuch calls can be replaced with just \u003ccode\u003erun\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() \u003d runCatching { doSomething() }.getOrThrow()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() \u003d run { doSomething() }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ConvertReferenceToLambda",
          "displayName": "Can be replaced with lambda",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function reference expression that can be replaced with a function literal (lambda).\n\u003cp\u003e\n    Sometimes, passing a lambda looks more straightforward and more consistent with the rest of the code.\n    Also, the fix might be handy if you need to replace a simple call with something more complex.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun Int.isEven() \u003d this % 2 \u003d\u003d 0\n\n  fun example() {\n      val numbers \u003d listOf(1, 2, 4, 7, 9, 10)\n      val evenNumbers \u003d numbers.filter(Int::isEven)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun Int.isEven() \u003d this % 2 \u003d\u003d 0\n\n  fun example() {\n      val numbers \u003d listOf(1, 2, 4, 7, 9, 10)\n      val evenNumbers \u003d numbers.filter { it.isEven() }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JoinDeclarationAndAssignment",
          "displayName": "Join declaration and assignment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports property declarations that can be joined with the following assignment.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val x: String\n  x \u003d System.getProperty(\"\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix joins the declaration with the assignment:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val x \u003d System.getProperty(\"\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceGuardClauseWithFunctionCall",
          "displayName": "Guard clause can be replaced with Kotlin\u0027s function call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports guard clauses that can be replaced with a function call.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun test(foo: Int?) {\n      if (foo \u003d\u003d null) throw IllegalArgumentException(\"foo\") // replaceable clause\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun test(foo: Int?) {\n      checkNotNull(foo)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceToStringWithStringTemplate",
          "displayName": "Call of \u0027toString\u0027 could be replaced with string template",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003etoString\u003c/code\u003e function calls that can be replaced with a string template.\n\u003cp\u003eUsing string templates makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces \u003ccode\u003etoString\u003c/code\u003e with a string template.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(): String {\n      val x \u003d 1\n      return x.toString()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(): String {\n      val x \u003d 1\n      return \u0026quot;$x\u0026quot;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceManualRangeWithIndicesCalls",
          "displayName": "Range can be converted to indices or iteration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003euntil\u003c/code\u003e and \u003ccode\u003erangeTo\u003c/code\u003e operators that can be replaced with \u003ccode\u003eCollection.indices\u003c/code\u003e or iteration over collection inside \u003ccode\u003efor\u003c/code\u003e loop.\n\u003cp\u003eUsing syntactic sugar makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the manual range with the corresponding construction.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main(args: Array\u0026lt;String\u0026gt;) {\n      for (index in 0..args.size - 1) {\n          println(args[index])\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main(args: Array\u0026lt;String\u0026gt;) {\n      for (element in args) {\n          println(element)\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceWithImportAlias",
          "displayName": "Fully qualified name can be replaced with existing import alias",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fully qualified names that can be replaced with an existing import alias.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nimport foo.Foo as Bar\nfun main() {\n    foo.Foo()\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nimport foo.Foo as Bar\nfun main() {\n    Bar()\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "FoldInitializerAndIfToElvis",
          "displayName": "If-Null return/break/... foldable to \u0027?:\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an \u003ccode\u003eif\u003c/code\u003e expression that checks variable being null or not right after initializing it that can be converted into an elvis operator in the initializer.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(foo: Int?, bar: Int): Int {\n      var i \u003d foo\n      if (i \u003d\u003d null) {\n          return bar\n      }\n      return i\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix converts the \u003ccode\u003eif\u003c/code\u003e expression with an initializer into an elvis expression:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(foo: Int?, bar: Int): Int {\n      var i \u003d foo ?: return bar\n      return i\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ProtectedInFinal",
          "displayName": "\u0027protected\u0027 visibility is effectively \u0027private\u0027 in a final class",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eprotected\u003c/code\u003e visibility used inside of a \u003ccode\u003efinal\u003c/code\u003e class.\nIn such cases \u003ccode\u003eprotected\u003c/code\u003e members are accessible only in the class itself, so they are effectively \u003ccode\u003eprivate\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class FinalClass {\n      \u003cb\u003eprotected\u003c/b\u003e fun foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class FinalClass {\n      \u003cb\u003eprivate\u003c/b\u003e fun foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceNotNullAssertionWithElvisReturn",
          "displayName": "Not-null assertion can be replaced with \u0027return\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports not-null assertion (\u003ccode\u003e!!\u003c/code\u003e) calls that can be replaced with the elvis operator and return (\u003ccode\u003e?: return\u003c/code\u003e).\n\u003cp\u003eA not-null assertion can lead to NPE (NullPointerException) that is not expected. Avoiding the use of \u003ccode\u003e!!\u003c/code\u003e is good practice.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the not-null assertion with \u003ccode\u003ereturn\u003c/code\u003e or \u003ccode\u003ereturn null\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(number: Int?) {\n      val x \u003d number!!\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(number: Int?) {\n      val x \u003d number ?: return\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConvertPairConstructorToToFunction",
          "displayName": "Convert Pair constructor to \u0027to\u0027 function",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003ePair\u003c/code\u003e constructor invocation that can be replaced with a \u003ccode\u003eto()\u003c/code\u003e infix function call.\n\u003cp\u003e\n    Explicit constructor invocations may add verbosity, especially if they are used multiple times.\n    Replacing constructor calls with \u003ccode\u003eto()\u003c/code\u003e makes code easier to read and maintain.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val countries \u003d mapOf(\n      Pair(\"France\", \"Paris\"),\n      Pair(\"Spain\", \"Madrid\"),\n      Pair(\"Germany\", \"Berlin\")\n  )\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val countries \u003d mapOf(\n      \"France\" to \"Paris\",\n      \"Spain\" to \"Madrid\",\n      \"Germany\" to \"Berlin\"\n  )\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SortModifiers",
          "displayName": "Non-canonical modifier order",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports modifiers that do not follow the order recommended by the \u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#modifiers-order\"\u003estyle guide\u003c/a\u003e.\n\u003cp\u003e\u003cb\u003eSort modifiers\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  private inline fun correctOrder(f: () -\u003e Unit) {} // \u0026lt;\u003d\u003d Ok\n\n  infix private fun Int.wrongOrder(expr: Int) {} // \u0026lt;\u003d\u003d wrong order, quick-fix amends the modifiers to \"private infix\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ConvertTryFinallyToUseCall",
          "displayName": "Convert try / finally to use() call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003etry-finally\u003c/code\u003e block with \u003ccode\u003eresource.close()\u003c/code\u003e in \u003ccode\u003efinally\u003c/code\u003e which can be converted to a \u003ccode\u003eresource.use()\u003c/code\u003e call.\n\u003cp\u003e\u003ccode\u003euse()\u003c/code\u003e is easier to read and less error-prone as there is no need in explicit \u003ccode\u003eclose()\u003c/code\u003e call.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun example() {\n      val reader \u003d File(\"file.txt\").bufferedReader()\n      try {\n          reader.lineSequence().forEach(::print)\n      } finally {\n          reader.close()\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun example() {\n      File(\"file.txt\").bufferedReader().use { reader -\u003e\n          reader.lineSequence().forEach(::print)\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceCollectionCountWithSize",
          "displayName": "Collection count can be converted to size",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eCollection\u0026lt;T\u0026gt;.count()\u003c/code\u003e.\n\u003cp\u003e\n    This function call can be replaced with \u003ccode\u003e.size\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003ccode\u003e.size\u003c/code\u003e form ensures that the operation is O(1) and won\u0027t allocate extra objects, whereas\n    \u003ccode\u003ecount()\u003c/code\u003e could be confused with \u003ccode\u003eIterable\u0026lt;T\u0026gt;.count()\u003c/code\u003e, which is O(n) and allocating.\n    \u003cbr\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun foo() {\n      var list \u003d listOf(1,2,3)\n      list.count() // replaceable \u0027count()\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun foo() {\n      var list \u003d listOf(1,2,3)\n      list.size\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MemberVisibilityCanBePrivate",
          "displayName": "Class member can have \u0027private\u0027 visibility",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declarations that can be made \u003ccode\u003eprivate\u003c/code\u003e to follow the encapsulation principle.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass Service(val url: String) {\n    fun connect(): URLConnection \u003d URL(url).openConnection()\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied (considering there are no usages of \u003ccode\u003eurl\u003c/code\u003e outside of \u003ccode\u003eService\u003c/code\u003e class):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass Service(private val url: String) {\n    fun connect(): URLConnection \u003d URL(url).openConnection()\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IntroduceWhenSubject",
          "displayName": "\u0027when\u0027 that can be simplified by introducing an argument",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003ewhen\u003c/code\u003e expression that can be simplified by introducing a subject argument.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(obj: Any): String {\n      return when {\n          obj is String -\u003e \"string\"\n          obj is Int -\u003e \"int\"\n          else -\u003e \"unknown\"\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix introduces a subject argument:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(obj: Any): String {\n      return when (obj) {\n          is String -\u003e \"string\"\n          is Int -\u003e \"int\"\n          else -\u003e \"unknown\"\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CascadeIf",
          "displayName": "Cascade if can be replaced with when",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements with three or more branches that can be replaced with the \u003ccode\u003ewhen\u003c/code\u003e expression.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun checkIdentifier(id: String) {\n      fun Char.isIdentifierStart() \u003d this in \u0027A\u0027..\u0027z\u0027\n      fun Char.isIdentifierPart() \u003d isIdentifierStart() || this in \u00270\u0027..\u00279\u0027\n\n      if (id.isEmpty()) {\n          print(\"Identifier is empty\")\n      } else if (!id.first().isIdentifierStart()) {\n          print(\"Identifier should start with a letter\")\n      } else if (!id.subSequence(1, id.length).all(Char::isIdentifierPart)) {\n          print(\"Identifier should contain only letters and numbers\")\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix converts the \u003ccode\u003eif\u003c/code\u003e expression to \u003ccode\u003ewhen\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun checkIdentifier(id: String) {\n      fun Char.isIdentifierStart() \u003d this in \u0027A\u0027..\u0027z\u0027\n      fun Char.isIdentifierPart() \u003d isIdentifierStart() || this in \u00270\u0027..\u00279\u0027\n\n      when {\n          id.isEmpty() -\u003e {\n              print(\"Identifier is empty\")\n          }\n          !id.first().isIdentifierStart() -\u003e {\n              print(\"Identifier should start with a letter\")\n          }\n          !id.subSequence(1, id.length).all(Char::isIdentifierPart) -\u003e {\n              print(\"Identifier should contain only letters and numbers\")\n          }\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceSubstringWithDropLast",
          "displayName": "\u0027substring\u0027 call should be replaced with \u0027dropLast\u0027 call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls like \u003ccode\u003es.substring(0, s.length - x)\u003c/code\u003e that can be replaced with \u003ccode\u003es.dropLast(x)\u003c/code\u003e.\n\u003cp\u003eUsing corresponding functions makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the \u003ccode\u003esubstring\u003c/code\u003e call with \u003ccode\u003edropLast\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(s: String) {\n      s.substring(0, s.length - 5)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(s: String) {\n      s.dropLast(5)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceRangeToWithUntil",
          "displayName": "\u0027rangeTo\u0027 or the \u0027..\u0027 call should be replaced with \u0027until\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003erangeTo\u003c/code\u003e or the \u003ccode\u003e..\u003c/code\u003e operator instead of calls to \u003ccode\u003euntil\u003c/code\u003e.\n\u003cp\u003eUsing corresponding functions makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces \u003ccode\u003erangeTo\u003c/code\u003e or the \u003ccode\u003e..\u003c/code\u003e call with \u003ccode\u003euntil\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(a: Int) {\n      for (i in 0..a - 1) {\n\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(a: Int) {\n      for (i in 0 until a) {\n\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceNegatedIsEmptyWithIsNotEmpty",
          "displayName": "Negated call can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports negation \u003ccode\u003eisEmpty()\u003c/code\u003e and \u003ccode\u003eisNotEmpty()\u003c/code\u003e for collections and \u003ccode\u003eString\u003c/code\u003e, or \u003ccode\u003eisBlank()\u003c/code\u003e and \u003ccode\u003eisNotBlank()\u003c/code\u003e for \u003ccode\u003eString\u003c/code\u003e.\n\u003cp\u003eUsing corresponding functions makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the negation call with the corresponding call from the Standard Library.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      val list \u003d listOf(1,2,3)\n      if (!list.isEmpty()) {\n          // do smth\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      val list \u003d listOf(1,2,3)\n      if (list.isNotEmpty()) {\n          // do smth\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UsePropertyAccessSyntax",
          "displayName": "Accessor call that can be replaced with property access syntax",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Java \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e method calls that can be replaced with the Kotlin synthetic properties.\n\u003cp\u003e\u003cb\u003eUse property access syntax\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Java:\n  public class JavaClassWithGetter {\n      private final String expr \u003d \"result\";\n\n      // ...\n\n      public String getExpr() {\n          return expr;\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Kotlin:\n  fun test(j: JavaClassWithGetter) {\n      // ...\n      j.getExpr() // \u0026lt;\u003d\u003d The quick-fix simplifies the expression to \u0027j.expr\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SuspiciousAsDynamic",
          "displayName": "Suspicious \u0027asDynamic\u0027 member invocation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003easDynamic\u003c/code\u003e function on a receiver of dynamic type.\n\u003cp\u003e\u003ccode\u003easDynamic\u003c/code\u003e function has no effect for expressions of dynamic type.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003easDynamic\u003c/code\u003e function on a receiver of dynamic type can lead to runtime problems because \u003ccode\u003easDynamic\u003c/code\u003e\n    will be executed in JavaScript environment, and such function may not be present at runtime.\n    The intended way is to use this function on usual Kotlin type.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eRemove \"asDynamic\" invocation\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun wrongUsage(d: Dynamic) {\n     d.asDynamic().foo() // \u0026lt;\u003d\u003d redundant, quick-fix simplifies the call expression to \"d.foo()\"\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Destructure",
          "displayName": "Use destructuring declaration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declarations that can be destructured.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class My(val first: String, val second: Int, val third: Boolean)\n\n  fun foo(list: List\u0026lt;My\u003e) {\n      list.forEach { my -\u003e\n          println(my.second)\n          println(my.third)\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix destructures the declaration and introduces new variables with names from the corresponding class:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class My(val first: String, val second: Int, val third: Boolean)\n\n  fun foo(list: List\u0026lt;My\u003e) {\n      list.forEach { (_, second, third) -\u003e\n          println(second)\n          println(third)\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ImplicitThis",
          "displayName": "Implicit \u0027this\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of implicit \u003cb\u003ethis\u003c/b\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n      fun s() \u003d \"\"\n\n      fun test() {\n          s()\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix specifies \u003cb\u003ethis\u003c/b\u003e explicitly:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n      fun s() \u003d \"\"\n\n      fun test() {\n          this.s()\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ConvertToStringTemplate",
          "displayName": "String concatenation that can be converted to string template",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports string concatenation that can be converted to a string template.\n\u003cp\u003eUsing string templates is recommended as it makes code easier to read.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun example() {\n      val capitals \u003d mapOf(\"France\" to \"Paris\", \"Spain\" to \"Madrid\")\n      for ((country, capital) in capitals) {\n          print(capital + \" is a capital of \" + country)\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun example() {\n      val capitals \u003d mapOf(\"France\" to \"Paris\", \"Spain\" to \"Madrid\")\n      for ((country, capital) in capitals) {\n          print(\"$capital is a capital of $country\")\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "NestedLambdaShadowedImplicitParameter",
          "displayName": "Nested lambda has shadowed implicit parameter",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports nested lambdas with shadowed implicit parameters.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun foo(listOfLists: List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;) {\n  listOfLists.forEach {\n    it.forEach {\n      println(it)\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun foo(listOfLists: List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;) {\n  listOfLists.forEach {\n    it.forEach { it1 -\u0026gt;\n      println(it1)\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceAssociateFunction",
          "displayName": "\u0027associate\u0027 can be replaced with \u0027associateBy\u0027 or \u0027associateWith\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eassociate()\u003c/code\u003e and \u003ccode\u003eassociateTo()\u003c/code\u003e that can be replaced with \u003ccode\u003eassociateBy()\u003c/code\u003e or \u003ccode\u003eassociateWith()\u003c/code\u003e.\n\u003cp\u003e\n    Both functions accept a transformer function applied to elements of a given sequence or collection (as a receiver).\n    The pairs are then used to build the resulting \u003ccode\u003eMap\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n    Given the transformer refers to \u003ccode\u003eit\u003c/code\u003e, the \u003ccode\u003eassociate[To]()\u003c/code\u003e call can be replaced with more performant \u003ccode\u003eassociateBy()\u003c/code\u003e\n    or \u003ccode\u003eassociateWith()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun getKey(i: Int) \u003d 1L\n  fun getValue(i: Int) \u003d 1L\n\n  fun test() {\n      arrayOf(1).associate { getKey(it) to it }  // replaceable \u0027associate()\u0027\n      listOf(1).associate { it to getValue(it) } // replaceable \u0027associate()\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun getKey(i: Int) \u003d 1L\n  fun getValue(i: Int) \u003d 1L\n\n  fun test() {\n      arrayOf(1).associateBy { getKey(it) }\n      listOf(1).associateWith { getValue(it) }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OptionalExpectation",
          "displayName": "Optionally expected annotation has no actual annotation",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports optionally expected annotations without actual annotation in some platform modules.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// common code\n@OptionalExpectation\nexpect annotation class JvmName(val name: String)\n\n@JvmName(name \u003d \"JvmFoo\")\nfun foo() { }\n\n// jvm code\nactual annotation class JvmName(val name: String)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe inspection also reports cases when \u003ccode\u003eactual annotation class JvmName\u003c/code\u003e is omitted for non-JVM platforms (for example, Native).\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceSubstringWithIndexingOperation",
          "displayName": "\u0027substring\u0027 call should be replaced with indexing operator",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls like \u003ccode\u003e\"abc\".substring(0, 1)\u003c/code\u003e that can be replaced with \u003ccode\u003e\"abc\"[0]\u003c/code\u003e.\n\u003cp\u003eObtaining the element by index makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the \u003ccode\u003esubstring\u003c/code\u003e call with the indexing operator.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n      \u0026quot;abc\u0026quot;.substring(0, 1)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n      \u0026quot;abc\u0026quot;[0]\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceToWithInfixForm",
          "displayName": "\u0027to\u0027 call should be replaced with infix form",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eto\u003c/code\u003e function calls that can be replaced with the infix form.\n\u003cp\u003eUsing the infix form makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces \u003ccode\u003eto\u003c/code\u003e with the infix form.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(a: Int, b: Int) {\n      val pair \u003d a.to(b)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(a: Int, b: Int) {\n      val pair \u003d a to b\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnclearPrecedenceOfBinaryExpression",
          "displayName": "Multiple operators with different precedence",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports binary expressions that consist of different operators without parentheses.\n\u003cp\u003eSuch expressions can be less readable due to different \u003ca href\u003d\"https://kotlinlang.org/docs/reference/grammar.html#expressions\"\u003eprecedence rules\u003c/a\u003e of operators.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n  fun foo(b: Boolean?, i: Int?) {\n      val x \u003d b ?: i \u003d\u003d null // evaluated as `(b ?: i) \u003d\u003d null`\n      val y \u003d i ?: 0 + 1 // evaluated as `i ?: (0 + 1)`\n  }\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceReadLineWithReadln",
          "displayName": "\u0027readLine\u0027 can be replaced with \u0027readln\u0027 or \u0027readlnOrNull\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ereadLine()\u003c/code\u003e that can be replaced with \u003ccode\u003ereadln()\u003c/code\u003e or \u003ccode\u003ereadlnOrNull()\u003c/code\u003e.\n\u003cp\u003e\n    Using corresponding functions makes your code simpler.\n\u003c/p\u003e\n\u003cp\u003e\n    The quick-fix replaces \u003ccode\u003ereadLine()!!\u003c/code\u003e with \u003ccode\u003ereadln()\u003c/code\u003e and \u003ccode\u003ereadLine()\u003c/code\u003e with \u003ccode\u003ereadlnOrNull()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    val x \u003d readLine()!!\n    val y \u003d readLine()?.length\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    val x \u003d readln()\n    val y \u003d readlnOrNull()?.length\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "TrailingComma",
          "displayName": "Trailing comma recommendations",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports trailing commas that do not follow the recommended \u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#trailing-commas\"\u003estyle guide\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceSubstringWithSubstringBefore",
          "displayName": "\u0027substring\u0027 call should be replaced with \u0027substringBefore\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls like \u003ccode\u003es.substring(0, s.indexOf(x))\u003c/code\u003e that can be replaced with \u003ccode\u003es.substringBefore(x)\u003c/code\u003e.\n\u003cp\u003eUsing \u003ccode\u003esubstringBefore()\u003c/code\u003e makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the \u003ccode\u003esubstring\u003c/code\u003e call with \u003ccode\u003esubstringBefore\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(s: String) {\n      s.substring(0, s.indexOf(\u0027x\u0027))\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(s: String) {\n      s.substringBefore(\u0027x\u0027)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceAssertBooleanWithAssertEquality",
          "displayName": "Assert boolean could be replaced with assert equality",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eassertTrue()\u003c/code\u003e and \u003ccode\u003eassertFalse()\u003c/code\u003e that can be replaced with assert equality functions.\n\u003cp\u003e\n    \u003ccode\u003eassertEquals()\u003c/code\u003e, \u003ccode\u003eassertSame()\u003c/code\u003e, and their negating counterparts (-Not-) provide more informative messages on\n    failure.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  assertTrue(a \u003d\u003d b)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  assertEquals(a, b)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceArrayOfWithLiteral",
          "displayName": "\u0027arrayOf\u0027 call can be replaced with array literal [...]",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003earrayOf\u003c/code\u003e calls that can be replaced with array literals \u003ccode\u003e[...]\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  annotation class MyAnnotation(val strings: Array\u0026lt;String\u0026gt;)\n\n  @MyAnnotation(arrayOf(\"alpha\", \"beta\", \"omega\")) // replaceable \u0027arrayOf()\u0027\n  class MyClass\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  annotation class MyAnnotation(val strings: Array\u0026lt;String\u0026gt;)\n\n  @MyAnnotation([\"alpha\", \"beta\", \"omega\"])\n  class MyClass\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ObjectLiteralToLambda",
          "displayName": "Object literal can be converted to lambda",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports anonymous object literals implementing a Java interface with a single abstract method that can be converted into a call with a lambda expression.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass SomeService {\n  val threadPool \u003d Executors.newCachedThreadPool()\n    \n  fun foo() {\n    threadPool.submit(object : Runnable {\n      override fun run() {\n        println(\"hello\")\n      }\n    })\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n    threadPool.submit { println(\"hello\") }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UseExpressionBody",
          "displayName": "Expression body syntax is preferable here",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ereturn\u003c/code\u003e expressions (one-liners or \u003ccode\u003ewhen\u003c/code\u003e) that can be replaced with expression body syntax.\n\u003cp\u003eExpression body syntax is recommended by the \u003ca href\u003d\"https://kotlinlang.org/docs/coding-conventions.html#functions\"\u003estyle guide\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eConvert to expression body\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun sign(x: Int): Int {\n      return when { // \u0026lt;\u003d\u003d can be simplified\n          x \u0026lt; 0 -\u003e -1\n          x \u003e 0 -\u003e 1\n          else -\u003e 0\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun sign(x: Int): Int \u003d when {\n      x \u0026lt; 0 -\u003e -1\n      x \u003e 0 -\u003e 1\n      else -\u003e 0\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "AddOperatorModifier",
          "displayName": "Function should have \u0027operator\u0027 modifier",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function that matches one of the operator conventions but lacks the \u003ccode\u003eoperator\u003c/code\u003e keyword.\n\u003cp\u003eBy adding the \u003ccode\u003eoperator\u003c/code\u003e modifier, you might allow function consumers to write idiomatic Kotlin code.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Complex(val real: Double, val imaginary: Double) {\n      fun plus(other: Complex) \u003d\n          Complex(real + other.real, imaginary + other.imaginary)\n  }\n\n  fun usage(a: Complex, b: Complex) {\n      a.plus(b)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix adds the \u003ccode\u003eoperator\u003c/code\u003e modifier keyword:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Complex(val real: Double, val imaginary: Double) {\n      operator fun plus(other: Complex) \u003d\n          Complex(real + other.real, imaginary + other.imaginary)\n  }\n\n  fun usage(a: Complex, b: Complex) {\n      a + b\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceGetOrSet",
          "displayName": "Explicit \u0027get\u0027 or \u0027set\u0027 call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports explicit calls to \u003ccode\u003eget\u003c/code\u003e or \u003ccode\u003eset\u003c/code\u003e functions which can be replaced by an indexing operator \u003ccode\u003e[]\u003c/code\u003e.\n\u003cp\u003e\n    Kotlin allows custom implementations for the predefined set of operators on types.\n    To overload an operator, you can mark the corresponding function with the \u003ccode\u003eoperator\u003c/code\u003e modifier:\n    \u003cpre\u003e\u003ccode\u003e\n  operator fun get(index: Int) {}\n  operator fun set(index: Int, value: Int) {}\n    \u003c/code\u003e\u003c/pre\u003e\n\nThe functions above correspond to the indexing operator.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  class Test {\n      operator fun get(i: Int): Int \u003d 0\n  }\n\n  fun test() {\n      Test().get(0) // replaceable \u0027get()\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  class Test {\n      operator fun get(i: Int): Int \u003d 0\n  }\n\n  fun test() {\n      Test()[0]\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceUntilWithRangeUntil",
          "displayName": "Replace \u0027until\u0027 with \u0027..\u003c\u0027 operator",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003euntil\u003c/code\u003e that can be replaced with \u003ccode\u003e..\u0026lt;\u003c/code\u003e operator.\u003c/p\u003e\n\u003cp\u003eEvery \u003ccode\u003euntil\u003c/code\u003e to \u003ccode\u003e..\u0026lt;\u003c/code\u003e replacement doesn\u0027t change the semantic in any way.\u003c/p\u003e\n\u003cp\u003eThe UX research shows that developers make ~20-30% fewer errors when reading code containing \u003ccode\u003e..\u0026lt;\u003c/code\u003e compared to \u003ccode\u003euntil\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main(args: Array\u0026lt;String\u0026gt;) {\n      for (index in 0 until args.size) {\n          println(index)\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main(args: Array\u0026lt;String\u0026gt;) {\n      for (index in 0..\u0026lt;args.size) {\n          println(index)\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is 1.7 or higher, and\n    \u003ccode\u003e-opt-in\u003dkotlin.ExperimentalStdlibApi\u003c/code\u003ecompiler flag is provided.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VerboseNullabilityAndEmptiness",
          "displayName": "Verbose nullability and emptiness check",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports combination of \u003ccode\u003enull\u003c/code\u003e and emptiness checks that can be simplified into a single check.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces highlighted checks with a combined check call, such as \u003ccode\u003eisNullOrEmpty()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;Int\u003e?) {\n      if (list \u003d\u003d null || list.isEmpty()) {\n          println(\"List is empty!\")\n      } else {\n          println(list.joinToString())\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;Int\u003e?) {\n      if (list.isNullOrEmpty()) {\n          println(\"List is empty!\")\n      } else {\n          println(list.joinToString())\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantObjectTypeCheck",
          "displayName": "Non-idiomatic \u0027is\u0027 type check for an object",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports non-idiomatic \u003ccode\u003eis\u003c/code\u003e type checks for an object.\u003c/p\u003e\n\u003cp\u003eIt\u0027s recommended to replace such checks with reference comparison.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  object Foo\n\n  fun foo(arg: Any) \u003d when {\n      arg \u003cb\u003eis\u003c/b\u003e Foo -\u003e ...\n      arg \u003cb\u003e!is\u003c/b\u003e Foo -\u003e ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  object Foo\n\n  fun foo(arg: Any) \u003d when {\n      arg \u003cb\u003e\u003d\u003d\u003d\u003c/b\u003e Foo -\u003e ...\n      arg \u003cb\u003e!\u003d\u003d\u003c/b\u003e Foo -\u003e ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RemoveEmptyParenthesesFromAnnotationEntry",
          "displayName": "Remove unnecessary parentheses",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant empty parentheses in annotation entries.\n\u003cp\u003eUse the \u0027Remove unnecessary parentheses\u0027 quick-fix to clean up the code.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  annotation class MyAnnotationA\n  annotation class MyAnnotationB(val x: Int)\n  annotation class MyAnnotationC(val x: Int \u003d 10) // default value is present\n\n  @MyAnnotationA() // \u0026lt;\u003d\u003d parentheses are redundant\n  fun testA() {\n  }\n\n  @MyAnnotationB() // \u0026lt;\u003d\u003d missing argument, parentheses are required\n  fun testB() {\n  }\n\n  @MyAnnotationC() // \u0026lt;\u003d\u003d parentheses are redundant\n  fun testC() {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MayBeConstant",
          "displayName": "Might be \u0027const\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports top-level \u003ccode\u003eval\u003c/code\u003e properties in objects that might be declared as \u003ccode\u003econst\u003c/code\u003e\nfor better performance and Java interoperability.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  object A {\n      val foo \u003d 1\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  object A {\n      const val foo \u003d 1\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "LiftReturnOrAssignment",
          "displayName": "Return or assignment can be lifted out",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003ewhen\u003c/code\u003e, and \u003ccode\u003etry\u003c/code\u003e statements that can be converted to expressions\nby lifting the \u003ccode\u003ereturn\u003c/code\u003e statement or an assignment out.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(arg: Int): String {\n      when (arg) {\n          0 -\u003e return \"Zero\"\n          1 -\u003e return \"One\"\n          else -\u003e return \"Multiple\"\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\nAfter the quick-fix is applied:\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(arg: Int): String {\n      return when (arg) {\n          0 -\u003e \"Zero\"\n          1 -\u003e \"One\"\n          else -\u003e \"Multiple\"\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceRangeToWithRangeUntil",
          "displayName": "\u0027rangeTo\u0027 or the \u0027..\u0027 call should be replaced with \u0027..\u003c\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003erangeTo\u003c/code\u003e or the \u003ccode\u003e..\u003c/code\u003e operator instead of calls to \u003ccode\u003e..\u003c\u003c/code\u003e.\n\u003cp\u003eUsing corresponding functions makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces \u003ccode\u003erangeTo\u003c/code\u003e or the \u003ccode\u003e..\u003c/code\u003e call with \u003ccode\u003e..\u003c\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(a: Int) {\n      for (i in 0..a - 1) {\n\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(a: Int) {\n      for (i in 0..\u0026lt;a) {\n\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaCollectionsStaticMethod",
          "displayName": "Java Collections static method call can be replaced with Kotlin stdlib",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a Java \u003ccode\u003eCollections\u003c/code\u003e static method call that can be replaced with Kotlin stdlib.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import java.util.Collections\n\n  fun test() {\n      val mutableList \u003d mutableListOf(1, 2)\n      Collections.fill(mutableList, 3)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix replaces Java \u003ccode\u003eCollections\u003c/code\u003e static method call with the corresponding Kotlin stdlib method call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import java.util.Collections\n\n  fun test() {\n      val mutableList \u003d mutableListOf(1, 2)\n      mutableList.fill(3)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CopyWithoutNamedArguments",
          "displayName": "\u0027copy\u0027 method of data class is called without named arguments",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to a data class\u0027 \u003ccode\u003ecopy()\u003c/code\u003e method without named arguments.\n\u003cp\u003e\n    As all arguments of the \u003ccode\u003ecopy()\u003c/code\u003e function are optional, it might be hard to understand what properties are modified.\n    Providing parameter names explicitly makes code easy to understand without navigating to the \u003ccode\u003edata class\u003c/code\u003e declaration.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class User(val name: String, val age: Int)\n\n  fun copyUser(user: User): User {\n      return user.copy(\"John\")\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix provides parameter names to all \u003ccode\u003ecopy()\u003c/code\u003e arguments:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class User(val name: String, val age: Int)\n\n  fun copyUser(user: User): User {\n      return user.copy(name \u003d \"John\")\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "IfThenToSafeAccess",
          "displayName": "If-Then foldable to \u0027?.\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif-then\u003c/code\u003e expressions that can be folded into safe-access (\u003ccode\u003e?.\u003c/code\u003e) expressions.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun bar(x: String) \u003d \"\"\n\n  fun foo(a: String?) {\n     if (a !\u003d null) bar(a) else null\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix converts the \u003ccode\u003eif-then\u003c/code\u003e expression into a safe-access (\u003ccode\u003e?.\u003c/code\u003e) expression:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun bar(x: String) \u003d \"\"\n\n  fun foo(a: String?) {\n     a?.let { bar(it) }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceWithOperatorAssignment",
          "displayName": "Assignment can be replaced with operator assignment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports modifications of variables with a simple assignment (such as \u003ccode\u003ey \u003d y + x\u003c/code\u003e) that can be replaced with an operator assignment.\n\u003cp\u003eThe quick-fix replaces the assignment with an assignment operator.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n      val list \u003d mutableListOf(1, 2, 3)\n      list \u003d list + 4\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n      val list \u003d mutableListOf(1, 2, 3)\n      list +\u003d 4\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantElseInIf",
          "displayName": "Redundant \u0027else\u0027 in \u0027if\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant \u003ccode\u003eelse\u003c/code\u003e in \u003ccode\u003eif\u003c/code\u003e with \u003ccode\u003ereturn\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(arg: Boolean): Int {\n      if (arg) return 0\n      else { // This else is redundant, code in braces could be just shifted left\n          someCode()\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(arg: Boolean): Int {\n      if (arg) return 0\n      someCode()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SimplifyNegatedBinaryExpression",
          "displayName": "Negated boolean expression can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports negated boolean expressions that can be simplified.\n\u003cp\u003eThe quick-fix simplifies the boolean expression.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    fun test(n: Int) {\n        !(0 \u003d\u003d 1)\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    fun test(n: Int) {\n        0 !\u003d 1\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePlease note that this action may change code semantics if IEEE-754 NaN values are involved:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    fun main() {\n        println(!(Double.NaN \u0026gt;\u003d 0)) // true\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    fun main() {\n        println(Double.NaN \u0026lt; 0) // false\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaMapForEach",
          "displayName": "Java Map.forEach method call should be replaced with Kotlin\u0027s forEach",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a Java Map.\u003ccode\u003eforEach\u003c/code\u003e method call that can be replaced with Kotlin\u0027s \u003cb\u003eforEach\u003c/b\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(map: HashMap\u0026lt;Int, String\u003e) {\n      map.forEach { key, value -\u003e\n          foo(key, value)\n      }\n  }\n\n  fun foo(i: Int, s: String) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix adds parentheses:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(map: HashMap\u0026lt;Int, String\u003e) {\n      map.forEach { (key, value) -\u003e\n          foo(key, value)\n      }\n  }\n\n  fun foo(i: Int, s: String) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "MongoJS",
      "inspections": [
        {
          "shortName": "MongoJSSideEffectsInspection",
          "displayName": "Statement with side effects",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "MongoJS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports statements that can cause side effects while the data source is in read-only mode.\n\u003cp\u003eFor more information about enabling read-only mode, see\n  \u003ca href\u003d\"https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection\"\u003eEnable\n    read-only mode for a connection in the IDE documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003cb\u003eDisable read-only mode\u003c/b\u003e quick-fix turns off the read-only mode for the respective data source.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\ndb.my_collection.insertOne()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MongoJSDeprecationInspection",
          "displayName": "Deprecated element",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "MongoJS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of deprecated methods in MongoDB and JavaScript code.\n\u003cp\u003eThe quick-fix replaces deprecated methods with recommended alternatives.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edb.my_collection.insert()\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edb.my_collection.insertOne()\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MongoJSExtSideEffectsInspection",
          "displayName": "Statement with side effects",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "MongoJSExt",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports statements that may cause side effects while the data source is in read-only mode.\n\u003cp\u003eThe quick-fix turns off the read-only mode for the respective data source.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\ndb.my_collection.insertOne()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MongoJSExtDeprecationInspection",
          "displayName": "Deprecated element",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "MongoJSExt",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of deprecated methods in MongoDB and JavaScript code.\n\u003cp\u003eThe quick-fix replaces deprecated methods with recommended alternatives.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  db.my_collection.insert()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  db.my_collection.insertOne()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MongoJSResolveInspection",
          "displayName": "Resolution problems",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "MongoJS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references in MongoDB and JavaScript code.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edb\nuse foo\n  -- a reference to a non-existing collection\ndb.non_existing_collection\ndb[\u0027non_existing_collection\u0027]\ndb[\u0027non_existing_collection\u0027].find().hasNext()\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003enon_existing_collection\u003c/code\u003e collection does not exist in the database and will be reported.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MongoJSExtResolveInspection",
          "displayName": "Resolution problems",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "MongoJSExt",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references in MongoDB and JavaScript code.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Accessibility",
      "inspections": [
        {
          "shortName": "HtmlRequiredTitleAttribute",
          "displayName": "Missing required \u0027title\u0027 attribute",
          "defaultSeverity": "INFORMATION",
          "pluginId": "HtmlTools",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a missing title attribute \u003ccode\u003eframe\u003c/code\u003e, \u003ccode\u003eiframe\u003c/code\u003e, \u003ccode\u003edl\u003c/code\u003e, and \u003ccode\u003ea\u003c/code\u003e tags. Suggests adding a title attribute. Based on WCAG 2.0: \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H33.html\"\u003eH33\u003c/a\u003e, \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H40.html\"\u003eH40\u003c/a\u003e, and \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H64.html\"\u003eH64\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlRequiredAltAttribute",
          "displayName": "Missing required \u0027alt\u0027 attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a missing \u003ccode\u003ealt\u003c/code\u003e attribute in a \u003ccode\u003eimg\u003c/code\u003e or \u003ccode\u003eapplet\u003c/code\u003e tag or in a \u003ccode\u003earea\u003c/code\u003e element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H24.html\"\u003eH24\u003c/a\u003e, \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H35.html\"\u003eH35\u003c/a\u003e, \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H36.html\"\u003eH36\u003c/a\u003e, \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H37.html\"\u003eH37\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlRequiredSummaryAttribute",
          "displayName": "Missing required \u0027summary\u0027 attribute",
          "defaultSeverity": "INFORMATION",
          "pluginId": "HtmlTools",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a missing \u003ccode\u003esummary\u003c/code\u003e attribute in a \u003ccode\u003etable\u003c/code\u003e tag. Suggests adding a\u003ccode\u003esummary\u003c/code\u003e attribute. Based on WCAG 2.0: \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H73.html\"\u003eH73\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlFormInputWithoutLabel",
          "displayName": "Missing associated label",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a form element (\u003ccode\u003einput\u003c/code\u003e, \u003ccode\u003etextarea\u003c/code\u003e, or \u003ccode\u003eselect\u003c/code\u003e) without an associated label. Suggests creating a new label. Based on WCAG 2.0: \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H44.html\"\u003eH44\u003c/a\u003e.\u003cbr\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlRequiredTitleElement",
          "displayName": "Missing required \u0027title\u0027 element",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a missing \u003ccode\u003etitle\u003c/code\u003e element inside a \u003ccode\u003ehead\u003c/code\u003e section. Suggests adding a \u003ccode\u003etitle\u003c/code\u003e element. The title should describe the document. Based on WCAG 2.0: \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H25.html\"\u003eH25\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlRequiredLangAttribute",
          "displayName": "Missing required \u0027lang\u0027 attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a missing \u003ccode\u003elang\u003c/code\u003e (or \u003ccode\u003exml:lang\u003c/code\u003e) attribute in a \u003ccode\u003ehtml\u003c/code\u003e tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: \u003ca href\u003d\"https://www.w3.org/TR/WCAG20-TECHS/H57.html\"\u003eH57\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Spring Data",
      "inspections": [
        {
          "shortName": "SpringDataMethodInconsistencyInspection",
          "displayName": "Spring Data repository method errors",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.data",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports Spring Data CRUD repository methods for which the\n  \u003ca href\u003d\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-creation\"\u003eSpring Data Query\u003c/a\u003e\n  builder cannot generate the corresponding query.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\ninterface PersonRepository extends Repository\u0026lt;Person, Long\u0026gt; {\n  List\u0026lt;Person\u0026gt; findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname);\n  List\u0026lt;Person\u0026gt; findByEmail\u003cstrong\u003eUnknown\u003c/strong\u003eAndLastname(EmailAddress emailAddress, String lastname); // Cannot resolve property \u0027Unknown\u0027\n  List\u0026lt;Person\u0026gt; \u003cstrong\u003efindByAndLastname\u003c/strong\u003e(EmailAddress emailAddress, String lastname); // Missing property name\n\n  List\u0026lt;Person\u0026gt; findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);\n  List\u0026lt;Person\u0026gt; findPeopleDistinctBy\u003cstrong\u003eUnknown\u003c/strong\u003eOrFirstname(String lastname, String firstname); // Cannot resolve property \u0027Unknown\u0027\n\n  List\u0026lt;Person\u0026gt; findByLastnameOrderByFirstnameAsc(String lastname);\n  List\u0026lt;Person\u0026gt; findByLastnameOrderBy\u003cstrong\u003eUnknown\u003c/strong\u003eDesc(String lastname);  // Cannot resolve property \u0027Unknown\u0027\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringDataRepositoryMethodParametersInspection",
          "displayName": "Spring Data repository method parameters errors",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.data",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports Spring Data CRUD repository method parameters with incorrect types.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Person {\n    private int id;\n    private String lastname;\n    private Address address;\n  }\n\n  public class Address {\n    private int zipCode;\n  }\n\n  public interface CustomerRepository extends CrudRepository\u0026lt;Person, Integer\u0026gt; {\n    List\u0026lt;Person\u0026gt; \u003cstrong\u003efindByAddress\u003c/strong\u003e(String lastname);  // \u0027Address\u0027 type expected\n    List\u0026lt;Person\u0026gt; \u003cstrong\u003efindByAddressZipCode\u003c/strong\u003e(String str);   // \u0027int\u0027 type expected\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringDataMongoDBJsonFieldInspection",
          "displayName": "Spring Data MongoDB JSON unresolved fields",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring.data",
          "pluginVersion": "231.9011.34",
          "language": "Spring-MongoDB-JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports unresolved document fields specified inside of \u003ccode\u003eorg.springframework.data.mongodb.repository.Query\u003c/code\u003e annotation.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n@Document\nclass User {\n  @Field\n  String name;\n}\n\ninterface UserRepository extends Repository\u0026lt;User, Long\u0026gt; {\n  @Query(\"{ age: { $gt: ?0 } }\") // \u0027age\u0027 is highlighted as unresolved\n  List\u0026lt;User\u0026gt; findUsersOlderThan(Integer age);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringDataRepositoryMethodReturnTypeInspection",
          "displayName": "Spring Data repository method return type errors",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.data",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports Spring Data CRUD repository methods with incorrect return types.\u003c/p\u003e\n\u003cp\u003eThe following return types are supported:\u003c/p\u003e\n\u003clist\u003e\n  \u003cli\u003e\u003ccode\u003evoid\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ePrimitive types\u003c/li\u003e\n  \u003cli\u003eWrapper types\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eT\u003c/code\u003e when the query method is expected to return one result at most. Returns \u003ccode\u003enull\u003c/code\u003e if there are no results and\n    throws \u003ccode\u003eIncorrectResultSizeDataAccessException\u003c/code\u003e if there is more than one result.\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.List\u003c/code\u003e or any common \u003ccode\u003eIterable\u003c/code\u003e type\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.stream.Stream\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.Optional\u003c/code\u003e or \u003ccode\u003escala.Option\u003c/code\u003e when the query method is expected to return one result at most. Returns\n    \u003ccode\u003eOptional.empty()\u003c/code\u003e or \u003ccode\u003eOptional.absent()\u003c/code\u003e if there are no results and throws \u003ccode\u003eIncorrectResultSizeDataAccessException\u003c/code\u003e\n    if there is more than one result.\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eio.micronaut.data.model.Page\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eio.micronaut.data.model.Slice\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.concurrent.Future\u003c/code\u003e, \u003ccode\u003ejava.util.concurrent.CompletableFuture\u003c/code\u003e, or \u003ccode\u003eListenableFuture\u003c/code\u003e if the\n    method is annotated with \u003ccode\u003e@Async\u003c/code\u003e and Spring asynchronous method execution is enabled\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eGeoResults\u0026lt;T\u0026gt;\u003c/code\u003e, \u003ccode\u003eGeoResult\u0026lt;T\u0026gt;\u003c/code\u003e, or \u003ccode\u003eGeoPage\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/list\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Memory",
      "inspections": [
        {
          "shortName": "UnnecessaryEmptyArrayUsage",
          "displayName": "Unnecessary zero length array usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports allocations of arrays with known lengths of zero when there is a constant for that in the class of the array\u0027s element type.\nAs zero-length arrays are immutable, you can save memory reusing the same array instance.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Item {\n    // Public zero-length array constant that can be reused \n    public static final Item[] EMPTY_ARRAY \u003d new Item[0];\n  }\n  class EmptyNode {\n    Item[] getChildren() {\n      // Unnecessary zero-length array creation\n      return new Item[0];\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class EmptyNode {\n    Item[] getChildren() {\n      return Item.EMPTY_ARRAY;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AnonymousInnerClassMayBeStatic",
          "displayName": "Anonymous class may be a named \u0027static\u0027 inner class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports anonymous classes that may be safely replaced with \u003ccode\u003estatic\u003c/code\u003e inner classes.\nAn anonymous class may be a \u003ccode\u003estatic\u003c/code\u003e inner class if it doesn\u0027t explicitly reference its enclosing instance or local classes from its surrounding method.\n\u003cp\u003e\nA \u003ccode\u003estatic\u003c/code\u003e inner class does not keep an implicit reference to its enclosing instance.\nThis prevents a common cause of memory leaks and uses less memory per class instance.\n\u003c/p\u003e\n\u003cp\u003e\n  Since Java 18, only serializable anonymous classes keep an implicit reference to its enclosing instance,\n  if this reference is not used. So, if module language level is Java 18 or higher,\n  this inspection reports serializable classes only.\n\u003c/p\u003e\n\u003cp\u003eThe quick-fix extracts the anonymous class into a named \u003ccode\u003estatic\u003c/code\u003e inner class.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void sample() {\n    Thread thread \u003d new Thread(new Runnable() {\n      @Override\n      public void run() {\n      }\n    });\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void sample() {\n    Thread thread \u003d new Thread(new Task());\n  }\n\n  private static class Task implements Runnable {\n    @Override\n    public void run() {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n  \u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SystemGC",
          "displayName": "Call to \u0027System.gc()\u0027 or \u0027Runtime.gc()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eSystem.gc()\u003c/code\u003e or \u003ccode\u003eRuntime.gc()\u003c/code\u003e calls.\nWhile occasionally useful in testing, explicitly triggering garbage collection via \u003ccode\u003eSystem.gc()\u003c/code\u003e is almost never recommended in production code and can result in serious performance issues.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ZeroLengthArrayInitialization",
          "displayName": "Zero-length array allocation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports allocations of arrays with known lengths of zero.\n\u003cp\u003e\n  Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly\n  allocate new ones. Such sharing may provide useful optimizations in the program runtime or footprint.\n\u003c/p\u003e\n\u003cp\u003e\n  Note that the inspection does not report zero-length arrays allocated as static final fields,\n  since those arrays are assumed to be used for implementing array sharing.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReturnOfInnerClass",
          "displayName": "Return of instance of anonymous, local or inner class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ereturn\u003c/code\u003e statements that return an instance of an anonymous, local, or inner class.\nSuch instances keep an implicit reference to the outer instance, which can prevent the outer instance from being garbage-collected.\nAny caller of a method returning such an instance might cause a memory leak by holding on to the instance returned.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore returns from non-public methods\u003c/b\u003e option to ignore returns from \u003ccode\u003eprotected\u003c/code\u003e or package-private methods.\n    Returns from \u003ccode\u003eprivate\u003c/code\u003e methods are always ignored.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringBufferField",
          "displayName": "\u0027StringBuilder\u0027 field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields of type \u003ccode\u003ejava.lang.StringBuffer\u003c/code\u003e or \u003ccode\u003ejava.lang.StringBuilder\u003c/code\u003e.\nSuch fields can grow without limit and are often the cause of memory leaks.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Example {\n    private StringBuilder builder \u003d new StringBuilder();\n\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InnerClassMayBeStatic",
          "displayName": "Inner class may be \u0027static\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports inner classes that can be made \u003ccode\u003estatic\u003c/code\u003e.\n\u003cp\u003eA \u003ccode\u003estatic\u003c/code\u003e inner class does not keep an implicit reference to its enclosing instance.\n  This prevents a common cause of memory leaks and uses less memory per instance of the class.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Outer {\n    \u003cb\u003eclass\u003c/b\u003e Inner { // not static\n      \u003cb\u003epublic void\u003c/b\u003e foo() {\n        bar(\"x\");\n      }\n\n      \u003cb\u003eprivate void\u003c/b\u003e bar(String string) {}\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Outer {\n    \u003cb\u003estatic class\u003c/b\u003e Inner {\n      \u003cb\u003epublic void\u003c/b\u003e foo() {\n        bar(\"x\");\n      }\n\n      \u003cb\u003eprivate void\u003c/b\u003e bar(String string) {}\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StaticCollection",
          "displayName": "Static collection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports static fields of a \u003ccode\u003eCollection\u003c/code\u003e type. While it\u0027s\nnot necessarily a problem, static collections often cause memory leaks and are\ntherefore prohibited by some coding standards.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Example {\n    static List\u0026lt;String\u0026gt; list \u003d new ArrayList\u0026lt;\u0026gt;();\n\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore weak static collections or maps\u003c/b\u003e option to ignore the fields of the \u003ccode\u003ejava.util.WeakHashMap\u003c/code\u003e type.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "SQL server",
      "inspections": [
        {
          "shortName": "MsBuiltinInspection",
          "displayName": "Builtin functions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports truncations of string arguments in ISNULL functions.\n\n\u003cp\u003eThe ISNULL syntax is \u003ccode\u003eISNULL(check_expression, replacement_value)\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cp\u003eAccording to \u003ca href\u003d\"https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql\" target\u003d\"_blank\"\u003eISNULL at\n  docs.microsoft.com\u003c/a\u003e, \u003ccode\u003ereplacement_value\u003c/code\u003e will be truncated if \u003ccode\u003ereplacement_value\u003c/code\u003e is longer than\n  \u003ccode\u003echeck_expression\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003cp\u003eExample (Microsoft SQL Server):\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003eDECLARE @name1 VARCHAR(2) \u003d NULL;\nDECLARE @name2 VARCHAR(10) \u003d \u0027Example\u0027;\nDECLARE @name3 VARCHAR(2) \u003d \u0027Hi\u0027;\n\n  -- `@name2` is VARCHAR(10) and will be truncated\nSELECT ISNULL(@name1, @name2);\n\n  -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\nSELECT ISNULL(@name1, @name3);\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MsOrderByInspection",
          "displayName": "ORDER BY in queries",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages when the \u003ccode\u003eORDER BY\u003c/code\u003e clause is used without \u003ccode\u003eTOP\u003c/code\u003e, \u003ccode\u003eOFFSET\u003c/code\u003e, or \u003ccode\u003eFOR XML\u003c/code\u003e in views,\ninline functions, derived tables, subqueries, and common table expressions.\n\u003cp\u003eFor more information about usages of \u003ccode\u003eORDER BY\u003c/code\u003e, see \u003ca\n    href\u003d\"https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql\"\u003eSELECT - ORDER BY Clause (Transact-SQL) at\n  docs.microsoft.com\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eExample (Microsoft SQL server):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\nSELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a \u0026lt; 89\nORDER BY b) ALIAS;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.\n  Alternatively, use the \u003cb\u003eDelete element\u003c/b\u003e quick-fix to delete the ORDER BY section.\u003c/p\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a \u0026lt; 89) ALIAS;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Quarkus",
      "inspections": [
        {
          "shortName": "QsUndeclaredPathMimeTypesInspection",
          "displayName": "Undeclared \u0027@Produces\u0027 / \u0027@Consumes\u0027 MIME types for \u0027@Path\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.quarkus",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports endpoint methods without the \u003ccode\u003e@Produces\u003c/code\u003e or \u003ccode\u003e@Consumes\u003c/code\u003e annotations.\n\u003c/p\u003e\n\u003cp\u003e\n  Quarkus analyzes these annotations and restricts the number of JAX-RS providers included in the native executable to the minimum required\n  by the application. This reduces the size of the native executable.\n\u003c/p\u003e\n\u003cp\u003e\n  Annotate methods or the whole class with \u003ccode\u003e@Produces\u003c/code\u003e or \u003ccode\u003e@Consumes\u003c/code\u003e (if supported by the HTTP method) and specify\n  the target MIME types.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SmallRyeConfigMappingMissingPrefixInspection",
          "displayName": "Missing or empty \u0027prefix\u0027 attribute value in the \u0027@ConfigMapping\u0027 annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.quarkus",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports missing or empty \u003ccode\u003eprefix\u003c/code\u003e attribute value in the \u003ccode\u003e@io.smallrye.config.ConfigMapping\u003c/code\u003e annotation.\u003c/p\u003e\n\u003cp\u003eThe IDE requires a correctly specified prefix to look up configuration properties.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "QsYaml",
          "displayName": "Invalid Quarkus YAML configuration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.quarkus",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports deprecated and unresolvable keys and values in Quarkus application YAML configuration files.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "QsProperties",
          "displayName": "Invalid Quarkus application.properties configuration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.quarkus",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports syntax errors, type errors, deprecated and unresolvable keys and values in Quarkus \u003ccode\u003e.properties\u003c/code\u003e configuration files.\n\u003c/p\u003e\n\u003cp\u003e\n  Also highlights syntax and type errors.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "QsPrivateBeanMembersInspection",
          "displayName": "Wrong access modifier of bean members with CDI annotations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.quarkus",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports injected fields, observer methods, and bean constructors with private access.\n\u003c/p\u003e\n\u003cp\u003e\n  Private access levels on CDI members increase the amount of reflection manipulations necessary to set up a bean.\n  Use package-private or protected access levels instead.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Micronaut Data",
      "inspections": [
        {
          "shortName": "MicronautDataRepositoryMethodParameters",
          "displayName": "Incorrect repository method parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.micronaut",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect Micronaut Data repository method parameter types.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Person {\n    private int id;\n    private String lastname;\n    private Address address;\n  }\n\n  public class Address {\n    private int zipCode;\n  }\n\n  public interface CustomerRepository extends CrudRepository\u0026lt;Person, Integer\u0026gt; {\n    List\u0026lt;Person\u0026gt; \u003cstrong\u003efindByAddress\u003c/strong\u003e(String lastname);  // \u0027Address\u0027 type expected\n    List\u0026lt;Person\u0026gt; \u003cstrong\u003efindByAddressZipCode\u003c/strong\u003e(String str);   // \u0027int\u0027 type expected\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MicronautDataMethodInconsistency",
          "displayName": "Incorrect repository method declaration",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.micronaut",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Micronaut Data repository methods that do not match the\n\u003ca href\u003d\"https://micronaut-projects.github.io/micronaut-data/latest/guide/#criteria\"\u003equery pattern criteria\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MicronautDataRepositoryMethodReturnType",
          "displayName": "Incorrect repository method return type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.micronaut",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect Micronaut Data \u003ca href\u003d\"https://micronaut-projects.github.io/micronaut-data/latest/guide/#querying\"\u003erepository method\n  return types.\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe following return types are supported:\u003c/p\u003e\n\u003clist\u003e\n  \u003cli\u003evoid\u003c/li\u003e\n  \u003cli\u003ePrimitive types\u003c/li\u003e\n  \u003cli\u003eSimple types\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.List\u003c/code\u003e or any common \u003ccode\u003eIterable\u003c/code\u003e type\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.stream.Stream\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.Optional\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eio.micronaut.data.model.Page\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eio.micronaut.data.model.Slice\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.concurrent.Future\u003c/code\u003e or \u003ccode\u003ejava.util.concurrent.CompletableFuture\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eA Reactive Streams compatible type, such as \u003ccode\u003ePublisher\u003c/code\u003e, \u003ccode\u003eSingle\u003c/code\u003e, \u003ccode\u003eMaybe\u003c/code\u003e, \u003ccode\u003eFlux\u003c/code\u003e, \u003ccode\u003eMono\u003c/code\u003e,\n    and so on\n  \u003c/li\u003e\n\u003c/list\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Assignment issues",
      "inspections": [
        {
          "shortName": "AssignmentToFunctionParameterJS",
          "displayName": "Assignment to function parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an assignment to a function parameter, including increment and decrement operations.\nAlthough occasionally intended, this construct can be extremely confusing, and is often a result of an error.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceAssignmentWithOperatorAssignmentJS",
          "displayName": "Assignment could be replaced with operator assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ReplaceAssignmentWithOperatorAssignment.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.\n\u003cp\u003e\n  Example:\n\u003cpre\u003e\n\u003ccode\u003e  x \u003d x + 3;\u003c/code\u003e\n  \u003ccode\u003ex \u003d x / 3;\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied the result looks like:\n\u003cpre\u003e\n  \u003ccode\u003ex +\u003d 3;\u003c/code\u003e\n  \u003ccode\u003ex /\u003d 3;\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssignmentResultUsedJS",
          "displayName": "Result of assignment used",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an assignment expression where the result of the assignment is\nused in the containing expression. Such assignments often indicate coding errors, \nfor example,  \u003ccode\u003e\u003d\u003c/code\u003e instead of \u003ccode\u003e\u003d\u003d\u003c/code\u003e.\nMoreover, they can result in confusion due to the order\nof operations, as evaluation of the assignment may affect the outer expression in unexpected\nways.\n\u003cp\u003eExpressions in parentheses are ignored.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSAssignmentUsedAsCondition",
          "displayName": "Assignment used as condition",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/AssignmentUsedAsCondition.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports an assignment that is used as the condition of an \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, or\n\u003ccode\u003edo\u003c/code\u003e statement. Although occasionally intended,\nthis usage is confusing, and often indicates a typo\n(for example, \u003ccode\u003e\u003d\u003c/code\u003e instead of \u003ccode\u003e\u003d\u003d\u003c/code\u003e).\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestedAssignmentJS",
          "displayName": "Nested assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/NestedAssignment.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports an assignment expression nested inside another expression, for example, \u003ccode\u003ea \u003d b \u003d 1\u003c/code\u003e.\nSuch expressions may be confusing and violate the general design principle that a given construct should do precisely one thing.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SillyAssignmentJS",
          "displayName": "Variable is assigned to itself",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an assignment in the form \u003ccode\u003ex \u003d x\u003c/code\u003e. \n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssignmentToForLoopParameterJS",
          "displayName": "Assignment to \u0027for\u0027 loop parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an assignment to a variable declared as a \u003ccode\u003efor\u003c/code\u003e loop parameter.\nAlthough occasionally intended, this construct can be extremely confusing, and is often a result of an error.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Android Lint: Accessibility",
      "inspections": [
        {
          "shortName": "AndroidLintClickableViewAccessibility",
          "displayName": "Accessibility in Custom Views",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAccessibility in Custom Views\u003cbr\u003e\u003cbr\u003eIf a \u003ccode\u003eView\u003c/code\u003e that overrides \u003ccode\u003eonTouchEvent\u003c/code\u003e or uses an \u003ccode\u003eOnTouchListener\u003c/code\u003e does not also implement \u003ccode\u003eperformClick\u003c/code\u003e and call it when clicks are detected, the \u003ccode\u003eView\u003c/code\u003e may not handle accessibility actions properly. Logic handling the click actions should ideally be placed in \u003ccode\u003eView#performClick\u003c/code\u003e as some accessibility services invoke \u003ccode\u003eperformClick\u003c/code\u003e when a click action should occur.\u003cbr\u003e\u003cbr\u003eIssue id: ClickableViewAccessibility\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintContentDescription",
          "displayName": "Image without contentDescription",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eImage without \u003ccode\u003econtentDescription\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eNon-textual widgets like ImageViews and ImageButtons should use the \u003ccode\u003econtentDescription\u003c/code\u003e attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.\u003cbr/\u003e\n\u003cbr/\u003e\nNote that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore\u003d\"ContentDescription\" attribute.\u003cbr/\u003e\n\u003cbr/\u003e\nNote that for text fields, you should not set both the \u003ccode\u003ehint\u003c/code\u003e and the \u003ccode\u003econtentDescription\u003c/code\u003e attributes since the hint will never be shown. Just set the \u003ccode\u003ehint\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: ContentDescription\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases\"\u003ehttps://developer.android.com/guide/topics/ui/accessibility/apps#special-cases\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGetContentDescriptionOverride",
          "displayName": "Overriding getContentDescription() on a View",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eOverriding \u003ccode\u003egetContentDescription()\u003c/code\u003e on a View\u003cbr\u003e\u003cbr\u003eOverriding \u003ccode\u003egetContentDescription()\u003c/code\u003e may prevent some accessibility services from properly navigating content exposed by your view. Instead, call \u003ccode\u003esetContentDescription()\u003c/code\u003e when the content description needs to be changed.\u003cbr\u003e\u003cbr\u003eIssue id: GetContentDescriptionOverride\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintKeyboardInaccessibleWidget",
          "displayName": "Keyboard inaccessible widget",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eKeyboard inaccessible widget\u003cbr\u003e\u003cbr\u003eA widget that is declared to be clickable but not declared to be focusable is not accessible via the keyboard. Please add the \u003ccode\u003efocusable\u003c/code\u003e attribute as well.\u003cbr\u003e\u003cbr\u003eIssue id: KeyboardInaccessibleWidget\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLabelFor",
          "displayName": "Missing accessibility label",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing accessibility label\u003cbr\u003e\u003cbr\u003eEditable text fields should provide an \u003ccode\u003eandroid:hint\u003c/code\u003e or, provided your \u003ccode\u003eminSdkVersion\u003c/code\u003e is at least 17, they may be referenced by a view with a \u003ccode\u003eandroid:labelFor\u003c/code\u003e attribute.\u003cbr/\u003e\n\u003cbr/\u003e\nWhen using \u003ccode\u003eandroid:labelFor\u003c/code\u003e, be sure to provide an \u003ccode\u003eandroid:text\u003c/code\u003e or an \u003ccode\u003eandroid:contentDescription\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nIf your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint.\u003cbr\u003e\u003cbr\u003eIssue id: LabelFor\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Verbose or redundant code constructs",
      "inspections": [
        {
          "shortName": "SimplifyCollector",
          "displayName": "Simplifiable collector",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports collectors that can be simplified.\n\u003cp\u003eIn particular, some cascaded \u003ccode\u003egroupingBy()\u003c/code\u003e collectors can be expressed by using a\n  simpler \u003ccode\u003etoMap()\u003c/code\u003e collector, which is also likely to be more performant.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Collectors.groupingByConcurrent(String::length, Collectors.collectingAndThen(Collectors.maxBy(String::compareTo), Optional::get));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Collectors.toConcurrentMap(String::length, Function.identity(), BinaryOperator.maxBy(String::compareTo));\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonStrictComparisonCanBeEquality",
          "displayName": "Non-strict inequality \u0027\u003e\u003d\u0027 or \u0027\u003c\u003d\u0027 can be replaced with \u0027\u003d\u003d\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports inequality conditions that, according to data flow analysis, can be satisfied only for a single operand value.\nSuch conditions could be replaced with equality conditions to make the code clearer.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n  if (x \u003e\u003d 10) {\n    ...\n    if (x \u003c\u003d 10) { // can be replaced with \u0027x \u003d\u003d 10\u0027\n    }\n  }\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantArrayCreation",
          "displayName": "Redundant array creation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports arrays that are created specifically to be passed as a varargs parameter.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eArrays.asList(new String[]{\"Hello\", \"world\"})\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the array initializer with individual arguments:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eArrays.asList(\"Hello\", \"world\")\u003c/code\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CastCanBeReplacedWithVariable",
          "displayName": "Cast can be replaced with variable",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports type cast operations that can be replaced with existing local or pattern variables with the same value.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(Object obj) {\n    String s \u003d (String) obj;\n    System.out.println(((String) obj).trim());\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(Object obj) {\n    String s \u003d (String) obj;\n    System.out.println(s.trim());\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantFileCreation",
          "displayName": "Redundant \u0027File\u0027 instance creation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant \u003ccode\u003eFile\u003c/code\u003e creation in one of the following constructors when only \u003ccode\u003eString\u003c/code\u003e path can be used: \u003ccode\u003eFileInputStream\u003c/code\u003e, \u003ccode\u003eFileOutputStream\u003c/code\u003e,\n\u003ccode\u003eFileReader\u003c/code\u003e, \u003ccode\u003eFileWriter\u003c/code\u003e, \u003ccode\u003ePrintStream\u003c/code\u003e, \u003ccode\u003ePrintWriter\u003c/code\u003e, \u003ccode\u003eFormatter\u003c/code\u003e.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nInputStream is \u003d new FileInputStream(new File(\"in.txt\"));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nInputStream is \u003d new FileInputStream(\"in.txt\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantLengthCheck",
          "displayName": "Redundant array length check",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary array length checks followed by array iteration. When array length is zero,\nthe iteration will be skipped anyway, so there\u0027s no need to check length explicitly.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(String[] array) {\n    if (array.length !\u003d 0) { // unnecessary check\n      for (String str : array) {\n        System.out.println(str);\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix is suggested to unwrap or remove the length check:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(String[] array) {\n    for (String str : array) {\n      System.out.println(str);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryReturn",
          "displayName": "Unnecessary \u0027return\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ereturn\u003c/code\u003e statements at the end of constructors and methods returning\n\u003ccode\u003evoid\u003c/code\u003e. These statements are redundant and may be safely removed.\n\u003cp\u003eThis inspection does not report in JSP files.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003evoid\u003c/b\u003e message() {\n    System.out.println(\"Hello World\");\n    \u003cb\u003ereturn\u003c/b\u003e;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003evoid\u003c/b\u003e message() {\n    System.out.println(\"Hello World\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore in then branch of \u0027if\u0027 statement with \u0027else\u0027 branch\u003c/b\u003e option to ignore \u003ccode\u003ereturn\u003c/code\u003e statements in the then branch of \u003ccode\u003eif\u003c/code\u003e statements\nwhich also have an \u003ccode\u003eelse\u003c/code\u003e branch.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringOperationCanBeSimplified",
          "displayName": "Redundant \u0027String\u0027 operation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant calls to \u003ccode\u003eString\u003c/code\u003e constructors and methods like \u003ccode\u003etoString()\u003c/code\u003e or \u003ccode\u003esubstring()\u003c/code\u003e\nthat can be replaced with a simpler expression.\n\u003cp\u003eFor example, calls to these methods can be safely removed in code\n  like \u003ccode\u003e\"string\".substring(0)\u003c/code\u003e, \u003ccode\u003e\"string\".toString()\u003c/code\u003e, or\n  \u003ccode\u003enew StringBuilder().toString().substring(1,3)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println(new String(\"message\"));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println(\"message\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Note that the quick-fix removes the redundant constructor call, and this may affect \u003ccode\u003eString\u003c/code\u003e referential equality.\n  If you need to preserve it, even though it is considered bad practice, suppress the warning or use the inspection setting to ignore\n  redundant \u003ccode\u003eString\u003c/code\u003e constructor calls.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eDo not report String constructor calls\u003c/b\u003e option below to not report code like the example above.\n  This will avoid changing the outcome of String comparisons with \u003ccode\u003e\u003d\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e after applying\n  the quick-fix in code that uses \u003ccode\u003enew String()\u003c/code\u003e calls to guarantee a different object identity.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DuplicateBranchesInSwitch",
          "displayName": "Duplicate branches in \u0027switch\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eswitch\u003c/code\u003e statements or expressions that contain the same code in different branches\nand suggests merging the duplicate branches.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eswitch\u003c/b\u003e (n) {\n    \u003cb\u003ecase\u003c/b\u003e 1:\n      System.out.println(n);\n      \u003cb\u003ebreak\u003c/b\u003e;\n    \u003cb\u003ecase\u003c/b\u003e 2:\n      System.out.println(n);\n      \u003cb\u003ebreak\u003c/b\u003e;\n    \u003cb\u003edefault\u003c/b\u003e:\n      System.out.println(\"default\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eswitch\u003c/b\u003e (n) {\n    \u003cb\u003ecase\u003c/b\u003e 1:\n    \u003cb\u003ecase\u003c/b\u003e 2:\n      System.out.println(n);\n      \u003cb\u003ebreak\u003c/b\u003e;\n    \u003cb\u003edefault\u003c/b\u003e:\n      System.out.println(\"default\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringBufferReplaceableByString",
          "displayName": "\u0027StringBuilder\u0027 can be replaced with \u0027String\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003eStringBuffer\u003c/code\u003e, \u003ccode\u003eStringBuilder\u003c/code\u003e, or \u003ccode\u003eStringJoiner\u003c/code\u003e\nwhich can be replaced with a single \u003ccode\u003eString\u003c/code\u003e concatenation.\n\u003cp\u003eUsing \u003ccode\u003eString\u003c/code\u003e concatenation\n  makes the code shorter and simpler.\u003c/p\u003e\n\u003cp\u003e\nThis inspection only reports when the suggested replacement does not result in significant\nperformance drawback on modern JVMs. In many cases, \u003ccode\u003eString\u003c/code\u003e concatenation may perform better.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  StringBuilder result \u003d new StringBuilder();\n  result.append(\"i \u003d \");\n  result.append(i);\n  result.append(\";\");\n  return result.toString();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String result \u003d \"i \u003d \" + i + \";\";\n  return result;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantTypeArguments",
          "displayName": "Redundant type arguments",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to parametrized methods with explicit argument types\nthat can be omitted since they will be unambiguously inferred by the compiler.\n\u003cp\u003e\n  Using redundant type arguments is unnecessary and makes the code less readable.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; list \u003d Arrays.\u0026lt;String\u0026gt;asList(\"Hello\", \"World\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix is provided to remove redundant type arguments:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; list \u003d Arrays.asList(\"Hello\", \"World\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ExcessiveLambdaUsage",
          "displayName": "Excessive lambda usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports if a trivial lambda expression is used in cases in which there\u0027s an alternative method that behaves in the same way, but accepts a concrete value\ninstead of a lambda.\n\u003cp\u003eThis inspection helps simplify the code.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Optional.orElseGet(() -\u003e null)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Optional.orElse(null)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryBreak",
          "displayName": "Unnecessary \u0027break\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any unnecessary \u003ccode\u003ebreak\u003c/code\u003e statements.\n\u003cp\u003eAn \u003ccode\u003ebreak\u003c/code\u003e statement is unnecessary if no other statements are executed after it has been removed.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  switch (e) {\n    case A -\u0026gt; {\n        System.out.println(\"A\");\n        break; // reports \u0027break\u0027 statement is unnecessary\n    }\n    default -\u0026gt; {\n        System.out.println(\"Default\");\n        break; // reports \u0027break\u0027 statement is unnecessary\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantCollectionOperation",
          "displayName": "Redundant \u0027Collection\u0027 operation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessarily complex collection operations which have simpler alternatives.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(String[] array, Collection\u0026lt;String\u0026gt; collection) {\n    String[] strings \u003d Arrays.asList(array).subList(0, 10).toArray(new String[0]);\n    boolean contains \u003d collection.containsAll(Collections.singletonList(\"x\"));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(String[] array, Collection\u0026lt;String\u0026gt; collection) {\n    String[] strings \u003d Arrays.copyOf(array, 10);\n    boolean contains \u003d collection.contains(\"x\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryStringEscape",
          "displayName": "Unnecessarily escaped character",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessarily escaped characters in \u003ccode\u003eString\u003c/code\u003e and optionally \u003ccode\u003echar\u003c/code\u003e literals.\n\u003cp\u003eThe escaped tab character \u003ccode\u003e\\t\u003c/code\u003e is not reported, because otherwise it will be invisible.\u003c/p\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d \"\\\u0027Scare\\\u0027 quotes\";\n  String t \u003d \"\"\"\n    All you need is\\n\\tLove\\n\"\"\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d \"\u0027Scare\u0027 quotes\";\n  String t \u003d \"\"\"\n    All you need is\n    \\tLove\n  \"\"\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.3\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OnlyOneElementUsed",
          "displayName": "Only one element is used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lists, arrays, and strings where exactly one element is queried right upon the creation.\nSuch expressions may appear after refactoring and usually could be replaced with an accessed element.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println(new int[] {1,2,3,4,5}[2]);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println(3);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantEscapeInRegexReplacement",
          "displayName": "Redundant escape in regex replacement string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant escapes in the replacement string of regex methods.\nIt is possible to escape any character in a regex replacement string,\nbut if a literal \u003ccode\u003e$\u003c/code\u003e or \u003ccode\u003e\\\u003c/code\u003e is required is escaping necessary.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  string.replaceAll(\"a\", \"\\\\b\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  string.replaceAll(\"a\", \"b\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.3\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifyOptionalCallChains",
          "displayName": "Optional call chain can be simplified",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003cb\u003eOptional\u003c/b\u003e call chains that can be simplified. Here are several examples of possible simplifications:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eoptional.map(x -\u003e true).orElse(false)\u003c/code\u003e \u0026rarr; \u003ccode\u003eoptional.isPresent()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eoptional.map(x -\u003e Optional.of(x.trim())).orElseGet(Optional::empty)\u003c/code\u003e \u0026rarr; \u003ccode\u003eoptional.map(String::trim)\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eoptional.map(x -\u003e (String)x).orElse(null)\u003c/code\u003e \u0026rarr; \u003ccode\u003e(String) optional.orElse(null)\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eOptional.ofNullable(optional.orElse(null))\u003c/code\u003e \u0026rarr; \u003ccode\u003eoptional\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eval \u003d optional.orElse(null); val !\u003d null ? val : defaultExpr \u003c/code\u003e \u0026rarr; \u003ccode\u003eoptional.orElse(defaultExpr)\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eval \u003d optional.orElse(null); if(val !\u003d null) expr(val) \u003c/code\u003e \u0026rarr; \u003ccode\u003eoptional.ifPresent(val -\u003e expr(val))\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantClassCall",
          "displayName": "Redundant \u0027isInstance()\u0027 or \u0027cast()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant calls of \u003ccode\u003ejava.lang.Class\u003c/code\u003e methods.\n\u003cp\u003eFor example, \u003ccode\u003eXyz.class.isInstance(object)\u003c/code\u003e can be replaced with \u003ccode\u003eobject instanceof Xyz\u003c/code\u003e.\nThe instanceof check is preferred: even though the performance will probably be the same as these methods are intrinsics,\nthey better indicate a static check.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifyStreamApiCallChains",
          "displayName": "Stream API call chain can be simplified",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports stream API call chains that can be simplified.\nSimplification will often avoid some temporary object creation during collection traversal.\n\u003cp\u003e\n  The inspection replaces the following call chains:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ecollection.stream().forEach()\u003c/code\u003e \u0026rarr; \u003ccode\u003ecollection.forEach()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecollection.stream().collect(toList/toSet/toCollection())\u003c/code\u003e \u0026rarr; \u003ccode\u003enew CollectionType\u0026lt;\u0026gt;(collection)\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecollection.stream().toArray()\u003c/code\u003e \u0026rarr; \u003ccode\u003ecollection.toArray()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eArrays.asList().stream()\u003c/code\u003e \u0026rarr; \u003ccode\u003eArrays.stream()\u003c/code\u003e or \u003ccode\u003eStream.of()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eIntStream.range(0, array.length).mapToObj(idx -\u003e array[idx])\u003c/code\u003e \u0026rarr; \u003ccode\u003eArrays.stream(array)\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eIntStream.range(0, list.size()).mapToObj(idx -\u003e list.get(idx))\u003c/code\u003e \u0026rarr; \u003ccode\u003elist.stream()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eCollections.singleton().stream()\u003c/code\u003e \u0026rarr; \u003ccode\u003eStream.of()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eCollections.emptyList().stream()\u003c/code\u003e \u0026rarr; \u003ccode\u003eStream.empty()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estream.filter().findFirst().isPresent()\u003c/code\u003e \u0026rarr; \u003ccode\u003estream.anyMatch()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estream.collect(counting())\u003c/code\u003e \u0026rarr; \u003ccode\u003estream.count()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estream.collect(maxBy())\u003c/code\u003e \u0026rarr; \u003ccode\u003estream.max()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estream.collect(mapping())\u003c/code\u003e \u0026rarr; \u003ccode\u003estream.map().collect()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estream.collect(reducing())\u003c/code\u003e \u0026rarr; \u003ccode\u003estream.reduce()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estream.collect(summingInt())\u003c/code\u003e \u0026rarr; \u003ccode\u003estream.mapToInt().sum()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estream.mapToObj(x -\u003e x)\u003c/code\u003e \u0026rarr; \u003ccode\u003estream.boxed()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estream.map(x -\u003e {...; return x;})\u003c/code\u003e \u0026rarr; \u003ccode\u003estream.peek(x -\u003e ...)\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e!stream.anyMatch()\u003c/code\u003e \u0026rarr; \u003ccode\u003estream.noneMatch()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e!stream.anyMatch(x -\u003e !(...))\u003c/code\u003e \u0026rarr; \u003ccode\u003estream.allMatch()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estream.map().anyMatch(Boolean::booleanValue)\u003c/code\u003e \u0026rarr; \u003ccode\u003estream.anyMatch()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eIntStream.range(expr1, expr2).mapToObj(x -\u003e array[x])\u003c/code\u003e \u0026rarr; \u003ccode\u003eArrays.stream(array, expr1, expr2)\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eCollection.nCopies(count, ...)\u003c/code\u003e \u0026rarr; \u003ccode\u003eStream.generate().limit(count)\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estream.sorted(comparator).findFirst()\u003c/code\u003e \u0026rarr; \u003ccode\u003eStream.min(comparator)\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eoptional.orElseGet(() -\u003e { throw new ...; })\u003c/code\u003e \u0026rarr; \u003ccode\u003eoptional.orElseThrow()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  Note that the replacement semantics may have minor differences in some cases. For example,\n  \u003ccode\u003eCollections.synchronizedList(...).stream().forEach()\u003c/code\u003e is not synchronized while\n  \u003ccode\u003eCollections.synchronizedList(...).forEach()\u003c/code\u003e is synchronized.\n  Also, \u003ccode\u003ecollect(Collectors.maxBy())\u003c/code\u003e returns an empty \u003ccode\u003eOptional\u003c/code\u003e if the resulting element is\n  \u003ccode\u003enull\u003c/code\u003e while \u003ccode\u003eStream.max()\u003c/code\u003e throws \u003ccode\u003eNullPointerException\u003c/code\u003e in this case.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConditionCoveredByFurtherCondition",
          "displayName": "Condition is covered by further condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditions that become redundant as they are completely covered by a subsequent condition.\n\u003cp\u003eFor example, in the \u003ccode\u003evalue !\u003d -1 \u0026\u0026 value \u003e 0\u003c/code\u003e condition, the first part is redundant:\nif it\u0027s false, then the second part is also false.\nOr in a condition like \u003ccode\u003eobj !\u003d null \u0026\u0026 obj instanceof String\u003c/code\u003e,\n  the null-check is redundant as \u003ccode\u003einstanceof\u003c/code\u003e operator implies non-nullity.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DuplicateExpressions",
          "displayName": "Multiple occurrences of the same expression",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports multiple equivalent occurrences of the same expression within a method (or constructor, or class initializer)\nif the result of the expression can be reused.\n\u003cp\u003e\n  The expression is reported if it\u0027s free of side effects and its result is always the same (in terms of \u003ccode\u003eObject.equals()\u003c/code\u003e).\n  The examples of such expressions are \u003ccode\u003ea + b\u003c/code\u003e, \u003ccode\u003eMath.max(a, b)\u003c/code\u003e, \u003ccode\u003ea.equals(b)\u003c/code\u003e,\n  \u003ccode\u003es.substring(a,b)\u003c/code\u003e. To make sure the result is always the same, it\u0027s verified that the variables used in the expression don\u0027t\n  change their values between the occurrences of the expression.\u003c/p\u003e\n\u003cp\u003e\n  Such expressions may contain methods of immutable classes like \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eBigDecimal\u003c/code\u003e, and so on,\n  and of utility classes like \u003ccode\u003eObjects\u003c/code\u003e, \u003ccode\u003eMath\u003c/code\u003e (except \u003ccode\u003erandom()\u003c/code\u003e).\n  The well-known methods, such as \u003ccode\u003eObject.equals()\u003c/code\u003e, \u003ccode\u003eObject.hashCode()\u003c/code\u003e, \u003ccode\u003eObject.toString()\u003c/code\u003e,\n  \u003ccode\u003eComparable.compareTo()\u003c/code\u003e, and \u003ccode\u003eComparator.compare()\u003c/code\u003e are OK as well because they normally don\u0027t have\n  any observable side effects.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eExpression complexity threshold\u003c/b\u003e option to specify the minimal expression complexity threshold. Specifying bigger\n  numbers will remove reports on short expressions.\n\u003c/p\u003e\n\u003cp\u003e\n  \u003ccode\u003ePath.of\u003c/code\u003e and \u003ccode\u003ePaths.get\u003c/code\u003e calls are treated as equivalent calls if they have the same arguments. These calls\n  are always reported no matter how complex their arguments are. This behaviour can be tweaked using different complexity threshold.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CastCanBeRemovedNarrowingVariableType",
          "displayName": "Too weak variable type leads to unnecessary cast",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports type casts that can be removed if the variable type is narrowed to the cast type.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Object x \u003d \"  string  \";\n  System.out.println(((String)x).trim());\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nHere, changing the type of \u003ccode\u003ex\u003c/code\u003e to \u003ccode\u003eString\u003c/code\u003e makes the cast redundant. The suggested quick-fix updates the variable type and\nremoves all redundant casts on that variable:\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String x \u003d \"  string  \";\n  System.out.println(x.trim());\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ManualMinMaxCalculation",
          "displayName": "Manual min/max calculation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports cases where the minimum or the maximum of two numbers can be calculated using\na \u003ccode\u003eMath.max()\u003c/code\u003e or \u003ccode\u003eMath.min()\u003c/code\u003e call, instead of doing it manually.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public int min(int a, int b) {\n    return b \u0026lt; a ? b : a;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public int min(int a, int b) {\n    return Math.min(a, b);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eDisable for float and double\u003c/b\u003e option to disable this inspection for \u003ccode\u003edouble\u003c/code\u003e and \u003ccode\u003efloat\u003c/code\u003e types.\n  This is useful because the quick-fix may slightly change the semantics for \u003ccode\u003efloat\u003c/code\u003e/\n  \u003ccode\u003edouble\u003c/code\u003e types when handling \u003ccode\u003eNaN\u003c/code\u003e. Nevertheless, in most cases this will actually fix\n  a subtle bug where \u003ccode\u003eNaN\u003c/code\u003e is not taken into account.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceOnLiteralHasNoEffect",
          "displayName": "Replacement operation has no effect",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to the \u003ccode\u003eString\u003c/code\u003e methods \u003ccode\u003ereplace()\u003c/code\u003e, \u003ccode\u003ereplaceAll()\u003c/code\u003e or \u003ccode\u003ereplaceFirst()\u003c/code\u003e\nthat have no effect. Such calls can be guaranteed to have no effect when the qualifier and search string are compile-time constants\nand the search string is not found in the qualifier. This is redundant and may indicate an error.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // replacement does nothing\n  \"hello\".replace(\"$value$\", value);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantCast",
          "displayName": "Redundant type cast",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary cast expressions.\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  static Object toObject(String s) {\n    return (Object) s;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the checkbox below to ignore clarifying casts e.g., casts in collection calls where \u003ccode\u003eObject\u003c/code\u003e is expected:\n\u003cpre\u003e\u003ccode\u003e\n  static void removeFromList(List\u0026lt;String\u0026gt; l, Object o) {\n    l.remove((String)o);\n  } \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantCompareToJavaTime",
          "displayName": "Expression with \u0027java.time\u0027 \u0027compareTo()\u0027 call can be simplified",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ejava.time\u003c/code\u003e comparisons with \u003ccode\u003ecompareTo()\u003c/code\u003e calls that can be replaced with\n\u003ccode\u003eisAfter()\u003c/code\u003e, \u003ccode\u003eisBefore()\u003c/code\u003e or \u003ccode\u003eisEqual()\u003c/code\u003e calls.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  LocalDate date1 \u003d LocalDate.now();\n  LocalDate date2 \u003d LocalDate.now();\n  boolean t \u003d date1.compareTo(date2) \u003e 0;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  LocalDate date1 \u003d LocalDate.now();\n  LocalDate date2 \u003d LocalDate.now();\n  boolean t \u003d date1.isAfter(date2);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantUnmodifiable",
          "displayName": "Redundant usage of unmodifiable collection wrappers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant calls to unmodifiable collection wrappers from the\n\u003ccode\u003eCollections\u003c/code\u003e class.\n\u003cp\u003eIf the argument that is passed to an unmodifiable\n  collection wrapper is already immutable, such a wrapping becomes redundant.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; x \u003d Collections.unmodifiableList(Collections.singletonList(\"abc\"));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; x \u003d Collections.singletonList(\"abc\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn order to detect the methods that return unmodifiable collections, the\ninspection uses the \u003ccode\u003eorg.jetbrains.annotations.Unmodifiable\u003c/code\u003e\nand \u003ccode\u003eorg.jetbrains.annotations.UnmodifiableView\u003c/code\u003e annotations.\nUse them to extend the inspection to your own unmodifiable collection\n  wrappers.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnnecessaryDefault",
          "displayName": "Unnecessary \u0027default\u0027 for enum \u0027switch\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports enum \u003ccode\u003eswitch\u003c/code\u003e statements or expression with \u003ccode\u003edefault\u003c/code\u003e branches which can never be taken,\nbecause all possible values are covered by a \u003ccode\u003ecase\u003c/code\u003e branch.\n\u003cp\u003eSuch elements are redundant, especially for \u003ccode\u003eswitch\u003c/code\u003e expressions, because they don\u0027t compile when all\n  enum constants are not covered by a \u003ccode\u003ecase\u003c/code\u003e branch.\u003c/p\u003e\n\u003cp\u003e\n  The language level needs to be configured to 14 to report \u003ccode\u003eswitch\u003c/code\u003e expressions.\n\u003c/p\u003e\n\u003cp\u003eThe provided quick-fix removes \u003ccode\u003edefault\u003c/code\u003e branches.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum E { A, B }\n  int foo(E e) {\n    return switch (e) {\n      case A -\u0026gt; 1;\n      case B -\u0026gt; 2;\n      default -\u0026gt; 3;\n    };\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum E { A, B }\n  int foo(E e) {\n    return switch (e) {\n      case A -\u0026gt; 1;\n      case B -\u0026gt; 2;\n    };\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eOnly report switch expressions\u003c/b\u003e option to report only redundant \u003ccode\u003edefault\u003c/code\u003e branches in switch expressions.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TrivialStringConcatenation",
          "displayName": "Concatenation with empty string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports string concatenations where one of the arguments is the empty string.\nSuch a concatenation is unnecessary. Sometimes, it\u0027s used as an idiom for converting \nnon-\u003ccode\u003eString\u003c/code\u003e objects or primitives into \u003ccode\u003eString\u003c/code\u003es, but in this\ncase, it\u0027s clearer to use a method like \u003ccode\u003eString.valueOf\u003c/code\u003e.\n\u003cp\u003e\n  A quick-fix is suggested to simplify the concatenation.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(int x, int y) {\n    String s \u003d \"\" + x + \" ; \" + y;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(int x, int y) {\n    String s \u003d x + \" ; \" + y;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObviousNullCheck",
          "displayName": "Null-check method is called with obviously non-null argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports if a null-checking method (for example, \u003ccode\u003eObjects.requireNonNull\u003c/code\u003e or \u003ccode\u003eAssert.assertNotNull\u003c/code\u003e) is\ncalled on a value that is obviously non-null (for example, a newly created object). Such a check is redundant and may indicate\na programming error.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  final String greeting \u003d Objects.requireNonNull(\"Hi!\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  final String greeting \u003d \"Hi!\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eNew in 2017.2\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryContinue",
          "displayName": "Unnecessary \u0027continue\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003econtinue\u003c/code\u003e statements if they are the last reachable statements in the loop.\nThese \u003ccode\u003econtinue\u003c/code\u003e statements are unnecessary and can be safely removed.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (String element: elements) {\n    System.out.println();\n    continue;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (String element: elements) {\n    System.out.println();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe inspection doesn\u0027t analyze JSP files.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore in then branch of \u0027if\u0027 statement with \u0027else\u0027 branch\u003c/b\u003e option to ignore\n  \u003ccode\u003econtinue\u003c/code\u003e statements when they are placed in a \u003ccode\u003ethen\u003c/code\u003e branch of a complete\n  \u003ccode\u003eif\u003c/code\u003e-\u003ccode\u003eelse\u003c/code\u003e statement.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (String element: elements) {\n    if(element.isEmpty()) {\n      continue;\n    } else {\n      //...\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantCompareCall",
          "displayName": "Redundant \u0027compare()\u0027 method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comparisons in which the \u003ccode\u003ecompare\u003c/code\u003e method is superfluous.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean result \u003d Integer.compare(a, b) \u003d\u003d 0;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean result \u003d a \u003d\u003d b;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryLabelOnContinueStatement",
          "displayName": "Unnecessary label on \u0027continue\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003econtinue\u003c/code\u003e statements with unnecessary\nlabels.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  LABEL:\n  while (a \u0026gt; b) {\n    System.out.println(\"Hello\");\n    //the code below is the last statement in a loop,\n    //so unnecessary label and continue can be removed\n    continue LABEL;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExplicitArrayFilling",
          "displayName": "Explicit array filling",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports loops that can be replaced with \u003ccode\u003eArrays.setAll()\u003c/code\u003e or \u003ccode\u003eArrays.fill()\u003c/code\u003e calls.\n\u003cp\u003eThis inspection suggests replacing loops with \u003ccode\u003eArrays.setAll()\u003c/code\u003e if the language level of the project or module is 8 or higher.\n  Replacing loops with \u003ccode\u003eArrays.fill()\u003c/code\u003e is possible with any language level.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (int i\u003d0; i\u0026lt;array.length; i++) {\n     array[i] \u003d calc(i);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Arrays.setAll(array, this::calc);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryLabelOnBreakStatement",
          "displayName": "Unnecessary label on \u0027break\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ebreak\u003c/code\u003e statements with unnecessary labels. Such labels do not change the\ncontrol flow but make the code difficult to follow.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  label:\n  for(int i \u003d 0; i \u0026lt; 10; i++) {\n    if (shouldBreak()) break label;\n    //doSmth\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  label:\n  for(int i \u003d 0; i \u0026lt; 10; i++) {\n    if (shouldBreak()) break;\n    //doSmth\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExcessiveRangeCheck",
          "displayName": "Excessive range check",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports condition chains in which a value range is checked and these condition chains can be simplified to a single check.\n\u003cp\u003eThe quick-fix replaces a condition chain with a simplified expression:\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  x \u003e 2 \u0026\u0026 x \u0026lt; 4\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  x \u003d\u003d 3\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  arr.length \u003d\u003d 0 || arr.length \u003e 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  arr.length !\u003d 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantComparatorComparing",
          "displayName": "Comparator method can be simplified",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eComparator\u003c/code\u003e combinator constructs that can be simplified.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  c.thenComparing(Comparator.comparing(function));\n\n  Comparator.comparing(Map.Entry::getKey);\n\n  Collections.max(list, Comparator.reverseOrder());\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fixes are applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  c.thenComparing(function)\n\n  Map.Entry.comparingByKey()\n\n  Collections.min(list, Comparator.naturalOrder());\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantStreamOptionalCall",
          "displayName": "Redundant step in \u0027Stream\u0027 or \u0027Optional\u0027 call chain",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant \u003ccode\u003eStream\u003c/code\u003e or \u003ccode\u003eOptional\u003c/code\u003e calls like \u003ccode\u003emap(x -\u0026gt; x)\u003c/code\u003e, \u003ccode\u003efilter(x -\u0026gt; true)\u003c/code\u003e or\nredundant \u003ccode\u003esorted()\u003c/code\u003e or \u003ccode\u003edistinct()\u003c/code\u003e calls.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eNote that a mapping operation in code like \u003ccode\u003estreamOfIntegers.map(Integer::valueOf)\u003c/code\u003e\n  works as \u003ccode\u003erequireNonNull()\u003c/code\u003e check:\n  if the stream contains \u003ccode\u003enull\u003c/code\u003e, it throws a \u003ccode\u003eNullPointerException\u003c/code\u003e, thus it\u0027s not absolutely redundant.\n  Disable the \u003cb\u003eReport redundant boxing in Stream.map()\u003c/b\u003e option if you do not want such cases to be reported.\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Proofreading",
      "inspections": [
        {
          "shortName": "GrazieInspection",
          "displayName": "Grammar",
          "defaultSeverity": "GRAMMAR_ERROR",
          "pluginId": "tanvd.grazi",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml lang\u003d\"en\"\u003e\u003cbody\u003e\nReports grammar mistakes in your text. You can configure the inspection in\n\u003ca href\u003d\"settings://reference.settingsdialog.project.grazie\"\u003eSettings | Editor | Natural Languages | Grammar\u003c/a\u003e.\n\u003c/body\u003e\u003c/html\u003e\n"
        },
        {
          "shortName": "SpellCheckingInspection",
          "displayName": "Typo",
          "defaultSeverity": "TYPO",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eReports typos and misspellings in your code, comments, and literals and fixes them with one click.\u003c/body\u003e\u003c/html\u003e\n"
        },
        {
          "shortName": "LanguageDetectionInspection",
          "displayName": "Natural language detection",
          "defaultSeverity": "WARNING",
          "pluginId": "tanvd.grazi",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml lang\u003d\"en\"\u003e\u003cbody\u003eDetects natural languages and suggests enabling corresponding grammar and spelling checks.\u003c/body\u003e\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Android Lint: Internationalization",
      "inspections": [
        {
          "shortName": "AndroidLintConstantLocale",
          "displayName": "Constant Locale",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eConstant Locale\u003cbr\u003e\u003cbr\u003eAssigning \u003ccode\u003eLocale.getDefault()\u003c/code\u003e to a constant is suspicious, because the locale can change while the app is running.\u003cbr\u003e\u003cbr\u003eIssue id: ConstantLocale\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSetTextI18n",
          "displayName": "TextView Internationalization",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eTextView Internationalization\u003cbr\u003e\u003cbr\u003eWhen calling \u003ccode\u003eTextView#setText\u003c/code\u003e\u003cbr/\u003e\n* Never call \u003ccode\u003eNumber#toString()\u003c/code\u003e to format numbers; it will not handle fraction separators and locale-specific digits properly. Consider using \u003ccode\u003eString#format\u003c/code\u003e with proper format specifications (\u003ccode\u003e%d\u003c/code\u003e or \u003ccode\u003e%f\u003c/code\u003e) instead.\u003cbr/\u003e\n* Do not pass a string literal (e.g. \"Hello\") to display text. Hardcoded text can not be properly translated to other languages. Consider using Android resource strings instead.\u003cbr/\u003e\n* Do not build messages by concatenating text chunks. Such messages can not be properly translated.\u003cbr\u003e\u003cbr\u003eIssue id: SetTextI18n\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/resources/localization.html\"\u003ehttps://developer.android.com/guide/topics/resources/localization.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRtlSymmetry",
          "displayName": "Padding and margin symmetry",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003ePadding and margin symmetry\u003cbr\u003e\u003cbr\u003eIf you specify padding or margin on the left side of a layout, you should probably also specify padding on the right side (and vice versa) for right-to-left layout symmetry.\u003cbr\u003e\u003cbr\u003eIssue id: RtlSymmetry\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRelativeOverlap",
          "displayName": "Overlapping items in RelativeLayout",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eOverlapping items in RelativeLayout\u003cbr\u003e\u003cbr\u003eIf relative layout has text or button items aligned to left and right sides they can overlap each other due to localized text expansion unless they have mutual constraints like \u003ccode\u003etoEndOf\u003c/code\u003e/\u003ccode\u003etoStartOf\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: RelativeOverlap\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintEnforceUTF8",
          "displayName": "Encoding used in resource files is not UTF-8",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eEncoding used in resource files is not UTF-8\u003cbr\u003e\u003cbr\u003eXML supports encoding in a wide variety of character sets. However, not all tools handle the XML encoding attribute correctly, and nearly all Android apps use UTF-8, so by using UTF-8 you can protect yourself against subtle bugs when using non-ASCII characters.\u003cbr/\u003e\n\u003cbr/\u003e\nIn particular, the Android Gradle build system will merge resource XML files assuming the resource files are using UTF-8 encoding.\u003cbr\u003e\u003cbr\u003eIssue id: EnforceUTF8\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintHardcodedText",
          "displayName": "Hardcoded text",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eHardcoded text\u003cbr\u003e\u003cbr\u003eHardcoding text attributes directly in layout files is bad for several reasons:\u003cbr/\u003e\n\u003cbr/\u003e\n* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)\u003cbr/\u003e\n\u003cbr/\u003e\n* The application cannot be translated to other languages by just adding new translations for existing string resources.\u003cbr/\u003e\n\u003cbr/\u003e\nThere are quickfixes to automatically extract this hardcoded string into a resource lookup.\u003cbr\u003e\u003cbr\u003eIssue id: HardcodedText\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWeekBasedYear",
          "displayName": "Week Based Year",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWeek Based Year\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003eDateTimeFormatter\u003c/code\u003e pattern \u003ccode\u003eYYYY\u003c/code\u003e returns the \u003ci\u003eweek\u003c/i\u003e based year, not the era-based year. This means that 12/29/2019 will format to 2019, but 12/30/2019 will format to 2020!\u003cbr/\u003e\n\u003cbr/\u003e\nIf you expected this to format as 2019, you should use the pattern \u003ccode\u003eyyyy\u003c/code\u003e instead.\u003cbr\u003e\u003cbr\u003eIssue id: WeekBasedYear\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://stackoverflow.com/questions/46847245/using-datetimeformatter-on-january-first-cause-an-invalid-year-value\"\u003ehttps://stackoverflow.com/questions/46847245/using-datetimeformatter-on-january-first-cause-an-invalid-year-value\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRtlEnabled",
          "displayName": "Using RTL attributes without enabling RTL support",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing RTL attributes without enabling RTL support\u003cbr\u003e\u003cbr\u003eTo enable right-to-left support, when running on API 17 and higher, you must set the \u003ccode\u003eandroid:supportsRtl\u003c/code\u003e attribute in the manifest \u003ccode\u003e\u0026lt;application\u003e\u003c/code\u003e element.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you have started adding RTL attributes, but have not yet finished the migration, you can set the attribute to false to satisfy this lint check.\u003cbr\u003e\u003cbr\u003eIssue id: RtlEnabled\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRtlCompat",
          "displayName": "Right-to-left text compatibility issues",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eRight-to-left text compatibility issues\u003cbr\u003e\u003cbr\u003eAPI 17 adds a \u003ccode\u003etextAlignment\u003c/code\u003e attribute to specify text alignment. However, if you are supporting older versions than API 17, you must \u003cb\u003ealso\u003c/b\u003e specify a gravity or layout_gravity attribute, since older platforms will ignore the \u003ccode\u003etextAlignment\u003c/code\u003e attribute.\u003cbr\u003e\u003cbr\u003eIssue id: RtlCompat\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRtlHardcoded",
          "displayName": "Using left/right instead of start/end attributes",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing left/right instead of start/end attributes\u003cbr\u003e\u003cbr\u003eUsing \u003ccode\u003eGravity#LEFT\u003c/code\u003e and \u003ccode\u003eGravity#RIGHT\u003c/code\u003e can lead to problems when a layout is rendered in locales where text flows from right to left. Use \u003ccode\u003eGravity#START\u003c/code\u003e and \u003ccode\u003eGravity#END\u003c/code\u003e instead. Similarly, in XML \u003ccode\u003egravity\u003c/code\u003e and \u003ccode\u003elayout_gravity\u003c/code\u003e attributes, use \u003ccode\u003estart\u003c/code\u003e rather than \u003ccode\u003eleft\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nFor XML attributes such as paddingLeft and \u003ccode\u003elayout_marginLeft\u003c/code\u003e, use \u003ccode\u003epaddingStart\u003c/code\u003e and \u003ccode\u003elayout_marginStart\u003c/code\u003e. \u003cb\u003eNOTE\u003c/b\u003e: If your \u003ccode\u003eminSdkVersion\u003c/code\u003e is less than 17, you should add \u003cb\u003eboth\u003c/b\u003e the older left/right attributes \u003cb\u003eas well as\u003c/b\u003e the new start/end attributes. On older platforms, where RTL is not supported and the start/end attributes are unknown and therefore ignored, you need the older left/right attributes. There is a separate lint check which catches that type of error.\u003cbr/\u003e\n\u003cbr/\u003e\n(Note: For \u003ccode\u003eGravity#LEFT\u003c/code\u003e and \u003ccode\u003eGravity#START\u003c/code\u003e, you can use these constants even when targeting older platforms, because the \u003ccode\u003estart\u003c/code\u003e bitmask is a superset of the \u003ccode\u003eleft\u003c/code\u003e bitmask. Therefore, you can use \u003ccode\u003egravity\u003d\"start\"\u003c/code\u003e rather than \u003ccode\u003egravity\u003d\"left|start\"\u003c/code\u003e.)\u003cbr\u003e\u003cbr\u003eIssue id: RtlHardcoded\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintByteOrderMark",
          "displayName": "Byte order mark inside files",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eByte order mark inside files\u003cbr\u003e\u003cbr\u003eLint will flag any byte-order-mark (BOM) characters it finds in the middle of a file. Since we expect files to be encoded with UTF-8 (see the EnforceUTF8 issue), the BOM characters are not necessary, and they are not handled correctly by all tools. For example, if you have a BOM as part of a resource name in one particular translation, that name will not be considered identical to the base resource\u0027s name and the translation will not be used.\u003cbr\u003e\u003cbr\u003eIssue id: ByteOrderMark\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Byte_order_mark\"\u003ehttps://en.wikipedia.org/wiki/Byte_order_mark\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Performance",
      "inspections": [
        {
          "shortName": "ExplicitArgumentCanBeLambda",
          "displayName": "Explicit argument can be lambda",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method calls that accept a non-trivial expression and can be replaced with an equivalent method call\nwhich accepts a lambda instead.\n\u003cp\u003e\nConverting an expression to a lambda ensures that the expression won\u0027t be evaluated\nif it\u0027s not used inside the method. For example, \u003ccode\u003eoptional.orElse(createDefaultValue())\u003c/code\u003e can be converted\nto \u003ccode\u003eoptional.orElseGet(this::createDefaultValue)\u003c/code\u003e.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TailRecursion",
          "displayName": "Tail recursion",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports tail recursion, that is, when a method calls itself as its last action before returning.\n\u003cp\u003e\n  Tail recursion can always be replaced by looping, which will be considerably faster.\n  Some JVMs perform tail-call optimization, while others do not. Thus, tail-recursive solutions may have considerably different\n  performance characteristics on different virtual machines.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int factorial(int val, int runningVal) {\n    if (val \u003d\u003d 1) {\n      return runningVal;\n    } else {\n      return factorial(val - 1, runningVal * val);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int factorial(int val, int runningVal) {\n    while (true) {\n      if (val \u003d\u003d 1) {\n        return runningVal;\n      } else {\n        runningVal \u003d runningVal * val;\n        val \u003d val - 1;\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryTemporaryOnConversionToString",
          "displayName": "Unnecessary temporary object in conversion to \u0027String\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary creation of temporary objects when converting\nfrom a primitive type to \u003ccode\u003eString\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String foo \u003d new Integer(3).toString();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String foo \u003d Integer.toString(3);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CallToSimpleGetterInClass",
          "displayName": "Call to simple getter from within class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to a simple property getter from within the property\u0027s class.\n\u003cp\u003e\n  A simple property getter is defined as one which simply returns the value of a field,\n  and does no other calculations. Such simple getter calls can be safely inlined using the quick-fix.\n  Some coding standards also suggest against the use of simple getters for code clarity reasons.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Salient {\n    private String name;\n\n    public String getName() {\n      return name;\n    }\n\n    @Override\n    public String toString() {\n      return getName();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Salient {\n    private String name;\n\n    public String getName() {\n      return name;\n    }\n\n    @Override\n    public String toString() {\n      return name;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the following options to configure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eWhether to only report getter calls on \u003ccode\u003ethis\u003c/code\u003e, not on objects of the same type passed in as a parameter.\u003c/li\u003e\n  \u003cli\u003eWhether to ignore non-\u003ccode\u003eprivate\u003c/code\u003e getters.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LengthOneStringsInConcatenation",
          "displayName": "Single character string concatenation",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports concatenation with string literals that consist of one character.\n\u003cp\u003eThese literals may be replaced with equivalent character literals, gaining some performance enhancement.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String hello \u003d hell + \"o\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String hello \u003d hell + \u0027o\u0027;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SetReplaceableByEnumSet",
          "displayName": "\u0027Set\u0027 can be replaced with \u0027EnumSet\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instantiations of \u003ccode\u003ejava.util.Set\u003c/code\u003e objects whose content types are enumerated classes. Such \u003ccode\u003eSet\u003c/code\u003e objects\ncan be replaced with \u003ccode\u003ejava.util.EnumSet\u003c/code\u003e objects.\n\u003cp\u003e\n  \u003ccode\u003eEnumSet\u003c/code\u003e implementations can be much more efficient compared to\n  other sets, as the underlying data structure is a bit vector. Use the quick-fix to replace the initializer with a call to\n  \u003ccode\u003eEnumSet.noneOf()\u003c/code\u003e. This quick-fix is not available when the type of the variable is a sub-class of \u003ccode\u003eSet\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum MyEnum { FOO, BAR; }\n\n  Set\u0026lt;MyEnum\u0026gt; enums \u003d new HashSet\u0026lt;MyEnum\u0026gt;();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum MyEnum { FOO, BAR; }\n\n  Set\u0026lt;MyEnum\u0026gt; enums \u003d EnumSet.noneOf(MyEnum.class);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AutoUnboxing",
          "displayName": "Auto-unboxing",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions that are affected by unboxing conversion (automatic unwrapping of objects into primitive values).\nTry not to use objects instead of primitives. It might significantly affect the performance.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint x \u003d new Integer(42);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix makes the conversion explicit:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint x \u003d new Integer(42).intValue();\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ci\u003eAutoUnboxing\u003c/i\u003e appeared in Java 5.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SlowAbstractSetRemoveAll",
          "displayName": "Call to \u0027set.removeAll(list)\u0027 may work slowly",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.util.Set.removeAll()\u003c/code\u003e with a \u003ccode\u003ejava.util.List\u003c/code\u003e argument.\n\u003cp\u003e\n  Such a call can be slow when the size of the argument is greater than or equal to the size of the set,\n  and the set is a subclass of \u003ccode\u003ejava.util.AbstractSet\u003c/code\u003e.\n  In this case, \u003ccode\u003eList.contains()\u003c/code\u003e is called for each element in the set, which will perform a linear search.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public void check(String... ss) {\n    // possible O(n^2) complexity\n    mySet.removeAll(List.of(ss));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public void check(String... ss) {\n    // O(n) complexity\n    List.of(ss).forEach(mySet::remove);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "LengthOneStringInIndexOf",
          "displayName": "Single character string argument in \u0027String.indexOf()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports single character strings being used as an argument in \u003ccode\u003eString.indexOf()\u003c/code\u003e and\n\u003ccode\u003eString.lastIndexOf()\u003c/code\u003e calls.\n\u003cp\u003eA quick-fix is suggested to replace such string literals with equivalent character literals, gaining some performance enhancement.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  return s.indexOf(\"x\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  return s.indexOf(\u0027x\u0027);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KeySetIterationMayUseEntrySet",
          "displayName": "Iteration over \u0027keySet()\u0027 can be optimized",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports iterations over the \u003ccode\u003ekeySet()\u003c/code\u003e of a \u003ccode\u003ejava.util.Map\u003c/code\u003e instance,\nwhere the iterated keys are used to retrieve the values from the map.\n\u003cp\u003e\n  Such iteration may be more efficient when replaced with an iteration over the\n  \u003ccode\u003eentrySet()\u003c/code\u003e or \u003ccode\u003evalues()\u003c/code\u003e (if the key is not actually used).\n\u003c/p\u003e\n\u003cp\u003e\n  Similarly, \u003ccode\u003ekeySet().forEach(key -\u0026gt; ...)\u003c/code\u003e\n  can be replaced with \u003ccode\u003eforEach((key, value) -\u0026gt; ...)\u003c/code\u003e if values are retrieved\n  inside a lambda.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (Object key : map.keySet()) {\n   Object val \u003d map.get(key);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (Object val : map.values()) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "FieldMayBeStatic",
          "displayName": "Field can be made \u0027static\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instance variables that can safely be made \u003ccode\u003estatic\u003c/code\u003e. A field\ncan be static if it is declared \u003ccode\u003efinal\u003c/code\u003e and initialized with a constant.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public final String str \u003d \"sample\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ToArrayCallWithZeroLengthArrayArgument",
          "displayName": "\u0027Collection.toArray()\u0027 call style",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eCollection.toArray()\u003c/code\u003e calls that are not in the preferred style, and suggests applying the preferred style.\n\u003cp\u003eThere are two styles to convert a collection to an array:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eA pre-sized array, for example, \u003ccode\u003ec.toArray(new String[c.size()])\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eAn empty array, for example,  \u003ccode\u003ec.toArray(new String[0])\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn older Java versions, using a pre-sized array was recommended, as the reflection\n  call necessary to create an array of proper size was quite slow.\u003c/p\u003e\n\u003cp\u003eHowever, since late updates of OpenJDK 6, this call was intrinsified, making\n  the performance of the empty array version the same, and sometimes even better, compared\n  to the pre-sized version. Also, passing a pre-sized array is dangerous for a concurrent or\n  synchronized collection as a data race is possible between the \u003ccode\u003esize\u003c/code\u003e and \u003ccode\u003etoArray\u003c/code\u003e\n  calls. This may result in extra \u003ccode\u003enull\u003c/code\u003es at the end of the array if the collection was concurrently\n  shrunk during the operation.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the inspection options to select the preferred style.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BoxingBoxedValue",
          "displayName": "Boxing of already boxed value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports boxing of already boxed values.\n\u003cp\u003e\n  This is a redundant\n  operation since any boxed value will first be auto-unboxed before boxing the\n  value again. If done inside an inner loop, such code may cause performance\n  problems.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Integer value \u003d 1;\n  method(Integer.valueOf(value));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Integer value \u003d 1;\n  method(value);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CollectionContainsUrl",
          "displayName": "\u0027Map\u0027 or \u0027Set\u0027 may contain \u0027URL\u0027 objects",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ejava.util.Set\u003c/code\u003e and \u003ccode\u003ejava.util.Map\u003c/code\u003e variables that contain\n\u003ccode\u003ejava.net.URL\u003c/code\u003e objects.\nSuch collections will call the \u003ccode\u003eequals()\u003c/code\u003e and \u003ccode\u003ehashCode()\u003c/code\u003e methods on inserted objects,\nwhich can cause performance problems on \u003ccode\u003eURL\u003c/code\u003e objects.\n\u003cp\u003e\n  \u003ccode\u003eURL\u003c/code\u003e\u0027s \u003ccode\u003eequals()\u003c/code\u003e and \u003ccode\u003ehashCode()\u003c/code\u003e methods can perform a DNS lookup to resolve the host name.\n  This may cause significant delays, depending on the availability and speed of the network and the DNS server.\n  Using \u003ccode\u003ejava.net.URI\u003c/code\u003e instead of \u003ccode\u003ejava.net.URL\u003c/code\u003e will avoid the DNS lookup.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Set\u0026lt;URL\u0026gt; set \u003d new HashSet\u0026lt;URL\u0026gt;();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CallToSimpleSetterInClass",
          "displayName": "Call to simple setter from within class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to a simple property setter from within the property\u0027s class.\n\u003cp\u003e\n  A simple property setter is defined as one which simply assigns the value of its parameter to a field,\n  and does no other calculations. Such simple setter calls can be safely inlined.\n  Some coding standards also suggest against the use of simple setters for code clarity reasons.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n  private int index;\n    public Foo(int idx) {\n       setIndex(idx);\n    }\n    public void setIndex(int idx) {\n       index \u003d idx;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    private int index;\n    public Foo(int idx) {\n      index \u003d idx;\n    }\n    public void setIndex(int idx) {\n      index \u003d idx;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the following options to configure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eWhether to only report setter calls on \u003ccode\u003ethis\u003c/code\u003e, not on objects of the same type passed in as a parameter.\u003c/li\u003e\n  \u003cli\u003eWhether to ignore non-\u003ccode\u003eprivate\u003c/code\u003e setters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceInefficientStreamCount",
          "displayName": "Inefficient Stream API call chains ending with count()",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Stream API call chains ending with the \u003ccode\u003ecount()\u003c/code\u003e operation that\ncould be optimized.\n\u003cp\u003e\n  The following call chains are replaced by this inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eCollection.stream().count()\u003c/code\u003e \u0026rarr; \u003ccode\u003eCollection.size()\u003c/code\u003e. In Java 8 \u003ccode\u003eCollection.stream().count()\u003c/code\u003e\n    actually iterates over the collection elements to count them, while \u003ccode\u003eCollection.size()\u003c/code\u003e is much faster for most of the collections.\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eStream.flatMap(Collection::stream).count()\u003c/code\u003e \u0026rarr; \u003ccode\u003eStream.mapToLong(Collection::size).sum()\u003c/code\u003e. Similarly,\n    there\u0027s no need to iterate over all the nested collections. Instead, their sizes could be summed up.\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eStream.filter(o -\u003e ...).count() \u003e 0\u003c/code\u003e \u0026rarr; \u003ccode\u003eStream.anyMatch(o -\u003e ...)\u003c/code\u003e. Unlike the original call,\n    \u003ccode\u003eanyMatch()\u003c/code\u003e may stop the computation as soon as a matching element is found.\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eStream.filter(o -\u003e ...).count() \u003d\u003d 0\u003c/code\u003e \u0026rarr; \u003ccode\u003eStream.noneMatch(o -\u003e ...)\u003c/code\u003e. Similar to the above.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  Note that if the replacement involves a short-circuiting operation like \u003ccode\u003eanyMatch()\u003c/code\u003e, there could be a visible behavior change,\n  if the intermediate stream operations produce side effects. In general, side effects should be avoided in Stream API calls.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantStringFormatCall",
          "displayName": "Redundant call to \u0027String.format()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to methods like \u003ccode\u003eformat()\u003c/code\u003e and \u003ccode\u003eprintf()\u003c/code\u003e that can be safely removed or simplified.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println(String.format(\"Total count: %d\", 42));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.printf(\"Total count: %d%n\", 42);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ManualArrayToCollectionCopy",
          "displayName": "Manual array to collection copy",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code that uses a loop to copy the contents of an array into a collection.\n\u003cp\u003e\n  A shorter and potentially faster (depending on the collection implementation) way to do this is using \u003ccode\u003eCollection.addAll(Arrays.asList())\u003c/code\u003e or \u003ccode\u003eCollections.addAll()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n\u003cp\u003eOnly loops without additional statements inside are reported.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void addAll(List\u0026lt;String\u0026gt; list, String[] arr) {\n    for (int i \u003d 0; i \u0026lt; arr.length; i++) {\n      String s \u003d arr[i];\n      list.add(s);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void addAll(List\u0026lt;String\u0026gt; list, String[] arr) {\n    Collections.addAll(list, arr);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RandomDoubleForRandomInteger",
          "displayName": "Using \u0027Random.nextDouble()\u0027 to get random integer",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to\n\u003ccode\u003ejava.util.Random.nextDouble()\u003c/code\u003e that are used to create a positive integer number by multiplying\nthe call by a factor and casting to an integer.\n\u003cp\u003e\n  For generating a random positive integer in a range,\n  \u003ccode\u003ejava.util.Random.nextInt(int)\u003c/code\u003e is simpler and more efficient.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int getRandomInt() {\n    return (int) ((new Random()).nextDouble() * SIZE);\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int getRandomInt() {\n    return (new Random()).nextInt(SIZE);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringConcatenationInsideStringBufferAppend",
          "displayName": "String concatenation as argument to \u0027StringBuilder.append()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eString\u003c/code\u003e concatenation used as the argument to \u003ccode\u003eStringBuffer.append()\u003c/code\u003e,\n\u003ccode\u003eStringBuilder.append()\u003c/code\u003e or \u003ccode\u003eAppendable.append()\u003c/code\u003e.\n\u003cp\u003e\n  Such calls may profitably be turned into chained append calls on the existing \u003ccode\u003eStringBuffer/Builder/Appendable\u003c/code\u003e\n  saving the cost of an extra \u003ccode\u003eStringBuffer/Builder\u003c/code\u003e allocation.\n  This inspection ignores compile-time evaluated \u003ccode\u003eString\u003c/code\u003e concatenations, in which case the conversion would only\n  worsen performance.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void bar(StringBuilder builder, String name) {\n    builder.append(\"Hello,\" + name);    //warning\n    builder.append(\"Hello,\" + \"world\"); //no warning\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodMayBeStatic",
          "displayName": "Method can be made \u0027static\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that can safely be made \u003ccode\u003estatic\u003c/code\u003e.\nMaking methods static when possible can reduce memory consumption and improve your code quality.\n\u003cp\u003eA method can be \u003ccode\u003estatic\u003c/code\u003e if:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    it is not \u003ccode\u003esynchronized\u003c/code\u003e, \u003ccode\u003enative\u003c/code\u003e or \u003ccode\u003eabstract\u003c/code\u003e,\n  \u003c/li\u003e\n  \u003cli\u003e\n    does not reference any of non-static methods and non-static fields from the containing class,\n  \u003c/li\u003e\n  \u003cli\u003e\n    is not an override and is not overridden in a subclass.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the following options to configure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eWhether to report only \u003ccode\u003eprivate\u003c/code\u003e and \u003ccode\u003efinal\u003c/code\u003e methods, which increases the performance of this inspection.\u003c/li\u003e\n  \u003cli\u003eWhether to ignore empty methods.\u003c/li\u003e\n  \u003cli\u003eWhether to ignore default methods in interface when using Java 8 or higher.\u003c/li\u003e\n  \u003cli\u003e\n    Whether to let the quick-fix replace instance qualifiers with class references\n    in calls to methods which are made \u003ccode\u003estatic\u003c/code\u003e,\n    that is, call \u003ccode\u003emyClass.m()\u003c/code\u003e would be replaced with \u003ccode\u003eMyClass.m()\u003c/code\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SlowListContainsAll",
          "displayName": "Call to \u0027list.containsAll(collection)\u0027 may have poor performance",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003econtainsAll()\u003c/code\u003e on \u003ccode\u003ejava.util.List\u003c/code\u003e.\n\u003cp\u003e\n  The time complexity of this method call is O(n\u0026middot;m), where n is the number of elements in the list on which\n  the method is called, and m is the number of elements in the collection passed to the method as a parameter.\n  When the list is large, this can be an expensive operation.\n\u003c/p\u003e\n\u003cp\u003e\n  The quick-fix wraps the list in \u003ccode\u003enew java.util.HashSet\u0026lt;\u0026gt;()\u003c/code\u003e since the time required to create\n  \u003ccode\u003ejava.util.HashSet\u003c/code\u003e from \u003ccode\u003ejava.util.List\u003c/code\u003e and execute \u003ccode\u003econtainsAll()\u003c/code\u003e on\n  \u003ccode\u003ejava.util.HashSet\u003c/code\u003e is O(n+m).\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  public boolean check(List\u0026lt;String\u0026gt; list, Collection\u0026lt;String\u0026gt; collection) {\n    // O(n\u0026middot;m) complexity\n    return list.containsAll(collection);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  public boolean check(List\u0026lt;String\u0026gt; list, Collection\u0026lt;String\u0026gt; collection) {\n    // O(n+m) complexity\n    return new HashSet\u0026lt;\u0026gt;(list).containsAll(collection);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "StringBufferToStringInConcatenation",
          "displayName": "\u0027StringBuilder.toString()\u0027 in concatenation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eStringBuffer.toString()\u003c/code\u003e or \u003ccode\u003eStringBuilder.toString()\u003c/code\u003e calls in string concatenations.\nSuch calls are unnecessary when concatenating and can be removed, saving a method call and an object allocation,\nwhich may improve performance.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MapReplaceableByEnumMap",
          "displayName": "\u0027Map\u0027 can be replaced with \u0027EnumMap\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instantiations of \u003ccode\u003ejava.util.Map\u003c/code\u003e objects\nwhose key types are enumerated classes. Such \u003ccode\u003ejava.util.Map\u003c/code\u003e objects\ncan be replaced with \u003ccode\u003ejava.util.EnumMap\u003c/code\u003e objects.\n\u003cp\u003e\n  \u003ccode\u003ejava.util.EnumMap\u003c/code\u003e implementations can be much more efficient\n  because the underlying data structure is a simple array.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Map\u0026lt;MyEnum, String\u0026gt; myEnums \u003d new HashMap\u0026lt;\u0026gt;();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Map\u0026lt;MyEnum, String\u0026gt; myEnums \u003d new EnumMap\u0026lt;\u0026gt;(MyEnum.class);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CollectionAddAllCanBeReplacedWithConstructor",
          "displayName": "Redundant \u0027Collection.addAll()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eCollection.addAll()\u003c/code\u003e and \u003ccode\u003eMap.putAll()\u003c/code\u003e calls immediately after an instantiation of a collection using a no-arg constructor.\n\u003cp\u003eSuch constructs can be replaced with a single call to a parametrized constructor, which simplifies the code. Also, for some collections the replacement\n  might be more performant.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Set\u0026lt;String\u0026gt; set \u003d new HashSet\u0026lt;\u0026gt;();\n  set.addAll(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Set\u0026lt;String\u0026gt; set \u003d new HashSet\u0026lt;\u0026gt;(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  The JDK collection classes are supported by default.\n  Additionally, you can specify other classes using the \u003cb\u003eClasses to check\u003c/b\u003e panel.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InstantiatingObjectToGetClassObject",
          "displayName": "Instantiating object to get \u0027Class\u0027 object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code that instantiates a class to get its class object.\n\u003cp\u003eIt is more performant to access the class object\n  directly by name.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Class\u0026lt;?\u0026gt; c \u003d new Sample().getClass();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Class\u0026lt;?\u0026gt; c \u003d Sample.class;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassInitializerMayBeStatic",
          "displayName": "Class initializer may be \u0027static\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instance initializers which may be made \u003ccode\u003estatic\u003c/code\u003e.\n\u003cp\u003e\n  An instance initializer may be static if it does not reference any of its class\u0027 non-static members.\n  Static initializers are executed once the class is resolved,\n  while instance initializers are executed on each instantiation of the class.\u003c/p\u003e\n\u003cp\u003eThis inspection doesn\u0027t report instance empty initializers and initializers in anonymous classes.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A {\n     public static String CONSTANT;\n     {\n        CONSTANT \u003d \"Hello\";\n     }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A {\n     public static String CONSTANT;\n     static {\n        CONSTANT \u003d \"Hello\"; //now initialized only once per class\n     }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CollectionsMustHaveInitialCapacity",
          "displayName": "Collection without initial capacity",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports attempts to instantiate a new \u003ccode\u003eCollection\u003c/code\u003e object without specifying\nan initial capacity.\n\u003cp\u003e\n  If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing\n  to specify initial capacities for collections may result in performance issues if space needs to be reallocated and\n  memory copied when the initial capacity is exceeded.\n  This inspection checks allocations of classes listed in the inspection\u0027s settings.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  new HashMap\u0026lt;String, String\u0026gt;();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the following options to configure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eList collection classes that should be checked.\u003c/li\u003e\n  \u003cli\u003eWhether to ignore field initializers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringEqualsEmptyString",
          "displayName": "\u0027String.equals()\u0027 can be replaced with \u0027String.isEmpty()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eequals()\u003c/code\u003e being called to compare a \u003ccode\u003eString\u003c/code\u003e with an empty string.\nIn this case, using \u003ccode\u003e.isEmpty()\u003c/code\u003e is better as it shows you exactly what you\u0027re checking.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void checkString(String s){\n    if (\"\".equals(s)) throw new IllegalArgumentException();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void checkString(String s){\n    if (s !\u003d null \u0026\u0026 s.isEmpty()) throw new IllegalArgumentException();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ccode\u003e\"\".equals(str)\u003c/code\u003e returns false when \u003ccode\u003estr\u003c/code\u003e is null. For safety, this inspection\u0027s quick-fix inserts an explicit\n  null-check when\n  the \u003ccode\u003eequals()\u003c/code\u003e argument is nullable. Use the option to make the inspection ignore such cases.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringReplaceableByStringBuffer",
          "displayName": "Non-constant \u0027String\u0027 can be replaced with \u0027StringBuilder\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports variables declared as \u003ccode\u003ejava.lang.String\u003c/code\u003e that are\nrepeatedly appended to. Such variables could be declared more efficiently as \u003ccode\u003ejava.lang.StringBuffer\u003c/code\u003e\nor \u003ccode\u003ejava.lang.StringBuilder\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d \"\";\n  for (int i \u003d 0; i \u0026lt; names.length; i++) {\n    String name \u003d names[i] + (i \u003d\u003d names.length - 1 ? \"\" : \" \");\n    s \u003d s + name;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSuch a loop can be replaced with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  StringBuilder s \u003d new StringBuilder();\n  for (int i \u003d 0; i \u0026lt; names.length; i++) {\n    String name \u003d names[i] + (i \u003d\u003d names.length - 1 ? \"\" : \" \");\n    s.append(name);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOr even with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d String.join(\" \", names);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to make this inspection only report when the variable is appended to in a loop.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EqualsHashCodeCalledOnUrl",
          "displayName": "\u0027equals()\u0027 or \u0027hashCode()\u0027 called on \u0027URL\u0027 object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ehashCode()\u003c/code\u003e and \u003ccode\u003eequals()\u003c/code\u003e calls on \u003ccode\u003ejava.net.URL\u003c/code\u003e objects.\n\u003cp\u003e\n  \u003ccode\u003eURL\u003c/code\u003e\u0027s \u003ccode\u003eequals()\u003c/code\u003e and \u003ccode\u003ehashCode()\u003c/code\u003e methods can perform a DNS lookup to resolve the host name.\n  This may cause significant delays, depending on the availability and speed of the network and the DNS server.\n  Using \u003ccode\u003ejava.net.URI\u003c/code\u003e instead of \u003ccode\u003ejava.net.URL\u003c/code\u003e will avoid the DNS lookup.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int equalsHashCode(URL url1, URL url2) {\n    return url1.hashCode() \u003d\u003d url2.hashCode();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ArraysAsListWithZeroOrOneArgument",
          "displayName": "Call to \u0027Arrays.asList()\u0027 with too few arguments",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eArrays.asList()\u003c/code\u003e with at most one argument.\n\u003cp\u003e\n  Such calls could be replaced\n  with \u003ccode\u003eCollections.singletonList()\u003c/code\u003e, \u003ccode\u003eCollections.emptyList()\u003c/code\u003e,\n  or \u003ccode\u003eList.of()\u003c/code\u003e on JDK 9 and later, which will save some memory.\u003c/p\u003e\n\u003cp\u003eIn particular, \u003ccode\u003eCollections.emptyList()\u003c/code\u003e and \u003ccode\u003eList.of()\u003c/code\u003e with no arguments\n  always return a shared instance,\n  while \u003ccode\u003eArrays.asList()\u003c/code\u003e with no arguments creates a new object every time it\u0027s called.\u003c/p\u003e\n\u003cp\u003eNote: the lists returned by \u003ccode\u003eCollections.singletonList()\u003c/code\u003e and \u003ccode\u003eList.of()\u003c/code\u003e are immutable,\nwhile the list returned \u003ccode\u003eArrays.asList()\u003c/code\u003e allows calling the \u003ccode\u003eset()\u003c/code\u003e method.\nThis may break the code in rare cases.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; empty \u003d Arrays.asList();\n  List\u0026lt;String\u0026gt; one \u003d Arrays.asList(\"one\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; empty \u003d Collections.emptyList();\n  List\u0026lt;String\u0026gt; one \u003d Collections.singletonList(\"one\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObjectEqualsCanBeEquality",
          "displayName": "\u0027equals()\u0027 call can be replaced with \u0027\u003d\u003d\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eequals()\u003c/code\u003e that can be replaced by \u003ccode\u003e\u003d\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e expressions without a change in semantics.\n\u003cp\u003eThese calls can be replaced when they are used to compare \u003ccode\u003efinal\u003c/code\u003e classes that don\u0027t have their own \u003ccode\u003eequals()\u003c/code\u003e implementation but use the default \u003ccode\u003eObject.equals()\u003c/code\u003e.\nThis replacement may result in better performance.\u003c/p\u003e\n\u003cp\u003eThere is a separate inspection for \u003ccode\u003eequals()\u003c/code\u003e calls on \u003ccode\u003eenum\u003c/code\u003e values: \u0027equals()\u0027 called on Enum value.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c!--\u003cp\u003e\u003csmall\u003eNew in 2017.3\u003c/small\u003e--\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UseBulkOperation",
          "displayName": "Bulk operation can be used instead of iteration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports single operations inside loops that could be replaced with a bulk method.\n\u003cp\u003e\n  Not only are bulk methods shorter, but in some cases they may be more performant as well.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  void test(Collection\u0026lt;Integer\u0026gt; numbers) {\n    List\u0026lt;Integer\u0026gt; result \u003d new ArrayList\u0026lt;\u003e();\n    for (Integer i : numbers) {\n      result.add(i);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(Collection\u0026lt;Integer\u0026gt; numbers) {\n    List\u0026lt;Integer\u0026gt; result \u003d new ArrayList\u0026lt;\u003e();\n    result.addAll(numbers);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  The \u003cb\u003eUse Arrays.asList() to wrap arrays\u003c/b\u003e option allows to report arrays, even if the bulk method requires a collection.\n  In this case the quick-fix will automatically wrap the array in \u003ccode\u003eArrays.asList()\u003c/code\u003e call.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObjectInstantiationInEqualsHashCode",
          "displayName": "Object instantiation inside \u0027equals()\u0027 or \u0027hashCode()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports construction of (temporary) new objects inside \u003ccode\u003eequals()\u003c/code\u003e, \u003ccode\u003ehashCode()\u003c/code\u003e, \u003ccode\u003ecompareTo()\u003c/code\u003e, and\n\u003ccode\u003eComparator.compare()\u003c/code\u003e methods.\n\u003cp\u003e\n  Besides constructor invocations, new objects can also be created by autoboxing or iterator creation inside a\n  \u003ccode\u003eforeach\u003c/code\u003e statement.\n  This can cause performance problems, for example, when objects are added to a \u003ccode\u003eSet\u003c/code\u003e or \u003ccode\u003eMap\u003c/code\u003e,\n  where these methods will be called often.\n\u003c/p\u003e\n\u003cp\u003e\n  The inspection will not report when the objects are created in a \u003ccode\u003ethrow\u003c/code\u003e or \u003ccode\u003eassert\u003c/code\u003e statement.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Person {\n    private String name;\n    private int age;\n\n    public boolean equals(Object o) {\n      return Arrays.equals(new Object[] {name, age}, new Object[] {((Foo)o).name, ((Foo)o).age});\n    }\n\n    public int hashCode() {\n      return (name + age).hashCode();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  In this example, two additional arrays are created inside \u003ccode\u003eequals()\u003c/code\u003e, usages of \u003ccode\u003eage\u003c/code\u003e field require boxing,\n  and \u003ccode\u003ename + age\u003c/code\u003e implicitly creates a new string.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BooleanConstructor",
          "displayName": "Boolean constructor call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports creation of \u003ccode\u003eBoolean\u003c/code\u003e objects.\n\u003cp\u003e\n  Constructing new \u003ccode\u003eBoolean\u003c/code\u003e objects is rarely necessary,\n  and may cause performance problems if done often enough. Also, \u003ccode\u003eBoolean\u003c/code\u003e\n  constructors are deprecated since Java 9 and could be removed or made\n  inaccessible in future Java versions.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Boolean b1 \u003d new Boolean(true);\n  Boolean b2 \u003d new Boolean(str);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Boolean b1 \u003d Boolean.TRUE;\n  Boolean b2 \u003d Boolean.valueOf(str);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IOStreamConstructor",
          "displayName": "\u0027InputStream\u0027 and \u0027OutputStream\u0027 can be constructed using \u0027Files\u0027 methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003enew FileInputStream()\u003c/code\u003e or \u003ccode\u003enew FileOutputStream()\u003c/code\u003e expressions that can be replaced\nwith \u003ccode\u003eFiles.newInputStream()\u003c/code\u003e or \u003ccode\u003eFiles.newOutputStream()\u003c/code\u003e calls respectively.\n\u003cbr\u003e\nThe streams created using \u003ccode\u003eFiles\u003c/code\u003e methods are usually more efficient than those created by stream constructors.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  InputStream is \u003d new BufferedInputStream(new FileInputStream(file));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  InputStream is \u003d new BufferedInputStream(Files.newInputStream(file.toPath()));\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection does not show warning if the language level 10 or higher, but the quick-fix is still available.\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 7 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringConcatenationInLoops",
          "displayName": "String concatenation in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports String concatenation in loops.\n\u003cp\u003e\n  As every String concatenation copies the whole\n  string, usually it is preferable to replace it with explicit calls to \u003ccode\u003eStringBuilder.append()\u003c/code\u003e or\n  \u003ccode\u003eStringBuffer.append()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String str \u003d \"\";\n  for(int i\u003d0; i\u0026lt;10; i++) {\n    str +\u003d i;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String str \u003d \"\";\n  StringBuilder strBuilder \u003d new StringBuilder(str);\n  for(int i \u003d 0; i\u0026lt;10; i++) {\n    strBuilder.append(i);\n  }\n  str \u003d strBuilder.toString();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Sometimes, the quick-fixes allow you to convert a \u003ccode\u003eString\u003c/code\u003e variable to a \u003ccode\u003eStringBuilder\u003c/code\u003e or\n  introduce a new \u003ccode\u003eStringBuilder\u003c/code\u003e. Be careful if the original code specially handles the \u003ccode\u003enull\u003c/code\u003e value, as the\n  replacement may change semantics. If \u003ccode\u003enull\u003c/code\u003e is possible, null-safe fixes that generate\n  necessary null-checks are suggested. Also, it\u0027s not guaranteed that the automatic replacement will always be more performant.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IfStatementMissingBreakInLoop",
          "displayName": "Early loop exit in \u0027if\u0027 condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports loops with an \u003ccode\u003eif\u003c/code\u003e statement that can end with \u003ccode\u003ebreak\u003c/code\u003e without changing the semantics.\nThis prevents redundant loop iterations.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean found \u003d false;\n  for (int i \u003d 0; i \u0026lt; arr.length; i++) {\n    if (Objects.equals(value, arr[i])) {\n      found \u003d true;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean found \u003d false;\n  for (int i \u003d 0; i \u0026lt; arr.length; i++) {\n    if (Objects.equals(value, arr[i])) {\n      found \u003d true;\n      break;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringBufferMustHaveInitialCapacity",
          "displayName": "\u0027StringBuilder\u0027 without initial capacity",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports attempts to instantiate a new \u003ccode\u003eStringBuffer\u003c/code\u003e or\n\u003ccode\u003eStringBuilder\u003c/code\u003e object without specifying its initial capacity.\n\u003cp\u003e\n  If no initial capacity is specified, a default capacity is used, which will rarely be optimal.\n  Failing to specify the initial capacity for \u003ccode\u003eStringBuffer\u003c/code\u003e may result\n  in performance issues if space needs to be reallocated and memory copied\n  when the initial capacity is exceeded.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Capacity is not specified\n  var sb \u003d new StringBuilder();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ListRemoveInLoop",
          "displayName": "\u0027List.remove()\u0027 called in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eList.remove(index)\u003c/code\u003e called in a loop that can be replaced with \u003ccode\u003eList.subList().clear()\u003c/code\u003e.\n\u003cp\u003eThe replacement\n  is more efficient for most \u003ccode\u003eList\u003c/code\u003e implementations when many elements are deleted.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void removeRange(List\u0026lt;String\u0026gt; list, int from, int to) {\n    for (int i \u003d from; i \u0026lt; to; i++) {\n        list.remove(from);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void removeRange(List\u0026lt;String\u0026gt; list, int from, int to) {\n    if (to \u0026gt; from) {\n      list.subList(from, to).clear();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  The quick-fix adds a range check automatically to prevent a possible \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e when the minimal value is bigger\n  than the maximal value. It can be removed if such a situation is impossible in your code.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WrapperTypeMayBePrimitive",
          "displayName": "Wrapper type may be primitive",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables of wrapper type that are mostly used as primitive types.\n\u003cp\u003eIn some cases, boxing can be source of significant performance penalty, especially in loops.\u003c/p\u003e\n\u003cp\u003eHeuristics are applied to estimate the number of boxing operations. For example, conversions inside loops are considered\n  as much more numerous.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  public void example() {\n    Integer value \u003d 12;\n    needBox(value);\n    for (int i \u003d 0; i \u0026lt; 10; i++) {\n      // Loop usages considered as happening more often\n      needPrimitive(value);\n    }\n  }\n\n  void needPrimitive(int value) {}\n  void needBox(Integer value) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  public void example() {\n    int value \u003d 12;\n    needBox(value);\n    for (int i \u003d 0; i \u0026lt; 10; i++) {\n      // Loop usages considered as happening more often\n      needPrimitive(value);\n    }\n  }\n\n  void needPrimitive(int value) {}\n  void needBox(Integer value) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003csmall\u003eNew in 2018.2\u003c/small\u003e\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AutoBoxing",
          "displayName": "Auto-boxing",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions that are affected by autoboxing conversion (automatic wrapping of primitive values as objects).\nTry not to use objects instead of primitives. It might significantly affect performance.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eInteger x \u003d 42;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix makes the conversion explicit:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eInteger x \u003d Integer.valueOf(42);\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ci\u003eAutoBoxing\u003c/i\u003e appeared in Java 5.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DynamicRegexReplaceableByCompiledPattern",
          "displayName": "Dynamic regular expression could be replaced by compiled \u0027Pattern\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to the regular expression methods (such as \u003ccode\u003ematches()\u003c/code\u003e or \u003ccode\u003esplit()\u003c/code\u003e)\nof \u003ccode\u003ejava.lang.String\u003c/code\u003e using constant arguments.\n\u003cp\u003e\n  Such calls may be profitably replaced with a \u003ccode\u003eprivate static final Pattern\u003c/code\u003e field\n  so that the regular expression does not have to be compiled each time it is used.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  text.replaceAll(\"abc\", replacement);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  private static final Pattern ABC \u003d Pattern.compile(\"abc\", Pattern.LITERAL);\n  ABC.matcher(text).replaceAll(Matcher.quoteReplacement(replacement));\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObjectAllocationInLoop",
          "displayName": "Object allocation in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports object or array allocations inside loops. While not\nnecessarily a problem, an object allocation inside a loop is a great place to look for memory leaks\nand performance issues.\n\u003cp\u003e\n  The inspection reports the following constructs:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eExplicit allocations via \u003ccode\u003enew\u003c/code\u003e operator\u003c/li\u003e\n  \u003cli\u003eMethods known to return new object\u003c/li\u003e\n  \u003cli\u003eInstance-bound method references\u003c/li\u003e\n  \u003cli\u003eLambdas that capture variables or \u003ccode\u003ethis\u003c/code\u003e reference\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Explicit allocation\n  for (Status status : Status.values()) {\n    declarationsMap.put(status, new ArrayList\u0026lt;\u0026gt;());\n  }\n\n  // Lambda captures variable\n  String message \u003d \"Engine running.\";\n  for (Engine engine : engines) {\n      if (!isRunning(engine)) {\n          logger.warn(() -\u003e {\n              return String.format(message);\n          });\n      }\n  }\n\n  // Instance-bound method reference\n  for(Node node : nodes) {\n    descriptor \u003d node.getDescription();\n    descriptor.ifPresent(dynamicTestExecutor::execute);\n  }\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ManualArrayCopy",
          "displayName": "Manual array copy",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports manual copying of array contents that can be replaced with a call to \u003ccode\u003eSystem.arraycopy()\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (int i \u003d 0; i \u0026lt; array.length; i++) {\n    newArray[i] \u003d array[i];\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.arraycopy(array, 0, newArray, 0, array.length);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryTemporaryOnConversionFromString",
          "displayName": "Unnecessary temporary object in conversion from \u0027String\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary creation of temporary objects when converting\nfrom \u003ccode\u003eString\u003c/code\u003e to primitive types.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  new Integer(\"3\").intValue()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Integer.valueOf(\"3\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BulkFileAttributesRead",
          "displayName": "Bulk \u0027Files.readAttributes()\u0027 call can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports multiple sequential \u003ccode\u003ejava.io.File\u003c/code\u003e attribute checks, such as:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eisDirectory()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eisFile()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003elastModified()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003elength()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\nSuch calls can be replaced with a bulk \u003ccode\u003eFiles.readAttributes()\u003c/code\u003e call.\nThis is usually more performant then multiple separate attribute checks.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean isNewFile(File file, long lastModified) throws IOException {\n    return file.isFile() \u0026\u0026 file.lastModified() \u003e lastModified;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean isNewFile(File file, long lastModified) throws IOException {\n    BasicFileAttributes fileAttributes \u003d Files.readAttributes(file.toPath(), BasicFileAttributes.class);\n    return fileAttributes.isRegularFile() \u0026\u0026 fileAttributes.lastModifiedTime().toMillis() \u003e lastModified;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection does not show a warning if \u003ccode\u003eIOException\u003c/code\u003e is not handled in the current context, but the quick-fix is still available.\u003c/p\u003e\n\u003cp\u003eNote that the replacements are usually not completely equivalent and should be applied with care. In particular, the behavior could differ if\nthe file does not exist at all.\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 7 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "XML",
      "inspections": [
        {
          "shortName": "XmlUnusedNamespaceDeclaration",
          "displayName": "Unused schema declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unused namespace declaration or location hint in XML.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XmlWrongRootElement",
          "displayName": "Wrong root element",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a root tag name different from the name specified in the \u003ccode\u003e\u0026lt;doctype\u0026gt;\u003c/code\u003e tag.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XmlDuplicatedId",
          "displayName": "Duplicate \u0027id\u0027 attribute",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a duplicate \u003ccode\u003eid\u003c/code\u003e attribute in XML.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XmlPathReference",
          "displayName": "Unresolved file reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved file reference in XML.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CheckTagEmptyBody",
          "displayName": "Empty element content",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports XML elements without contents.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;user\u003e\n    \u0026lt;name\u003e\u0026lt;/name\u003e\n  \u0026lt;/user\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;user\u003e\n    \u0026lt;name/\u003e\n  \u0026lt;/user\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XmlHighlighting",
          "displayName": "XML highlighting",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports XML validation problems in the results of a batch code inspection.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XmlDefaultAttributeValue",
          "displayName": "Redundant attribute with default value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a redundant assignment of the default value to an XML attribute.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DeprecatedClassUsageInspection",
          "displayName": "Deprecated API usage in XML",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of deprecated classes and methods in XML files.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XmlInvalidId",
          "displayName": "Unresolved \u0027id\u0027 reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved \u003ccode\u003eid\u003c/code\u003e reference in XML.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CheckXmlFileWithXercesValidator",
          "displayName": "Failed external validation",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CheckDtdRefs",
          "displayName": "Unresolved DTD reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration.\nWorks in DTD an XML files.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XmlDeprecatedElement",
          "displayName": "Deprecated symbol",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a deprecated XML element or  attribute.\n\u003cp\u003eSymbols can be marked by XML comment or documentation tag with text \u0027deprecated\u0027.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XmlUnboundNsPrefix",
          "displayName": "Unbound namespace prefix",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unbound namespace prefix in XML.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Assignment issues",
      "inspections": [
        {
          "shortName": "AssignmentToMethodParameter",
          "displayName": "Assignment to method parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignment to, or modification of method parameters.\n\u003cp\u003eAlthough occasionally intended, this construct may be confusing\n  and is therefore prohibited in some Java projects.\u003c/p\u003e\n\u003cp\u003eThe quick-fix adds a declaration of a new variable.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void printTrimmed(String s) {\n    s \u003d s.trim();\n    System.out.println(s);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void printTrimmed(String s) {\n    String trimmed \u003d s.trim();\n    System.out.println(trimmed);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore if assignment is a transformation of the original parameter\u003c/b\u003e option to ignore assignments that modify\n  the parameter value based on its previous value.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssignmentToStaticFieldFromInstanceMethod",
          "displayName": "Assignment to static field from instance context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignment to, or modification of \u003ccode\u003estatic\u003c/code\u003e fields from within an instance method.\n\u003cp\u003eAlthough legal, such assignments are tricky to do\n  safely and are often a result of marking fields \u003ccode\u003estatic\u003c/code\u003e inadvertently.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Counter {\n    private static int count \u003d 0;\n\n    void increment() {\n      // Warning: updating a static field\n      // from an instance method\n      count++;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssignmentToNull",
          "displayName": "\u0027null\u0027 assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports variables that are assigned to \u003ccode\u003enull\u003c/code\u003e outside a declaration.\n\u003cp\u003eThe main purpose of \u003ccode\u003enull\u003c/code\u003e in Java is to denote uninitialized\n  reference variables. In rare cases, assigning a variable explicitly to \u003ccode\u003enull\u003c/code\u003e\n  is useful to aid garbage collection. However, using \u003ccode\u003enull\u003c/code\u003e to denote a missing, not specified, or invalid value or a not\n  found element is considered bad practice and may make your code more prone to \u003ccode\u003eNullPointerExceptions\u003c/code\u003e.\n  Instead, consider defining a sentinel object with the intended semantics\n  or use library types like \u003ccode\u003eOptional\u003c/code\u003e to denote the absence of a value.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Integer convert(String s) {\n    Integer value;\n    try {\n      value \u003d Integer.parseInt(s);\n    } catch (NumberFormatException e) {\n      // Warning: null is used to denote an \u0027invalid value\u0027\n      value \u003d null;\n    }\n    return value;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore assignments to fields\u003c/b\u003e option to ignore assignments to fields.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestedAssignment",
          "displayName": "Nested assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignment expressions that are nested inside other expressions.\n\u003cp\u003eSuch expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String userName;\n  // Warning: result of assignment to \u0027userName\u0027 is used\n  String message \u003d \"Hello \" + (userName \u003d \"Alice\") + \"!\"\n  System.out.println(message);\n  System.out.println(\"Goodbye \" + userName);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IncrementDecrementUsedAsExpression",
          "displayName": "Result of \u0027++\u0027 or \u0027--\u0027 used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports increment or decrement expressions that are nested inside other expressions.\nSuch expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing.\n\u003cp\u003eThe quick-fix extracts the increment or decrement operation to a separate expression statement.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int i \u003d 10;\n  while (i-- \u003e 0) {\n    System.out.println(i);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int i \u003d 10;\n  while (i \u003e 0) {\n    i--;\n    System.out.println(i);\n  }\n  i--;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceAssignmentWithOperatorAssignment",
          "displayName": "Assignment can be replaced with operator assignment",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignment operations which can be replaced by operator-assignment.\n\u003cp\u003eCode using operator assignment is shorter and may be clearer.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  x \u003d x + 3;\n  x \u003d x / 3;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  x +\u003d 3;\n  x /\u003d 3;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore conditional operators\u003c/b\u003e option to ignore \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e\nand \u003ccode\u003e||\u003c/code\u003e. Replacing conditional operators with operator\nassignment would change the evaluation from lazy to eager, which may change the semantics of the expression.\n\u003c/p\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore obscure operators\u003c/b\u003e option to ignore \u003ccode\u003e^\u003c/code\u003e and \u003ccode\u003e%\u003c/code\u003e, which are less known.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssignmentToLambdaParameter",
          "displayName": "Assignment to lambda parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignment to, or modification of lambda parameters.\nAlthough occasionally intended, this construct may be confusing and is often caused by a typo or use of a wrong variable.\n\u003cp\u003eThe quick-fix adds a declaration of a new variable.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  list.forEach(s -\u003e {\n    s \u003d s.trim();\n    System.out.println(\"String: \" + s);\n  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  list.forEach(s -\u003e {\n    String trimmed \u003d s.trim();\n    System.out.println(\"String: \" + trimmed);\n  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore if assignment is a transformation of the original parameter\u003c/b\u003e option to ignore assignments that modify the parameter\n  value based on its previous value.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssignmentUsedAsCondition",
          "displayName": "Assignment used as condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignments that are used as a condition of an \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, or\n\u003ccode\u003edo\u003c/code\u003e statement, or a conditional expression.\n\u003cp\u003eAlthough occasionally intended, this usage is confusing and may indicate a typo, for example, \u003ccode\u003e\u003d\u003c/code\u003e instead of \u003ccode\u003e\u003d\u003d\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces \u003ccode\u003e\u003d\u003c/code\u003e with \u003ccode\u003e\u003d\u003d\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void update(String str, boolean empty) {\n    // Warning: \u0027empty\u0027 is reassigned,\n    // not compared to str.isEmpty()\n    if (empty \u003d str.isEmpty()) {\n      ...\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void update(String str, boolean empty) {\n    if (empty \u003d\u003d str.isEmpty()) {\n      ...\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssignmentToForLoopParameter",
          "displayName": "Assignment to \u0027for\u0027 loop parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignment to, or modification of a \u003ccode\u003efor\u003c/code\u003e loop parameter inside the body of the loop.\n\u003cp\u003eAlthough occasionally intended, this construct may be confusing and is often the result of a typo or a wrong variable being used.\u003c/p\u003e\n\u003cp\u003eThe quick-fix adds a declaration of a new variable.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (String s : list) {\n    // Warning: s is changed inside the loop\n    s \u003d s.trim();\n    System.out.println(\"String: \" + s);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (String s : list) {\n    String trimmed \u003d s.trim();\n    System.out.println(\"String: \" + trimmed);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAssignments in basic \u003ccode\u003efor\u003c/code\u003e loops without an update statement are not reported.\n  In such cases the assignment is probably intended and can\u0027t be easily moved to the update part of the \u003ccode\u003efor\u003c/code\u003e loop.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (int i \u003d 0; i \u0026lt; list.size(); ) {\n    if (element.equals(list.get(i))) {\n      list.remove(i);\n    } else {\n      // modification of for loop parameter is not reported\n      // as there\u0027s no update statement\n      i++;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eCheck enhanced \u0027for\u0027 loop parameters\u003c/b\u003e option to specify whether modifications of enhanced \u003ccode\u003efor\u003c/code\u003e loop parameters\n  should be also reported.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssignmentToCatchBlockParameter",
          "displayName": "Assignment to \u0027catch\u0027 block parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignments to, \u003ccode\u003ecatch\u003c/code\u003e block parameters.\n\u003cp\u003eChanging a \u003ccode\u003ecatch\u003c/code\u003e block parameter is very confusing and should be discouraged.\u003c/p\u003e\n\u003cp\u003eThe quick-fix adds a declaration of a new variable.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void processFile(String fileName) throws Exception {\n    try {\n      doProcessFile(fileName);\n    } catch(Exception ex) {\n      if (ex instanceof UncheckedIOException) {\n        // Warning: catch block parameter reassigned\n        ex \u003d ((UncheckedIOException) ex).getCause();\n      }\n      throw ex;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void processFile(String fileName) throws Exception {\n    try {\n      doProcessFile(fileName);\n    } catch(Exception ex) {\n      Exception unwrapped \u003d ex;\n      if (unwrapped instanceof UncheckedIOException) {\n        unwrapped \u003d ((UncheckedIOException)\n          unwrapped).getCause();\n      }\n      throw unwrapped;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssignmentToSuperclassField",
          "displayName": "Constructor assigns value to field defined in superclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignment to, or modification of fields that are declared in a superclass from within a subclass constructor.\n\u003cp\u003eIt is considered preferable to initialize the fields of a superclass in its own constructor and\n  delegate to that constructor in a subclass. This will also allow declaring a field \u003ccode\u003efinal\u003c/code\u003e\n  if it isn\u0027t changed after the construction.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Super {\n    int x;\n  }\n  class Sub extends Super {\n    Sub(int _x) {\n      // Warning: x is declared in a superclass\n      x \u003d _x;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo avoid the problem, declare a superclass constructor:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Super {\n    final int x;\n\n    Super(int _x) {\n      x \u003d _x;\n    }\n  }\n  class Sub extends Super {\n    Sub(int _x) {\n      super(_x);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "CssRedundantUnit",
          "displayName": "Redundant measure unit",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a measure unit of a zero value where units are not required by the specification.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ewidth: 0px\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssMissingSemicolon",
          "displayName": "Missing semicolon",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a missing semicolon at the end of a declaration.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Class structure",
      "inspections": [
        {
          "shortName": "StaticNonFinalField",
          "displayName": "\u0027static\u0027, non-\u0027final\u0027 field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-\u003ccode\u003efinal\u003c/code\u003e \u003ccode\u003estatic\u003c/code\u003e fields.\n\u003cp\u003eA quick-fix is available to add the \u003ccode\u003efinal\u003c/code\u003e modifier to a non-\u003ccode\u003efinal\u003c/code\u003e \u003ccode\u003estatic\u003c/code\u003e field.\u003c/p\u003e\n\u003cp\u003eThis inspection doesn\u0027t check fields\u0027 mutability. For example, adding the \u003ccode\u003efinal\u003c/code\u003e modifier to a field that has a value\n  being set somewhere will cause a compilation error.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eOnly report \u0027public\u0027 fields\u003c/b\u003e option so that the inspection reported only \u003ccode\u003epublic\u003c/code\u003e fields.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FinalMethod",
          "displayName": "Method can\u0027t be overridden",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that are declared \u003ccode\u003efinal\u003c/code\u003e.\nSuch methods can\u0027t be overridden and may indicate a lack of object-oriented design.\n  Some coding standards discourage \u003ccode\u003efinal\u003c/code\u003e methods.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ListenerMayUseAdapter",
          "displayName": "Class may extend adapter instead of implementing listener",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes implementing listeners instead of extending corresponding adapters.\n\u003cp\u003eA quick-fix is available to\n  remove any redundant empty methods left after replacing a listener implementation with an adapter extension.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eOnly warn when empty implementing methods are found\u003c/b\u003e option to configure the inspection to warn even if no empty methods are found.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Singleton",
          "displayName": "Singleton",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports singleton classes.\n\u003cp\u003eSingleton classes are declared in a way that only one instance of the class can ever be instantiated. Singleton classes complicate testing,\n  and their presence may indicate a lack of object-oriented design.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Singleton {\n    private static final Singleton ourInstance \u003d new Singleton();\n\n    private Singleton() {\n    }\n\n    public Singleton getInstance() {\n        return ourInstance;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonFinalUtilityClass",
          "displayName": "Utility class is not \u0027final\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports utility classes that aren\u0027t \u003ccode\u003efinal\u003c/code\u003e or \u003ccode\u003eabstract\u003c/code\u003e.\n\u003cp\u003eUtility classes have all fields and methods declared as \u003ccode\u003estatic\u003c/code\u003e.\nMaking them \u003ccode\u003efinal\u003c/code\u003e prevents them from being accidentally subclassed.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class UtilityClass {\n    public static void foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public final class UtilityClass {\n    public static void foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UtilityClassWithoutPrivateConstructor",
          "displayName": "Utility class without \u0027private\u0027 constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports utility classes without \u003ccode\u003eprivate\u003c/code\u003e constructors.\n\u003cp\u003eUtility classes have all fields and methods declared as \u003ccode\u003estatic\u003c/code\u003e. Creating \u003ccode\u003eprivate\u003c/code\u003e\nconstructors in utility classes prevents them from being accidentally instantiated.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore if annotated by\u003c/b\u003e option to specify special annotations. The inspection ignores classes marked with one of\nthese annotations.\n\u003cp\u003e\nUse the \u003cb\u003eIgnore classes with only a main method\u003c/b\u003e option to ignore classes with no methods other than the main one.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PublicConstructor",
          "displayName": "\u0027public\u0027 constructor can be replaced with factory method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003epublic\u003c/code\u003e constructors.\n\u003cp\u003eSome coding standards discourage the use of \u003ccode\u003epublic\u003c/code\u003e constructors and recommend\n\u003ccode\u003estatic\u003c/code\u003e factory methods instead.\nThis way the implementation can be swapped out without affecting the call sites.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Test {\n    private String name;\n\n    public Test(String name) {\n        this.name \u003d name;\n    }\n\n    public void test() {\n        System.out.println(name);\n    }\n\n    public static void main(String[] args) {\n        new Test(\"str\").test();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Test {\n    private String name;\n\n    private Test(String name) {\n        this.name \u003d name;\n    }\n\n    public static Test getInstance(String name) {\n        return new Test(name);\n    }\n\n    public void test() {\n        System.out.println(name);\n    }\n\n    public static void main(String[] args) {\n        getInstance(\"str\").test();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AnonymousInnerClass",
          "displayName": "Anonymous inner class can be replaced with inner class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports anonymous inner classes.\n\u003cp\u003eIn some cases, replacing anonymous inner classes with inner classes can lead to more readable and maintainable code.\n  Also, some code standards discourage anonymous inner classes.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InnerClassOnInterface",
          "displayName": "Inner class of interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports inner classes in \u003ccode\u003einterface\u003c/code\u003e classes.\n\u003cp\u003eSome coding standards\ndiscourage the use of such classes. The inspection doesn\u0027t report enum classes and annotation interfaces.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore inner interfaces of interfaces\u003c/b\u003e option to ignore inner interfaces. For example:\n\u003cpre\u003e\u003ccode\u003e\n  interface I {\n    interface Inner {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassWithOnlyPrivateConstructors",
          "displayName": "Class with only \u0027private\u0027 constructors should be declared \u0027final\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes with only \u003ccode\u003eprivate\u003c/code\u003e constructors.\n\u003cp\u003eA class that only has \u003ccode\u003eprivate\u003c/code\u003e constructors cannot be extended outside a file and should be declared as \u003ccode\u003efinal\u003c/code\u003e.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FinalStaticMethod",
          "displayName": "\u0027static\u0027 method declared \u0027final\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports static methods that are marked as \u003ccode\u003efinal\u003c/code\u003e.\n\u003cp\u003eSuch code might indicate an error or an incorrect assumption about the effect of the \u003ccode\u003efinal\u003c/code\u003e keyword.\nStatic methods are not subject to runtime polymorphism, so the only purpose of the \u003ccode\u003efinal\u003c/code\u003e keyword used with static methods\n  is to ensure the method will not be hidden in a subclass.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FinalPrivateMethod",
          "displayName": "\u0027private\u0027 method declared \u0027final\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that are marked with both \u003ccode\u003efinal\u003c/code\u003e and \u003ccode\u003eprivate\u003c/code\u003e keywords.\n\u003cp\u003eSince \u003ccode\u003eprivate\u003c/code\u003e methods cannot be meaningfully overridden because of their visibility, declaring them\n\u003ccode\u003efinal\u003c/code\u003e is redundant.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MarkerInterface",
          "displayName": "Marker interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports marker interfaces without any methods or fields.\n\u003cp\u003eSuch interfaces may be confusing and typically indicate a design failure.\u003c/p\u003e\n\u003cp\u003eThe inspection ignores interfaces that extend two or more interfaces and interfaces\n  that specify the generic type of their superinterface.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UtilityClass",
          "displayName": "Utility class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports utility classes.\n\u003cp\u003eUtility classes have all fields and methods declared as \u003ccode\u003estatic\u003c/code\u003e and their\n  presence may indicate a lack of object-oriented design.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore if annotated by\u003c/b\u003e option to specify special annotations. The inspection ignores classes annotated with one of\n  these annotations.\u003c/p\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonFinalFieldInEnum",
          "displayName": "Non-final field in \u0027enum\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-final fields in enumeration types as they are rarely needed and provide a global mutable state.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum Enum {\n    FIRST(\"first\"),\n    SECOND(\"second\");\n\n    public String str;\n\n    Enum(String str) {\n        this.str \u003d str;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum Enum {\n    FIRST(\"first\"),\n    SECOND(\"second\");\n\n    public final String str;\n\n    Enum(String str) {\n        this.str \u003d str;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\nConfigure the `Ignore field if quick-fix is not available` checkbox to only highlight fields that can be made final by the quick-fix.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassNameDiffersFromFileName",
          "displayName": "Class name differs from file name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports top-level class names that don\u0027t match the name of a file containing them.\n\u003cp\u003eWhile the Java specification allows for naming non-\u003ccode\u003epublic\u003c/code\u003e classes this way,\n  files with unmatched names may be confusing and decrease usefulness of various software tools.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantDeclaredInAbstractClass",
          "displayName": "Constant declared in \u0027abstract\u0027 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports constants (\u003ccode\u003epublic static final\u003c/code\u003e fields) declared in abstract\nclasses.\n\u003cp\u003eSome coding standards require declaring constants in interfaces instead.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NoopMethodInAbstractClass",
          "displayName": "No-op method in \u0027abstract\u0027 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports no-op (for \"no operation\") methods in \u003ccode\u003eabstract\u003c/code\u003e classes.\n\u003cp\u003eIt is usually a better\ndesign to make such methods \u003ccode\u003eabstract\u003c/code\u003e themselves so that classes inheriting these\n  methods provide their implementations.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class Test {\n    protected void doTest() {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodReturnAlwaysConstant",
          "displayName": "Method returns per-class constant",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that only return a constant, which may differ for various inheritors.\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantDeclaredInInterface",
          "displayName": "Constant declared in interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports constants (\u003ccode\u003epublic static final\u003c/code\u003e fields) declared in interfaces.\n\u003cp\u003eSome coding standards require declaring constants in abstract classes instead.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MultipleTopLevelClassesInFile",
          "displayName": "Multiple top level classes in single file",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports multiple top-level classes in a single Java file.\n\u003cp\u003ePutting multiple\ntop-level classes in one file may be confusing and degrade the usefulness of various\n  software tools.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LimitedScopeInnerClass",
          "displayName": "Local class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local classes.\n\u003cp\u003eA local class is a named nested class declared inside a code block.\nLocal classes are uncommon and may therefore be confusing.\n  In addition, some code standards discourage the use of local classes.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test() {\n    class Local { // local class\n    }\n    new Local();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassInitializer",
          "displayName": "Non-\u0027static\u0027 initializer",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-\u003ccode\u003estatic\u003c/code\u003e initializers in classes.\n\u003cp\u003eSome coding standards prohibit instance initializers and recommend using constructors or field initializers for initialization.\n  Also, deleting the \u003ccode\u003estatic\u003c/code\u003e keyword may accidentally create non-\u003ccode\u003estatic\u003c/code\u003e initializers and result in obscure bugs.\n\u003c/p\u003e\n\u003cp\u003eThis inspection doesn\u0027t report instance initializers in anonymous classes.\n  \u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eOnly warn when the class has one or more constructors\u003c/b\u003e option to ignore instance initializers in classes that don\u0027t have any constructors.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ParameterCanBeLocal",
          "displayName": "Value passed as parameter never read",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant method parameters that can be replaced with local variables.\n\u003cp\u003eIf all local usages of a parameter are preceded by assignments to that parameter, the\nparameter can be removed and its usages replaced with local variables.\nIt makes no sense to have such a parameter, as values that are passed to it are overwritten.\n  Usually, the problem appears as a result of refactoring.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(int p) {\n    p \u003d 1;\n    System.out.print(p);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test() {\n    int p \u003d 1;\n    System.out.print(p);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "InterfaceMayBeAnnotatedFunctional",
          "displayName": "Interface may be annotated as \u0027@FunctionalInterface\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports interfaces that can be annotated with \u003ccode\u003e@FunctionalInterface\u003c/code\u003e (available since JDK 1.8).\n\u003cp\u003eAnnotating an interface with \u003ccode\u003e@FunctionalInterface\u003c/code\u003e indicates that the interface\n  is functional and no more \u003ccode\u003eabstract\u003c/code\u003e methods can be added to it.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface FileProcessor {\n    void execute(File file);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @FunctionalInterface\n  interface FileProcessor {\n    void execute(File file);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FinalClass",
          "displayName": "Class is closed to inheritance",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that are declared \u003ccode\u003efinal\u003c/code\u003e.\nFinal classes that extend a \u003ccode\u003esealed\u003c/code\u003e class or interface are not reported.\nSuch classes can\u0027t be inherited and may indicate a lack of object-oriented design.\nSome coding standards discourage \u003ccode\u003efinal\u003c/code\u003e classes.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic final class\u003c/b\u003e Main {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Main {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UtilityClassCanBeEnum",
          "displayName": "Utility class can be \u0027enum\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports utility classes that can be converted to enums.\n\u003cp\u003eSome coding style guidelines require implementing utility classes as enums\n  to avoid code coverage issues in \u003ccode\u003eprivate\u003c/code\u003e constructors.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class StringUtils {\n    public static final String EMPTY \u003d \"\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum StringUtils {\n    ;\n    public static final String EMPTY \u003d \"\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassMayBeInterface",
          "displayName": "Abstract \u0027class\u0027 may be \u0027interface\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eabstract\u003c/code\u003e classes that can be converted to interfaces.\n\u003cp\u003eUsing interfaces instead of classes is preferable as Java doesn\u0027t support multiple class inheritance,\n  while a class can implement multiple interfaces.\u003c/p\u003e\n\u003cp\u003eA class may be converted to an interface if it has no superclasses (other\nthan Object), has only \u003ccode\u003epublic static final\u003c/code\u003e fields,\n  \u003ccode\u003epublic abstract\u003c/code\u003e methods, and \u003ccode\u003epublic\u003c/code\u003e inner classes.\n\u003c!-- tooltip end --\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nabstract class Example {\n    public static final int MY_CONST \u003d 42;\n    public abstract void foo();\n}\n\nclass Inheritor extends Example {\n    @Override\n    public void foo() {\n        System.out.println(MY_CONST);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\ninterface Example {\n    int MY_CONST \u003d 42;\n    void foo();\n}\n\nclass Inheritor implements Example {\n    @Override\n    public void foo() {\n        System.out.println(MY_CONST);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eReport classes containing non-abstract methods when using Java 8\u003c/b\u003e option to report only the classes with \u003ccode\u003estatic\u003c/code\u003e methods and non-abstract methods that can be converted to\n  \u003ccode\u003edefault\u003c/code\u003e methods (only applicable to language level of 8 or higher).\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EmptyClass",
          "displayName": "Redundant empty class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty classes and Java files without any defined classes.\n\u003cp\u003eA class is empty if it\ndoesn\u0027t contain any fields, methods, constructors, or initializers. Empty classes often remain\n  after significant changes or refactorings.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eIgnore if annotated by\u003c/b\u003e option to specify special annotations. The inspection will ignore the classes marked with these\n    annotations.\n  \u003c/li\u003e\n  \u003cli\u003e\u003cp\u003e\n    Use the \u003cb\u003eIgnore class if it is a parametrization of a super type\u003c/b\u003e option to ignore classes that parameterize a superclass. For example:\n  \u003c/p\u003e\n    \u003cpre\u003e\u003ccode\u003eclass MyList extends ArrayList\u0026lt;String\u0026gt; {}\u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eIgnore subclasses of java.lang.Throwable\u003c/b\u003e to ignore classes that extend \u003ccode\u003ejava.lang.Throwable\u003c/code\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eComments count as content\u003c/b\u003e option to ignore classes that contain comments.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UtilityClassWithPublicConstructor",
          "displayName": "Utility class with \u0027public\u0027 constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports utility classes with \u003ccode\u003epublic\u003c/code\u003e constructors.\n\u003cp\u003eUtility classes have all fields and methods declared as \u003ccode\u003estatic\u003c/code\u003e. Creating a \u003ccode\u003epublic\u003c/code\u003e\n  constructor in such classes is confusing and may cause accidental class instantiation.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public final class UtilityClass {\n    public UtilityClass(){\n    }\n    public static void foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public final class UtilityClass {\n    private UtilityClass(){\n    }\n    public static void foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FieldCanBeLocal",
          "displayName": "Field can be local",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant class fields that can be replaced with local variables.\n\u003cp\u003eIf all local usages of a field are preceded by assignments to that field, the\n  field can be removed, and its usages can be replaced with local variables.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Android Lint: Usability",
      "inspections": [
        {
          "shortName": "AndroidLintTypographyDashes",
          "displayName": "Hyphen can be replaced with dash",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eHyphen can be replaced with dash\u003cbr\u003e\u003cbr\u003eThe \"n dash\" (u2013, \u0026amp;#8211;) and the \"m dash\" (u2014, \u0026amp;#8212;) characters are used for ranges (n dash) and breaks (m dash). Using these instead of plain hyphens can make text easier to read and your application will look more polished.\u003cbr\u003e\u003cbr\u003eIssue id: TypographyDashes\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Dash\"\u003ehttps://en.wikipedia.org/wiki/Dash\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSelectableText",
          "displayName": "Dynamic text should probably be selectable",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eDynamic text should probably be selectable\u003cbr\u003e\u003cbr\u003eIf a \u003ccode\u003e\u0026lt;TextView\u003e\u003c/code\u003e is used to display data, the user might want to copy that data and paste it elsewhere. To allow this, the \u003ccode\u003e\u0026lt;TextView\u003e\u003c/code\u003e should specify \u003ccode\u003eandroid:textIsSelectable\u003d\"true\"\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nThis lint check looks for TextViews which are likely to be displaying data: views whose text is set dynamically.\u003cbr\u003e\u003cbr\u003eIssue id: SelectableText\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMipmapIcons",
          "displayName": "Use Mipmap Launcher Icons",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUse Mipmap Launcher Icons\u003cbr\u003e\u003cbr\u003eLauncher icons should be provided in the \u003ccode\u003emipmap\u003c/code\u003e resource directory. This is the same as the \u003ccode\u003edrawable\u003c/code\u003e resource directory, except resources in the \u003ccode\u003emipmap\u003c/code\u003e directory will not get stripped out when creating density-specific APKs.\u003cbr/\u003e\n\u003cbr/\u003e\nIn certain cases, the Launcher app may use a higher resolution asset (than would normally be computed for the device) to display large app shortcuts. If drawables for densities other than the device\u0027s resolution have been stripped out, then the app shortcut could appear blurry.\u003cbr/\u003e\n\u003cbr/\u003e\nTo fix this, move your launcher icons from `drawable-`dpi to `mipmap-`dpi and change references from @drawable/ and R.drawable to @mipmap/ and R.mipmap.\u003cbr/\u003e\n\u003cbr/\u003e\nIn Android Studio this lint warning has a quickfix to perform this automatically.\u003cbr\u003e\u003cbr\u003eIssue id: MipmapIcons\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWebpUnsupported",
          "displayName": "WebP Unsupported",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWebP Unsupported\u003cbr\u003e\u003cbr\u003eThe WebP format requires Android 4.0 (API 15). Certain features, such as lossless encoding and transparency, requires Android 4.2.1 (API 18; API 17 is 4.2.0.)\u003cbr\u003e\u003cbr\u003eIssue id: WebpUnsupported\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconMixedNinePatch",
          "displayName": "Clashing PNG and 9-PNG files",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eClashing PNG and 9-PNG files\u003cbr\u003e\u003cbr\u003eIf you accidentally name two separate resources \u003ccode\u003efile.png\u003c/code\u003e and \u003ccode\u003efile.9.png\u003c/code\u003e, the image file and the nine patch file will both map to the same drawable resource, \u003ccode\u003e@drawable/file\u003c/code\u003e, which is probably not what was intended.\u003cbr\u003e\u003cbr\u003eIssue id: IconMixedNinePatch\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAlwaysShowAction",
          "displayName": "Usage of showAsAction\u003dalways",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsage of \u003ccode\u003eshowAsAction\u003dalways\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eUsing \u003ccode\u003eshowAsAction\u003d\"always\"\u003c/code\u003e in menu XML, or \u003ccode\u003eMenuItem.SHOW_AS_ACTION_ALWAYS\u003c/code\u003e in Java code is usually a deviation from the user interface style guide.Use \u003ccode\u003eifRoom\u003c/code\u003e or the corresponding \u003ccode\u003eMenuItem.SHOW_AS_ACTION_IF_ROOM\u003c/code\u003e instead.\u003cbr/\u003e\n\u003cbr/\u003e\nIf \u003ccode\u003ealways\u003c/code\u003e is used sparingly there are usually no problems and behavior is roughly equivalent to \u003ccode\u003eifRoom\u003c/code\u003e but with preference over other \u003ccode\u003eifRoom\u003c/code\u003e items. Using it more than twice in the same menu is a bad idea.\u003cbr/\u003e\n\u003cbr/\u003e\nThis check looks for menu XML files that contain more than two \u003ccode\u003ealways\u003c/code\u003e actions, or some \u003ccode\u003ealways\u003c/code\u003e actions and no \u003ccode\u003eifRoom\u003c/code\u003e actions. In Java code, it looks for projects that contain references to \u003ccode\u003eMenuItem.SHOW_AS_ACTION_ALWAYS\u003c/code\u003e and no references to \u003ccode\u003eMenuItem.SHOW_AS_ACTION_IF_ROOM\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: AlwaysShowAction\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAppLinkUrlError",
          "displayName": "URL not supported by app for Firebase App Indexing",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eURL not supported by app for Firebase App Indexing\u003cbr\u003e\u003cbr\u003eEnsure the URL is supported by your app, to get installs and traffic to your app from Google Search.\u003cbr\u003e\u003cbr\u003eIssue id: AppLinkUrlError\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://g.co/AppIndexing/AndroidStudio\"\u003ehttps://g.co/AppIndexing/AndroidStudio\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintButtonCase",
          "displayName": "Cancel/OK dialog button capitalization",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCancel/OK dialog button capitalization\u003cbr\u003e\u003cbr\u003eThe standard capitalization for OK/Cancel dialogs is \"OK\" and \"Cancel\". To ensure that your dialogs use the standard strings, you can use the resource strings @android:string/ok and @android:string/cancel.\u003cbr\u003e\u003cbr\u003eIssue id: ButtonCase\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconExtension",
          "displayName": "Icon format does not match the file extension",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIcon format does not match the file extension\u003cbr\u003e\u003cbr\u003eEnsures that icons have the correct file extension (e.g. a \u003ccode\u003e.png\u003c/code\u003e file is really in the PNG format and not for example a GIF file named \u003ccode\u003e.png\u003c/code\u003e).\u003cbr\u003e\u003cbr\u003eIssue id: IconExtension\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconNoDpi",
          "displayName": "Icon appears in both -nodpi and dpi folders",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIcon appears in both \u003ccode\u003e-nodpi\u003c/code\u003e and dpi folders\u003cbr\u003e\u003cbr\u003eBitmaps that appear in \u003ccode\u003edrawable-nodpi\u003c/code\u003e folders will not be scaled by the Android framework. If a drawable resource of the same name appears \u003cb\u003eboth\u003c/b\u003e in a \u003ccode\u003e-nodpi\u003c/code\u003e folder as well as a dpi folder such as \u003ccode\u003edrawable-hdpi\u003c/code\u003e, then the behavior is ambiguous and probably not intentional. Delete one or the other, or use different names for the icons.\u003cbr\u003e\u003cbr\u003eIssue id: IconNoDpi\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNegativeMargin",
          "displayName": "Negative Margins",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eNegative Margins\u003cbr\u003e\u003cbr\u003eMargin values should be positive. Negative values are generally a sign that you are making assumptions about views surrounding the current one, or may be tempted to turn off child clipping to allow a view to escape its parent. Turning off child clipping to do this not only leads to poor graphical performance, it also results in wrong touch event handling since touch events are based strictly on a chain of parent-rect hit tests. Finally, making assumptions about the size of strings can lead to localization problems.\u003cbr\u003e\u003cbr\u003eIssue id: NegativeMargin\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMonochromeLauncherIcon",
          "displayName": "Monochrome icon is not defined",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMonochrome icon is not defined\u003cbr\u003e\u003cbr\u003eIf \u003ccode\u003eandroid:roundIcon\u003c/code\u003e and \u003ccode\u003eandroid:icon\u003c/code\u003e are both in your manifest, you must either remove the reference to \u003ccode\u003eandroid:roundIcon\u003c/code\u003e if it is not needed; or, supply the monochrome icon in the drawable defined by the \u003ccode\u003eandroid:roundIcon\u003c/code\u003e and \u003ccode\u003eandroid:icon\u003c/code\u003e attribute.\u003cbr/\u003e\n\u003cbr/\u003e\nFor example, if \u003ccode\u003eandroid:roundIcon\u003c/code\u003e and \u003ccode\u003eandroid:icon\u003c/code\u003e are both in the manifest, a launcher might choose to use \u003ccode\u003eandroid:roundIcon\u003c/code\u003e over \u003ccode\u003eandroid:icon\u003c/code\u003e to display the adaptive app icon. Therefore, your themed application iconwill not show if your monochrome attribute is not also specified in \u003ccode\u003eandroid:roundIcon\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: MonochromeLauncherIcon\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintButtonStyle",
          "displayName": "Button should be borderless",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eButton should be borderless\u003cbr\u003e\u003cbr\u003eButton bars typically use a borderless style for the buttons. Set the \u003ccode\u003estyle\u003d\"?android:attr/buttonBarButtonStyle\"\u003c/code\u003e attribute on each of the buttons, and set \u003ccode\u003estyle\u003d\"?android:attr/buttonBarStyle\"\u003c/code\u003e on the parent layout\u003cbr\u003e\u003cbr\u003eIssue id: ButtonStyle\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://material.io/components/dialogs/\"\u003ehttps://material.io/components/dialogs/\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintBackButton",
          "displayName": "Back button",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eBack button\u003cbr\u003e\u003cbr\u003eAccording to the Android Design Guide,\u003cbr/\u003e\n\u003cbr/\u003e\n\"Other platforms use an explicit back button with label to allow the user to navigate up the application\u0027s hierarchy. Instead, Android uses the main action bar\u0027s app icon for hierarchical navigation and the navigation bar\u0027s back button for temporal navigation.\"\u003cbr/\u003e\n\u003cbr/\u003e\nThis check is not very sophisticated (it just looks for buttons with the label \"Back\"), so it is disabled by default to not trigger on common scenarios like pairs of Back/Next buttons to paginate through screens.\u003cbr\u003e\u003cbr\u003eIssue id: BackButton\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://material.io/design/\"\u003ehttps://material.io/design/\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconDensities",
          "displayName": "Icon densities validation",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIcon densities validation\u003cbr\u003e\u003cbr\u003eIcons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra high). This lint check identifies icons which do not have complete coverage across the densities.\u003cbr/\u003e\n\u003cbr/\u003e\nLow density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable \u003ccode\u003eANDROID_LINT_INCLUDE_LDPI\u003dtrue\u003c/code\u003e. For more information on current density usage, see \u003ca href\u003d\"https://developer.android.com/about/dashboards\"\u003ehttps://developer.android.com/about/dashboards\u003c/a\u003e\u003cbr\u003e\u003cbr\u003eIssue id: IconDensities\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/practices/screens_support.html\"\u003ehttps://developer.android.com/guide/practices/screens_support.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAutofill",
          "displayName": "Use Autofill",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUse Autofill\u003cbr\u003e\u003cbr\u003eSpecify an \u003ccode\u003eautofillHints\u003c/code\u003e attribute when targeting SDK version 26 or higher or explicitly specify that the view is not important for autofill. Your app can help an autofill service classify the data correctly by providing the meaning of each view that could be autofillable, such as views representing usernames, passwords, credit card fields, email addresses, etc.\u003cbr/\u003e\n\u003cbr/\u003e\nThe hints can have any value, but it is recommended to use predefined values like \u0027username\u0027 for a username or \u0027creditCardNumber\u0027 for a credit card number. For a list of all predefined autofill hint constants, see the \u003ccode\u003eAUTOFILL_HINT_\u003c/code\u003e constants in the \u003ccode\u003eView\u003c/code\u003e reference at \u003ca href\u003d\"https://developer.android.com/reference/android/view/View.html\"\u003ehttps://developer.android.com/reference/android/view/View.html\u003c/a\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nYou can mark a view unimportant for autofill by specifying an \u003ccode\u003eimportantForAutofill\u003c/code\u003e attribute on that view or a parent view. See \u003ca href\u003d\"https://developer.android.com/reference/android/view/View.html#setImportantForAutofill(int)\"\u003ehttps://developer.android.com/reference/android/view/View.html#setImportantForAutofill(int)\u003c/a\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: Autofill\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/text/autofill.html\"\u003ehttps://developer.android.com/guide/topics/text/autofill.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintButtonOrder",
          "displayName": "Button order",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eButton order\u003cbr\u003e\u003cbr\u003eAccording to the Android Design Guide,\u003cbr/\u003e\n\u003cbr/\u003e\n\"Action buttons are typically Cancel and/or OK, with OK indicating the preferred or most likely action. However, if the options consist of specific actions such as Close or Wait rather than a confirmation or cancellation of the action described in the content, then all the buttons should be active verbs. As a rule, the dismissive action of a dialog is always on the left whereas the affirmative actions are on the right.\"\u003cbr/\u003e\n\u003cbr/\u003e\nThis check looks for button bars and buttons which look like cancel buttons, and makes sure that these are on the left.\u003cbr\u003e\u003cbr\u003eIssue id: ButtonOrder\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://material.io/components/dialogs/\"\u003ehttps://material.io/components/dialogs/\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintConvertToWebp",
          "displayName": "Convert to WebP",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eConvert to WebP\u003cbr\u003e\u003cbr\u003eThe WebP format is typically more compact than PNG and JPEG. As of Android 4.2.1 it supports transparency and lossless conversion as well. Note that there is a quickfix in the IDE which lets you perform conversion.\u003cbr/\u003e\n\u003cbr/\u003e\nPreviously, launcher icons were required to be in the PNG format but that restriction is no longer there, so lint now flags these.\u003cbr\u003e\u003cbr\u003eIssue id: ConvertToWebp\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTypographyEllipsis",
          "displayName": "Ellipsis string can be replaced with ellipsis character",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eEllipsis string can be replaced with ellipsis character\u003cbr\u003e\u003cbr\u003eYou can replace the string \"...\" with a dedicated ellipsis character, ellipsis character (u2026, \u0026amp;#8230;). This can help make the text more readable.\u003cbr\u003e\u003cbr\u003eIssue id: TypographyEllipsis\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Ellipsis\"\u003ehttps://en.wikipedia.org/wiki/Ellipsis\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconDuplicates",
          "displayName": "Duplicated icons under different names",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDuplicated icons under different names\u003cbr\u003e\u003cbr\u003eIf an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.\u003cbr\u003e\u003cbr\u003eIssue id: IconDuplicates\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconExpectedSize",
          "displayName": "Icon has incorrect size",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eIcon has incorrect size\u003cbr\u003e\u003cbr\u003eThere are predefined sizes (for each density) for launcher icons. You should follow these conventions to make sure your icons fit in with the overall look of the platform.\u003cbr\u003e\u003cbr\u003eIssue id: IconExpectedSize\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://material.io/design/iconography/\"\u003ehttps://material.io/design/iconography/\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconDipSize",
          "displayName": "Icon density-independent size validation",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIcon density-independent size validation\u003cbr\u003e\u003cbr\u003eChecks the all icons which are provided in multiple densities, all compute to roughly the same density-independent pixel (\u003ccode\u003edip\u003c/code\u003e) size. This catches errors where images are either placed in the wrong folder, or icons are changed to new sizes but some folders are forgotten.\u003cbr\u003e\u003cbr\u003eIssue id: IconDipSize\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconLauncherShape",
          "displayName": "The launcher icon shape should use a distinct silhouette",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eThe launcher icon shape should use a distinct silhouette\u003cbr\u003e\u003cbr\u003eAccording to the Android Design Guide (\u003ca href\u003d\"https://material.io/design/iconography/\"\u003ehttps://material.io/design/iconography/\u003c/a\u003e) your launcher icons should \"use a distinct silhouette\", a \"three-dimensional, front view, with a slight perspective as if viewed from above, so that users perceive some depth.\"\u003cbr/\u003e\n\u003cbr/\u003e\nThe unique silhouette implies that your launcher icon should not be a filled square.\u003cbr\u003e\u003cbr\u003eIssue id: IconLauncherShape\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconXmlAndPng",
          "displayName": "Icon is specified both as .xml file and as a bitmap",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIcon is specified both as \u003ccode\u003e.xml\u003c/code\u003e file and as a bitmap\u003cbr\u003e\u003cbr\u003eIf a drawable resource appears as an \u003ccode\u003e.xml\u003c/code\u003e file in the \u003ccode\u003edrawable/\u003c/code\u003e folder, it\u0027s usually not intentional for it to also appear as a bitmap using the same name; generally you expect the drawable XML file to define states and each state has a corresponding drawable bitmap.\u003cbr\u003e\u003cbr\u003eIssue id: IconXmlAndPng\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconLocation",
          "displayName": "Image defined in density-independent drawable folder",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eImage defined in density-independent drawable folder\u003cbr\u003e\u003cbr\u003eThe res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to \u003ccode\u003edrawable-mdpi\u003c/code\u003e and consider providing higher and lower resolution versions in \u003ccode\u003edrawable-ldpi\u003c/code\u003e, \u003ccode\u003edrawable-hdpi\u003c/code\u003e and \u003ccode\u003edrawable-xhdpi\u003c/code\u003e. If the icon \u003cb\u003ereally\u003c/b\u003e is density independent (for example a solid color) you can place it in \u003ccode\u003edrawable-nodpi\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: IconLocation\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/practices/screens_support.html\"\u003ehttps://developer.android.com/guide/practices/screens_support.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintViewConstructor",
          "displayName": "Missing View constructors for XML inflation",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing View constructors for XML inflation\u003cbr\u003e\u003cbr\u003eSome layout tools (such as the Android layout editor) need to find a constructor with one of the following signatures:\u003cbr/\u003e\n* \u003ccode\u003eView(Context context)\u003c/code\u003e\u003cbr/\u003e\n* \u003ccode\u003eView(Context context, AttributeSet attrs)\u003c/code\u003e\u003cbr/\u003e\n* \u003ccode\u003eView(Context context, AttributeSet attrs, int defStyle)\u003c/code\u003e\u003cbr/\u003e\n\u003cbr/\u003e\nIf your custom view needs to perform initialization which does not apply when used in a layout editor, you can surround the given code with a check to see if \u003ccode\u003eView#isInEditMode()\u003c/code\u003e is false, since that method will return \u003ccode\u003efalse\u003c/code\u003e at runtime but true within a user interface editor.\u003cbr\u003e\u003cbr\u003eIssue id: ViewConstructor\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconDuplicatesConfig",
          "displayName": "Identical bitmaps across various configurations",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIdentical bitmaps across various configurations\u003cbr\u003e\u003cbr\u003eIf an icon is provided under different configuration parameters such as \u003ccode\u003edrawable-hdpi\u003c/code\u003e or \u003ccode\u003e-v11\u003c/code\u003e, they should typically be different. This detector catches cases where the same icon is provided in different configuration folder which is usually not intentional.\u003cbr\u003e\u003cbr\u003eIssue id: IconDuplicatesConfig\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTypographyOther",
          "displayName": "Other typographical problems",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eOther typographical problems\u003cbr\u003e\u003cbr\u003eThis check looks for miscellaneous typographical problems and offers replacement                     sequences that will make the text easier to read and your application more                     polished.\u003cbr\u003e\u003cbr\u003eIssue id: TypographyOther\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconMissingDensityFolder",
          "displayName": "Missing density folder",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing density folder\u003cbr\u003e\u003cbr\u003eIcons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as \u003ccode\u003edrawable-hdpi\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nLow density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable \u003ccode\u003eANDROID_LINT_INCLUDE_LDPI\u003dtrue\u003c/code\u003e. For more information on current density usage, see \u003ca href\u003d\"https://developer.android.com/about/dashboards\"\u003ehttps://developer.android.com/about/dashboards\u003c/a\u003e\u003cbr\u003e\u003cbr\u003eIssue id: IconMissingDensityFolder\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/practices/screens_support.html\"\u003ehttps://developer.android.com/guide/practices/screens_support.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAllCaps",
          "displayName": "Combining textAllCaps and markup",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCombining textAllCaps and markup\u003cbr\u003e\u003cbr\u003eThe textAllCaps text transform will end up calling \u003ccode\u003etoString\u003c/code\u003e on the \u003ccode\u003eCharSequence\u003c/code\u003e, which has the net effect of removing any markup such as \u003ccode\u003e\u0026lt;b\u003e\u003c/code\u003e. This check looks for usages of strings containing markup that also specify \u003ccode\u003etextAllCaps\u003dtrue\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: AllCaps\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingApplicationIcon",
          "displayName": "Missing application icon",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing application icon\u003cbr\u003e\u003cbr\u003eYou should set an icon for the application as whole because there is no default. This attribute must be set as a reference to a drawable resource containing the image (for example \u003ccode\u003e@drawable/icon\u003c/code\u003e).\u003cbr\u003e\u003cbr\u003eIssue id: MissingApplicationIcon\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/studio/publish/preparing#publishing-configure\"\u003ehttps://developer.android.com/studio/publish/preparing#publishing-configure\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTextFields",
          "displayName": "Missing inputType",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing \u003ccode\u003einputType\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eProviding an \u003ccode\u003einputType\u003c/code\u003e attribute on a text field improves usability because depending on the data to be input, optimized keyboards can be shown to the user (such as just digits and parentheses for a phone number). \u003cbr/\u003e\n\u003cbr/\u003e\nThe lint detector also looks at the \u003ccode\u003eid\u003c/code\u003e of the view, and if the id offers a hint of the purpose of the field (for example, the \u003ccode\u003eid\u003c/code\u003e contains the phrase \u003ccode\u003ephone\u003c/code\u003e or \u003ccode\u003eemail\u003c/code\u003e), then lint will also ensure that the \u003ccode\u003einputType\u003c/code\u003e contains the corresponding type attributes.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you really want to keep the text field generic, you can suppress this warning by setting \u003ccode\u003einputType\u003d\"text\"\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: TextFields\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSmallSp",
          "displayName": "Text size is too small",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eText size is too small\u003cbr\u003e\u003cbr\u003eAvoid using sizes smaller than 11sp.\u003cbr\u003e\u003cbr\u003eIssue id: SmallSp\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGifUsage",
          "displayName": "Using .gif format for bitmaps is discouraged",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing \u003ccode\u003e.gif\u003c/code\u003e format for bitmaps is discouraged\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e.gif\u003c/code\u003e file format is discouraged. Consider using \u003ccode\u003e.png\u003c/code\u003e (preferred) or \u003ccode\u003e.jpg\u003c/code\u003e (acceptable) instead.\u003cbr\u003e\u003cbr\u003eIssue id: GifUsage\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap\"\u003ehttps://developer.android.com/guide/topics/resources/drawable-resource.html#Bitmap\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTypographyQuotes",
          "displayName": "Straight quotes can be replaced with curvy quotes",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eStraight quotes can be replaced with curvy quotes\u003cbr\u003e\u003cbr\u003eStraight single quotes and double quotes, when used as a pair, can be replaced by \"curvy quotes\" (or directional quotes). This can make the text more readable. Note that you should never use grave accents and apostrophes to quote, `like this\u0027. (Also note that you should not use curvy quotes for code fragments.)\u003cbr\u003e\u003cbr\u003eIssue id: TypographyQuotes\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Quotation_mark\"\u003ehttps://en.wikipedia.org/wiki/Quotation_mark\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMenuTitle",
          "displayName": "Missing menu title",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing menu title\u003cbr\u003e\u003cbr\u003eFrom the action bar documentation:\u003cbr/\u003e\n\"It\u0027s important that you always define android:title for each menu item \u0026#8212; even if you don\u0027t declare that the title appear with the action item \u0026#8212; for three reasons:\u003cbr/\u003e\n\u003cbr/\u003e\n* If there\u0027s not enough room in the action bar for the action item, the menu item appears in the overflow menu and only the title appears.\u003cbr/\u003e\n* Screen readers for sight-impaired users read the menu item\u0027s title.\u003cbr/\u003e\n* If the action item appears with only the icon, a user can long-press the item to reveal a tool-tip that displays the action item\u0027s title.\u003cbr/\u003e\n\u003cbr/\u003e\nThe android:icon is always optional, but recommended.\u003cbr\u003e\u003cbr\u003eIssue id: MenuTitle\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/appbar\"\u003ehttps://developer.android.com/training/appbar\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIconColors",
          "displayName": "Icon colors do not follow the recommended visual style",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIcon colors do not follow the recommended visual style\u003cbr\u003e\u003cbr\u003eNotification icons and Action Bar icons should only white and shades of gray. See the Android Design Guide for more details. Note that the way Lint decides whether an icon is an action bar icon or a notification icon is based on the filename prefix: \u003ccode\u003eic_menu_\u003c/code\u003e for action bar icons, \u003ccode\u003eic_stat_\u003c/code\u003e for notification icons etc. These correspond to the naming conventions documented in \u003ca href\u003d\"https://material.io/design/iconography/\"\u003ehttps://material.io/design/iconography/\u003c/a\u003e\u003cbr\u003e\u003cbr\u003eIssue id: IconColors\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSquareAndRoundTilePreviews",
          "displayName": "TileProvider does not have round and square previews",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eTileProvider does not have round and square previews\u003cbr\u003e\u003cbr\u003eTile projects should specify preview resources for different screen shapes. The preview resource is specified in the manifest under tile service. And you have to make sure they have resources for different screen shapes.\u003cbr\u003e\u003cbr\u003eIssue id: SquareAndRoundTilePreviews\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTypographyFractions",
          "displayName": "Fraction string can be replaced with fraction character",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eFraction string can be replaced with fraction character\u003cbr\u003e\u003cbr\u003eYou can replace certain strings, such as 1/2, and 1/4, with dedicated characters for these, such as ½ (\u0026amp;#189;) and ¼ (\u0026amp;#188;). This can help make the text more readable.\u003cbr\u003e\u003cbr\u003eIssue id: TypographyFractions\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://en.wikipedia.org/wiki/Number_Forms\"\u003ehttps://en.wikipedia.org/wiki/Number_Forms\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Code maturity",
      "inspections": [
        {
          "shortName": "ThrowablePrintedToSystemOut",
          "displayName": "\u0027Throwable\u0027 printed to \u0027System.out\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eSystem.out.println()\u003c/code\u003e with an exception as an argument.\n\u003cp\u003eUsing print statements for logging exceptions hides the stack trace from you, which can complicate the investigation of the problem.\n  It is recommended that you use logger instead.\u003c/p\u003e\n\u003cp\u003eCalls to \u003ccode\u003eSystem.out.print()\u003c/code\u003e, \u003ccode\u003eSystem.err.println()\u003c/code\u003e, and \u003ccode\u003eSystem.err.print()\u003c/code\u003e with an exception argument are also\nreported. It is better to use a logger to log exceptions instead.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eFor example, instead of:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n      foo();\n  } catch (Exception e) {\n      System.out.println(e);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003euse the following code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n      foo();\n  } catch (Exception e) {\n      logger.warn(e); // logger call may be different\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CommentedOutCode",
          "displayName": "Commented out code",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comments that contain Java code.\n\u003cp\u003eUsually, code that is commented out gets outdated very quickly and becomes misleading.\nAs most projects use some kind of version control system,\n  it is better to delete commented out code completely and use the VCS history instead.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MarkedForRemoval",
          "displayName": "Usage of API marked for removal",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of deprecated APIs (classes, fields, and methods) that are marked for removal with\n  \u003ccode\u003e@Deprecated(\u003cb\u003eforRemoval\u003c/b\u003e\u003dtrue)\u003c/code\u003e.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  The code that uses an API marked for removal may cause a runtime error with a future version of the API. That is why\n  the recommended severity for this inspection is \u003ci\u003eError\u003c/i\u003e.\u003c/p\u003e\n\u003cp\u003e\n  You can change the severity to \u003ci\u003eWarning\u003c/i\u003e if you want to use the same code highlighting as in ordinary deprecation.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SuppressionAnnotation",
          "displayName": "Inspection suppression annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comments or annotations suppressing inspections.\n\u003cp\u003eThis inspection can be useful when leaving suppressions intentionally for further review.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    @SuppressWarnings(\"unused\")\n    static Stream\u0026lt;String\u0026gt; stringProvider() {\n        return Stream.of(\"foo\", \"bar\");\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThrowablePrintStackTrace",
          "displayName": "Call to \u0027printStackTrace()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eThrowable.printStackTrace()\u003c/code\u003e without arguments.\n\u003cp\u003eSuch statements are often used for temporary debugging and should be either removed from the production code\n  or replaced with a more robust logging facility.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SystemOutErr",
          "displayName": "Use of \u0027System.out\u0027 or \u0027System.err\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003eSystem.out\u003c/code\u003e or \u003ccode\u003eSystem.err\u003c/code\u003e.\n\u003cp\u003eSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\n  logging facility.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObsoleteCollection",
          "displayName": "Use of obsolete collection type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003ejava.util.Vector\u003c/code\u003e, \u003ccode\u003ejava.util.Hashtable\u003c/code\u003e and \u003ccode\u003ejava.util.Stack\u003c/code\u003e.\n\u003cp\u003eUsages of these classes can often be replaced with usages of\n\u003ccode\u003ejava.util.ArrayList\u003c/code\u003e, \u003ccode\u003ejava.util.HashMap\u003c/code\u003e and \u003ccode\u003ejava.util.ArrayDeque\u003c/code\u003e respectively.\nWhile still supported,\nthe former classes were made obsolete by the JDK1.2 collection classes, and should probably\nnot be used in new development.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore obsolete collection types where they are required\u003c/b\u003e option to ignore any cases where the obsolete collections are used\nas method arguments or assigned to a variable that requires the obsolete type.\nEnabling this option may consume significant processor resources.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UseOfObsoleteDateTimeApi",
          "displayName": "Use of obsolete date-time API",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003ejava.util.Date\u003c/code\u003e, \u003ccode\u003ejava.util.Calendar\u003c/code\u003e, \u003ccode\u003ejava.util.GregorianCalendar\u003c/code\u003e, \u003ccode\u003ejava.util.TimeZone\u003c/code\u003e,\nand \u003ccode\u003ejava.util.SimpleTimeZone\u003c/code\u003e.\n\u003cp\u003eWhile still supported, these classes were made obsolete by the JDK8 Date-Time API and should probably\n  not be used in new development.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Deprecation",
          "displayName": "Deprecated API usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of deprecated classes, fields, and methods.\nA quick-fix is available to automatically convert the deprecated usage,\nwhen the necessary information can be extracted from the Javadoc of the deprecated member.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Interesting {\n\n    /**\n     * @deprecated Use {@link #newHotness()} instead\n     */\n    @Deprecated\n    public void oldAndBusted() {}\n\n    public void newHotness() {}\n  }\n  class ElseWhere {\n    void x(Interesting i) {\n      i.oldAndBusted(); // deprecated warning here\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Interesting {\n\n    /**\n     * @deprecated Use {@link #newHotness()} instead\n     */\n    @Deprecated\n    public void oldAndBusted() {}\n\n    public void newHotness() {}\n  }\n  class ElseWhere {\n    void x(Interesting i) {\n      i.newHotness();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy default, the inspection doesn\u0027t produce a warning if it\u0027s impossible or hard to avoid it.  For example,\n  the following code won\u0027t be reported:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class A { //library code\n     @Deprecated\n     abstract void m();\n  }\n  class B extends A { //project code\n     @Override\n     void m() {\n        //doSmth;\n     }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003e\n  Use the options to disable this inspection inside deprecated members,\n  overrides of abstract deprecated methods, non-static import statements, methods of deprecated classes, or same top-level classes.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThreadDumpStack",
          "displayName": "Call to \u0027Thread.dumpStack()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003eThread.dumpStack()\u003c/code\u003e.\n\u003cp\u003eSuch statements are often used for temporary debugging and should be either removed from the production code\n  or replaced with a more robust logging facility.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OptionalAssignedToNull",
          "displayName": "Null value for Optional type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003enull\u003c/code\u003e assigned to \u003ccode\u003eOptional\u003c/code\u003e variable or returned from method returning \u003ccode\u003eOptional\u003c/code\u003e.\n\u003cp\u003eIt\u0027s recommended that you use \u003ccode\u003eOptional.empty()\u003c/code\u003e (or \u003ccode\u003eOptional.absent()\u003c/code\u003e for Guava) to denote an empty value.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Optional\u0026lt;Integer\u0026gt; foo(boolean flag) {\n    return flag ? Optional.of(42) : null;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Optional\u0026lt;Integer\u0026gt; foo(boolean flag) {\n    return flag ? Optional.of(42) : Optional.empty();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eReport comparison of Optional with null\u003c/b\u003e option to also report comparisons like \u003ccode\u003eoptional \u003d\u003d null\u003c/code\u003e. While in rare cases (e.g. lazily initialized\n  optional field) this might be correct, optional variable is usually never null, and probably \u003ccode\u003eoptional.isPresent()\u003c/code\u003e was\n  intended.\n\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DeprecatedIsStillUsed",
          "displayName": "Deprecated member is still used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports deprecated classes, methods, and fields that are used in your code nonetheless.\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  class MyCode {\n    @Deprecated\n    void oldMethod() {}// warning: \"Deprecated member is still used\"\n\n    void newMethod() {\n      oldMethod(); // forgotten usage\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eUsages within deprecated elements are ignored.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eNOTE:\u003c/b\u003e Due to performance reasons, a non-private member is checked only when its name rarely occurs in the project.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantScheduledForRemovalAnnotation",
          "displayName": "Redundant @ScheduledForRemoval annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003e@ApiStatus.ScheduledForRemoval\u003c/code\u003e annotation without \u003ccode\u003einVersion\u003c/code\u003e attribute in code which targets Java 9 or newer version.\n\u003cp\u003e\nSuch usages can be replaced by \u003ccode\u003eforRemoval\u003c/code\u003e attribute in \u003ccode\u003e@Deprecated\u003c/code\u003e annotation to simplify code.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Bitwise operation issues",
      "inspections": [
        {
          "shortName": "ShiftOutOfRangeJS",
          "displayName": "Shift operation by possibly wrong constant",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ShiftOutOfRange.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer\nshift operation outside the range \u003ccode\u003e0..31\u003c/code\u003e, shifting by negative or overly large values.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IncompatibleMaskJS",
          "displayName": "Incompatible bitwise mask operation",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/IncompatibleMask.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports a bitwise mask expression which for sure \nevaluates to \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\nExpressions are of the form \u003ccode\u003e(var \u0026 constant1) \u003d\u003d constant2\u003c/code\u003e or\n\u003ccode\u003e(var | constant1) \u003d\u003d constant2\u003c/code\u003e, where \u003ccode\u003econstant1\u003c/code\u003e\nand \u003ccode\u003econstant2\u003c/code\u003e are incompatible bitmask constants.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n// Incompatible mask: as the last byte in mask is zero,\n// something like 0x1200 would be possible, but not 0x1234\nif ((mask \u0026 0xFF00) \u003d\u003d 0x1234) {...}\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PointlessBitwiseExpressionJS",
          "displayName": "Bitwise expression can be simplified",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/PointlessBitwiseExpression.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports an expression that includes \u003ccode\u003eand\u003c/code\u003e with zero, \u003ccode\u003eor\u003c/code\u003e by zero, or \nshifting by zero. Such expressions may result from not fully completed automated refactorings.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSBitwiseOperatorUsage",
          "displayName": "Bitwise operator usage",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a suspicious usage of a bitwise AND (\"\u003ccode\u003e\u0026\u003c/code\u003e\") or OR (\"\u003ccode\u003e|\u003c/code\u003e\") operator.\nUsually it is a typo and the result of applying boolean operations AND (\"\u003ccode\u003e\u0026\u0026\u003c/code\u003e\") and OR (\"\u003ccode\u003e||\u003c/code\u003e\")  is expected.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Cast",
      "inspections": [
        {
          "shortName": "IntegerMultiplicationImplicitCastToLong",
          "displayName": "Integer multiplication or shift implicitly cast to \u0027long\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports integer multiplications and left shifts that are implicitly cast to long.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(int i) {\n    long val \u003d 65536 * i;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied, the code changes to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void x(int i) {\n    long val \u003d 65536\u003cb\u003eL\u003c/b\u003e * i;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(int i) {\n    long value \u003d i \u0026lt;\u0026lt; 24;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied, the code changes to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(int i) {\n    long value \u003d (long) i \u0026lt;\u0026lt; 24;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Such multiplications are often a mistake, as overflow truncation may occur unexpectedly.\n  Converting an \u003ccode\u003eint\u003c/code\u003e literal to a \u003ccode\u003elong\u003c/code\u003e literal (\u003ccode\u003e65536\u003cb\u003eL\u003c/b\u003e\u003c/code\u003e) fixes the problem.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryExplicitNumericCast",
          "displayName": "Unnecessary explicit numeric cast",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports primitive numeric casts that would be inserted implicitly by the compiler.\nAlso, reports any primitive numeric casts that the compiler will remove.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint x \u003d (short)5; // The cast will be removed by the javac tool\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003ccode\u003eint x \u003d 5;\u003c/code\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DoubleLiteralMayBeFloatLiteral",
          "displayName": "Cast to \u0027float\u0027 can be \u0027float\u0027 literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003edouble\u003c/code\u003e literal expressions that are immediately cast to \u003ccode\u003efloat\u003c/code\u003e.\n\u003cp\u003eSuch literal expressions can be replaced with equivalent \u003ccode\u003efloat\u003c/code\u003e literals.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efloat f \u003d (float)1.1;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efloat f \u003d 1.1f;\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CastThatLosesPrecision",
          "displayName": "Numeric cast that loses precision",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports cast operations between primitive numeric types that may\nresult in precision loss.\n\u003cp\u003eSuch casts are not necessarily a problem but may result in difficult to\n  trace bugs if the loss of precision is unexpected.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int a \u003d 420;\n  byte b \u003d (byte) a;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore casts from int to char\u003c/b\u003e option to ignore casts from \u003ccode\u003eint\u003c/code\u003e to \u003ccode\u003echar\u003c/code\u003e.\n  This type of cast is often used when implementing I/O operations because the \u003ccode\u003eread()\u003c/code\u003e method of the\n  \u003ccode\u003ejava.io.Reader\u003c/code\u003e class returns an \u003ccode\u003eint\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore casts from int 128-255 to byte \u003c/b\u003e option to ignore casts of constant values (128-255) from \u003ccode\u003eint\u003c/code\u003e to\n  \u003ccode\u003ebyte\u003c/code\u003e.\n  Such values will overflow to negative numbers that still fit inside a byte.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IntLiteralMayBeLongLiteral",
          "displayName": "Cast to \u0027long\u0027 can be \u0027long\u0027 literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eint\u003c/code\u003e literal expressions that are immediately cast to \u003ccode\u003elong\u003c/code\u003e.\n\u003cp\u003eSuch literal expressions can be replaced with equivalent \u003ccode\u003elong\u003c/code\u003e literals.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eLong l \u003d (long)42;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eLong l \u003d 42L;\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Android Lint: Lint Implementation Issues",
      "inspections": [
        {
          "shortName": "AndroidLintUastImplementation",
          "displayName": "Avoid using UAST implementation",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAvoid using UAST implementation\u003cbr\u003e\u003cbr\u003eUse UAST interface whenever possible, and do not rely on UAST implementation, which is subject to change. If language-specific information is needed, the next option is to use PSI directly (though these APIs are less stable and can depend on compiler internals, especially in the case of Kotlin).\u003cbr\u003e\u003cbr\u003eIssue id: UastImplementation\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java 14",
      "inspections": [
        {
          "shortName": "EnhancedSwitchMigration",
          "displayName": "Statement can be replaced with enhanced \u0027switch\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eswitch\u003c/code\u003e statements that can be automatically replaced with enhanced \u003ccode\u003eswitch\u003c/code\u003e statements or expressions.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  double getPrice(String fruit) {\n    // Switch statement can be replaced with enhanced \u0027switch\u0027\n    switch (fruit) {\n      case \"Apple\":\n        return 1.0;\n      case \"Orange\":\n        return 1.5;\n      case \"Mango\":\n        return 2.0;\n      default:\n        throw new IllegalArgumentException();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  double getPrice(String fruit) {\n    return switch (fruit) {\n      case \"Apple\" -\u003e 1.0;\n      case \"Orange\" -\u003e 1.5;\n      case \"Mango\" -\u003e 2.0;\n      default -\u003e throw new IllegalArgumentException();\n    };\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 14 or higher\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EnhancedSwitchBackwardMigration",
          "displayName": "Enhanced \u0027switch\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports enhanced \u003ccode\u003eswitch\u003c/code\u003e statements and expressions. Suggests replacing them with regular \u003ccode\u003eswitch\u003c/code\u003e\nstatements.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean even \u003d switch (condition) {\n    case 1, 3, 5, 7, 9 -\u003e false;\n    default -\u003e true;\n  };\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean even;\n  switch (condition) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 9:\n      even \u003d false;\n      break;\n    default:\n      even \u003d true;\n      break;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ci\u003eEnhanced\u003c/i\u003e \u003ccode\u003eswitch\u003c/code\u003e appeared in Java 14.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Mutiny",
      "inspections": [
        {
          "shortName": "MutinyCallingSubscribeInNonBlockingScope",
          "displayName": "Calling \u0027subscribe\u0027 in \"reactive\" methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003esubscribe()\u003c/code\u003e calls in \"reactive\" methods.\u003c/p\u003e\n\u003cp\u003eMethods returning a publisher (including \u003ccode\u003eUni\u003c/code\u003e and \u003ccode\u003eMulti\u003c/code\u003e)\n  should not call the \u003ccode\u003esubscribe()\u003c/code\u003e method directly because it can break the reactive call chain.\u003c/p\u003e\n\u003cp\u003eInstead of using \u003ccode\u003esubscribe()\u003c/code\u003e, consider using composition operators like \u003ccode\u003eflatMap()\u003c/code\u003e,\n  \u003ccode\u003emerge()\u003c/code\u003e, and so on.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Multi\u0026lt;String\u0026gt; stringMulti(){\n    Multi\u0026lt;String\u0026gt; multi \u003d Multi.createFrom().item(\"abc\");\n    multi.subscribe(); // \u0026lt;- blocking \u0027subscribe\u0027 call in non-blocking context\n    return multi;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java language level migration aids",
      "inspections": [
        {
          "shortName": "UseCompareMethod",
          "displayName": "\u0027compare()\u0027 method can be used to compare numbers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions that can be replaced by a call to the \u003ccode\u003eInteger.compare()\u003c/code\u003e method or\na similar method from the \u003ccode\u003eLong\u003c/code\u003e, \u003ccode\u003eShort\u003c/code\u003e, \u003ccode\u003eByte\u003c/code\u003e, \u003ccode\u003eDouble\u003c/code\u003e or \u003ccode\u003eFloat\u003c/code\u003e classes,\ninstead of more verbose or less efficient constructs.\n\u003cp\u003eIf \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e are boxed integers, then \u003ccode\u003ex.compareTo(y)\u003c/code\u003e is suggested,\n  if they are primitives \u003ccode\u003eInteger.compare(x, y)\u003c/code\u003e is suggested.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public int compare(int x, int y) {\n    return x \u003e y ? 1 : x \u0026lt; y ? -1 : 0;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public int compare(int x, int y) {\n    return Integer.compare(x, y);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Note that \u003ccode\u003eDouble.compare\u003c/code\u003e and \u003ccode\u003eFloat.compare\u003c/code\u003e slightly change the code semantics. In particular,\n  they make \u003ccode\u003e-0.0\u003c/code\u003e and \u003ccode\u003e0.0\u003c/code\u003e distinguishable (\u003ccode\u003eDouble.compare(-0.0, 0.0)\u003c/code\u003e yields -1).\n  Also, they consistently process \u003ccode\u003eNaN\u003c/code\u003e value. In most of the cases, this semantics change actually improves the\n  code. Use the checkbox to disable this inspection for floating point numbers if semantics change is unacceptable\n  in your case.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EnumerationCanBeIteration",
          "displayName": "Enumeration can be iteration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eEnumeration\u003c/code\u003e methods that are used on collections and may be replaced with equivalent\n\u003ccode\u003eIterator\u003c/code\u003e constructs.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Enumeration\u0026lt;String\u0026gt; keys \u003d map.keys();\n  while (keys.hasMoreElements()) {\n    String name \u003d keys.nextElement();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Iterator\u0026lt;String\u0026gt; iterator \u003d map.keySet().iterator();\n  while (iterator.hasNext()) {\n    String name \u003d iterator.next();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IfCanBeSwitch",
          "displayName": "\u0027if\u0027 can be replaced with \u0027switch\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements that can be replaced with \u003ccode\u003eswitch\u003c/code\u003e statements.\n\u003cp\u003eThe replacement result is usually shorter and clearer.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(String str) {\n    if (str.equals(\"1\")) {\n      System.out.println(1);\n    } else if (str.equals(\"2\")) {\n      System.out.println(2);\n    } else if (str.equals(\"3\")) {\n      System.out.println(3);\n    } else {\n      System.out.println(4);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(String str) {\n    switch (str) {\n      case \"1\" -\u0026gt; System.out.println(1);\n      case \"2\" -\u0026gt; System.out.println(2);\n      case \"3\" -\u0026gt; System.out.println(3);\n      default -\u0026gt; System.out.println(4);\n    }\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 7 or higher.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eMinimum number of \u0027if\u0027 condition branches\u003c/b\u003e field to specify the minimum number of \u003ccode\u003eif\u003c/code\u003e condition branches\n  for an \u003ccode\u003eif\u003c/code\u003e statement to have to be reported. Note that the terminal \u003ccode\u003eelse\u003c/code\u003e branch (without \u003ccode\u003eif\u003c/code\u003e) is not counted.\u003c/p\u003e\n\u003cp\u003e\nUse the \u003cb\u003eSuggest switch on numbers\u003c/b\u003e option to enable the suggestion of \u003ccode\u003eswitch\u003c/code\u003e statements on\nprimitive and boxed numbers and characters.\n\u003cp\u003e\nUse the \u003cb\u003eSuggest switch on enums\u003c/b\u003e option to enable the suggestion of \u003ccode\u003eswitch\u003c/code\u003e statements on\n\u003ccode\u003eenum\u003c/code\u003e constants.\n\u003cp\u003e\n  Use the \u003cb\u003eOnly suggest on null-safe expressions\u003c/b\u003e option to suggest \u003ccode\u003eswitch\u003c/code\u003e statements that can\u0027t introduce a \u003ccode\u003eNullPointerException\u003c/code\u003e only.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Bitwise operation issues",
      "inspections": [
        {
          "shortName": "ShiftOutOfRange",
          "displayName": "Shift operation by inappropriate constant",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports shift operations\nwhere the shift value is a constant outside the reasonable range.\n\u003cp\u003eInteger shift operations outside the range \u003ccode\u003e0..31\u003c/code\u003e and long shift operations outside the\n  range \u003ccode\u003e0..63\u003c/code\u003e are reported. Shifting by negative or overly large values is almost certainly\n  a coding error.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int shiftSize \u003d 32;\n  // Warning: shift by 32 bits is equivalent to shift by 0 bits, so there\u0027s no shift at all.\n  int mask \u003d (1 \u0026lt;\u0026lt; shiftSize) - 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PointlessBitwiseExpression",
          "displayName": "Pointless bitwise expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports pointless bitwise expressions.\n\u003cp\u003e\n  Such expressions include applying the \u003ccode\u003e\u0026\u003c/code\u003e operator to the maximum value for the given type, applying the\n  \u003ccode\u003eor\u003c/code\u003e operator to zero, and shifting by zero. Such expressions may be the result of automated\n  refactorings not followed through to completion and are unlikely to be originally intended.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Warning: operation is pointless and can be replaced with just `flags`\n  // 0xFFFF_FFFF is the maximum value for an integer, and both literals are treated\n  // as 32 bit integer literals.\n  int bits \u003d flags \u0026 0xFFFF_FFFF;\n\n  // Warning: operation is pointless and can be replaced with just `bits`\n  // OR-ing with 0 always outputs the other operand.\n  int or \u003d bits | 0x0;\n\n  // Warning: operation is pointless, as always results in 0\n  int xor \u003d or ^ or;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IncompatibleMask",
          "displayName": "Incompatible bitwise mask operation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports bitwise mask expressions which are guaranteed to\nevaluate to \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n\u003cp\u003e\n  The inspection checks the expressions of the form \u003ccode\u003e(var \u0026 constant1) \u003d\u003d constant2\u003c/code\u003e or\n  \u003ccode\u003e(var | constant1) \u003d\u003d constant2\u003c/code\u003e, where \u003ccode\u003econstant1\u003c/code\u003e\n  and \u003ccode\u003econstant2\u003c/code\u003e are incompatible bitmask constants.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  // Incompatible mask: as the mask ends in 00,\n  // the result could be 0x1200 but not 0x1234\n  if ((mask \u0026 0xFF00) \u003d\u003d 0x1234) {...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Best practises",
      "inspections": [
        {
          "shortName": "ConfigurationAvoidance",
          "displayName": "Configuration avoidance",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e(Gradle 4.9+) Detects usage of API that interacts with tasks eagerly.\u003c/p\u003e\n\u003cp\u003eEager interaction with tasks implies some inconveniences:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eThe user should manually set up all dependencies between tasks;\u003c/li\u003e\n  \u003cli\u003eIn the \u003ca href\u003d\"https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases\"\u003econfiguration phase\u003c/a\u003e,\n    all the tasks accessed via the eager API become configured, even if they are not executed afterwards.\n    It results in performance degradation.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEventually, the eager API will be deprecated in favor of the lazy one.\u003c/p\u003e\n\u003cp\u003eFor a migration guide, see the\n  \u003ca href\u003d\"https://docs.gradle.org/current/userguide/task_configuration_avoidance.html\"\u003eGradle documentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003etask foo { // reports \u0027task\u0027, suggests replacing it with \u0027task.register\u0027\n  // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "React",
      "inspections": [
        {
          "shortName": "JSXDomNesting",
          "displayName": "Invalid DOM element nesting",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nDetects HTML elements in JSX files which are not nested properly according to the DOM specification.\nReact reports runtime warnings on incorrectly nested elements.\n\n\n\u003c!--Write your description here.--\u003e\n\u003c!--Start the description with a verb in 3rd person singular, like reports, detects, highlights.--\u003e\n\u003c!--In the first sentence, briefly explain what exactly the inspection helps you detect.--\u003e\n\u003c!--Make sure the sentence is not very long and complicated.--\u003e\n\u003c!--\u003cp\u003e--\u003e\n\u003c!--  The first sentence must be in a dedicated paragraph separated from the rest of the text. This will make the description easier to read.--\u003e\n\u003c!--  Make sure the description doesn’t just repeat the inspection title.--\u003e\n\u003c!--\u003c/p\u003e--\u003e\n\u003c!--\u003cp\u003e--\u003e\n\u003c!--  See https://jetbrains.design/intellij/text/inspections/#descriptions for more information.--\u003e\n\u003c!--\u003c/p\u003e--\u003e\n\u003c!--\u0026lt;!\u0026ndash; tooltip end \u0026ndash;\u0026gt;--\u003e\n\u003c!--\u003cp\u003eText after this comment will only be shown in the settings of the inspection.\u003c/p\u003e--\u003e\n\n\u003c!--\u003cp\u003eTo open related settings directly from the description, add a link with `settings://$` optionally followed by `?$` to pre-select a UI--\u003e\n\u003c!--  element.\u003c/p\u003e--\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Code",
      "inspections": [
        {
          "shortName": "ComponentNotRegistered",
          "displayName": "Component/Action not registered",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "JVM",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports plugin components and actions that are not registered in a \u003ccode\u003eplugin.xml\u003c/code\u003e descriptor.\n\u003cp\u003e\n  This eases developing new components when using the \"Create Class\" intention and helps keep track of potentially obsolete components.\n\u003c/p\u003e\n\u003cp\u003e\n  Provided quick-fix to register the component adds necessary registration in \u003ccode\u003eplugin.xml\u003c/code\u003e descriptor.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eCheck Actions\u003c/b\u003e option to turn off the check for Actions, as they may be intentionally created and\n    registered dynamically.\n  \u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore non-public classes\u003c/b\u003e option to ignore abstract and non-public classes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonDefaultConstructor",
          "displayName": "Non-default constructors for service and extension class",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports extension/service class having a non-default (empty) constructor.\n\u003cp\u003e\n  Other dependencies should be acquired when needed in corresponding methods only.\n  Constructor having \u003ccode\u003eProject\u003c/code\u003e for extension/service on the corresponding level is allowed.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UsePluginIdEquals",
          "displayName": "Use \u0027PluginId#equals(Object)\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comparing \u003ccode\u003ePluginId\u003c/code\u003e instances using \u003ccode\u003e\u003d\u003d\u003c/code\u003e.\n\u003cp\u003e\n  Replace with \u003ccode\u003eequals()\u003c/code\u003e call.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinObjectRegisteredAsExtension",
          "displayName": "Kotlin object registered as extension",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Kotlin objects that are registered as plugin extensions.\n\u003cp\u003e\n  Extensions lifecycle is managed by the IntelliJ Platform.\n  Using Kotlin objects for extension registration may cause creation of unnecessary extension instances and make plugin unloading\n  impossible.\n\u003c/p\u003e\n\u003ch2\u003eExample\u003c/h2\u003e\n\u003cp\u003eExtension registration:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;annotator language\u003d\"myLang\" implementationClass\u003d\"com.example.MyAnnotator\"/\u0026gt;\n\u003c/pre\u003e\n\n\u003cp\u003eExtension implementation:\u003c/p\u003e\n\u003cpre\u003e\n// bad:\nobject MyAnnotator : Annotator {\n  ...\n}\n\n// good:\nclass MyAnnotator : Annotator {\n  ...\n}\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2023.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "IncorrectParentDisposable",
          "displayName": "Incorrect parentDisposable parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports using \u003ccode\u003eApplication\u003c/code\u003e or \u003ccode\u003eProject\u003c/code\u003e as a parent \u003ccode\u003eDisposable\u003c/code\u003e in plugin code.\n\u003cp\u003e\n  Such usages will lead to plugins not being unloaded correctly.\n  Please see \u003ca\n  href\u003d\"https://plugins.jetbrains.com/docs/intellij/disposers.html?from\u003dIncorrectParentDisposable#choosing-a-disposable-parent\"\u003eChoosing a\n  Disposable Parent\u003c/a\u003e in SDK Docs.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnsafeReturnStatementVisitor",
          "displayName": "Unsafe return statements visitor",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unsafe use of \u003ccode\u003eJavaRecursiveElementVisitor.visitReturnStatement()\u003c/code\u003e.\n\u003cp\u003e\n  Processing \u003ccode\u003ePsiReturnStatement\u003c/code\u003es\n  even if they belong to another \u003ccode\u003ePsiClass\u003c/code\u003e or \u003ccode\u003ePsiLambdaExpression\u003c/code\u003e is a bug in most cases, and a visitor most\n  probably should implement \u003ccode\u003evisitClass()\u003c/code\u003e and \u003ccode\u003evisitLambdaExpression()\u003c/code\u003e methods.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MissingActionUpdateThread",
          "displayName": "ActionUpdateThread is missing",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "JVM",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports actions, action groups and other \u003ccode\u003eActionUpdateThreadAware\u003c/code\u003e classes\n  that implicitly state the deprecated and costly \u003ccode\u003eActionUpdateThread.OLD_EDT\u003c/code\u003e mode.\n\n\u003cp\u003e\n  When an action or an action group defines its own \u003ccode\u003eupdate()\u003c/code\u003e method, IntelliJ Platform tries to mimic\n  the old synchronous way of calling \u003ccode\u003eupdate()\u003c/code\u003e and \u003ccode\u003egetChildren()\u003c/code\u003e methods in the UI thread and\n  supply it with all the data in \u003ccode\u003eAnActionEvent.dataContext()\u003c/code\u003e.\n  To do that, it caches all the possible data on a background thread beforehand, even if it is not needed.\n\u003c/p\u003e\n\u003cp\u003e\n  Provide one of the two new modes \u003ccode\u003eActionUpdateThread.EDT\u003c/code\u003e or \u003ccode\u003eActionUpdateThread.BGT\u003c/code\u003e\n  by overriding the \u003ccode\u003egetActionUpdateThread()\u003c/code\u003e method.\n\u003c/p\u003e\n\u003cp\u003e\n  See the documentation of \u003ccode\u003eActionUpdateThread\u003c/code\u003e for more information.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UndesirableClassUsage",
          "displayName": "Undesirable class usage",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of undesirable classes (mostly Swing components).\n\u003cp\u003e\n  Quick-fix offers replacement with recommended IntelliJ Platform replacement.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MissingRecentApi",
          "displayName": "Usage of IntelliJ API not available in older IDEs",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of IntelliJ Platform API introduced in a version \u003cem\u003enewer\u003c/em\u003e than the one specified in \u003ccode\u003e\u0026lt;idea-version\u003e\u003c/code\u003e \u003ccode\u003e@since-build\u003c/code\u003e in \u003ccode\u003eplugin.xml\u003c/code\u003e.\n\u003cp\u003e\n  Using such API may lead to incompatibilities of the plugin with older IDE versions.\n\u003c/p\u003e\n\u003cp\u003e\n  To avoid possible issues when running the plugin in older IDE versions, increase \u003ccode\u003esince-build\u003c/code\u003e accordingly,\n  or remove usages of this API.\n\u003c/p\u003e\n\u003cp\u003e\n  See \u003ca href\u003d\"https://plugins.jetbrains.com/docs/intellij/build-number-ranges.html\"\u003eBuild Number Ranges\u003c/a\u003e in IntelliJ Platform Plugin SDK docs for more details.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\nIf \u003ccode\u003e\u0026lt;idea-version\u003e\u003c/code\u003e \u003ccode\u003e@since/until-build\u003c/code\u003e attributes are not specified in \u003ccode\u003eplugin.xml\u003c/code\u003e, set \u003cb\u003eSince\u003c/b\u003e/\u003cb\u003eUntil\u003c/b\u003e explicitly.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PsiElementConcatenation",
          "displayName": "Using PsiElement string representation to generate new expression is incorrect",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports direct usage of \u003ccode\u003ePsiElement\u003c/code\u003e and \u003ccode\u003ePsiType\u003c/code\u003e in strings.\n\u003cp\u003e\n  When building strings for \u003ccode\u003ePsiJavaParserFacade.createExpressionFromText()\u003c/code\u003e (or similar methods), \u003ccode\u003ePsiElement.getText()\u003c/code\u003e should be used\n  instead.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ActionIsNotPreviewFriendly",
          "displayName": "Field blocks intention preview",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields in \u003ccode\u003eLocalQuickFix\u003c/code\u003e and \u003ccode\u003eIntentionAction\u003c/code\u003e implementations that prevent intention preview\naction from functioning properly. Additionally, excessive \u003ccode\u003e@SafeFieldForPreview\u003c/code\u003e annotations are reported on fields\nwhose types are known to be safe.\n\u003cp\u003e\n  Intention preview is an IntelliJ platform feature that displays how quick-fix or intention action\n  will change the current file when applied. To implement this in quick fixes,\n  \u003ccode\u003eLocalQuickFix.generatePreview()\u003c/code\u003e is called with a custom \u003ccode\u003eProblemDescriptor\u003c/code\u003e\n  that points to the non-physical copy of current file. In intention actions, \u003ccode\u003eIntentionAction.generatePreview()\u003c/code\u003e\n  is called with the non-physical copy of current file and imaginary editor.\n  Normally, these methods just delegate to \u003ccode\u003eLocalQuickFix.applyFix()\u003c/code\u003e or \u003ccode\u003eIntentionAction.invoke()\u003c/code\u003e.\n  However, some quick-fixes may refer directly or indirectly to physical elements and use them for writing. As a result,\n  preview won\u0027t work, as the quick-fix will attempt to update physical PSI instead of non-physical one.\n  To avoid this, default implementation of \u003ccode\u003egeneratePreview()\u003c/code\u003e delegates only if all the\n  instance fields of a quick fix or intention action class have safe types: primitives, Strings, etc.\n\u003c/p\u003e\n\u003cp\u003e\n  You may fix this problem in a number of ways:\n\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\n    If the field does not actually store any PSI reference, or that PSI is used only for reading,\n    you may annotate the field with \u003ccode\u003e@SafeFieldForPreview\u003c/code\u003e. You can also use\n    \u003ccode\u003e@SafeTypeForPreview\u003c/code\u003e if the field type can never store any writable PSI reference.\n  \u003c/li\u003e\n  \u003cli\u003e\n    You may override \u003ccode\u003egetFileModifierForPreview()\u003c/code\u003e method and create a copy of the quick-fix\n    rebinding it to the non-physical file copy which is supplied as a parameter. Use\n    \u003ccode\u003ePsiTreeUtil.findSameElementInCopy()\u003c/code\u003e to find the corresponding PSI elements inside the\n    supplied non-physical copy.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Instead of storing PSI references in fields, try to extract all the necessary information from\n    \u003ccode\u003eProblemDescriptor.getPsiElement()\u003c/code\u003e in quick fix or from the supplied file/editor in intention action.\n    You may also inherit the abstract \u003ccode\u003eLocalQuickFixAndIntentionActionOnPsiElement\u003c/code\u003e class and\n    implement its \u003ccode\u003einvoke()\u003c/code\u003e and \u003ccode\u003eisAvailable()\u003c/code\u003e methods, which have\n    \u003ccode\u003estartElement\u003c/code\u003e and \u003ccode\u003eendElement\u003c/code\u003e parameters. These parameters are automatically\n    mapped to a non-physical file copy for you.\n  \u003c/li\u003e\n  \u003cli\u003e\n    You may override \u003ccode\u003egeneratePreview()\u003c/code\u003e method and provide completely custom preview behavior.\n    For example, it\u0027s possible to display a custom HTML document instead of actual preview if your action\n    does something besides modifying a current file.\n  \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\n  This inspection does not report if a custom implementation of \u003ccode\u003egetFileModifierForPreview()\u003c/code\u003e\n  or \u003ccode\u003egeneratePreview()\u003c/code\u003e exists. However, this doesn\u0027t mean that the implementation is correct and preview works.\n  Please test. Also note that preview result is calculated in background thread, so you cannot start a write action\n  during the preview or do any operation that requires a write action. Finally, no preview is generated automatically\n  if \u003ccode\u003estartInWriteAction()\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e. In this case, having custom \u003ccode\u003egeneratePreview()\u003c/code\u003e\n  implementation is desired.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SerializableCtor",
          "displayName": "Non-default constructor in serializable class",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-default constructor in serializable classes.\n\u003cp\u003e\n  The platform\u0027s \u003ccode\u003eIonObjectSerializer\u003c/code\u003e requires specifying \u003ccode\u003e@PropertyMapping\u003c/code\u003e explicitly.\n\u003c/p\u003e\n\u003cp\u003e\n  Quick-fix generates necessary \u003ccode\u003e@PropertyMapping\u003c/code\u003e annotation for the constructor.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FileEqualsUsage",
          "displayName": "File.equals() usage",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003ejava.io.File.equals()/hashCode()/compareTo()\u003c/code\u003e methods.\n\u003cp\u003e\n  These do not honor case-insensitivity on macOS.\n\u003c/p\u003e\n\u003cp\u003e\n  Use \u003ccode\u003ecom.intellij.openapi.util.io.FileUtil.filesEquals()/fileHashCode()/compareFiles()\u003c/code\u003e methods instead.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UseJBColor",
          "displayName": "Use Darcula aware JBColor",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003ejava.awt.Color\u003c/code\u003e.\n\u003cp\u003e\n  These are not aware of \"dark\" themes (e.g., bundled \"Darcula\") and might result in bad looking UI.\n\u003c/p\u003e\n\u003cp\u003e\n  Quick-fix replaces usages with \u003ccode\u003eJBColor\u003c/code\u003e, which defines \"dark\" color variant.\n\u003c/p\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\n// bad:\nColor darkGreen \u003d new Color(12, 58, 27);\nColor blue \u003d Color.BLUE;\n\n// good:\nColor darkGreen \u003d new JBColor(12, 58, 27);\nColor blue \u003d JBColor.BLUE;\nColor green \u003d new JBColor(new Color(12, 58, 27), new Color(27, 112, 39));\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MigrateToOptControl",
          "displayName": "Migrate to getOptionPane()",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ecreateOptionsPanel()\u003c/code\u003e methods in inspection implementation, which can be\nautomatically converted to \u003ccode\u003egetOptionsPane()\u003c/code\u003e.\n\u003cp\u003e\n  Creating inspection options control via \u003ccode\u003ecreateOptionsPanel()\u003c/code\u003e is deprecated,\n  in favor of declarative control description \u003ccode\u003egetOptionsPane()\u003c/code\u003e.\n  The inspection checks \u003ccode\u003ecreateOptionsPanel()\u003c/code\u003e implementations and if they use \n  InspectionOptionsPanel or its descendants and are simple enough, then it suggests to convert to\n  the new API automatically.\n\u003c/p\u003e\n\u003cp\u003e\n  This inspection currently supports Java and Kotlin only.\n  It cannot convert the code that uses Kotlin methods like \u003ccode\u003eapply\u003c/code\u003e or \u003ccode\u003ealso\u003c/code\u003e. Try to inline them.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2023.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ComponentRegistrationProblems",
          "displayName": "Component type mismatch",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports incorrect registration of plugin components (Actions and Components).\n\u003cp\u003e\n  The following problems are reported:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eAction/Component implementation class is abstract.\u003c/li\u003e\n  \u003cli\u003eClass is registered in plugin.xml as action but does not extend \u003ccode\u003eAnAction\u003c/code\u003e class.\u003c/li\u003e\n  \u003cli\u003eAction class does not have a public no-argument constructor.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "InspectionUsingGrayColors",
          "displayName": "Using new Color(a,a,a)",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003ejava.awt.Color\u003c/code\u003e to create gray colors.\n\u003cp\u003e\n  The \u003cb\u003eConvert to \u0027Gray\u0027\u003c/b\u003e quick fix replaces it using \u003ccode\u003ecom.intellij.ui.Gray\u003c/code\u003e constants instead.\n\u003c/p\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\n// bad:\nColor gray \u003d new Color(37, 37, 37);\n\n// good:\nColor gray \u003d Gray._37;\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UsagesOfObsoleteApi",
          "displayName": "Usages of ApiStatus.@Obsolete",
          "defaultSeverity": "TEXT ATTRIBUTES",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declarations (classes, methods, fields) annotated as \u003ccode\u003e@ApiStatus.Obsolete\u003c/code\u003e.\n\u003cp\u003e\n  Sometimes it\u0027s impossible to delete the current API, though it might not work correctly, there is a newer, or better, or more generic API.\n  This way, it\u0027s a weaker variant of \u003ccode\u003e@Deprecated\u003c/code\u003e annotation.\n  The annotated API is not supposed to be used in the new code, but it\u0027s permitted to postpone the migration of the existing code,\n  therefore the usage is not considered a warning.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LeakableMapKey",
          "displayName": "Map key may leak",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports using \u003ccode\u003eLanguage\u003c/code\u003e or \u003ccode\u003eFileType\u003c/code\u003e as a map key in plugin code.\n\u003cp\u003e\n  Such usages might lead to inability to unload the plugin properly.\n\u003c/p\u003e\n\u003cp\u003e\n  Please consider using \u003ccode\u003eString\u003c/code\u003e as keys instead.\n\u003c/p\u003e\n\u003cp\u003e\n  See \u003ca href\u003d\"https://plugins.jetbrains.com/docs/intellij/dynamic-plugins.html\"\u003eDynamic\n  Plugins\u003c/a\u003e in SDK Docs for more information.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UsePrimitiveTypes",
          "displayName": "Use \u0027PsiType#equals(Object)\u0027 with primitive types",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comparing \u003ccode\u003ePsiPrimitiveType\u003c/code\u003e instances using \u003ccode\u003e\u003d\u003d\u003c/code\u003e.\n\u003cp\u003e\n  Primitive types should be compared with \u003ccode\u003eequals\u003c/code\u003e as Java 8 type annotations are also applicable for them.\n\u003c/p\u003e\n\u003cp\u003e\n  Replace with \u003ccode\u003eequals()\u003c/code\u003e call.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnspecifiedActionsPlace",
          "displayName": "Unspecified action place",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports passing unspecified \u003ccode\u003eplace\u003c/code\u003e parameter for \u003ccode\u003eActionManager.createActionToolbar()\u003c/code\u003e and \u003ccode\u003eActionManager.createActionPopupMenu()\u003c/code\u003e.\n\u003cp\u003e\n  Specifying proper \u003ccode\u003eplace\u003c/code\u003e is required to distinguish Action\u0027s usage in \u003ccode\u003eupdate()/actionPerformed()\u003c/code\u003e via \u003ccode\u003eAnActionEvent.getPlace()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\nExamples:\n\u003cpre\u003e\n// bad:\nactionManager.createActionToolbar(\"\", group, false);\nactionManager.createActionToolbar(\"unknown\", group, false);\nactionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, group);\n\n// good:\nactionManager.createActionToolbar(\"MyPlace\", group, false);\nactionManager.createActionPopupMenu(ActionPlaces.EDITOR_TOOLBAR, group);\n\u003c/pre\u003e\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "QuickFixGetFamilyNameViolation",
          "displayName": "QuickFix\u0027s getFamilyName() implementation must not depend on a specific context",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eQuickFix#getFamilyName()\u003c/code\u003e using contextual information.\n\u003cp\u003e\n  This method must not use any non-static information.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UseDPIAwareBorders",
          "displayName": "Use DPI-aware borders",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003ejavax.swing.border.EmptyBorder\u003c/code\u003e and \u003ccode\u003eJBUI.Borders.emptyXyz()\u003c/code\u003e that can be simplified.\n\u003cp\u003e\n  The \u003ccode\u003eEmptyBorder\u003c/code\u003e instances are not DPI-aware and can result in UI layout problems.\n\u003c/p\u003e\n\u003cp\u003e\n  Quick fix performs replacement with \u003ccode\u003eJBUI.Borders.empty()\u003c/code\u003e or simplifies the expression.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n// bad:\nBorder border1 \u003d new EmptyBorder(1, 2, 3, 4);\nBorder border2 \u003d new EmptyBorder(1, 2, 1, 2);\nBorder border3 \u003d new EmptyBorder(1, 0, 0, 0);\n\n// good:\nBorder border1 \u003d JBUI.Borders.empty(1, 2, 3, 4);\nBorder border2 \u003d JBUI.Borders.empty(1, 2);\nBorder border3 \u003d JBUI.Borders.emptyTop(1);\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UseDPIAwareInsets",
          "displayName": "Use DPI-aware insets",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003ejava.awt.Insets\u003c/code\u003e and \u003ccode\u003eJBUI.insetsXyz()\u003c/code\u003e that can be simplified.\n\u003cp\u003e\n  The \u003ccode\u003eInsets\u003c/code\u003e instances are not DPI-aware and can result in UI layout problems.\n\u003c/p\u003e\n\u003cp\u003e\n  Quick fix performs replacement with \u003ccode\u003eJBUI.insets()\u003c/code\u003e or simplifies the expression.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n// bad:\nInsets insets1 \u003d new Insets(1, 2, 3, 4);\nInsets insets2 \u003d new Insets(1, 2, 1, 2);\nInsets insets3 \u003d new Insets(1, 0, 0, 0);\n\n// good:\nInsets insets1 \u003d JBUI.insets(1, 2, 3, 4);\nInsets insets2 \u003d JBUI.insets(1, 2);\nInsets insets3 \u003d JBUI.insetsTop(1);\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UseCouple",
          "displayName": "Use Couple instead of Pair",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003ePair\u0026lt;T, T\u0026gt;\u003c/code\u003e replaceable by \u003ccode\u003eCouple\u0026lt;T\u0026gt;\u003c/code\u003e.\n\u003cp\u003e\n  Quick-fix performs replacement.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PresentationAnnotation",
          "displayName": "Invalid icon path in @Presentation",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports invalid and deprecated value for \u003ccode\u003eicon\u003c/code\u003e attribute in \u003ccode\u003ecom.intellij.ide.presentation.Presentation\u003c/code\u003e annotation.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnresolvedPluginConfigReference",
          "displayName": "Unresolved plugin configuration reference",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references to plugin configuration elements.\n\n\u003ch4\u003eExtensions\u003c/h4\u003e\n\u003cp\u003e\n  Referencing extension with an unknown \u003ccode\u003eid\u003c/code\u003e might result in errors at runtime.\n\u003c/p\u003e\n\u003cp\u003e\n  The following extension points are supported:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ecom.intellij.advancedSetting\u003c/code\u003e in resource bundle \u003ccode\u003eadvanced.setting.*\u003c/code\u003e key\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.intellij.experimentalFeature\u003c/code\u003e in \u003ccode\u003eExperiments.isFeatureEnabled()/setFeatureEnabled()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.intellij.notificationGroup\u003c/code\u003e in \u003ccode\u003eNotification\u003c/code\u003e constructor and \u003ccode\u003eNotificationGroupManager.getNotificationGroup()\u003c/code\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.intellij.registryKey\u003c/code\u003e in \u003ccode\u003eRegistry\u003c/code\u003e methods \u003ccode\u003ekey\u003c/code\u003e parameter\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.intellij.toolWindow\u003c/code\u003e in resource bundle \u003ccode\u003etoolwindow.stripe.*\u003c/code\u003e key\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4\u003eExtension Point\u003c/h4\u003e\n\u003cp\u003e\n  Extension point name referencing its corresponding \u003ccode\u003e\u0026lt;extensionPoint\u003e\u003c/code\u003e declaration in \u003ccode\u003eplugin.xml\u003c/code\u003e.\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ecom.intellij.openapi.extensions.ExtensionPointName\u003c/code\u003e constructor and \u003ccode\u003ecreate()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.intellij.openapi.extensions.ProjectExtensionPointName\u003c/code\u003e constructor\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.intellij.openapi.util.KeyedExtensionCollector\u003c/code\u003e and inheritors constructor\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnsafeVfsRecursion",
          "displayName": "Unsafe VFS recursion",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usage of \u003ccode\u003eVirtualFile.getChildren()\u003c/code\u003e inside recursive methods.\n\u003cp\u003e\n  This may cause endless loops when iterating over cyclic symlinks.\n  Use \u003ccode\u003eVfsUtilCore.visitChildrenRecursively()\u003c/code\u003e instead.\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nvoid processDirectory(VirtualFile dir) {\n  for (VirtualFile file : dir.getChildren()) { // bad\n    if (!file.isDirectory()) {\n      processFile(file);\n    } else {\n      processDirectory(file); // recursive call\n    }\n  }\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e\nvoid processDirectory(VirtualFile dir) {\n  VfsUtilCore.visitChildrenRecursively(dir, new VirtualFileVisitor\u0026lt;Void\u003e() { // good\n    @Override\n    public boolean visitFile(@NotNull VirtualFile file) {\n      if (!file.isDirectory()) {\n        processFile(file);\n      }\n      return true;\n    }\n  });\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UseVirtualFileEquals",
          "displayName": "Use \u0027VirtualFile#equals(Object)\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comparing \u003ccode\u003eVirtualFile\u003c/code\u003e instances using \u003ccode\u003e\u003d\u003d\u003c/code\u003e.\n\u003cp\u003e\n  Replace with \u003ccode\u003eequals()\u003c/code\u003e call.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MissingAccessibleContext",
          "displayName": "Accessible context is missing",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Swing components that do not provide accessibility context.\n\u003cp\u003e\n  This information is used by screen readers. Failing to provide it makes the component inaccessible for\n  visually impaired users.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  ListCellRenderer\u0026lt;String\u0026gt; renderer \u003d (list, val, index, sel, cell) -\u003e {\n    JPanel panel \u003d new JPanel();\n    return panel;\n  };\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  To fix the problem, you should either call \u003ccode\u003esetAccessibleName()\u003c/code\u003e on the returned \u003ccode\u003eJPanel\u003c/code\u003e\n  or override its \u003ccode\u003egetAccessibleContext()\u003c/code\u003e method.\n\u003c/p\u003e\n\u003cp\u003e\n  The returned text should reflect the purpose\n  of the component. For example, in the case of \u003ccode\u003eListCellRenderer\u003c/code\u003e, this would be the text of the menu\n  item.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UElementAsPsi",
          "displayName": "UElement as PsiElement usage",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usage of UAST \u003ccode\u003eUElement\u003c/code\u003e as \u003ccode\u003ePsiElement\u003c/code\u003e.\n\u003cp\u003e\n  The \u003ccode\u003ePsiElement\u003c/code\u003e obtained this way is ambiguous.\n\u003c/p\u003e\n\u003cp\u003e\n  To obtain \"physical\" \u003ccode\u003ePsiElement\u003c/code\u003e use \u003ccode\u003eUElementKt.getSourcePsiElement()\u003c/code\u003e,\n  for \u003ccode\u003ePsiElement\u003c/code\u003e that \"emulates\" behaviour of Java-elements (\u003ccode\u003ePsiClass\u003c/code\u003e, \u003ccode\u003ePsiMethod\u003c/code\u003e, etc.)\n  use \u003ccode\u003eUElementKt.getAsJavaPsiElement()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  See \u003ca href\u003d\"https://plugins.jetbrains.com/docs/intellij/uast.html\"\u003eUAST - Unified Abstract Syntax Tree\u003c/a\u003e in SDK Docs.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StatefulEp",
          "displayName": "Stateful extension",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "JVM",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports extensions and quick-fixes holding potentially leaking state.\n\u003cp\u003e\n  Keeping references to \u003ccode\u003ePsiElement\u003c/code\u003e, \u003ccode\u003ePsiReference\u003c/code\u003e, or \u003ccode\u003eProject\u003c/code\u003e instances can result in memory leaks.\n\u003c/p\u003e\n\u003cp\u003e\n  Ideally, these should be stateless.\n  For quick-fix, see \u003ccode\u003eLocalQuickFixOnPsiElement\u003c/code\u003e as a convenient base class.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Micronaut",
      "inspections": [
        {
          "shortName": "MnCacheAnnotationParameters",
          "displayName": "Unresolved cache annotation parameter reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.micronaut",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports Micronaut Cache annotations where the value of the \u003ccode\u003eparameters\u003c/code\u003e attribute contains names of undefined method\n  parameters.\u003c/p\u003e\n\u003cp\u003eThe following annotations are supported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eio.micronaut.cache.annotation.Cacheable\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eio.micronaut.cache.annotation.CachePut\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eio.micronaut.cache.annotation.CacheInvalidate\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @CachePut(parameters \u003d \"myParameter\") // Error: Cannot resolve symbol \u0027myParameter\u0027\n  public String cachedMethod(String name_is_not_equal_to_myParameter) {\n    return \"...\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MnUnresolvedPathVariable",
          "displayName": "Unresolved @PathVariable reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.micronaut",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003e@PathVariable\u003c/code\u003e parameters that are declared in a method signature and missing in the URL path or vise versa.\n  The quick-fix adds the missing parameter.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Get(\"/path/{myVariable}/\")\n  public String handler(@PathVariable String name_is_not_equal_to_myVariable) {\n    return \"...\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied the result looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Get(\"/path/{myVariable}/\")\n  public String handler(@PathVariable String myVariable) {\n    return \"...\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MnYamlConfig",
          "displayName": "Micronaut application.yaml",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.micronaut",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports deprecated configuration keys and invalid values in Micronaut application \u003ccode\u003e.yaml\u003c/code\u003e configuration files.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MnPropertiesConfig",
          "displayName": "Micronaut application.properties",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.micronaut",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports deprecated configuration keys and invalid values in Micronaut application \u003ccode\u003e.properties\u003c/code\u003e configuration files.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MnInjectionPoints",
          "displayName": "Unresolved cache annotation parameter reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.micronaut",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports injection points in bean classes that have missing or ambiguous dependencies.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface Engine {}\n\n  @Singleton\n  class GasEngine implements Engine {}\n\n  @Singleton\n  class ElectricEngine implements Engine {}\n\n  @Singleton\n  class Car {\n\n    @Inject\n    Engine \u003cb\u003eengine\u003c/b\u003e; // Ambiguous dependency: there are multiple beans that match the injection point\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Cloning issues",
      "inspections": [
        {
          "shortName": "NonPublicClone",
          "displayName": "\u0027clone()\u0027 method not \u0027public\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eclone()\u003c/code\u003e methods that are \u003ccode\u003eprotected\u003c/code\u003e and not \u003ccode\u003epublic\u003c/code\u003e.\n\u003cp\u003eWhen overriding the \u003ccode\u003eclone()\u003c/code\u003e method from \u003ccode\u003ejava.lang.Object\u003c/code\u003e, it is expected to make the method \u003ccode\u003epublic\u003c/code\u003e,\n  so that it is accessible from non-subclasses outside the package.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CloneInNonCloneableClass",
          "displayName": "\u0027clone()\u0027 method in non-Cloneable class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that override the\n\u003ccode\u003eclone()\u003c/code\u003e method but don\u0027t implement the \u003ccode\u003eCloneable\u003c/code\u003e interface.\nThis usually represents a programming error.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eOnly warn on \u0027public\u0027 clone methods\u003c/b\u003e option to ignore methods that aren\u0027t \u003ccode\u003epublic\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eFor classes designed to be inherited, you may choose to override \u003ccode\u003eclone()\u003c/code\u003e and declare it as \u003ccode\u003eprotected\u003c/code\u003e\nwithout implementing the \u003ccode\u003eCloneable\u003c/code\u003e interface and decide whether to implement the \u003ccode\u003eCloneable\u003c/code\u003e interface in subclasses.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CloneableImplementsClone",
          "displayName": "Cloneable class without \u0027clone()\u0027 method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes implementing the \u003ccode\u003eCloneable\u003c/code\u003e interface that don\u0027t override the\n\u003ccode\u003eclone()\u003c/code\u003e method.\n\u003cp\u003eSuch classes use the default implementation of \u003ccode\u003eclone()\u003c/code\u003e,\n  which isn\u0027t \u003ccode\u003epublic\u003c/code\u003e but \u003ccode\u003eprotected\u003c/code\u003e, and which does not copy the mutable state of the class.\u003c/p\u003e\n\u003cp\u003eA quick-fix is available to generate a basic \u003ccode\u003eclone()\u003c/code\u003e method,\nwhich can be used as a basis for a properly functioning \u003ccode\u003eclone()\u003c/code\u003e method\n  expected from a \u003ccode\u003eCloneable\u003c/code\u003e class.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Data \u003cb\u003eimplements\u003c/b\u003e Cloneable {\n    \u003cb\u003eprivate\u003c/b\u003e String[] names;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Data \u003cb\u003eimplements\u003c/b\u003e Cloneable {\n    \u003cb\u003eprivate\u003c/b\u003e String[] names;\n\n    @Override\n    \u003cb\u003epublic\u003c/b\u003e Data clone() {\n      \u003cb\u003etry\u003c/b\u003e {\n        Data clone \u003d (Data) \u003cb\u003esuper\u003c/b\u003e.clone();\n        // TODO: copy mutable state here, so the clone can\u0027t change the internals of the original\n        \u003cb\u003ereturn\u003c/b\u003e clone;\n      } \u003cb\u003ecatch\u003c/b\u003e (CloneNotSupportedException e) {\n        \u003cb\u003ethrow new\u003c/b\u003e AssertionError();\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!--\nNote for translators: the text of the TODO comment in the example code above comes from\ncommunity/plugins/InspectionGadgets/InspectionGadgetsAnalysis/resources/messages/InspectionGadgetsBundle.properties\nproperty key: cloneable.class.without.clone.todo.message\n--\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore classes cloneable due to inheritance\u003c/b\u003e option to ignore classes that are\n  \u003ccode\u003eCloneable\u003c/code\u003e because they inherit from the \u003ccode\u003eCloneable\u003c/code\u003e class.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore when Cloneable is necessary to call clone() method of super class\u003c/b\u003e\n  option to ignore classes that require implementing \u003ccode\u003eCloneable\u003c/code\u003e because they call the \u003ccode\u003eclone()\u003c/code\u003e method from a superclass.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UseOfClone",
          "displayName": "Use of \u0027clone()\u0027 or \u0027Cloneable\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports implementations of and calls to the \u003ccode\u003eclone()\u003c/code\u003e method and uses of \u003ccode\u003ejava.lang.Cloneable\u003c/code\u003e.\n\u003cp\u003eSome coding standards prohibit the use of \u003ccode\u003eclone()\u003c/code\u003e and recommend using a copy constructor or\n  the \u003ccode\u003estatic\u003c/code\u003e factory method instead.\u003c/p\u003e\n\u003cp\u003eThe inspection ignores calls to \u003ccode\u003eclone()\u003c/code\u003e on arrays because it\u0027s a correct and compact way to copy an array.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CloneDeclaresCloneNotSupported",
          "displayName": "\u0027clone()\u0027 does not declare \u0027CloneNotSupportedException\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eclone()\u003c/code\u003e methods that do not declare \u003ccode\u003ethrows CloneNotSupportedException\u003c/code\u003e.\n\u003cp\u003eIf \u003ccode\u003ethrows CloneNotSupportedException\u003c/code\u003e is not declared, the method\u0027s subclasses will not be able to prohibit cloning\nin the standard way. This inspection does not report \u003ccode\u003eclone()\u003c/code\u003e methods declared \u003ccode\u003efinal\u003c/code\u003e\nand \u003ccode\u003eclone()\u003c/code\u003e methods on \u003ccode\u003efinal\u003c/code\u003e classes.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eOnly warn on \u0027protected\u0027 clone methods\u003c/b\u003e option to indicate that this inspection should only warn on \u003ccode\u003eprotected clone()\u003c/code\u003e methods.\nThe \u003ci\u003eEffective Java\u003c/i\u003e book (second and third edition) recommends omitting the \u003ccode\u003eCloneNotSupportedException\u003c/code\u003e\ndeclaration on \u003ccode\u003epublic\u003c/code\u003e methods, because the methods that do not throw checked exceptions are easier to use.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e Example \u003cb\u003eimplements\u003c/b\u003e Cloneable {\n    // method doesn\u0027t declare \u0027throws CloneNotSupportedException\u0027\n    \u003cb\u003eprotected\u003c/b\u003e Object clone() {\n        \u003cb\u003etry\u003c/b\u003e {\n            \u003cb\u003ereturn\u003c/b\u003e \u003cb\u003esuper\u003c/b\u003e.clone();\n        } \u003cb\u003ecatch\u003c/b\u003e (CloneNotSupportedException e) {\n            \u003cb\u003ereturn\u003c/b\u003e null;\n        }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CloneCallsConstructors",
          "displayName": "\u0027clone()\u0027 instantiates objects with constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to object constructors inside \u003ccode\u003eclone()\u003c/code\u003e methods.\n\u003cp\u003eIt is considered good practice to call \u003ccode\u003eclone()\u003c/code\u003e to instantiate objects inside of a \u003ccode\u003eclone()\u003c/code\u003e method\n  instead of creating them directly to support later subclassing.\nThis inspection will not report\n\u003ccode\u003eclone()\u003c/code\u003e methods declared as \u003ccode\u003efinal\u003c/code\u003e\n  or \u003ccode\u003eclone()\u003c/code\u003e methods on \u003ccode\u003efinal\u003c/code\u003e classes.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CloneReturnsClassType",
          "displayName": "\u0027clone()\u0027 should have return type equal to the class it contains",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eclone()\u003c/code\u003e methods with return types different from the class they\u0027re located in.\n\u003cp\u003eOften a \u003ccode\u003eclone()\u003c/code\u003e method will have a return type of \u003ccode\u003ejava.lang.Object\u003c/code\u003e, which makes it harder to use by its clients.\n\u003ci\u003eEffective Java\u003c/i\u003e (the second and third editions) recommends making the return type of the \u003ccode\u003eclone()\u003c/code\u003e method the same as the\n  class type of the object it returns.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eclass\u003c/b\u003e Foo \u003cb\u003eimplements\u003c/b\u003e Cloneable {\n    \u003cb\u003epublic\u003c/b\u003e Object clone() {\n      \u003cb\u003etry\u003c/b\u003e {\n        \u003cb\u003ereturn\u003c/b\u003e super.clone();\n      } \u003cb\u003ecatch\u003c/b\u003e (CloneNotSupportedException e) {\n        \u003cb\u003ethrow new\u003c/b\u003e AssertionError();\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eclass\u003c/b\u003e Foo \u003cb\u003eimplements\u003c/b\u003e Cloneable {\n    \u003cb\u003epublic\u003c/b\u003e Foo clone() {\n      \u003cb\u003etry\u003c/b\u003e {\n        \u003cb\u003ereturn\u003c/b\u003e (Foo)super.clone();\n      } \u003cb\u003ecatch\u003c/b\u003e (CloneNotSupportedException e) {\n        \u003cb\u003ethrow new\u003c/b\u003e AssertionError();\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "JVM languages",
      "inspections": [
        {
          "shortName": "SerializableHasSerialVersionUIDField",
          "displayName": "Serializable class without \u0027serialVersionUID\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that implement \u003ccode\u003eSerializable\u003c/code\u003e and do not declare a \u003ccode\u003eserialVersionUID\u003c/code\u003e field.\n\u003cp\u003e\n  Without a \u003ccode\u003eserialVersionUID\u003c/code\u003e field, any change to the class will make previously serialized versions unreadable.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main implements Serializable {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main implements Serializable {\n    private static final long serialVersionUID \u003d -1446398935944895849L;\n  }\n\u003c/code\u003e\u003c/pre\u003e\nWhen using a language level of JDK 14 or higher, the quickfix will also add the \u003ccode\u003ejava.io.Serial\u003c/code\u003e annotation.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the following options to configure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    \u003ccode\u003eSerializable\u003c/code\u003e from a superclass but are not intended for serialization.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether to ignore \u003ccode\u003eSerializable\u003c/code\u003e anonymous classes.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SourceToSinkFlow",
          "displayName": "Non-safe string is passed to safe method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nReports cases when non-safe string is passed to a method with parameter marked with annotation \u003ccode\u003eorg.checkerframework.checker.tainting.qual.Untainted\u003c/code\u003e.\n\u003cp\u003e\n  Safe string is:\n\u003cul\u003e\n  \u003cli\u003ecall of method that is marked as \u003ccode\u003e@Untainted\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003elocal variable or method parameter that does not call non-safe methods\u003c/li\u003e\n  \u003cli\u003efield, local variable or parameter that is marked as \u003ccode\u003e@Untainted\u003c/code\u003e and does not have non-safe methods calls assigned\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nExample:\n\u003cpre\u003e\n\u003ccode\u003e\n  void doSmth(boolean b) {\n    String s \u003d safe();\n    String s1 \u003d \"other\";\n    if (b) s1 \u003d s;\n    sink(s);\n  }\n  \n  String sink(@Untainted String s) {}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nHere we do not have non-safe string assignments to \u003ccode\u003es\u003c/code\u003e so warning is not produced. On the other hand:\n\u003cpre\u003e\n\u003ccode\u003e\n  void doSmth(boolean b) {\n    String s \u003d safe();\n    String s1 \u003d \"other\";\n    s1 \u003d foo();\n    if (b) s \u003d s1;\n    sink(s);        // warning here\n  }\n  \n  String foo();\n\n  String sink(@Untainted String s) {}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003e\nHere we have a warning since \u003ccode\u003es1\u003c/code\u003e has an unknown state after \u003ccode\u003efoo\u003c/code\u003e call result assignment.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2021.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "MustAlreadyBeRemovedApi",
          "displayName": "API must already be removed",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declarations marked with \u003ccode\u003e@ApiStatus.ScheduledForRemoval\u003c/code\u003e\nthat should have been removed in the current version of the declaring library.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eIt compares the specified scheduled removal version with the version that you can set below.\u003c/p\u003e\n\u003cp\u003e\n  Specify the version as a string separated with dots and optionally postfixed with\n  \u003ccode\u003ealpha\u003c/code\u003e, \u003ccode\u003ebeta\u003c/code\u003e, \u003ccode\u003esnapshot\u003c/code\u003e, or \u003ccode\u003eeap\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003eExamples of valid versions: \u003ccode\u003e1.0\u003c/code\u003e, \u003ccode\u003e2.3.1\u003c/code\u003e, \u003ccode\u003e2018.1\u003c/code\u003e, \u003ccode\u003e7.5-snapshot\u003c/code\u003e, \u003ccode\u003e3.0-eap\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Version comparison is intuitive: \u003ccode\u003e1.0 \u0026lt; 2.0\u003c/code\u003e, \u003ccode\u003e1.0-eap \u0026lt; 1.0\u003c/code\u003e, \u003ccode\u003e2.3-snapshot \u0026lt; 2.3\u003c/code\u003e and so on.\n  For detailed comparison logic, refer to the implementation of \u003ca\n  href\u003d\"https://github.com/JetBrains/intellij-community/blob/master/platform/util-rt/src/com/intellij/util/text/VersionComparatorUtil.java\"\u003eVersionComparatorUtil\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UastIncorrectHttpHeaderInspection",
          "displayName": "Unknown HTTP header",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.microservices.jvm",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports unknown HTTP headers that do not match any \u003ca href\u003d\"https://www.iana.org/assignments/message-headers/message-headers.xml\"\u003epublicly\n  known headers\u003c/a\u003e. The quick fix suggests adding the header to the list of custom headers to avoid triggering this inspection in the\n  future.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eCustom HTTP headers are listed for the inspection with the same name in the HTTP Client group.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonExtendableApiUsage",
          "displayName": "Class, interface, or method should not be extended",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes, interfaces and methods that extend, implement, or override API elements marked with \u003ccode\u003e@ApiStatus.NonExtendable\u003c/code\u003e.\n\u003cp\u003e\n  The \u003ccode\u003e@ApiStatus.NonExtendable\u003c/code\u003e annotation indicates that the class, interface, or method \u003cstrong\u003emust not be extended, \n  implemented, or overridden\u003c/strong\u003e.\n  Since casting such interfaces and classes to the internal library implementation is rather common,\n  if a client provides a different implementation, you will get \u003ccode\u003eClassCastException\u003c/code\u003e.\n  Adding new abstract methods to such classes and interfaces will break the compatibility with the client\u0027s implementations.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnstableTypeUsedInSignature",
          "displayName": "Unstable type is used in signature",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declarations of classes, methods, and fields that reference an unstable API type in the signature,\nbut are not marked with the same unstable annotation.\n\u003cp\u003e\n  This inspection ensures that the signatures of a public API do not expose any \u003ci\u003eunstable\u003c/i\u003e (internal, experimental) types.\n  For example, if a method returns an \u003ci\u003eexperimental\u003c/i\u003e class, the method itself is considered \u003ci\u003eexperimental\u003c/i\u003e\n  because incompatible changes of the type (deletion or move to another package) lead to incompatible method signature changes.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the list below to specify which annotations mark an unstable API.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MissingDeprecatedAnnotationOnScheduledForRemovalApi",
          "displayName": "Missing \u0027@Deprecated\u0027 annotation on scheduled for removal API",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declarations marked with \u003ccode\u003e@ApiStatus.ScheduledForRemoval\u003c/code\u003e without \u003ccode\u003e@Deprecated\u003c/code\u003e.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n  @ApiStatus.ScheduledForRemoval(inVersion \u003d \"2017.3\")\n  public void myLegacyMethod() { }\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied the result looks like:\u003c/p\u003e\n\u003cpre\u003e\n  @Deprecated\n  @ApiStatus.ScheduledForRemoval(inVersion \u003d \"2017.3\")\n  public void myLegacyMethod() { }\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OverrideOnly",
          "displayName": "Method can only be overridden",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to API methods marked with \u003ccode\u003e@ApiStatus.OverrideOnly\u003c/code\u003e.\n\u003cp\u003e\n  The \u003ccode\u003e@ApiStatus.OverrideOnly\u003c/code\u003e annotation indicates that the method is part of SPI (Service Provider Interface).\n  Clients of the declaring library should implement or override such methods, not call them directly.\n  Marking a class or interface with this annotation is the same as marking every method with it.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ThreadRun",
          "displayName": "Call to \u0027Thread.run()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports calls to \u003ccode\u003erun()\u003c/code\u003e on \u003ccode\u003ejava.lang.Thread\u003c/code\u003e or any of its subclasses.\u003c/p\u003e\n\u003cp\u003e\n  While occasionally intended, this is usually a mistake, because \u003ccode\u003erun()\u003c/code\u003e doesn\u0027t start a new thread.\n  To execute the code in a separate thread, \u003ccode\u003estart()\u003c/code\u003e should be used.\u003c/p\u003e\n\u003cp\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UastIncorrectMimeTypeInspection",
          "displayName": "Incorrect MIME Type declaration",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.microservices.jvm",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect MIME types (for example, in \u003ccode\u003eContent-Type\u003c/code\u003e strings) for HTTP servers and clients.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BlockingMethodInNonBlockingContext",
          "displayName": "Possibly blocking call in non-blocking context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports thread-blocking method calls in code fragments where threads should not be blocked.\n\n\u003cp\u003e\u003cb\u003eExample (Project Reactor):\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nFlux.just(\"1\").flatMap(f -\u0026gt; {\n    Flux\u0026lt;String\u0026gt; just \u003d loadUsersFromDatabase();\n    just.toIterable(); // Error: blocking operator call in non-blocking scope\n    return just;\n  }\n);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eConsider running blocking code \u003ca href\u003d\"https://projectreactor.io/docs/core/release/reference/#faq.wrap-blocking\"\u003ewith a proper\n  scheduler\u003c/a\u003e, for example \u003ccode\u003eSchedulers.boundedElastic()\u003c/code\u003e, or try to find an alternative non-blocking API.\u003c/p\u003e\n\n\u003cbr/\u003e\n\n\u003cp\u003e\u003cb\u003eExample (Kotlin Coroutines):\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nsuspend fun exampleFun() {\n    Thread.sleep(100); // Error: blocking method call inside suspend function\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eConsider running blocking code \u003ca href\u003d\"https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html\"\u003ewith a special dispatcher\u003c/a\u003e,\n  for example \u003ccode\u003eDispatchers.IO\u003c/code\u003e, or try to find an alternative non-blocking API.\u003c/p\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eIn the \u003cb\u003eBlocking Annotations\u003c/b\u003e list, specify annotations that mark thread-blocking methods.\u003c/li\u003e\n  \u003cli\u003eIn the \u003cb\u003eNon-Blocking Annotations\u003c/b\u003e list, specify annotations that mark non-blocking methods.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSpecified annotations can be used as \u003ca href\u003d\"https://www.jetbrains.com/help/idea/external-annotations.html\"\u003eExternal Annotations\u003c/a\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Since15",
          "displayName": "Usages of API which isn\u0027t available at the configured language level",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of the API that is unavailable at the configured language level.\nThis inspection does 3 things:\n\u003cul\u003e\n  \u003cli\u003eHighlight usage of generified classes when the language level is below Java 7.\u003c/li\u003e\n  \u003cli\u003eHighlight when default methods are not overridden and the language level is below Java 8.\u003c/li\u003e\n  \u003cli\u003eHighlight usage of API when the language level is lower than marked using the \u003ccode\u003e@since\u003c/code\u003e tag in the documentation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eForbid API usages\u003c/b\u003e option to forbid usages of the API in respect to the project or custom language level.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "Dependency",
          "displayName": "Illegal package dependencies",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports illegal dependencies between scopes according to the dependency rules given. Dependency rules can be used to prohibit usage from a\nscope to another scope.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eConfigure dependency rules\u003c/b\u003e button below to customize validation rules.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnstableApiUsage",
          "displayName": "Unstable API Usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking\nthe code that uses it.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThe annotations which are used to mark unstable APIs are shown in the list below.\u003c/p\u003e\n\u003cp\u003eBy default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project. In such cases it\u0027ll be possible to update the usages when you change APIs.\n  However, it may be inconvenient if the project is big, so one can switch off the \u003cb\u003eIgnore API declared in this project\u003c/b\u003e option to report\nthe usages of unstable APIs declared in both the project sources and libraries.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IllegalDependencyOnInternalPackage",
          "displayName": "Illegal dependency on internal package",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JVM",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports references in modules without \u003ccode\u003emodule-info.java\u003c/code\u003e on packages which are not exported from named modules. \n\u003cp\u003eSuch configuration may occur when some modules in the project are already migrated to Java modules but others are still non-modular.\nBy analogy to the JDK, such non-modular code should not get access to the code in named modules which is not explicitly exported.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "UI form",
      "inspections": [
        {
          "shortName": "InvalidPropertyKeyForm",
          "displayName": "Invalid property key in a UI form",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "231.9011.34",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references to .properties files.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DuplicateMnemonic",
          "displayName": "Duplicate mnemonics",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "231.9011.34",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports components that have duplicated mnemonic characters.\n\u003cp\u003eThe quick-fix assigns a unique mnemonic character to each of the components.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "FormSpellChecking",
          "displayName": "Typo in a UI form",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "231.9011.34",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports typos and misspelling in your UI forms (for example, in a \u003ccode\u003eJLabel\u003c/code\u003e text or \u003ccode\u003eJPanel\u003c/code\u003e title) and fixes them\n  with one click.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NoLabelFor",
          "displayName": "No label for component",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "231.9011.34",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports components that do not have any static\ntext and do not have any label marked with \u003ccode\u003esetLabelFor\u003c/code\u003e\nfor this component.\n\u003cp\u003eComponents that do not have static text include edit fields and combo boxes.\nSuch components cannot be activated with a keyboard shortcut. The quick-fix for this inspection\n  allows you to automatically associate an adjacent label with the problematic component.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "BoundFieldAssignment",
          "displayName": "Assignment to UI-bound field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignments to fields which are bound to components\nin UI Designer forms.\n\u003cp\u003eSuch assignments will cause the component setup code generated by UI Designer\n  for such fields to be ignored.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MissingMnemonic",
          "displayName": "Missing mnemonics",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "231.9011.34",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports focusable components with the\n\u003ccode\u003etext\u003c/code\u003e property or labels with the assigned\n\u003ccode\u003elabelFor\u003c/code\u003e property that do not have a mnemonic\ncharacter. The quick-fix assigns a unique mnemonic to such a component.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "NoScrollPane",
          "displayName": "Scrollable component not in JScrollPane",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "231.9011.34",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports\n\u003ccode\u003eScrollable\u003c/code\u003e components,\nexcept for \u003ccode\u003eJTextField\u003c/code\u003e, that are not placed in\n\u003ccode\u003eJScrollPane\u003c/code\u003e. The quick-fix surrounds the problematic\ncomponent with a scroll pane.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "OneButtonGroup",
          "displayName": "Button group with one button",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "231.9011.34",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports\n\u003ccode\u003eButtonGroup\u003c/code\u003e instances that contain only one \u003ccode\u003eJRadioButton\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "I18nForm",
          "displayName": "Hardcoded string literal in a UI form",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "231.9011.34",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any instances of hardcoded strings in your UI forms.\n\u003cp\u003eHardcoded string literals are usually errors in\nan internationalized environment.\n  This inspection does not report empty strings and strings consisting of only whitespace.\u003c/p\u003e\n\n\u003cp\u003eThe quick-fix transforms a string literal\n  into a reference to a property in a resource bundle.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NoButtonGroup",
          "displayName": "Radio button not in a group",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "231.9011.34",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports\n\u003ccode\u003eJRadioButton\u003c/code\u003e components that are not placed in\n\u003ccode\u003eButtonGroup\u003c/code\u003e. A quick-fix is available to group radio\nbuttons placed in adjacent grid cells.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Unused symbols",
      "inspections": [
        {
          "shortName": "JSUnusedLocalSymbols",
          "displayName": "Unused local symbol",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unused locally accessible parameter, local variable, function, class, or private member declaration.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSUnusedGlobalSymbols",
          "displayName": "Unused global symbol",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unused globally accessible public function, variable, class, or property.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSUnusedAssignment",
          "displayName": "Unused assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a variable whose value is never used after assignment.\u003cbr\u003e\nSuggests removing the unused variable to shorten the code and to avoid redundant allocations.\n\u003cp\u003eThe following cases are reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eA variable is never read after assignment.\u003c/li\u003e\n  \u003cli\u003eThe value of a variable is always overwritten with another assignment before the variable is read next time.\u003c/li\u003e\n  \u003cli\u003eThe initializer of a variable is redundant (for one of the above-mentioned reasons).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Resource management",
      "inspections": [
        {
          "shortName": "IOResource",
          "displayName": "I/O resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports I/O resources that are not safely closed. I/O resources checked\nby this inspection include \u003ccode\u003ejava.io.InputStream\u003c/code\u003e,\n\u003ccode\u003ejava.io.OutputStream\u003c/code\u003e, \u003ccode\u003ejava.io.Reader\u003c/code\u003e,\n\u003ccode\u003ejava.io.Writer\u003c/code\u003e, \u003ccode\u003ejava.util.zip.ZipFile\u003c/code\u003e, \u003ccode\u003ejava.io.Closeable\u003c/code\u003e and \u003ccode\u003ejava.io.RandomAccessFile\u003c/code\u003e.\n\u003cp\u003e\n  I/O resources wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource.\n\u003c/p\u003e\n\u003cp\u003e\n  By default, the inspection assumes that the resources can be closed by any method with\n  \u0027close\u0027 or \u0027cleanup\u0027 in its name.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void save() throws IOException {\n    FileWriter writer \u003d new FileWriter(\"filename.txt\"); //warning\n    writer.write(\"sample\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eList I/O resource classes that do not need to be closed and should be ignored by this inspection.\u003c/li\u003e\n  \u003cli\u003e\n    Whether an I/O resource is allowed to be opened inside a \u003ccode\u003etry\u003c/code\u003eblock.\n    This style is less desirable because it is more verbose than opening a resource in front of a \u003ccode\u003etry\u003c/code\u003e block.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HibernateResource",
          "displayName": "Hibernate resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to the \u003ccode\u003eopenSession()\u003c/code\u003e method if the returned \u003ccode\u003eorg.hibernate.Session\u003c/code\u003e resource is not safely closed.\n\u003cp\u003e\n  By default, the inspection assumes that the resources can be closed by any method with\n  \u0027close\u0027 or \u0027cleanup\u0027 in its name.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void doHibernateQuery(SessionFactory factory) {\n    Session session \u003d factory.openSession(); //warning\n    session.createQuery(\"...\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Whether a \u003ccode\u003eorg.hibernate.Session\u003c/code\u003e resource is allowed to be opened inside a \u003ccode\u003etry\u003c/code\u003e\n    block. This style is less desirable because it is more verbose than opening a resource\n    in front of a \u003ccode\u003etry\u003c/code\u003e block.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SocketResource",
          "displayName": "Socket opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports socket resources that are not safely closed. Socket resources reported\nby this inspection include \u003ccode\u003ejava.net.Socket\u003c/code\u003e,\n\u003ccode\u003ejava.net.DatagramSocket\u003c/code\u003e, and \u003ccode\u003ejava.net.ServerSocket\u003c/code\u003e.\n\u003cp\u003e\n  By default, the inspection assumes that the resources can be closed by any method with\n  \u0027close\u0027 or \u0027cleanup\u0027 in its name.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  byte[] getMessage(ServerSocket socket) throws IOException {\n    Socket client \u003d socket.accept(); //socket is not closed\n    return client.getInputStream().readAllBytes();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Whether a socket is allowed to be opened inside a \u003ccode\u003etry\u003c/code\u003e block.\n    This style is less desirable because it is more verbose than opening a resource in front of a \u003ccode\u003etry\u003c/code\u003e block.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JDBCResource",
          "displayName": "JDBC resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JDBC resources that are not safely closed. JDBC resources reported\nby this inspection include \u003ccode\u003ejava.sql.Connection\u003c/code\u003e,\n\u003ccode\u003ejava.sql.Statement\u003c/code\u003e, \u003ccode\u003ejava.sql.PreparedStatement\u003c/code\u003e,\n\u003ccode\u003ejava.sql.CallableStatement\u003c/code\u003e, and \u003ccode\u003ejava.sql.ResultSet\u003c/code\u003e.\n\u003cp\u003e\n  By default, the inspection assumes that the resources can be closed by any method with\n  \u0027close\u0027 or \u0027cleanup\u0027 in its name.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ResultSet findAllElements(Connection connection) throws SQLException {\n    PreparedStatement statement \u003d connection.prepareStatement(\"SELECT * FROM TABLE\");//statement is not closed\n    statement.execute();\n    return statement.getResultSet();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Whether a JDBC resource is allowed to be opened inside a \u003ccode\u003etry\u003c/code\u003e\n    block. This style is less desirable because it is more verbose than opening a resource\n    in front of a \u003ccode\u003etry\u003c/code\u003e block.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ChannelResource",
          "displayName": "\u0027Channel\u0027 opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eChannel\u003c/code\u003e resources that are not safely closed, including any instances created by calling\n\u003ccode\u003egetChannel()\u003c/code\u003e on a file or socket resource.\n\u003cp\u003e\n  By default, the inspection assumes that the resources can be closed by any method with\n  \u0027close\u0027 or \u0027cleanup\u0027 in its name.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void send(Socket socket) throws IOException {\n    SocketChannel channel \u003d socket.getChannel(); //warning\n    channel.write(ByteBuffer.wrap(\"message\".getBytes()));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Whether a \u003ccode\u003eChannel\u003c/code\u003e resource is allowed to be opened inside a \u003ccode\u003etry\u003c/code\u003e\n    block. This style is less desirable because it is more verbose than opening a \u003ccode\u003eChannel\u003c/code\u003e\n    in front of a \u003ccode\u003etry\u003c/code\u003e block.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DriverManagerGetConnection",
          "displayName": "Use of \u0027DriverManager\u0027 to get JDBC connection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any uses of \u003ccode\u003ejava.sql.DriverManager\u003c/code\u003e\nto acquire a JDBC connection. \n\u003cp\u003e\n  \u003ccode\u003ejava.sql.DriverManager\u003c/code\u003e\n  has been superseded by \u003ccode\u003ejavax.sql.Datasource\u003c/code\u003e, which\n  allows for connection pooling and other optimizations.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  Connection conn \u003d DriverManager.getConnection(url, username, password);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AutoCloseableResource",
          "displayName": "AutoCloseable used without \u0027try\u0027-with-resources",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eAutoCloseable\u003c/code\u003e instances which are not used in a try-with-resources statement, also known as\n\u003ci\u003eAutomatic Resource Management\u003c/i\u003e.\n\u003cp\u003e\n  This means that the \"open resource before/in \u003ccode\u003etry\u003c/code\u003e, close in \u003ccode\u003efinally\u003c/code\u003e\" style that had been used before\n  try-with-resources became available, is also reported.\n  This inspection is meant to replace all \u003ci\u003eopened but not safely closed\u003c/i\u003e inspections when developing in Java 7 and higher.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  private static void foo() throws IOException {\n    InputStream profile \u003d Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/someFile\");\n    System.out.println(profile.read());\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    List subclasses of \u003ccode\u003eAutoCloseable\u003c/code\u003e that do not need to be closed and should be ignored by this inspection.\n    \u003cbr/\u003e\n    \u003cb\u003eNote\u003c/b\u003e: The inspection will still report streams returned from the \u003ccode\u003ejava.nio.file.Files\u003c/code\u003e methods \u003ccode\u003elines()\u003c/code\u003e,\n    \u003ccode\u003ewalk()\u003c/code\u003e, \u003ccode\u003elist()\u003c/code\u003e and \u003ccode\u003efind()\u003c/code\u003e,\n    even when \u003ccode\u003ejava.util.stream.Stream\u003c/code\u003e is listed to be ignored.\n    These streams contain an associated I/O resource that needs to be closed.\n  \u003c/li\u003e\n  \u003cli\u003e\n    List methods returning \u003ccode\u003eAutoCloseable\u003c/code\u003e that should be ignored when called.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether to ignore an \u003ccode\u003eAutoCloseable\u003c/code\u003e if it is the result of a method call.\n    When this option is enabled, the results of factory methods will also be ignored.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether the inspection should report if an \u003ccode\u003eAutoCloseable\u003c/code\u003e instance is passed as a method call argument.\n    If this option is enabled, the inspection assumes the resource is closed in the called method.\n    Method calls inside a \u003ccode\u003efinally\u003c/code\u003e block with \u0027close\u0027 in the name and an\n    \u003ccode\u003eAutoCloseable\u003c/code\u003e argument will not be ignored.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether to ignore method references to constructors of resource classes.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether to ignore methods that return a resource and whose name starts with \u0027get\u0027.\n    This can reduce false positives because most of the getters do not transfer the ownership of the resource,\n    and their call sites are not responsible for closing the resource.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JNDIResource",
          "displayName": "JNDI resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JNDI resources that are not safely closed. JNDI resources reported\nby this inspection include \u003ccode\u003ejavax.naming.InitialContext\u003c/code\u003e,\nand \u003ccode\u003ejavax.naming.NamingEnumeration\u003c/code\u003e.\n\u003cp\u003e\n  By default, the inspection assumes that the resources can be closed by any method with\n  \u0027close\u0027 or \u0027cleanup\u0027 in its name.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Object findObject(Properties properties, String name) throws NamingException {\n    Context context \u003d new InitialContext(properties); //context is not closed\n    return context.lookup(name);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Whether a JNDI Resource is allowed to be opened inside a \u003ccode\u003etry\u003c/code\u003e block.\n    This style is less desirable because it is more verbose than opening a resource in front of a \u003ccode\u003etry\u003c/code\u003e block.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Spring Boot",
      "inspections": [
        {
          "shortName": "SpringBootReactorHooksOnDebug",
          "displayName": "Suspicious Hooks.onOperatorDebug() usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.boot",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports the usage of \u003ccode\u003eHooks.onOperatorDebug()\u003c/code\u003e when \u003ccode\u003eReactorDebugAgent.init()\u003c/code\u003e is called.\u003c/p\u003e\n\u003cp\u003e\n  If \u003ccode\u003eReactorDebugAgent\u003c/code\u003e is in the classpath, and \u003ccode\u003espring.reactor.debug-agent.enabled\u003c/code\u003e\n  is \u003ccode\u003etrue\u003c/code\u003e (default value), \u003ccode\u003eReactorDebugAgent.init()\u003c/code\u003e is called automatically at startup.\n  Using both \u003ccode\u003eHooks.onOperatorDebug()\u003c/code\u003e and \u003ccode\u003eReactorDebugAgent.init()\u003c/code\u003e cause doubled debugging stack frames generated by Reactor.\n  Also, \u003ccode\u003eHooks.onOperatorDebug()\u003c/code\u003e can cause performance overhead.\n\u003c/p\u003e\n\n\u003cp\u003eThe quick-fix removes the invocation of \u003ccode\u003eHooks.onOperatorDebug()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public void hook() {\n    Hooks.onOperatorDebug(); // Reports \u0027Call Hooks.onOperatorDebug() while ReactorDebugAgent is initialized\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public void hook() {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only triggers when Spring Boot version for the project or module is 2.2.0 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringBootApplicationSetup",
          "displayName": "Invalid Spring Boot application setup",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring.boot",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003e@SpringBootApplication\u003c/code\u003e in the default package and redundant \u003ccode\u003e@EnableAutoConfiguration\u003c/code\u003e or \u003ccode\u003e@ComponentScan\u003c/code\u003e annotations.\u003c/p\u003e\n\u003cp\u003eThe quick-fix removes the redundant annotations.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n@SpringBootApplication\n@ComponentScan // Reports \u0027Redundant declaration: @SpringBootApplication already implies @ComponentScan\u0027\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @SpringBootApplication\n  public class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConfigurationProperties",
          "displayName": "Invalid @ConfigurationProperties",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring.boot",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports invalid prefixes defined in the \u003ccode\u003e@ConfigurationProperties\u003c/code\u003e annotations:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eMissing prefix\u003c/li\u003e\n  \u003cli\u003eEmpty prefix\u003c/li\u003e\n  \u003cli\u003eDuplicate prefix\u003c/li\u003e\n  \u003cli\u003ePrefix in notation other than kebab-case\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  The inspection triggers in classes that are annotated with \u003ccode\u003e@ConfigurationProperties\u003c/code\u003e and not registered via \u003ccode\u003e@EnableConfigurationProperties\u003c/code\u003e,\n  marked as Spring component, or scanned via \u003ccode\u003e@ConfigurationPropertiesScan\u003c/code\u003e.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  This inspection only triggers in classes annotated with \u003ccode\u003e@ConfigurationProperties\u003c/code\u003e that are not scanned via \u003ccode\u003e@ConfigurationPropertiesScan\u003c/code\u003e\n  when the Spring Boot version for the project or module is set to 2.2.0 or later.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringBootApplicationYaml",
          "displayName": "Invalid YAML configuration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.boot",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports unresolved and deprecated configuration keys and invalid values in Spring Boot application \u003ccode\u003e.yaml\u003c/code\u003e configuration files,\n  which can lead to runtime errors.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nserver:\n  port: invalid # Reports \u0027Cannot convert \u0027invalid\u0027 to java.lang.Integer\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf a deprecated configuration key has a replacement key, you can apply the \u0027Use replacement key\u0027 quick-fix.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nlogging:\n  path: ${path} # Reports \u0027Deprecated configuration property \u0027logging.path\u0027\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nlogging:\n  file:\n    path: ${path}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\n  If a configuration key is not defined in \u003ccode\u003espring-configuration-metadata.json\u003c/code\u003e, you can apply the \u0027Define configuration key\u0027 quick-fix\n  that creates the \u003ccode\u003eMETA-INF/spring-additional-configuration-metadata.json\u003c/code\u003e file and defines the necessary key.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nnew:\n  key: value # Reports \u0027Cannot resolve configuration property \u0027new.key\u0027\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied, the following is added to \u003ccode\u003eMETA-INF/spring-additional-configuration-metadata.json\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n{\n  \"properties\": [\n    {\n      \"name\": \"new.key\",\n      \"type\": \"java.lang.String\",\n      \"description\": \"Description for new.key.\"\n  }\n] }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eReplacement tokens\u003c/b\u003e option to define tokens used for value placeholders in configuration files.\n  These tokens are specified in the form \u003ccode\u003ebeginToken*endToken\u003c/code\u003e.\n  Without the \u003ccode\u003e*\u003c/code\u003e, the token is assumed to be the same for start and end.\n\u003c/p\u003e\n\u003cp\u003e\n  For example, the default is \u003ccode\u003e@\u003c/code\u003e for both start and end token,\n  which enables you to define placeholders, such as \u003ccode\u003esome.property\u003d@another.property@\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003eValues inside the replacement token (\u003ccode\u003e@property.key@\u003c/code\u003e) will not be highlighted.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringBootApplicationProperties",
          "displayName": "Invalid properties configuration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.boot",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports unresolved and deprecated configuration keys and invalid values in Spring Boot application \u003ccode\u003e.properties\u003c/code\u003e configuration files,\n  which can lead to runtime errors.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nserver.port\u003dinvalid # Reports \u0027Cannot convert \u0027invalid\u0027 to java.lang.Integer\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIf a deprecated configuration key has a replacement key, you can apply the \u0027Use replacement key\u0027 quick-fix.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nlogging.path\u003d${path} # Reports \u0027Deprecated configuration property \u0027logging.path\u0027\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nlogging.file.path\u003d${path}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\n  If a configuration key is not defined in \u003ccode\u003espring-configuration-metadata.json\u003c/code\u003e, you can apply the \u0027Define configuration key\u0027 quick-fix\n  that creates the \u003ccode\u003eMETA-INF/spring-additional-configuration-metadata.json\u003c/code\u003e file and defines the necessary key.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nnew.key\u003dvalue #Reports \u0027Cannot resolve configuration property \u0027new.key\u0027\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied, the following is added to \u003ccode\u003eMETA-INF/spring-additional-configuration-metadata.json\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n{\n  \"properties\": [\n    {\n      \"name\": \"new.key\",\n      \"type\": \"java.lang.String\",\n      \"description\": \"Description for new.key.\"\n  }\n] }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe inspection also highlights index notation errors in list and map configuration keys.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nspring.datasource.schema[]\u003d${schema} #Reports \u0027Missing index value\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003cp\u003e\n  Use the \u003cb\u003eReplacement tokens\u003c/b\u003e option to define tokens used for value placeholders in configuration files.\n  These tokens are specified in the form \u003ccode\u003ebeginToken*endToken\u003c/code\u003e.\n  Without the \u003ccode\u003e*\u003c/code\u003e, the token is assumed to be the same for start and end.\n\u003c/p\u003e\n\u003cp\u003e\n  For example, the default is \u003ccode\u003e@\u003c/code\u003e for both start and end token,\n  which enables you to define placeholders, such as \u003ccode\u003esome.property\u003d@another.property@\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003eValues inside the replacement token (\u003ccode\u003e@property.key@\u003c/code\u003e) will not be highlighted.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringBootAdditionalConfig",
          "displayName": "Invalid additional-spring-configuration-metadata.json",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring.boot",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports missing and deprecated properties, unresolved references, and invalid values\n  in the \u003ccode\u003eadditional-spring-configuration-metadata.json\u003c/code\u003e configuration file.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  {\n    \"properties\": [\n      {\n        \"name\": \"old.key\",\n        \"type\": \"com.Unknown\", // Reports \u0027Cannot resolve class \u0027Unknown\u0027\u0027\n        \"description\": \"Description for old.key\", // Reports \u0027Text should end with \u0027.\u0027\u0027\n        \"deprecation\": {\n          \"replacement\": \"new.key\", // Reports \u0027Cannot resolve configuration key reference \u0027new.key\u0027\u0027\n          \"reason\": \"Reason\", // Reports \u0027Text should end with \u0027.\u0027\u0027\n          \"level\": \"warning\"\n         }\n      },\n      {\n        \"name\": \"duplicate\", // Reports \u0027Duplicate entry for \u0027duplicate\u0027\u0027\n        \"type\": \"java.lang.String\"\n      },\n      {\n        \"name\": \"duplicate\", // Reports \u0027Duplicate entry for \u0027duplicate\u0027\u0027\n        \"type\": \"java.lang.String\"\n      },\n      {\n        // Reports \u0027Missing required \u0027name\u0027\u0027\n        \"type\": \"java.lang.String\"\n      }\n    ]\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Maven",
      "inspections": [
        {
          "shortName": "MavenCoroutinesDeprecation",
          "displayName": "Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Maven",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003cb\u003ekotlinx.coroutines\u003c/b\u003e library dependencies in Maven that should be updated in order\nto be compatible with Kotlin 1.3 and later.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "UselessCallOnCollection",
          "displayName": "Useless call on collection type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efilter…\u003c/code\u003e calls from the standard library on already filtered collections.\n\u003cp\u003eSeveral functions from the standard library such as \u003ccode\u003efilterNotNull()\u003c/code\u003e or \u003ccode\u003efilterIsInstance\u003c/code\u003e\n    have sense only when they are called on receivers that have types distinct from the resulting one. Otherwise,\n    such calls can be omitted as the result will be the same.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eRemove redundant call\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(list: List\u0026lt;String\u0026gt;) {\n      val x \u003d list.filterNotNull() // quick-fix simplifies to \u0027list\u0027\n      val y \u003d list.filterIsInstance\u0026lt;String\u0026gt;() // quick-fix simplifies to \u0027list\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SelfAssignment",
          "displayName": "Redundant assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignments of a variable to itself.\n\u003cp\u003eThe quick-fix removes the redundant assignment.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test() {\n      var bar \u003d 1\n      bar \u003d bar\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test() {\n      var bar \u003d 1\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ImplicitNullableNothingType",
          "displayName": "Implicit \u0027Nothing?\u0027 type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports variables and functions with the implicit \u003cb\u003eNothing?\u003c/b\u003e type.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() \u003d null\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix specifies the return type explicitly:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(): Nothing? \u003d null\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ForEachParameterNotUsed",
          "displayName": "Iterated elements are not used in forEach",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eforEach\u003c/code\u003e loops that do not use iterable values.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  listOf(1, 2, 3).forEach { }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix introduces anonymous parameter in the \u003ccode\u003eforEach\u003c/code\u003e section:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  listOf(1, 2, 3).forEach { _ -\u003e }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UselessCallOnNotNull",
          "displayName": "Useless call on not-null type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls on not-null receiver that make sense only for nullable receiver.\n\u003cp\u003eSeveral functions from the standard library such as \u003ccode\u003eorEmpty()\u003c/code\u003e or \u003ccode\u003eisNullOrEmpty\u003c/code\u003e\n    have sense only when they are called on receivers of nullable types. Otherwise, they can be omitted or simplified as the result will be the same.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eRemove redundant call\u003c/b\u003e and \u003cb\u003eChange call to …\u003c/b\u003e  quick-fixes can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(s: String) {\n      val x \u003d s.orEmpty() // quick-fix simplifies to \u0027s\u0027\n      val y \u003d s.isNullOrEmpty() // quick-fix simplifies to \u0027s.isEmpty()\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnusedDataClassCopyResult",
          "displayName": "Unused result of data class copy",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to data class \u003ccode\u003ecopy\u003c/code\u003e function without using its result.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "KotlinConstantConditions",
          "displayName": "Constant conditions",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-trivial conditions and values that are statically known to be always true, false, null or zero.\nWhile sometimes intended, often this is a sign of logical error in the program. Additionally,\nreports never reachable \u003ccode\u003ewhen\u003c/code\u003e branches and some expressions that are statically known to fail always.\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun process(x: Int?) {\n  val isNull \u003d x \u003d\u003d null\n  if (!isNull) {\n    if (\u003cspan style\u003d\"background: yellow\"\u003ex !\u003d null\u003c/span\u003e) {} // condition is always true\n    require(\u003cspan style\u003d\"background: yellow\"\u003ex!! \u0026lt; 0 \u0026\u0026 x \u0026gt; 10\u003c/span\u003e) // condition is always false\n  } else {\n    println(x\u003cspan style\u003d\"background: yellow\"\u003e!!\u003c/span\u003e) // !! operator will always fail\n  }\n}\nfun process(v: Any) {\n  when(v) {\n    is CharSequence -\u0026gt; println(v \u003cspan style\u003d\"background: yellow\"\u003eas\u003c/span\u003e Int) // cast will always fail\n    \u003cspan style\u003d\"background: yellow\"\u003eis String\u003c/span\u003e -\u0026gt; println(v) // branch is unreachable\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n    Uncheck the \"Warn when constant is stored in variable\" option to avoid reporting of variables having constant values not in conditions.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2021.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ArrayInDataClass",
          "displayName": "Array property in data class",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports properties with an \u003ccode\u003eArray\u003c/code\u003e type in a \u003ccode\u003edata\u003c/code\u003e class without overridden \u003ccode\u003eequals()\u003c/code\u003e or \u003ccode\u003ehashCode()\u003c/code\u003e.\n\u003cp\u003e\n    Array parameters are compared by reference equality, which is likely an unexpected behavior.\n    It is strongly recommended to override \u003ccode\u003eequals()\u003c/code\u003e and \u003ccode\u003ehashCode()\u003c/code\u003e in such cases.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class Text(val lines: Array\u0026lt;String\u0026gt;)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix generates missing \u003ccode\u003eequals()\u003c/code\u003e and \u003ccode\u003ehashCode()\u003c/code\u003e implementations:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class Text(val lines: Array\u0026lt;String\u0026gt;) {\n      override fun equals(other: Any?): Boolean {\n          if (this \u003d\u003d\u003d other) return true\n          if (javaClass !\u003d other?.javaClass) return false\n\n          other as Text\n\n          if (!lines.contentEquals(other.lines)) return false\n\n          return true\n      }\n\n      override fun hashCode(): Int {\n          return lines.contentHashCode()\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SuspiciousCollectionReassignment",
          "displayName": "Augmented assignment creates a new collection under the hood",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports augmented assignment (\u003ccode\u003e+\u003d\u003c/code\u003e) expressions on a read-only \u003ccode\u003eCollection\u003c/code\u003e.\n\u003cp\u003eAugmented assignment (\u003ccode\u003e+\u003d\u003c/code\u003e) expression on a read-only \u003ccode\u003eCollection\u003c/code\u003e temporarily allocates a new collection,\n    which may hurt performance.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eChange type to mutable\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test() {\n      var list \u003d listOf(0)\n      list +\u003d 42 // A new list is allocated here, equivalent to list \u003d list + 42\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test() {\n      val list \u003d mutableListOf(0)\n      list +\u003d 42\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ConvertNaNEquality",
          "displayName": "Convert equality check with \u0027NaN\u0027 to \u0027isNaN\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an equality check with \u003ccode\u003eFloat.NaN\u003c/code\u003e or \u003ccode\u003eDouble.NaN\u003c/code\u003e that should be replaced with an \u003ccode\u003eisNaN()\u003c/code\u003e check.\n\u003cp\u003e\n    According to IEEE 754, equality check against NaN always returns \u003ccode\u003efalse\u003c/code\u003e, even for \u003ccode\u003eNaN \u003d\u003d NaN\u003c/code\u003e.\n    Therefore, such a check is likely to be a mistake.\n\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces comparison with \u003ccode\u003eisNaN()\u003c/code\u003e check that uses a different comparison technique and handles \u003ccode\u003eNaN\u003c/code\u003e values correctly.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun check(value: Double): Boolean {\n      return Double.NaN \u003d\u003d value\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun check(value: Double): Boolean {\n      return value.isNaN()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "KotlinCovariantEquals",
          "displayName": "Covariant \u0027equals()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eequals()\u003c/code\u003e that takes an argument type other than \u003ccode\u003eAny?\u003c/code\u003e\nif the class does not have another \u003ccode\u003eequals()\u003c/code\u003e that takes \u003ccode\u003eAny?\u003c/code\u003e as its argument type.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n      fun equals(other: Foo?): Boolean {\n          return true\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the problem create \u003ccode\u003eequals()\u003c/code\u003e method that takes an argument of type \u003ccode\u003eAny?\u003c/code\u003e.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinEqualsBetweenInconvertibleTypes",
          "displayName": "\u0027equals()\u0027 between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eequals()\u003c/code\u003e where the receiver and the argument are\nof incompatible primitive, enum, or string types.\n\n\u003cp\u003eWhile such a call might theoretically be useful, most likely it represents a bug.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  5.equals(\"\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnusedEquals",
          "displayName": "Unused equals expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unused \u003ccode\u003eequals\u003c/code\u003e(\u003ccode\u003e\u003d\u003d\u003c/code\u003e) expressions.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "NonVarPropertyInExternalInterface",
          "displayName": "External interface contains val property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports not var properties in external interface. Read more in the \u003ca href\u003d\"https://kotlinlang.org/docs/js-ir-migration.html#convert-properties-of-external-interfaces-to-var\"\u003emigration guide\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinThrowableNotThrown",
          "displayName": "Throwable not thrown",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instantiations of \u003ccode\u003eThrowable\u003c/code\u003e or its subclasses, when the created \u003ccode\u003eThrowable\u003c/code\u003e\nis never actually thrown.\n\u003cp\u003eThe reported code indicates mistakes that are hard to catch in tests.\u003c/p\u003e\n\u003cp\u003e\n    Also, this inspection reports method calls that return instances of \u003ccode\u003eThrowable\u003c/code\u003e or its subclasses,\n    when the resulting \u003ccode\u003eThrowable\u003c/code\u003e instance is not thrown.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun check(condition: Boolean) {\n      if (!condition) /* throw is missing here */ IllegalArgumentException(\"condition is not met\");\n  }\n\n  fun createError() \u003d RuntimeException()\n\n  fun foo() {\n      /* throw is missing here */ createError()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DeferredResultUnused",
          "displayName": "\u0027@Deferred\u0027 result is unused",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports function calls with the \u003ccode\u003eDeferred\u003c/code\u003e result type if the return value is not used.\n\u003cp\u003eIf the \u003ccode\u003eDeferred\u003c/code\u003e return value is not used, the call site would not wait to complete this function.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun calcEverythingAsync() \u003d CompletableDeferred(42)\n\n  fun usage() {\n      calcEverythingAsync()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix provides a variable with the \u003ccode\u003eDeferred\u003c/code\u003e initializer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun calcEverythingAsync() \u003d CompletableDeferred(42)\n\n  fun usage() {\n      val answer \u003d calcEverythingAsync()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousCallableReferenceInLambda",
          "displayName": "Suspicious callable reference used as lambda result",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambda expressions with one callable reference.\n\u003cp\u003eIt is a common error to replace a lambda with a callable reference without changing curly braces to parentheses.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  listOf(1,2,3).map { it::toString }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  listOf(1,2,3).map(Int::toString)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SuspiciousVarProperty",
          "displayName": "Suspicious \u0027var\u0027 property: its setter does not influence its getter result",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003evar\u003c/code\u003e properties with default setter and getter that do not reference backing field.\n\u003cp\u003e\nSuch properties do not affect calling its setter; therefore, it will be clearer to change such property to \u003ccode\u003eval\u003c/code\u003e and delete the initializer.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eChange to val and delete initializer\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // This property always returns \u00271\u0027 and it doesn\u0027t important that the property is a \u0027var\u0027\n  var foo: Int \u003d 0\n      get() \u003d 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DataClassPrivateConstructor",
          "displayName": "Private data class constructor is exposed via the \u0027copy\u0027 method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the \u003ccode\u003eprivate\u003c/code\u003e primary constructor in data classes.\n\u003cp\u003e\n    \u003ccode\u003edata\u003c/code\u003e classes have a \u003ccode\u003ecopy()\u003c/code\u003e factory method that can be used similarly to a constructor.\n    A constructor should not be marked as \u003ccode\u003eprivate\u003c/code\u003e to provide enough safety.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class User private constructor(val name: String)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix changes the constructor visibility modifier to \u003ccode\u003epublic\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class User(val name: String)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KDocUnresolvedReference",
          "displayName": "Unresolved reference in KDoc",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references in KDoc comments.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n   * [unresolvedLink]\n   */\n  fun foo() {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the problem make the link valid.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MainFunctionReturnUnit",
          "displayName": "Main function should return \u0027Unit\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports when a main function does not have a return type of \u003ccode\u003eUnit\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003ccode\u003efun main() \u003d \"Hello world!\"\u003c/code\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "NonNullableBooleanPropertyInExternalInterface",
          "displayName": "External interface contains non-nullable boolean property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports non-nullable boolean properties in external interface. Read more in the \u003ca href\u003d\"https://kotlinlang.org/docs/js-ir-migration.html#make-boolean-properties-nullable-in-external-interfaces\"\u003emigration guide\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LeakingThis",
          "displayName": "Leaking \u0027this\u0027 in constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unsafe operations with \u003ccode\u003ethis\u003c/code\u003e during object construction including:\n\n\u003cul\u003e\n  \u003cli\u003eAccessing a non-final property during class initialization: from a constructor or property initialization\u003c/li\u003e\n  \u003cli\u003eCalling a non-final function during class initialization\u003c/li\u003e\n  \u003cli\u003eUsing \u003ccode\u003ethis\u003c/code\u003e as a function argument in a constructor of a non-final class\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\n    If other classes inherit from the given class,\n    they may not be fully initialized at the moment when an unsafe operation is carried out.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eabstract class\u003c/b\u003e Base {\n      \u003cb\u003eval\u003c/b\u003e code \u003d calculate()\n      \u003cb\u003eabstract fun\u003c/b\u003e calculate(): Int\n  }\n\n  \u003cb\u003eclass\u003c/b\u003e Derived(\u003cb\u003eprivate val\u003c/b\u003e x: Int) : Base() {\n      \u003cb\u003eoverride fun\u003c/b\u003e calculate() \u003d x\n  }\n\n  \u003cb\u003efun\u003c/b\u003e testIt() {\n      println(Derived(42).code) \u003ci\u003e// Expected: 42, actual: 0\u003c/i\u003e\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RecursiveEqualsCall",
          "displayName": "Recursive equals call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports recursive \u003ccode\u003eequals\u003c/code\u003e(\u003ccode\u003e\u003d\u003d\u003c/code\u003e) calls.\u003c/p\u003e\n\u003cp\u003e\n    In Kotlin, \u003ccode\u003e\u003d\u003d\u003c/code\u003e compares object values by calling \u003ccode\u003eequals\u003c/code\u003e method under the hood.\n    \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e, on the other hand, compares objects by reference.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e is commonly used in \u003ccode\u003eequals\u003c/code\u003e method implementation.\n    But \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e may be mistakenly mixed up with \u003ccode\u003e\u003d\u003d\u003c/code\u003e leading to infinite recursion.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X {\n      override fun equals(other: Any?): Boolean {\n          if (\u003cb\u003ethis \u003d\u003d other\u003c/b\u003e) return true\n          return false\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X {\n      override fun equals(other: Any?): Boolean {\n          if (\u003cb\u003ethis \u003d\u003d\u003d other\u003c/b\u003e) return true\n          return false\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "KotlinCatchMayIgnoreException",
          "displayName": "\u0027catch\u0027 block may ignore exception",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ecatch\u003c/code\u003e blocks that are empty or may ignore an exception.\n\u003cp\u003eWhile occasionally intended, empty \u003ccode\u003ecatch\u003c/code\u003e blocks may complicate debugging.\n    Also, ignoring a \u003ccode\u003ecatch\u003c/code\u003e parameter might be wrong.\u003c/p\u003e\n\n\u003cp\u003e\n    The inspection won\u0027t report any \u003ccode\u003ecatch\u003c/code\u003e parameters named \u003ccode\u003eignore\u003c/code\u003e, \u003ccode\u003eignored\u003c/code\u003e, or \u003ccode\u003e_\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n    You can use the quick-fix to change the exception name to \u003ccode\u003e_\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    throwingMethod()\n  } catch (ex: IOException) {\n\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    throwingMethod()\n  } catch (_: IOException) {\n\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\nUse the \u003cb\u003eDo not warn when \u0027catch\u0027 block contains a comment\u003c/b\u003e option to ignore \u003ccode\u003ecatch\u003c/code\u003e blocks with comments.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AmbiguousNonLocalJump",
          "displayName": "Ambiguous non-local \u0027break\u0027 or \u0027continue\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e usages inside of lambdas of loop-like functions.\n\u003cp\u003e\n    \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e keywords always apply to the real loops (\u003ccode\u003efor\u003c/code\u003e,\n    \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003edo-while\u003c/code\u003e). \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e never apply to any function; for example,\n    \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e don\u0027t apply to \u003ccode\u003eforEach\u003c/code\u003e, \u003ccode\u003efilter\u003c/code\u003e, \u003ccode\u003emap\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n    Using \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e inside a loop-like function (for example, \u003ccode\u003eforEach\u003c/code\u003e) may be confusing.\n    The inspection suggests adding a label to clarify to which statement \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e applies to.\n\u003c/p\u003e\n\u003cp\u003e\n    Since Kotlin doesn\u0027t have a concept of loop-like functions, the inspection uses the heuristic. It assumes that functions that don\u0027t\n    have one of \u003ccode\u003ecallsInPlace(EXACTLY_ONCE)\u003c/code\u003e or \u003ccode\u003ecallsInPlace(AT_LEAST_ONCE)\u003c/code\u003e contracts are loop-like functions.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    for (file in files) {\n        file.readLines().forEach { line -\u003e\n            if (line \u003d\u003d commentMarkerLine) continue\n            println(line)\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix adds clarifying labels:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    loop@ for (file in files) {\n        file.readLines().forEach { line -\u003e\n            if (line \u003d\u003d commentMarkerLine) continue@loop\n            println(line)\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CanSealedSubClassBeObject",
          "displayName": "Sealed subclass without state and overridden equals",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports direct inheritors of \u003ccode\u003esealed\u003c/code\u003e classes that have no state and overridden \u003ccode\u003eequals()\u003c/code\u003e method.\n\u003cp\u003eIt\u0027s highly recommended to override \u003ccode\u003eequals()\u003c/code\u003e to provide comparison stability, or convert the \u003ccode\u003eclass\u003c/code\u003e to an \u003ccode\u003eobject\u003c/code\u003e to reach the same effect.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  sealed class Receiver {\n      class Everyone : Receiver()\n      class User(val id: Int) : Receiver()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix converts a \u003ccode\u003eclass\u003c/code\u003e into an \u003ccode\u003eobject\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  sealed class Receiver {\n      object Everyone : Receiver()\n      class User(val id: Int) : Receiver()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnusedUnaryOperator",
          "displayName": "Unused unary operator",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unary operators for number types on unused expressions.\n\u003cp\u003eUnary operators break previous expression if they are used without braces.\nAs a result, mathematical expressions spanning multi lines can be misleading.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      val result \u003d 1 + 2 * 3\n                  + 3              // \u0026lt;\u003d\u003d note that \u0027+ 3\u0027 doesn\u0027t belong to the \u0027result\u0027 variable, it is unused\n      println(\"Result \u003d $result\")  // The result is \u00277\u0027 and not \u002710\u0027 as it might be expected\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LateinitVarOverridesLateinitVar",
          "displayName": "\u0027lateinit var\u0027 property overrides \u0027lateinit var\u0027 property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003elateinit var\u003c/code\u003e properties that override other \u003ccode\u003elateinit var\u003c/code\u003e properties.\n\u003cp\u003eA subclass instance will have two fields for a single property, and the one from the superclass will remain effectively unused.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    open class BaseClass {\n      open lateinit var name: String\n    }\n\n    class RealClass : BaseClass() {\n      override lateinit var name: String\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceArrayEqualityOpWithArraysEquals",
          "displayName": "Arrays comparison via \u0027\u003d\u003d\u0027 and \u0027!\u003d\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003e\u003d\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e operator for arrays that should be replaced with \u003ccode\u003econtentEquals()\u003c/code\u003e.\n\u003cp\u003e\n    The \u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003eoperators compare array references instead of their content.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun test() {\n      val a \u003d arrayOf(1, 2, 3)\n      val b \u003d arrayOf(1, 2, 3)\n      println(a \u003d\u003d b) // references comparison\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun test() {\n      val a \u003d arrayOf(1, 2, 3)\n      val b \u003d arrayOf(1, 2, 3)\n      println(a.contentEquals(b))\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DelegationToVarProperty",
          "displayName": "Delegating to \u0027var\u0027 property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports interface delegation to a \u003ccode\u003evar\u003c/code\u003e property.\n\u003cp\u003eOnly initial value of a property is used for delegation, any later assignments do not affect it.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Example(var text: CharSequence): CharSequence by text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix replaces a property with immutable one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Example(val text: CharSequence): CharSequence by text\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlternative way, if you rely on mutability for some reason:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Example(text: CharSequence): CharSequence by text {\n      var text \u003d text\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "DestructuringWrongName",
          "displayName": "Variable in destructuring declaration uses name of a wrong data class property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports entries of destructuring declarations that match the name of a different property of the destructured data class.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class Foo(val a: String, val b: Int, val c: String)\n\n  fun bar(f: Foo) {\n      val (a, c) \u003d f\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix changes variable\u0027s name to match the name of the corresponding class field:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class Foo(val a: String, val b: Int, val c: String)\n\n  fun bar(f: Foo) {\n      val (a, b) \u003d f\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SelfReferenceConstructorParameter",
          "displayName": "Constructor can never be complete",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports constructors with a non-null self-reference parameter.\n\u003cp\u003eSuch constructors never instantiate a class.\u003c/p\u003e\n\u003cp\u003eThe quick-fix converts the parameter type to nullable.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class SelfRef(val ref: SelfRef)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class SelfRef(val ref: SelfRef?)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnsafeCastFromDynamic",
          "displayName": "Implicit (unsafe) cast from dynamic type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions with a dynamic type in the specified inspection scope that are implicitly cast to another type.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "IncompleteDestructuring",
          "displayName": "Incomplete destructuring declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports incomplete destructuring declaration.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class Person(val name: String, val age: Int)\n  val person \u003d Person(\"\", 0)\n  val (name) \u003d person\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix completes destructuring declaration with new variables:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  data class Person(val name: String, val age: Int)\n  val person \u003d Person(\"\", 0)\n  val (name, age) \u003d person\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SuspendFunctionOnCoroutineScope",
          "displayName": "Ambiguous coroutineContext due to CoroutineScope receiver of suspend function",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls and accesses of \u003ccode\u003eCoroutineScope\u003c/code\u003e extensions or members inside suspend functions with \u003ccode\u003eCoroutineScope\u003c/code\u003e receiver.\n\u003cp\u003eWhen a function is \u003ccode\u003esuspend\u003c/code\u003e and has \u003ccode\u003eCoroutineScope\u003c/code\u003e receiver,\n    it has ambiguous access to \u003ccode\u003eCoroutineContext\u003c/code\u003e via \u003ccode\u003ekotlin.coroutines.coroutineContext\u003c/code\u003e and via \u003ccode\u003eCoroutineScope.coroutineContext\u003c/code\u003e,\n    and two these contexts are different in general.\u003c/p\u003e\n\u003cp\u003e\nTo improve this situation, one can wrap suspicious call inside \u003ccode\u003ecoroutineScope { ... }\u003c/code\u003e or\nget rid of \u003ccode\u003eCoroutineScope\u003c/code\u003e function receiver.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ControlFlowWithEmptyBody",
          "displayName": "Control flow with empty body",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003edo\u003c/code\u003e or \u003ccode\u003efor\u003c/code\u003e statements with empty bodies.\n\u003cp\u003eWhile occasionally intended, this construction is confusing and often the result of a typo.\u003c/p\u003e\n\u003cp\u003eThe quick-fix removes a statement.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (a \u0026gt; b) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EqualsOrHashCode",
          "displayName": "\u0027equals()\u0027 and \u0027hashCode()\u0027 not paired",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that override \u003ccode\u003eequals()\u003c/code\u003e but do not override \u003ccode\u003ehashCode()\u003c/code\u003e, or vice versa.\nIt also reports object declarations that override either \u003ccode\u003eequals()\u003c/code\u003e or \u003ccode\u003ehashCode()\u003c/code\u003e.\n\u003cp\u003eThis can lead to undesired behavior when a class is added to a \u003ccode\u003eCollection\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class C1 {\n      override fun equals(other: Any?) \u003d true\n  }\n\n  class C2 {\n      override fun hashCode() \u003d 0\n  }\n\n  object O1 {\n      override fun equals(other: Any?) \u003d true\n  }\n\n  object O2 {\n      override fun hashCode() \u003d 0\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix overrides \u003ccode\u003eequals()\u003c/code\u003e or \u003ccode\u003ehashCode()\u003c/code\u003e for classes and deletes these methods for objects:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n   class C1 {\n       override fun equals(other: Any?) \u003d true\n       override fun hashCode(): Int {\n           return javaClass.hashCode()\n       }\n   }\n\n   class C2 {\n       override fun hashCode() \u003d 0\n       override fun equals(other: Any?): Boolean {\n           if (this \u003d\u003d\u003d other) return true\n           if (javaClass !\u003d other?.javaClass) return false\n           return true\n       }\n   }\n\n   object O1 {\n   }\n\n   object O2 {\n   }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "WrapUnaryOperator",
          "displayName": "Ambiguous unary operator use with number constant",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unary operator followed by a dot qualifier such as \u003ccode\u003e-1.inc()\u003c/code\u003e.\n\u003cp\u003eCode like \u003ccode\u003e-1.inc()\u003c/code\u003e can be misleading because \u003ccode\u003e-\u003c/code\u003e has a lower precedence than \u003ccode\u003e.inc()\u003c/code\u003e.\n    As a result, \u003ccode\u003e-1.inc()\u003c/code\u003e evaluates to \u003ccode\u003e-2\u003c/code\u003e and not \u003ccode\u003e0\u003c/code\u003e as it might be expected.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eWrap unary operator and value with ()\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ConflictingExtensionProperty",
          "displayName": "Extension property conflicting with synthetic one",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports extension properties that conflict with synthetic ones that have been automatically produced from Java \u003ccode\u003eget\u003c/code\u003e or \u003ccode\u003eset\u003c/code\u003e methods.\n\u003cp\u003eSuch properties should be either removed or renamed to avoid breaking code by future changes in the compiler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix deletes an extention property.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val File.name: String\n      get() \u003d getName()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix adds the \u003ccode\u003e@Deprecated\u003c/code\u003e annotation:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Deprecated(\"Is replaced with automatic synthetic extension\", ReplaceWith(\"name\"), level \u003d DeprecationLevel.HIDDEN)\n  val File.name: String\n      get() \u003d getName()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RecursivePropertyAccessor",
          "displayName": "Recursive property accessor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n    Reports recursive property accessor calls which can end up with a \u003ccode\u003eStackOverflowError\u003c/code\u003e.\n    Such calls are usually confused with backing field access.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  var counter: Int \u003d 0\n      set(value) {\n          \u003cb\u003ecounter\u003c/b\u003e \u003d if (value \u003c 0) 0 else value\n      }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  var counter: Int \u003d 0\n      set(value) {\n          \u003cb\u003efield\u003c/b\u003e \u003d if (value \u003c 0) 0 else value\n      }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConvertObjectToDataObject",
          "displayName": "Convert \u0027object\u0027 to \u0027data object\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003eobject\u003c/code\u003e that can be converted to \u003ccode\u003edata object\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edata object\u003c/code\u003e auto-generates \u003ccode\u003etoString\u003c/code\u003e, \u003ccode\u003eequals\u003c/code\u003e and \u003ccode\u003ehashCode\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe inspection suggests to convert \u003ccode\u003eobject\u003c/code\u003e to \u003ccode\u003edata object\u003c/code\u003e in 3 cases:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003eWhen custom \u003ccode\u003etoString\u003c/code\u003e returns name of the class\u003c/li\u003e\n    \u003cli\u003eWhen \u003ccode\u003eobject\u003c/code\u003e inherits sealed \u003ccode\u003eclass\u003c/code\u003e/\u003ccode\u003einterface\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    object Foo {\n        override fun toString(): String \u003d \"Foo\"\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    data object Foo\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is 1.9 or higher\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SetterBackingFieldAssignment",
          "displayName": "Existing backing field without assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports property setters that don\u0027t update the backing field.\n\u003cp\u003eThe quick-fix adds an assignment to the backing field.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Test {\n      var foo: Int \u003d 1\n          set(value) {\n          }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Test {\n      var foo: Int \u003d 1\n          set(value) {\n              field \u003d value\n          }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousEqualsCombination",
          "displayName": "Suspicious combination of \u003d\u003d and \u003d\u003d\u003d",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e comparisons that are both used on the same variable within a single expression.\n\u003cp\u003eDue to similarities \u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e could be mixed without notice, and\n    it takes a close look to check that \u003ccode\u003e\u003d\u003d\u003c/code\u003e used instead of \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (type \u003d\u003d\u003d FIELD || type \u003d\u003d METHOD || type \u003d\u003d ANNOTATION_METHOD || // Note that \"\u003d\u003d\" is used incorrectly\n      type \u003d\u003d\u003d LAMBDA_EXPRESSION) return\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnusedLambdaExpressionBody",
          "displayName": "Unused return value of a function with lambda expression body",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls with an unused return value when the called function returns a lambda from an expression body.\n\u003cp\u003e\nIf there is \u003ccode\u003e\u003d\u003c/code\u003e between function header and body block,\ncode from the function will not be evaluated which can lead to incorrect behavior.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eRemove \u003d token from function declaration\u003c/b\u003e can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun printHello() \u003d { println(\"Hello\") }\n\n  fun main() {\n      printHello() // This function doesn\u0027t print anything\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun printHello() { println(\"Hello\") }\n\n  fun main() {\n      printHello()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EmptyRange",
          "displayName": "Range with start greater than endInclusive is empty",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports ranges that are empty because the \u003ccode\u003estart\u003c/code\u003e value is greater than the \u003ccode\u003eendInclusive\u003c/code\u003e value.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val range \u003d 2..1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix changes the \u003ccode\u003e..\u003c/code\u003e operator to \u003ccode\u003edownTo\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val range \u003d 2 downTo 1\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "ES2015 migration aids",
      "inspections": [
        {
          "shortName": "ES6ConvertLetToConst",
          "displayName": "\u0027let\u0027 is used instead of \u0027const\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003elet\u003c/code\u003e declaration that can be made \u003ccode\u003econst\u003c/code\u003e.\u003cbr/\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6ConvertVarToLetConst",
          "displayName": "\u0027var\u0027 is used instead of \u0027let\u0027 or \u0027const\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003evar\u003c/code\u003e declaration that is used instead of \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e.\u003cbr/\u003e\nBoth \u003ccode\u003elet\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e are block-scoped and behave more strictly.\n\u003cbr/\u003e\u003cbr/\u003e\nSuggests replacing all \u003ccode\u003evar\u003c/code\u003e declarations with \u003ccode\u003elet\u003c/code\u003e or \u003ccode\u003econst\u003c/code\u003e declarations, depending on the semantics of a particular  value.\nThe declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.\n\u003cbr/\u003eSelect the \u0027Conservatively convert var with Fix all action\u0027 option to prevent any changes in these complex cases when using the \u0027Fix all\u0027 action.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6ConvertToForOf",
          "displayName": "\u0027for..in\u0027 is used instead of \u0027for..of\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of a \u003ccode\u003e\u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\"\u003efor..in\u003c/a\u003e\u003c/code\u003e\nloop on an array. Suggests replacing it with a \u003ccode\u003e\u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003efor..of\u003c/a\u003e\u003c/code\u003e loop.\n\u003cbr/\u003e\u003ccode\u003efor..of\u003c/code\u003e loops, which are introduced in ECMAScript 6, iterate over \u003ccode\u003eiterable\u003c/code\u003e objects.\nFor arrays, this structure is preferable to \u003ccode\u003efor..in\u003c/code\u003e, because it works only with array values but not with array object\u0027s properties.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6ConvertRequireIntoImport",
          "displayName": "\u0027require()\u0027 is used instead of \u0027import\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003erequire()\u003c/code\u003e statement. Suggests converting  it to a \u003ccode\u003erequire()\u003c/code\u003e call with an \u003ccode\u003eimport\u003c/code\u003e statement.\n\u003cbr/\u003e\u003cbr/\u003e\nEnable \u0027Convert require() inside inner scopes with Fix all action\u0027\nto convert all \u003ccode\u003erequire()\u003c/code\u003e calls inside the nested functions and statements when using the \u0027Fix all\u0027 action.\n\u003cbr/\u003e\u003cbr/\u003e\nPlease note that converting \u003ccode\u003erequire()\u003c/code\u003e statements inside inner scopes to \u003ccode\u003eimport\u003c/code\u003e statements\nmay cause changes in the semantics of the code.\nImport statements are static module dependencies and are hoisted,\nwhich means that they are moved to the top of the current module. \u003ccode\u003erequire()\u003c/code\u003e calls load modules dynamically.\nThey can be executed conditionally, and their scope is defined by the expression in which they are used.\n\u003cbr/\u003eClear the \u0027Convert require() inside inner scopes with Fix all action\u0027 checkbox to prevent any changes in these complex cases when using the \u0027Fix all\u0027 action.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSStringConcatenationToES6Template",
          "displayName": "String concatenation is used instead of template literal",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a string concatenation. Suggests replacing it with a  \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"\u003etemplate literal\u003c/a\u003e\n\u003cp\u003eExample\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e \"result: \" + a + \".\" \u003c/code\u003e\u003c/pre\u003e\n \u003cp\u003eAfter applying the quick-fix the code looks as follows:\u003c/p\u003e\n \u003cpre\u003e\u003ccode\u003e `result: ${a}.` \u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSFunctionExpressionToArrowFunction",
          "displayName": "Function expression is used instead of arrow function",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003eReports a \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function\"\u003efunction\u003c/a\u003e expression.\nSuggests converting it to an \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\"\u003earrow function\u003c/a\u003e.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earr.map(function(el) {return el + 1})\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter applying the quick-fix the code looks as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003earr.map(el \u003d\u003e el + 1)\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6ConvertModuleExportToExport",
          "displayName": "\u0027module.exports\u0027 is used instead of \u0027export\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003emodule.export\u003c/code\u003e statement. Suggests replacing it with an \u003ccode\u003eexport\u003c/code\u003e or \u003ccode\u003eexport default\u003c/code\u003e statement.\n\u003cbr/\u003e\u003cbr/\u003e\nPlease note that the quick-fix for converting \u003ccode\u003emodule.export\u003c/code\u003e into \u003ccode\u003eexport\u003c/code\u003e is not available for \u003ccode\u003emodule.export\u003c/code\u003e inside functions or statements because \u003ccode\u003eexport\u003c/code\u003e statements can only be at the top level of a module.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6ConvertIndexedForToForOf",
          "displayName": "Indexed \u0027for\u0027 is used instead of \u0027for..of\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an indexed \u003ccode\u003e\u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\"\u003efor\u003c/a\u003e\u003c/code\u003e\nloop used on an array. Suggests replacing it with a \u003ccode\u003e\u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\"\u003efor..of\u003c/a\u003e\u003c/code\u003e loop.\n\u003cbr/\u003e\u003ccode\u003efor..of\u003c/code\u003e loops are introduced in ECMAScript 6 and iterate over \u003ccode\u003eiterable\u003c/code\u003e objects.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Validity issues",
      "inspections": [
        {
          "shortName": "FunctionWithInconsistentReturnsJS",
          "displayName": "Function with inconsistent returns",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function that returns a value in\nsome cases while in other cases no value is returned. This usually indicates an error.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfunction foo() {\n  if (true)\n    return 3;\n  return;\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSOctalInteger",
          "displayName": "Octal integer",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a deprecated octal integer literal prefixed with \u003ccode\u003e0\u003c/code\u003e instead of \u003ccode\u003e0o\u003c/code\u003e.\u003cbr/\u003e\nSuch literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.\u003cbr/\u003e\nTo force this inspection for ES5 and ES3 language levels, select the \u0027Warn about obsolete octal literals in ES5- code\u0027 checkbox below.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThisExpressionReferencesGlobalObjectJS",
          "displayName": "\u0027this\u0027 expression which references the global object",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003ethis\u003c/code\u003e expression outside an object literal or a constructor body.  Such \u003ccode\u003ethis\u003c/code\u003e\nexpressions reference the top-level \"global\" JavaScript object, \nbut are mostly useless.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringLiteralBreaksHTMLJS",
          "displayName": "String literal which breaks HTML parsing",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a string literal that contains a \u003ccode\u003e\u0026lt;/\u003c/code\u003e sequence.  Such strings\nmay result in incorrect parsing of any HTML in which the JavaScript code is embedded.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSConstantReassignment",
          "displayName": "Attempt to assign to const or readonly variable",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports reassigning a value to a constant or a readonly variable.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BadExpressionStatementJS",
          "displayName": "Expression statement which is not assignment or call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an expression statement that is neither an assignment nor a call.\nSuch statements usually indicate an error.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReservedWordUsedAsNameJS",
          "displayName": "Reserved word used as name",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a JavaScript reserved word used as a name.  The JavaScript specification\nreserves a number of words which are currently not used as keywords.  Using those words as identifiers may\nresult in broken code if later versions of JavaScript start using them as keywords.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java 15",
      "inspections": [
        {
          "shortName": "TextBlockBackwardMigration",
          "displayName": "Text block can be replaced with regular string literal",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports text blocks that can be replaced with regular string literals.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Object obj \u003d engine.eval(\"\"\"\n                           function hello() {\n                             print(\u0027\"Hello, world\"\u0027);\n                           }\n\n                           hello();\n                           \"\"\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Object obj \u003d engine.eval(\"function hello() {\\n\" +\n                           \"  print(\u0027\\\"Hello, world\\\"\u0027);\\n\" +\n                           \"}\\n\" +\n                           \"\\n\" +\n                           \"hello();\\n\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ci\u003eText block\u003c/i\u003e appeared in Java 15.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TextBlockMigration",
          "displayName": "Text block can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eString\u003c/code\u003e concatenations that can be simplified by replacing them with text blocks.\n\u003cp\u003eRequirements:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e\\n\u003c/code\u003e occurs two or more times.\u003c/li\u003e\n  \u003cli\u003eText blocks are not concatenated.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nUse the \u003cb\u003eApply to single string literals\u003c/b\u003e option to suggest the fix for single literals containing line breaks.\n\u003cp\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String html \u003d \"\u0026lt;html\u0026gt;\\n\" +\n                \"    \u0026lt;body\u0026gt;\\n\" +\n                \"        \u0026lt;p\u0026gt;Hello, world\u0026lt;/p\u0026gt;\\n\" +\n                \"    \u0026lt;/body\u0026gt;\\n\" +\n                \"\u0026lt;/html\u0026gt;\\n\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String html \u003d \"\"\"\n                \u0026lt;html\u0026gt;\n                    \u0026lt;body\u0026gt;\n                        \u0026lt;p\u0026gt;Hello, world\u0026lt;/p\u0026gt;\n                    \u0026lt;/body\u0026gt;\n                \u0026lt;/html\u0026gt;\n                \"\"\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 15 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Spring Cloud Stream",
      "inspections": [
        {
          "shortName": "SpringCloudStreamInconsistencyInspection",
          "displayName": "Stream handler method error",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.cloud",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports inconsistency errors in stream handler methods.\u003c/p\u003e\n\u003cp\u003e\n  Input and output stream handler methods annotated with \u003ccode\u003e@StreamListener\u003c/code\u003e or \u003ccode\u003e@StreamEmitter\u003c/code\u003e have various constraints.\n  Violation of the constraints results in errors at runtime.\n\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Channel defined in \u003ccode\u003e@StreamListener\u003c/code\u003e \u003ccode\u003evalue\u003c/code\u003e attribute may never be combined with\n    method parameters annotated with \u003ccode\u003e@Input\u003c/code\u003e or \u003ccode\u003e@Output\u003c/code\u003e\n  \u003c/li\u003e\n  \u003cli\u003eAn input channel must be specified for a method annotated with \u003ccode\u003e@StreamListener\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eAn output channel must be specified for a method that can return a value\u003c/li\u003e\n  \u003cli\u003eAn output channel cannot be specified for a method that does not return a value\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e@StreamListener\u003c/code\u003e \u003ccode\u003econdition\u003c/code\u003e attribute cannot be set for methods that return a value\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringCloudStreamMessageChannelInspection",
          "displayName": "Unresolved message channel",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.cloud",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved channel attributes in \u003ccode\u003e@StreamListener\u003c/code\u003e, \u003ccode\u003e@SendTo\u003c/code\u003e, \u003ccode\u003e@Output\u003c/code\u003e, and \u003ccode\u003e@Input\u003c/code\u003e annotations.\u003c/p\u003e\n\u003cp\u003eUsing invalid binding name results in \u0027bean not found\u0027 error at runtime.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @EnableBinding(Sink.class)\n  public class LogSource {\n    @StreamListener(Sink.class)\n\t  public void log1() {\n    }\n\n    @StreamListener(\"invalid\")  // Reports \u0027Cannot find channel\u0027\n\t  public void log2() {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "HTTP Client",
      "inspections": [
        {
          "shortName": "IncorrectHttpHeaderInspection",
          "displayName": "Incorrect HTTP header",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.restClient",
          "pluginVersion": "231.9011.34",
          "language": "HTTP Request",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports unknown HTTP headers that do not match any \u003ca href\u003d\"https://www.iana.org/assignments/message-headers/message-headers.xml\"\u003epublicly\n  known headers\u003c/a\u003e. The quick fix suggests adding the header to the list of custom headers when the \u003cb\u003eUse custom HTTP headers\u003c/b\u003e option\n  is enabled. HTTP headers from the list of custom headers will not trigger the inspection.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HttpClientUnresolvedVariable",
          "displayName": "Unresolved environment variable",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.restClient",
          "pluginVersion": "231.9011.34",
          "language": "HTTP Request",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports variables undeclared in the current environment HTTP Client.\u003c/p\u003e\n\u003cp\u003e\n  Executing requests with undeclared variables probably fail.\n  Consider adding a variable to the environment or selecting an environment with this variable.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eInspection doesn\u0027t report variables in request bodies, because it can be a valid syntax of the body.\u003c/p\u003e\n\u003cp\u003e\n  Some variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via\n  \u003ccode\u003eclient.global.set\u003c/code\u003e or \u003ccode\u003erequest.variables.set\u003c/code\u003e functions call.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HttpRequestContentLengthIsIgnored",
          "displayName": "Redundant \u0027Content-Length\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.restClient",
          "pluginVersion": "231.9011.34",
          "language": "HTTP Request",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an explicitly set \u003ccode\u003eContent-Length\u003c/code\u003e header. The header is redundant because HTTP Client uses the actual request body length.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HttpRequestPlaceholder",
          "displayName": "\u0027$placeholder\u0027 in HTTP Request",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.restClient",
          "pluginVersion": "231.9011.34",
          "language": "HTTP Request",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003e$placeholder\u003c/code\u003e inside a request. \n\u003cp\u003eA \u003ccode\u003e$placeholder\u003c/code\u003e to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping \u003ccode\u003e/aaaa/*/bbb\u003c/code\u003e will be generated as \u003ccode\u003eGET localhost/aaaa/{{$placeholder}}/bbb\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HttpRequestWhitespaceInsideRequestTargetPath",
          "displayName": "Whitespace in URL",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.restClient",
          "pluginVersion": "231.9011.34",
          "language": "HTTP Request",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nHighlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Other problems",
      "inspections": [
        {
          "shortName": "MigrateDiagnosticSuppression",
          "displayName": "Diagnostic name should be replaced",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports suppressions with old diagnostic names, for example \u003ccode\u003e@Suppress(\"HEADER_WITHOUT_IMPLEMENTATION\")\u003c/code\u003e.\n\u003cp\u003e\n    Some of diagnostics from Kotlin 1.2 and earlier are now obsolete, making such suppressions redundant.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n@Suppress(\"HEADER_DECLARATION_WITH_BODY\")\nexpect fun connection() {\n  // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n@Suppress(\"EXPECTED_DECLARATION_WITH_BODY\")\nexpect fun connection() {\n  // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FloatingPointLiteralPrecision",
          "displayName": "Floating-point literal exceeds the available precision",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports floating-point literals that cannot be represented with the required precision\nusing \u003ca href\u003d\"https://en.wikipedia.org/wiki/IEEE_754\"\u003eIEEE 754\u003c/a\u003e \u003ccode\u003eFloat\u003c/code\u003e and \u003ccode\u003eDouble\u003c/code\u003e types.\n\n\u003cp\u003e\n    For example, \u003ccode\u003e1.9999999999999999999\u003c/code\u003e has too many significant digits,\n    so its representation as a \u003ccode\u003eDouble\u003c/code\u003e will be rounded to \u003ccode\u003e2.0\u003c/code\u003e.\n    Specifying excess digits may be misleading as it hides the fact that computations\n    use rounded values instead.\n\u003c/p\u003e\n\n\u003cp\u003e\n    The quick-fix replaces the literal with a rounded value that matches the actual representation\n    of the constant.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val x: Float \u003d 3.14159265359f\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val x: Float \u003d 3.1415927f\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ConvertArgumentToSet",
          "displayName": "Argument could be converted to \u0027Set\u0027 to improve performance",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nDetects the function calls that could work faster with an argument converted to \u003ccode\u003eSet\u003c/code\u003e.\n\n\u003cp\u003e\n    Operations like \u0027minus\u0027 or \u0027intersect\u0027 are more effective when their argument is a set.\n    An explicit conversion of an \u003ccode\u003eIterable\u0026lt;T\u0026gt;\u003c/code\u003e or an \u003ccode\u003eArray\u0026lt;T\u0026gt;\u003c/code\u003e\n    into a \u003ccode\u003eSet\u0026lt;T\u0026gt;\u003c/code\u003e can often make code more effective.\n\u003c/p\u003e\n\n\u003cp\u003e\n    The quick-fix adds an explicit conversion to the function call.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun \u0026lt;T\u0026gt; f(a: Iterable\u0026lt;T\u0026gt;, b: Iterable\u0026lt;T\u0026gt;): Int \u003d\n      a.intersect(b).size\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun \u0026lt;T\u0026gt; f(a: Iterable\u0026lt;T\u0026gt;, b: Iterable\u0026lt;T\u0026gt;): Int \u003d\n      a.intersect(b.toSet()).size\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PublicApiImplicitType",
          "displayName": "Public API declaration with implicit return type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n    Reports \u003ccode\u003epublic\u003c/code\u003e and \u003ccode\u003eprotected\u003c/code\u003e functions and properties that have an implicit return type.\n    For API stability reasons, it\u0027s recommended to specify such types explicitly.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun publicFunctionWhichAbusesTypeInference() \u003d\n      otherFunctionWithNotObviousReturnType() ?: yetAnotherFunctionWithNotObviousReturnType()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun publicFunctionWhichAbusesTypeInference(): \u003cb\u003eApi\u003c/b\u003e \u003d\n      otherFunctionWithNotObviousReturnType() ?: yetAnotherFunctionWithNotObviousReturnType()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "KDocMissingDocumentation",
          "displayName": "Missing KDoc comments for public declarations",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports public declarations that do not have KDoc comments.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix generates the comment block above the declaration:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n   *\n   */\n  class A\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EnumValuesSoftDeprecateInJava",
          "displayName": "\u0027Enum.values()\u0027 is recommended to be replaced by \u0027Enum.getEntries()\u0027 since Kotlin 1.9",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003evalues()\u003c/code\u003e method of Kotlin enum classes from Java that can be replaced with \u003ccode\u003egetEntries()\u003c/code\u003e.\n\u003cp\u003e\n    Use of \u003ccode\u003eEnum.getEntries()\u003c/code\u003e may improve performance of your code.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eMore details:\u003c/b\u003e \u003ca href\u003d\"https://youtrack.jetbrains.com/issue/KT-48872\"\u003e\n    KT-48872 Provide modern and performant replacement for Enum.values()\u003c/a\u003e\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "DeprecatedCallableAddReplaceWith",
          "displayName": "@Deprecated annotation without \u0027replaceWith\u0027 argument",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports deprecated functions and properties that do not have the \u003ccode\u003ekotlin.ReplaceWith\u003c/code\u003e argument in its\n\u003ccode\u003ekotlin.deprecated\u003c/code\u003e annotation and suggests to add one based on their body.\n\u003cp\u003e\n    Kotlin provides the \u003ccode\u003eReplaceWith\u003c/code\u003e argument to replace deprecated declarations automatically.\n    It is recommended to use the argument to fix deprecation issues in code.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Deprecated(\"Use refined() instead.\")\n  fun deprecated() \u003d refined()\n\n  fun refined() \u003d 42\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix adds the \u003ccode\u003eReplaceWith()\u003c/code\u003e argument:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Deprecated(\"Use refined() instead.\", ReplaceWith(\"refined()\"))\n  fun deprecated() \u003d refined()\n\n  fun refined() \u003d 42\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceWithStringBuilderAppendRange",
          "displayName": "\u0027StringBuilder.append(CharArray, offset, len)\u0027 call on the JVM",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003eStringBuilder.append(CharArray, offset, len)\u003c/code\u003e function call on the JVM platform that should be replaced with a \u003ccode\u003eStringBuilder.appendRange(CharArray, startIndex, endIndex)\u003c/code\u003e function call.\n\u003cp\u003eThe \u003ccode\u003eappend\u003c/code\u003e function behaves differently on the JVM, JS and Native platforms, so using the \u003ccode\u003eappendRange\u003c/code\u003e function is recommended.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun f(charArray: CharArray, offset: Int, len: Int): String {\n      return buildString {\n          append(charArray, offset, len)\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun f(charArray: CharArray, offset: Int, len: Int): String {\n      return buildString {\n          appendRange(charArray, offset, offset + len)\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EnumValuesSoftDeprecate",
          "displayName": "\u0027Enum.values()\u0027 is recommended to be replaced by \u0027Enum.entries\u0027 since 1.9",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003evalues()\u003c/code\u003e method in enum classes from Kotlin that can be replaced with \u003ccode\u003eentries\u003c/code\u003e property read.\n\u003cp\u003e\n    Use of \u003ccode\u003eEnum.entries\u003c/code\u003e may improve performance of your code.\n\u003c/p\u003e\n\u003cp\u003e\n    The quick-fix replaces \u003ccode\u003evalues()\u003c/code\u003e with \u003ccode\u003eentries\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eMore details:\u003c/b\u003e \u003ca href\u003d\"https://youtrack.jetbrains.com/issue/KT-48872\"\u003e\n    KT-48872 Provide modern and performant replacement for Enum.values()\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eNote:\u003c/b\u003e \u003ccode\u003eentries\u003c/code\u003e property type is different from the return type of \u003ccode\u003evalues()\u003c/code\u003e method\n    (\u003ccode\u003eEnumEntries\u0026lt;T\u0026gt;\u003c/code\u003e which inherits from \u003ccode\u003eList\u0026lt;T\u0026gt;\u003c/code\u003e instead of \u003ccode\u003eArray\u0026lt;T\u0026gt;\u003c/code\u003e).\n    Due to this in some cases quick fix inserts extra \u003ccode\u003e.toTypedArray()\u003c/code\u003e conversion to not break the code, but\n    for most common cases replacement will be done without it (e.g. in \u003ccode\u003efor\u003c/code\u003e loop).\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    enum class Version {\n        V1, V2\n    }\n\n    Version.\u003cb\u003evalues()\u003c/b\u003e.forEach { /* .. */ }\n    val firstVersion \u003d Version.\u003cb\u003evalues()\u003c/b\u003e[0]\n    functionExpectingArray(Version.\u003cb\u003evalues()\u003c/b\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    enum class Version {\n        V1, V2\n    }\n\n    Version.\u003cb\u003eentries\u003c/b\u003e.forEach { /* .. */ }\n    val firstVersion \u003d Version.\u003cb\u003eentries\u003c/b\u003e[0]\n    functionExpectingArray(Version.\u003cb\u003eentries.toTypedArray()\u003c/b\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantEmptyInitializerBlock",
          "displayName": "Redundant empty initializer block",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant empty initializer blocks.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n      init {\n          // Empty init block\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceWithEnumMap",
          "displayName": "\u0027HashMap\u0027 can be replaced with \u0027EnumMap\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ehashMapOf\u003c/code\u003e function or \u003ccode\u003eHashMap\u003c/code\u003e constructor calls that can be replaced with an \u003ccode\u003eEnumMap\u003c/code\u003e constructor call.\n\u003cp\u003eUsing \u003ccode\u003eEnumMap\u003c/code\u003e constructor makes your code simpler.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the function call with the \u003ccode\u003eEnumMap\u003c/code\u003e constructor call.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum class E {\n      A, B\n  }\n\n  fun getMap(): Map\u0026lt;E, String\u0026gt; \u003d hashMapOf()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum class E {\n      A, B\n  }\n\n  fun getMap(): Map\u0026lt;E, String\u0026gt; \u003d EnumMap(E::class.java)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Docker-compose",
      "inspections": [
        {
          "shortName": "ComposeUnquotedPorts",
          "displayName": "Unquoted port mappings",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Docker",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unquoted port mappings in Docker Compose files.\u003c/p\u003e\n\u003cp\u003e\n  According to the \u003ca href\u003d\"https://docs.docker.com/compose/compose-file/compose-file-v3/#short-syntax-1\"\u003eCompose file specification\u003c/a\u003e,\n  mapping ports in the \u003ccode\u003eHOST:CONTAINER\u003c/code\u003e format may lead to erroneous results when using a container port lower than 60,\n  because YAML parses numbers in the format \u003ccode\u003exx:yy\u003c/code\u003e as a base-60 value.\n  For this reason, we recommend always explicitly specifying the port mappings as strings.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ports:\n    - 3000\n    - 3000-3005\n    - 22:22\n    - 8080:8080\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ports:\n    - \"3000\"\n    - \"3000-3005\"\n    - \"22:22\"\n    - \"8080:8080\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ComposeUnknownKeys",
          "displayName": "Unknown docker-compose YAML keys",
          "defaultSeverity": "ERROR",
          "pluginId": "Docker",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unrecognized keys in Docker Compose files.\n\u003cbr\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ComposeUnknownValues",
          "displayName": "Unknown docker-compose YAML values",
          "defaultSeverity": "ERROR",
          "pluginId": "Docker",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unrecognized values in Docker Compose files.\n\u003cbr\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ComposeMissingKeys",
          "displayName": "Missing docker-compose YAML keys",
          "defaultSeverity": "ERROR",
          "pluginId": "Docker",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports missing required keys in Docker Compose files.\n\u003cbr\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Ant",
      "inspections": [
        {
          "shortName": "AntDuplicateTargetsInspection",
          "displayName": "Duplicate targets",
          "defaultSeverity": "ERROR",
          "pluginId": "AntSupport",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd valign\u003d\"top\"\u003e\n        Reports duplicate \u003ccode\u003etargets\u003c/code\u003e in\n        the current build file.\n      \u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AntMissingPropertiesFileInspection",
          "displayName": "Missing properties file",
          "defaultSeverity": "ERROR",
          "pluginId": "AntSupport",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd valign\u003d\"top\"\u003e\n        Reports missing .properties files.\n      \u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AntResolveInspection",
          "displayName": "Ant references resolve problems",
          "defaultSeverity": "ERROR",
          "pluginId": "AntSupport",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003ctd valign\u003d\"top\"\u003e\n      Reports unresolved references on properties and custom type definitions that cannot be resolved.\n    \u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Maven",
      "inspections": [
        {
          "shortName": "MavenDuplicatePluginInspection",
          "displayName": "Duplicate plugin declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports the duplication of the plugin declaration in pom.xml\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MavenDuplicateDependenciesInspection",
          "displayName": "Duplicate Dependencies",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports duplicate dependencies\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MavenParentMissedVersionInspection",
          "displayName": "Parent version missed",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports the absence of the parent version element for versions that do not support consumer POM feature\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MavenModelInspection",
          "displayName": "Maven Model Inspection",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports resolution problems in a Maven model\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MavenRedundantGroupId",
          "displayName": "Redundant groupId",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports the unnecessary \u0026lt;groupId\u0026gt; definition since it is already defined in the parent pom.xml\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MavenPropertyInParent",
          "displayName": "Usage of properties in parent description",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports that the usage of properties in modules parent definition is prohibited\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Shrinker",
      "inspections": [
        {
          "shortName": "ShrinkerInnerClassSeparator",
          "displayName": "Invalid separator between class and inner class",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "SHRINKER_CONFIG",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports invalid separator between class and inner class in Shrinker config.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ShrinkerArrayType",
          "displayName": "Invalid using of array type",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "SHRINKER_CONFIG",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports incorrect usage of array type notation.\n  \u003cbr\u003e\n  \u003ccode\u003etype[]\u003c/code\u003e should be used for array type, without any spaces.\n  \u003cbr\u003e\n  \u003cbr\u003e\n  Example: \u003ccode\u003ejava.lang.Object[]\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ShrinkerInvalidFlags",
          "displayName": "Invalid flag in shrinker config",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "SHRINKER_CONFIG",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports flags that are invalid in shrinker config.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "R8IgnoredFlags",
          "displayName": "Flags ignored by R8",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "SHRINKER_CONFIG",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports flags that are ignored by R8.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ShrinkerUnresolvedReference",
          "displayName": "Unresolved reference in Shrinker Config file",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "SHRINKER_CONFIG",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references to class members in Shrinker config.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Inheritance issues",
      "inspections": [
        {
          "shortName": "AbstractMethodWithMissingImplementations",
          "displayName": "Abstract method with missing implementations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eabstract\u003c/code\u003e methods that are not implemented in every concrete subclass.\n\u003cp\u003e\n  This results in a compile-time error on the subclasses;\n  the inspection reports the problem at the point of the abstract method, allowing faster detection of the problem.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ImplicitSubclassInspection",
          "displayName": "Final declaration can\u0027t be overridden at runtime",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports cases when your code prevents a class from being subclassed by some framework\n(for example, Spring or Hibernate) at runtime.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eTypical examples of necessary but impossible subclassing:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003efinal\u003c/code\u003e classes marked with framework-specific annotations (for example, Spring \u003ccode\u003e@Configuration\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003efinal\u003c/code\u003e, \u003ccode\u003estatic\u003c/code\u003e or \u003ccode\u003eprivate\u003c/code\u003e methods\n    marked with framework-specific annotations (for example, Spring \u003ccode\u003e@Transactional\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003emethods marked with framework-specific annotations inside \u003ccode\u003efinal\u003c/code\u003e classes\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe list of reported cases depends on the frameworks used.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AbstractClassWithoutAbstractMethods",
          "displayName": "Abstract class without \u0027abstract\u0027 methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eabstract\u003c/code\u003e classes that have no \u003ccode\u003eabstract\u003c/code\u003e methods.\nIn most cases it does not make sense to have an \u003ccode\u003eabstract\u003c/code\u003e class without any \u003ccode\u003eabstract\u003c/code\u003e methods,\nand the \u003ccode\u003eabstract\u003c/code\u003e modifier can be removed from the class.\nIf the class was declared \u003ccode\u003eabstract\u003c/code\u003e to prevent instantiation,\nit is often a better option to use a \u003ccode\u003eprivate\u003c/code\u003e constructor to prevent instantiation instead.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class Example {\n    public String getName() {\n      return \"IntelliJ IDEA\";\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the option to ignore utility classes.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FrequentlyUsedInheritorInspection",
          "displayName": "Class may extend a commonly used base class",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes or interfaces that can be replaced with an implementation or extension of a more specific commonly used class or interface.\n\u003cp\u003eFor this inspection to work, a superclass needs to be in project source files and the project needs to use the IntelliJ IDEA build system.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyInheritor implements A {} // B suggested on the A reference\n\n  interface A {}\n\n  abstract class B implements A {}\n\n  abstract class C1 extends B {}\n  abstract class C2 extends B {}\n  abstract class C3 extends B {}\n  abstract class C4 extends B {}\n  abstract class C5 extends B {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eBy default, this inspection doesn\u0027t highlight issues in the editor but only provides a quick-fix.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AbstractMethodOverridesAbstractMethod",
          "displayName": "Abstract method overrides abstract method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eabstract\u003c/code\u003e methods that override \u003ccode\u003eabstract\u003c/code\u003e methods.\n\u003cp\u003eSuch methods don\u0027t make sense because any concrete child class will have to implement the abstract method anyway.\u003c/p\u003e\n\u003cp\u003e\n  Methods whose return types, exception declarations, annotations, or modifiers differ from the overridden method are not reported by this inspection.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eIgnore methods with different Javadoc than their super methods\u003c/b\u003e option to ignore any abstract methods whose JavaDoc comment differs from their super method.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ProblematicVarargsMethodOverride",
          "displayName": "Non-varargs method overrides varargs method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that override a variable arity (a.k.a. varargs) method but replace the variable arity parameter with an array parameter.\nThough this code is valid, it may be confusing and should be avoided.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantImplements",
          "displayName": "Redundant interface declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports interfaces in a class\u0027 \u003ccode\u003eimplements\u003c/code\u003e list or an interface\u0027s \u003ccode\u003eextends\u003c/code\u003e list that\nare already implemented by a superclass or extended by a superinterface.\nSuch declarations are unnecessary and may be safely removed.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X implements One, Two {\n  }\n  interface One {}\n  interface Two extends One {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X implements Two {\n  }\n  interface One {}\n  interface Two extends One {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the options to not report on \u003ccode\u003eSerializable\u003c/code\u003e or \u003ccode\u003eExternalizable\u003c/code\u003e\n  in an \u003ccode\u003eextends\u003c/code\u003e or \u003ccode\u003eimplements\u003c/code\u003e list.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ParameterTypePreventsOverriding",
          "displayName": "Parameter type prevents overriding",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports parameter types of a subclass method that have the same name as\nthe parameter type of the corresponding super method but belong to a different package.\nIn these cases, the subclass method cannot override the super method.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u003cb\u003epublic class\u003c/b\u003e A {\n \u003cb\u003epublic void\u003c/b\u003e method(Object o) {}\n}\n\n\u003cb\u003epublic class\u003c/b\u003e B \u003cb\u003eextends\u003c/b\u003e A {\n \u003cb\u003epublic void\u003c/b\u003e method(Object o) {} // warning on parameter type\n \u003cb\u003eclass\u003c/b\u003e Object {}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u003cb\u003epublic class\u003c/b\u003e A {\n \u003cb\u003epublic void\u003c/b\u003e method(Object o) {}\n}\n\n\u003cb\u003epublic class\u003c/b\u003e B \u003cb\u003eextends\u003c/b\u003e A {\n \u003cb\u003epublic void\u003c/b\u003e method(java.lang.Object o) {} // new parameter type\n \u003cb\u003eclass\u003c/b\u003e Object {}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InterfaceNeverImplemented",
          "displayName": "Interface which has no concrete subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports interfaces that have no concrete subclasses.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Use the list below to add annotations. Interfaces declared with\n    one of these annotations will be ignored by the inspection.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Use the checkbox below to ignore interfaces that only declare constant fields.\n    Such interfaces may still be usable even without implementations.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantMethodOverride",
          "displayName": "Method is identical to its super method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that are identical to their super methods. Such methods have the same signature\nas their super method and either have an identical body or only their body consists only of a call to the super method.\nThese methods are redundant and can be removed.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the checkbox below to run the inspection for the methods that override library methods.\n  Checking library methods may slow down the inspection.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExtendsAnnotation",
          "displayName": "Class extends annotation interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes declared as an implementation or extension of an annotation\ninterface.\n\u003cp\u003eWhile it is legal to extend an annotation interface, it is often done by accident,\n  and the result can\u0027t be used as an annotation.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AbstractClassNeverImplemented",
          "displayName": "Abstract class which has no concrete subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eabstract\u003c/code\u003e classes that have no concrete subclasses.\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RefusedBequest",
          "displayName": "Method does not call super method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that override a super method without calling it.\nThis is also known as a \u003ci\u003erefused bequest\u003c/i\u003e.\nSuch methods may represent a failure of abstraction and cause hard-to-trace bugs.\n\u003cp\u003e\n  The inspection doesn\u0027t report methods overridden from \u003ccode\u003ejava.lang.Object\u003c/code\u003e, except for \u003ccode\u003eclone()\u003c/code\u003e.\n  The \u003ccode\u003eclone()\u003c/code\u003e method should by convention call its super method,\n  which will return an object of the correct type.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A {\n    @Override\n    public Object clone() {\n      // does not call \u0027super.clone()\u0027\n      return new A();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface I {\n    default void foo() {}\n  }\n\n  class A implements I {\n    // warning on method when\n    // \u0027Ignore \u0027default\u0027 super methods\u0027 is disabled\n    @Override\n    public void foo(){}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eOnly report when super method is annotated by\u003c/b\u003e option to ignore super methods marked with the annotations\n    from the provided list. You can manually add annotations to the list.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eIgnore empty super methods\u003c/b\u003e option to ignore super methods that are either empty or only throw an exception.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eIgnore \u0027default\u0027 super methods\u003c/b\u003e option to ignore \u003ccode\u003edefault\u003c/code\u003e super methods from interfaces.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeParameterExtendsFinalClass",
          "displayName": "Type parameter extends \u0027final\u0027 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports type parameters declared to extend a \u003ccode\u003efinal\u003c/code\u003e class.\n\u003cp\u003eSuggests replacing the type parameter with the type of the specified \u003ccode\u003efinal\u003c/code\u003e class since\n  \u003ccode\u003efinal\u003c/code\u003e classes cannot be extended.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003evoid\u003c/b\u003e foo() {\n    List\u0026lt;? \u003cb\u003eextends\u003c/b\u003e Integer\u0026gt; list; // Warning: the Integer class is a final class\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003evoid\u003c/b\u003e foo() {\n    List\u0026lt;Integer\u0026gt; list;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AbstractClassExtendsConcreteClass",
          "displayName": "Abstract class extends concrete class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eabstract\u003c/code\u003e classes that extend concrete classes.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MissingOverrideAnnotation",
          "displayName": "Missing \u0027@Override\u0027 annotation",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n  Reports methods overriding superclass methods but are not annotated with \u003ccode\u003e@java.lang.Override\u003c/code\u003e.\n  \u003cp\u003e\n  Annotating methods with \u003ccode\u003e@java.lang.Override\u003c/code\u003e improves code readability since it shows the intent.\n  In addition, the compiler emits an error when a signature of the overridden method doesn\u0027t match the superclass method.\n  \u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n  \u003cpre\u003e\u003ccode\u003e\n    class X {\n      public String toString() {\n        return \"hello world\";\n      }\n    }\n  \u003c/code\u003e\u003c/pre\u003e\n  \u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n  \u003cpre\u003e\u003ccode\u003e\n    class X {\n      @Override\n      public String toString() {\n        return \"hello world\";\n      }\n    }\n  \u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eIgnore \u0027equals()\u0027, \u0027hashCode()\u0027 and \u0027toString()\u0027\u003c/b\u003e option to ignore these\n    \u003ccode\u003ejava.lang.Object\u003c/code\u003e methods: \u003ccode\u003eequals()\u003c/code\u003e, \u003ccode\u003ehashCode()\u003c/code\u003e, and\n    \u003ccode\u003etoString()\u003c/code\u003e. The risk that these methods will disappear and\n    your code won\u0027t be compiling anymore due to the \u003ccode\u003e@Override\u003c/code\u003e\n    annotation is relatively small.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eIgnore methods in anonymous classes\u003c/b\u003e option to ignore methods\n    in anonymous classes.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Disable the \u003cb\u003eHighlight method when its overriding methods do not all have the \u0027@Override\u0027 annotation\u003c/b\u003e option to only\n    warn on the methods missing an \u003ccode\u003e@Override\u003c/code\u003e annotation, and not on overridden methods where one or more descendants are\n    missing an \u003ccode\u003e@Override\u003c/code\u003e annotation.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 5 or higher.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ExtendsConcreteCollection",
          "displayName": "Class explicitly extends a \u0027Collection\u0027 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that extend concrete subclasses of the \u003ccode\u003ejava.util.Collection\u003c/code\u003e or \u003ccode\u003ejava.util.Map\u003c/code\u003e classes.\n\u003cp\u003e\n  Subclassing concrete collection types is a common yet poor practice. It is considerably more brittle than delegating collection calls.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StaticInheritance",
          "displayName": "Static inheritance",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports interfaces that are implemented only to provide access to constants.\nThis kind of inheritance is often confusing and may hide important dependency information.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExtendsUtilityClass",
          "displayName": "Class extends utility class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that extend a utility class.\n\u003cp\u003e\nA utility class is a non-empty class in which all fields and methods are static.\n  Extending a utility class also allows for inadvertent object instantiation of the\n  utility class, because the constructor cannot be made private in order to allow extension.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eIgnore if overriding class is a utility class\u003c/b\u003e option to ignore any classes that override a utility class but are\n    also utility classes themselves.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonProtectedConstructorInAbstractClass",
          "displayName": "Public constructor in abstract class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003epublic\u003c/code\u003e constructors of \u003ccode\u003eabstract\u003c/code\u003e classes.\n\u003cp\u003e\n  Constructors of \u003ccode\u003eabstract\u003c/code\u003e classes can only be called from the constructors of\n  their subclasses, declaring them \u003ccode\u003epublic\u003c/code\u003e may be confusing.\n\u003c/p\u003e\n\u003cp\u003eThe quick-fix makes such constructors protected.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic abstract class\u003c/b\u003e Foo {\n    \u003cb\u003epublic\u003c/b\u003e Foo () { // warning: has \u0027public\u0027 modifier\n        /* ... */\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic abstract class\u003c/b\u003e Foo {\n    \u003cb\u003eprotected\u003c/b\u003e Foo () {\n        /* ... */\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore for non-public classes\u003c/b\u003e option below to ignore \u003ccode\u003epublic\u003c/code\u003e constructors in non-public classes.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AbstractMethodOverridesConcreteMethod",
          "displayName": "Abstract method overrides concrete method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eabstract\u003c/code\u003e methods that override concrete super methods.\n\u003cp\u003eMethods overridden from \u003ccode\u003ejava.lang.Object\u003c/code\u003e are not reported by this inspection.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "GroovyConstantConditional",
          "displayName": "Constant conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditional expressions with boolean constant as a condition.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  true ? result1 : result2\n  false ? result1 : result2\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyConstantIfStatement",
          "displayName": "Constant if statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements with boolean constant as a condition.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (true) {\n      // ...\n  }\n  if (false) {\n      // ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyUnnecessaryReturn",
          "displayName": "Unnecessary \u0027return\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003ereturn\u003c/code\u003e statements at the end of constructors and methods returning\n\u003ccode\u003evoid\u003c/code\u003e. These are unnecessary and may be safely removed.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003evoid\u003c/b\u003e foo (String s){\n      print(s)\n      \u003cb\u003ereturn\u003c/b\u003e\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003evoid\u003c/b\u003e foo (String s){\n      print(s)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eFor more information, see the same inspection in Java.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyLoopStatementThatDoesntLoop",
          "displayName": "Loop statement that doesn\u0027t loop",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efor\u003c/code\u003e or \u003ccode\u003ewhile\u003c/code\u003e statements whose\nbodies are guaranteed to execute at most once. While such statements could be written intentionally, they\nare usually a symptom of error.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\n  for (int i in 0..\u0026lt;10) {\n    return\n  }\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyFallthrough",
          "displayName": "Fallthrough in \u0027switch\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ci\u003efallthrough\u003c/i\u003e in switch statements.  While occasionally useful, fallthrough is often unintended, and may lead to surprising bugs.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nswitch(n) {\n  case 1:\n    print 1\n  case 2: // \"case 1\" fallthrough to \"case 2\". Statements from \"case 2\" will be executed immediately after \"case 1\".\n    print 2\n    break\n  default:\n    print \"Default\"\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "GroovyIfStatementWithIdenticalBranches",
          "displayName": "If statement with identical branches",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements with identical \"then\" and \u003ccode\u003eelse\u003c/code\u003e branches.\nSuch statements are almost certainly programmer error.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nif (condition) {\n  print \"foo\"\n} else {\n  print \"foo\"\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nprint \"foo\"\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyTrivialConditional",
          "displayName": "Redundant conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports ternary conditional operators of the form \u003ccode\u003ex ? true : false\u003c/code\u003e\nor similar, which can be trivially simplified.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  foo() ? true : false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfoo()\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyContinue",
          "displayName": "\u0027continue\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003econtinue\u003c/code\u003e statements.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovySwitchStatementWithNoDefault",
          "displayName": "Switch statement with no default case",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eswitch\u003c/code\u003e statements that do not contain\n\u003ccode\u003edefault\u003c/code\u003e labels.\n\u003cp\u003e\n  Some coding practices may insist on adding this label to all \u003ccode\u003eswitch\u003c/code\u003e statements.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrFinalVariableAccess",
          "displayName": "Final variable access",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports uninitialized final fields, invalid assignments to final variables, and parameters and fields.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyIfStatementWithTooManyBranches",
          "displayName": "If statement with too many branches",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements with too many branches.\nSuch statements may be confusing, and are often the sign of inadequate levels of design\nabstraction.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nif (a) {\n  print \"foo\"\n} else if (b) {\n  print \"bar\"\n} else if (c) {\n  print \"baz\"\n} else if (d) {\n  print \"Too many branches\"\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n Use the \u003cb\u003eMaximum number of branches\u003c/b\u003e field to specify the maximum number of branches expected.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyTrivialIf",
          "displayName": "Redundant \u0027if\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements which can be simplified to single assignment\nor\n\u003ccode\u003ereturn\u003c/code\u003e statements.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (foo())\n    return true;\n  else\n    return false;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  return foo();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyBreak",
          "displayName": "\u0027break\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ebreak\u003c/code\u003e statements outside of \u003ccode\u003eswitch\u003c/code\u003e statements.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyConditionalCanBeConditionalCall",
          "displayName": "Ternary expression can be replaced with safe call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports ternary expressions which can be replaced by a safe call.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def charArray(String s) {\n      s \u003d\u003d null ? null : s.toCharArray()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def charArray(String s) {\n      s?.toCharArray()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyConditionalCanBeElvis",
          "displayName": "Ternary expression can be replaced with elvis expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports ternary expressions which can be replaced by an elvis expression.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def notNull(o, defaultValue) {\n      o !\u003d null ? o : defaultValue\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def notNull(o, defaultValue) {\n      o ?: defaultValue\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyConditionalWithIdenticalBranches",
          "displayName": "Ternary expression with identical branches",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports ternary expressions with identical \"then\" and \"else\" branches. Such expressions are almost certainly a programmer error.\n\u003cp\u003eThe quick-fix replaces the expression with its \"then\" branch.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  condition ? a.foo() : a.foo()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a.foo()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyUnnecessaryContinue",
          "displayName": "Unnecessary \u0027continue\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003econtinue\u003c/code\u003e statements if they are last reachable statements in the loop.\nThese \u003ccode\u003econtinue\u003c/code\u003e statements are unnecessary and can be safely removed.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for(int i in array) {\n      println(i)\n      \u003cb\u003econtinue\u003c/b\u003e\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for(int i in array) {\n      println(i)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eFor more information, see the same inspection in Java.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyReturnFromClosureCanBeImplicit",
          "displayName": "\u0027return\u0027 statement can be implicit",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports return statements at the end of closures which can be made implicit.\n\u003cp\u003e\n  Groovy closures implicitly return the value of the last statement in them.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def foo \u003d {\n    return 1\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def foo \u003d {\n    1\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "EditorConfig",
      "inspections": [
        {
          "shortName": "EditorConfigUnexpectedComma",
          "displayName": "Unexpected comma",
          "defaultSeverity": "ERROR",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigListAcceptability",
          "displayName": "Unexpected value list",
          "defaultSeverity": "ERROR",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigShadowedOption",
          "displayName": "Overridden property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports properties that are already defined in other sections.\n\u003cp\u003eFor example:\n\u003cpre\u003e\u003ccode\u003e\n[*.java]\nindent_size\u003d4\n[{*.java,*.js}]\nindent_size\u003d2\n\u003c/code\u003e\u003c/pre\u003e\nThe second section includes all \u003ccode\u003e*.java\u003c/code\u003e files too but it  also redefines indent_size.\nAs a result the value 2 will be used for files matching \u003ccode\u003e*.java\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigValueCorrectness",
          "displayName": "Invalid property value",
          "defaultSeverity": "ERROR",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”,\nothers contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigRootDeclarationUniqueness",
          "displayName": "Extra top-level declaration",
          "defaultSeverity": "ERROR",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports multiple top-level declarations. There can be only one optional “root\u003dtrue” top-level declaration in the EditorConfig file.\nUsing multiple top-level declarations is not allowed.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EditorConfigPatternRedundancy",
          "displayName": "Duplicate or redundant pattern",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one.\nFor example, in \u003ccode\u003e[{*.java,*}]\u003c/code\u003e the first \u003ccode\u003e*.java\u003c/code\u003e pattern defines a narrower scope compared to \u003ccode\u003e*\u003c/code\u003e.\nThat is why it is redundant and can be removed.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigCharClassLetterRedundancy",
          "displayName": "Duplicate character class letter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example \u003ccode\u003e[aa]\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigWildcardRedundancy",
          "displayName": "Redundant wildcard",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports wildcards that become redundant when the “**” wildcard is used in the same section.\n\u003cp\u003e\nThe “**” wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigNumerousWildcards",
          "displayName": "Too many wildcards",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EditorConfigPartialOverride",
          "displayName": "Overlapping sections",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports subsets of files specified in the current section that overlap with other subsets in other sections. For example:\n\u003ccode\u003e[{foo,bar}]\u003c/code\u003e and \u003ccode\u003e[{foo,bas}]\u003c/code\u003e both contain “foo”.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigNoMatchingFiles",
          "displayName": "No matching files",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports sections with wildcard patterns that do not match any files under the directory in\nwhich the \u003ccode\u003e.editorconfig\u003c/code\u003e file is located.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigUnusedDeclaration",
          "displayName": "Unused declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports unused declarations. Such declarations can be removed.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigPairAcceptability",
          "displayName": "Unexpected key-value pair",
          "defaultSeverity": "ERROR",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports key-value pairs that are not allowed in the current context.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigReferenceCorrectness",
          "displayName": "Invalid reference",
          "defaultSeverity": "ERROR",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports identifiers that are either unknown or have a wrong type.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigEmptyHeader",
          "displayName": "Empty header",
          "defaultSeverity": "ERROR",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports sections with an empty header. Section header must contain file path globs in the format similar to one supported by \u003ccode\u003egitignore\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigPatternEnumerationRedundancy",
          "displayName": "Unnecessary braces",
          "defaultSeverity": "ERROR",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports pattern lists that are either empty \u003ccode\u003e{}\u003c/code\u003e or contain just one pattern, for example \u003ccode\u003e{foo}\u003c/code\u003e in contrast to\na list containing multiple patterns, for example \u003ccode\u003e{foo,bar}\u003c/code\u003e. In this case braces are handled as a part of the name. For example,\nthe pattern \u003ccode\u003e*.{a}\u003c/code\u003e will match the file \u003ccode\u003emy.{a}\u003c/code\u003e but not \u003ccode\u003emy.a\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigCharClassRedundancy",
          "displayName": "Unnecessary character class",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports character classes that consist of a single character.\nSuch classes can be simplified to a character, for example \u003ccode\u003e[a]\u003c/code\u003e\u0026rarr;\u003ccode\u003ea\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigEmptySection",
          "displayName": "Empty section",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports sections that do not contain any EditorConfig properties.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigRootDeclarationCorrectness",
          "displayName": "Unexpected top-level declaration",
          "defaultSeverity": "ERROR",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports unexpected top-level declarations. Top-level declarations other than “root\u003dtrue” are not allowed in the EditorConfig file.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EditorConfigKeyCorrectness",
          "displayName": "Unknown property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigOptionRedundancy",
          "displayName": "Redundant property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports properties that are redundant when another applicable section already contains the same property and value.\n\u003cp\u003e\nFor example:\n\u003cpre\u003e\u003ccode\u003e\n[*]\nindent_size\u003d4\n[*.java]\nindent_size\u003d4\n\u003c/code\u003e\u003c/pre\u003e\nare both applicable to \u003ccode\u003e*.java\u003c/code\u003e files and define the same \u003ccode\u003eindent_size\u003c/code\u003e value.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigValueUniqueness",
          "displayName": "Non-unique list value",
          "defaultSeverity": "ERROR",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports duplicates in lists of values.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigDeprecatedDescriptor",
          "displayName": "Deprecated property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports EditorConfig properties that are no longer supported.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigHeaderUniqueness",
          "displayName": "EditorConfig section is not unique",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports sections that define the same file pattern as other sections.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigEncoding",
          "displayName": "File encoding doesn\u0027t match EditorConfig charset",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EditorConfigMissingRequiredDeclaration",
          "displayName": "Required declarations are missing",
          "defaultSeverity": "ERROR",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports properties that miss the required declarations. Refer to the documentation for more information.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigSpaceInHeader",
          "displayName": "Space in file pattern",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports space characters in wildcard patterns that affect pattern matching.\nIf these characters are not intentional, they should be removed.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EditorConfigShadowingOption",
          "displayName": "Overriding property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.editorconfig.editorconfigjetbrains",
          "pluginVersion": "231.9011.34",
          "language": "EditorConfig",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports properties that override the same properties defined earlier in the file.\n\u003cp\u003eFor example:\n\u003cpre\u003e\u003ccode\u003e\n[*.java]\nindent_size\u003d4\n[{*.java,*.js}]\nindent_size\u003d2\n\u003c/code\u003e\u003c/pre\u003e\nThe second section includes the same files as \u003ccode\u003e[*.java]\u003c/code\u003e but also sets indent_size to value 2.\nThus the first declaration \u003ccode\u003eindent_size\u003d4\u003c/code\u003ewill be ignored.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Serialization issues",
      "inspections": [
        {
          "shortName": "SerialVersionUIDNotStaticFinal",
          "displayName": "\u0027serialVersionUID\u0027 field not declared \u0027private static final long\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eSerializable\u003c/code\u003e classes whose \u003ccode\u003eserialVersionUID\u003c/code\u003e field\nis not declared \u003ccode\u003eprivate static final long\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class SampleClass implements Serializable {\n    private long serialVersionUID \u003d 1; // field of a Serializable class is not declared \u0027private static final long\u0027\n\n    public SampleClass() {\n        System.out.println(serialVersionUID);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonSerializableWithSerializationMethods",
          "displayName": "Non-serializable class with \u0027readObject()\u0027 or \u0027writeObject()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-\u003ccode\u003eSerializable\u003c/code\u003e classes that define \u003ccode\u003ereadObject()\u003c/code\u003e\nor \u003ccode\u003ewriteObject()\u003c/code\u003e methods. Such methods in that context normally indicate an error.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class SampleClass {\n    private void readObject(ObjectInputStream str) {}\n    private void writeObject(ObjectOutputStream str) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SerializableInnerClassHasSerialVersionUIDField",
          "displayName": "Serializable non-static inner class without \u0027serialVersionUID\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-static inner classes that implement \u003ccode\u003ejava.io.Serializable\u003c/code\u003e, but do not define a \u003ccode\u003eserialVersionUID\u003c/code\u003e field.\n\u003cp\u003e\n  Without a \u003ccode\u003eserialVersionUID\u003c/code\u003e field, any change to the class will make previously\n  serialized versions unreadable. It is strongly recommended that \u003ccode\u003eSerializable\u003c/code\u003e\n  non-static inner classes have a \u003ccode\u003eserialVersionUID\u003c/code\u003e field, otherwise the default\n  serialization algorithm may result in serialized versions being incompatible between\n  compilers due to differences in synthetic accessor methods.\n\u003c/p\u003e\n\u003cp\u003e\n  A quick-fix is suggested to add the missing \u003ccode\u003eserialVersionUID\u003c/code\u003e field.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Outer {\n      class Inner implements Serializable {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Outer {\n      class Inner implements Serializable {\n          private static final long serialVersionUID \u003d -7004458730436243902L;\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the following options to configure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    \u003ccode\u003eSerializable\u003c/code\u003e from a superclass but are not intended for serialization.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether to ignore \u003ccode\u003eSerializable\u003c/code\u003e anonymous classes.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReadResolveAndWriteReplaceProtected",
          "displayName": "\u0027readResolve()\u0027 or \u0027writeReplace()\u0027 not declared \u0027protected\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that implement \u003ccode\u003ejava.io.Serializable\u003c/code\u003e where the \u003ccode\u003ereadResolve()\u003c/code\u003e\nor \u003ccode\u003ewriteReplace()\u003c/code\u003e methods are not declared \u003ccode\u003eprotected\u003c/code\u003e.\n\u003cp\u003e\n  Declaring \u003ccode\u003ereadResolve()\u003c/code\u003e and \u003ccode\u003ewriteReplace()\u003c/code\u003e methods \u003ccode\u003eprivate\u003c/code\u003e\n  can force subclasses to silently ignore them, while declaring them\n  \u003ccode\u003epublic\u003c/code\u003e allows them to be invoked by untrusted code.\n\u003c/p\u003e\n\u003cp\u003e\n  If the containing class is declared \u003ccode\u003efinal\u003c/code\u003e, these methods can be declared \u003ccode\u003eprivate\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class ClassWithSerialization implements Serializable {\n    public Object writeReplace() { // warning: \u0027writeReplace()\u0027 not declared protected\n        ...\n    }\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReadObjectAndWriteObjectPrivate",
          "displayName": "\u0027readObject()\u0027 or \u0027writeObject()\u0027 not declared \u0027private\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eSerializable\u003c/code\u003e classes where the \u003ccode\u003ereadObject\u003c/code\u003e\nor \u003ccode\u003ewriteObject\u003c/code\u003e methods are not declared private.\nThere is no reason these methods should ever have a higher visibility than \u003ccode\u003eprivate\u003c/code\u003e.\n\u003cp\u003e\n  A quick-fix is suggested to make the corresponding method \u003ccode\u003eprivate\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Test implements Serializable {\n    public void readObject(ObjectInputStream stream) {\n      /* ... */\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Test implements Serializable {\n    private void readObject(ObjectInputStream stream) {\n      /* ... */\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SerialPersistentFieldsWithWrongSignature",
          "displayName": "\u0027serialPersistentFields\u0027 field not declared \u0027private static final ObjectStreamField[]\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eSerializable\u003c/code\u003e classes whose \u003ccode\u003eserialPersistentFields\u003c/code\u003e field\nis not declared as \u003ccode\u003eprivate static final ObjectStreamField[]\u003c/code\u003e.\n\u003cp\u003e\n  If a \u003ccode\u003eserialPersistentFields\u003c/code\u003e field is not declared with those modifiers,\n  the serialization behavior will be as if the field was not declared at all.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class List implements Serializable {\n    private List next;\n\n    ObjectStreamField[] serialPersistentFields \u003d {new ObjectStreamField(\"next\", List.class)};\n\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonSerializableObjectPassedToObjectStream",
          "displayName": "Non-serializable object passed to \u0027ObjectOutputStream\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-\u003ccode\u003eSerializable\u003c/code\u003e objects used as arguments to\n\u003ccode\u003ejava.io.ObjectOutputStream.write()\u003c/code\u003e. Such calls will result in runtime exceptions.\n\u003cp\u003e\n  This inspection assumes objects of the types \u003ccode\u003ejava.util.Collection\u003c/code\u003e and\n  \u003ccode\u003ejava.util.Map\u003c/code\u003e to be \u003ccode\u003eSerializable\u003c/code\u003e, unless the types\n  they are declared in are non-\u003ccode\u003eSerializable\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class IWantToSerializeThis {\n    public static void main(String[] args) throws IOException {\n      try(var stream \u003d new ObjectOutputStream(Files.newOutputStream(Paths.get(\"output\")))) {\n        // Warning -- will fail with NotSerializableException\n        stream.writeObject(new IWantToSerializeThis());\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TransientFieldNotInitialized",
          "displayName": "Transient field is not initialized on deserialization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003etransient\u003c/code\u003e fields that\nare initialized during normal object construction, but whose class does not have a\n\u003ccode\u003ereadObject\u003c/code\u003e method.\n\u003cp\u003e\n  As \u003ccode\u003etransient\u003c/code\u003e fields are not serialized they need\n  to be initialized separately in a \u003ccode\u003ereadObject()\u003c/code\u003e method\n  during deserialization.\n\u003c/p\u003e\n\u003cp\u003e\n  Any \u003ccode\u003etransient\u003c/code\u003e fields that\n  are not initialized during normal object construction are considered to use the default\n  initialization and are not reported by this inspection.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Person implements Serializable {\n    transient String name \u003d \"Default\"; //warning, can actually be a null after deserialization\n    transient String surname; //null is considered the default value and not reported\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SerializableHasSerializationMethods",
          "displayName": "Serializable class without \u0027readObject()\u0027 and \u0027writeObject()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eSerializable\u003c/code\u003e classes\nthat do not implement \u003ccode\u003ereadObject()\u003c/code\u003e and \u003ccode\u003ewriteObject()\u003c/code\u003e methods.\n\u003cp\u003e\n  If \u003ccode\u003ereadObject()\u003c/code\u003e and \u003ccode\u003ewriteObject()\u003c/code\u003e methods are not implemented,\n  the default serialization algorithms are used,\n  which may be sub-optimal for performance and compatibility in many environments.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    \u003ccode\u003eSerializable\u003c/code\u003e from a superclass but are not intended for serialization.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether to ignore \u003ccode\u003eSerializable\u003c/code\u003e classes without non-static fields.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether to ignore \u003ccode\u003eSerializable\u003c/code\u003e anonymous classes.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExternalizableWithSerializationMethods",
          "displayName": "Externalizable class with \u0027readObject()\u0027 or \u0027writeObject()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eExternalizable\u003c/code\u003e classes that define \u003ccode\u003ereadObject()\u003c/code\u003e\nor \u003ccode\u003ewriteObject()\u003c/code\u003e methods. These methods are not called for serialization of\n\u003ccode\u003eExternalizable\u003c/code\u003e objects.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class Crucial implements Externalizable {\n    int value;\n    private void readObject(ObjectInputStream in) {\n      value \u003d in.readInt();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MissingSerialAnnotation",
          "displayName": "\u0027@Serial\u0027 annotation could be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods and fields in the \u003ccode\u003eSerializable\u003c/code\u003e and \u003ccode\u003eExternalizable\u003c/code\u003e\nclasses that are suitable to be annotated with the \u003ccode\u003ejava.io.Serial\u003c/code\u003e annotation. The quick-fix adds the annotation.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass Main implements Serializable {\n  private static final long serialVersionUID \u003d 7874493593505141603L;\n\n  private void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main implements Serializable {\n    @Serial\n    private static final long serialVersionUID \u003d 7874493593505141603L;\n\n    @Serial\n    private void writeObject(ObjectOutputStream out) throws IOException {\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main implements Externalizable {\n    protected Object readResolve() throws ObjectStreamException {\n      return \"SomeObject\";\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main implements Externalizable {\n    @Serial\n    protected Object readResolve() throws ObjectStreamException {\n        return \"SomeObject\";\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor more information about all possible cases, refer the documentation for \u003ccode\u003ejava.io.Serial\u003c/code\u003e.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 14 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SerializableWithUnconstructableAncestor",
          "displayName": "Serializable class with unconstructable ancestor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eSerializable\u003c/code\u003e classes whose closest non-serializable ancestor doesn\u0027t have\na no-argument constructor. Such classes cannot be deserialized and will fail with an \u003ccode\u003eInvalidClassException\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Ancestor {\n    private String name;\n    Ancestor(String name) {\n      this.name \u003d name;\n    }\n  }\n\n  // warning on this class because the superclass is not\n  // serializable, and its constructor takes arguments\n  class Descendant extends Ancestor implements Serializable {\n    Descendant() {\n      super(\"Bob\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonSerializableWithSerialVersionUIDField",
          "displayName": "Non-serializable class with \u0027serialVersionUID\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-\u003ccode\u003eSerializable\u003c/code\u003e classes that define a \u003ccode\u003eserialVersionUID\u003c/code\u003e\nfield. A \u003ccode\u003eserialVersionUID\u003c/code\u003e field in that context normally indicates an error\nbecause the field will be ignored and the class will not be serialized.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class IWantToSerializeThis {\n    private static final long serialVersionUID \u003d 2669293150219020249L;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SerializableInnerClassWithNonSerializableOuterClass",
          "displayName": "Serializable non-\u0027static\u0027 inner class with non-Serializable outer class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-static inner classes that implement \u003ccode\u003eSerializable\u003c/code\u003e\nand are declared inside a class that doesn\u0027t implement \u003ccode\u003eSerializable\u003c/code\u003e.\n\u003cp\u003e\n  Such classes are unlikely to serialize correctly due to implicit references to the outer class.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A {\n    class Main implements Serializable {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the following options to configure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    \u003ccode\u003eSerializable\u003c/code\u003e from a superclass but are not intended for serialization.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether to ignore \u003ccode\u003eSerializable\u003c/code\u003e anonymous classes.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SerializableStoresNonSerializable",
          "displayName": "\u0027Serializable\u0027 object implicitly stores non-\u0027Serializable\u0027 object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any references to local non-\u003ccode\u003eSerializable\u003c/code\u003e variables\noutside \u003ccode\u003eSerializable\u003c/code\u003e lambdas, local and anonymous classes.\n\u003cp\u003e\n  When a local variable is referenced from an anonymous class, its value\n  is stored in an implicit field of that class. The same happens\n  for local classes and lambdas. If the variable is of a\n  non-\u003ccode\u003eSerializable\u003c/code\u003e type, serialization will fail.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface A extends Serializable {\n      abstract void foo();\n  }\n  class B {}\n  class C {\n      void foo() {\n          B b \u003d new B();\n          A a \u003d new A() {\n              @Override\n              public void foo() {\n                  System.out.println(b); // warning\n              }\n          };\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SerializableRecordContainsIgnoredMembers",
          "displayName": "\u0027record\u0027 contains ignored members",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports serialization methods or fields defined in a \u003ccode\u003erecord\u003c/code\u003e class.\nSerialization methods include \u003ccode\u003ewriteObject()\u003c/code\u003e, \u003ccode\u003ereadObject()\u003c/code\u003e, \u003ccode\u003ereadObjectNoData()\u003c/code\u003e, \u003ccode\u003ewriteExternal()\u003c/code\u003e, and\n  \u003ccode\u003ereadExternal()\u003c/code\u003e and the field \u003ccode\u003eserialPersistentFields\u003c/code\u003e.\n  These members are not used for the serialization or deserialization of records and therefore unnecessary.\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  record R1() implements Serializable {\n    // The field is ignored during record serialization\n    @Serial\n    private static final ObjectStreamField[] serialPersistentFields \u003d new ObjectStreamField[0];\n\n    // The method is ignored during record serialization\n    @Serial\n    private void writeObject(ObjectOutputStream out) throws IOException {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e\n  record R2() implements Externalizable {\n    // The method is ignored during record serialization\n    @Override\n    public void writeExternal(ObjectOutput out) throws IOException {\n    }\n\n    // The method is ignored during record serialization\n    @Override\n    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 14 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReadObjectInitialization",
          "displayName": "Instance field may not be initialized by \u0027readObject()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields that are not guaranteed to be initialized after the object is\ndeserialized by the \u003ccode\u003ereadObject()\u003c/code\u003e method.\n\u003cp\u003eThe inspection doesn\u0027t report transient fields.\u003c/p\u003e\n\u003cp\u003e\n  Note: This inspection uses a very conservative control flow algorithm, and may incorrectly report fields\n  as uninitialized.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass DataObject implements Serializable {\n  String s; // s is not initialized in readObject\n  int i;\n\n  private void readObject(ObjectInputStream stream) throws IOException {\n    i \u003d stream.readInt();\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ComparatorNotSerializable",
          "displayName": "\u0027Comparator\u0027 class not declared \u0027Serializable\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that implement \u003ccode\u003ejava.lang.Comparator\u003c/code\u003e,\nbut do not implement \u003ccode\u003ejava.io.Serializable\u003c/code\u003e.\n\u003cp\u003e\n  If a non-serializable comparator is used to construct an ordered collection such\n  as a \u003ccode\u003ejava.util.TreeMap\u003c/code\u003e or \u003ccode\u003ejava.util.TreeSet\u003c/code\u003e, then the\n  collection will also be non-serializable. This can result in unexpected and\n  difficult-to-diagnose bugs.\n\u003c/p\u003e\n\u003cp\u003e\n  Since subclasses of \u003ccode\u003ejava.lang.Comparator\u003c/code\u003e are often stateless,\n  simply marking them serializable is a small cost to avoid such issues.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo implements Comparator { // warning\n      @Override\n      public int compare(Object o1, Object o2) {\n          /* ... */\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo implements Comparator, Serializable { // no warning here\n      @Override\n      public int compare(Object o1, Object o2) {\n          /* ... */\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TransientFieldInNonSerializableClass",
          "displayName": "Transient field in non-serializable class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003etransient\u003c/code\u003e fields in classes that do not implement \u003ccode\u003ejava.io.Serializable\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class NonSerializableClass {\n    private transient String password;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class NonSerializableClass {\n    private String password;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonSerializableFieldInSerializableClass",
          "displayName": "Non-serializable field in a \u0027Serializable\u0027 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-serializable fields in classes that implement \u003ccode\u003ejava.io.Serializable\u003c/code\u003e. Such fields will result\nin runtime exceptions if the object is serialized.\n\u003cp\u003e\n  Fields declared\n  \u003ccode\u003etransient\u003c/code\u003e or \u003ccode\u003estatic\u003c/code\u003e\n  are not reported, nor are fields of classes that have a \u003ccode\u003ewriteObject\u003c/code\u003e method defined.\n\u003c/p\u003e\n\u003cp\u003e\n  This inspection assumes fields of the types\n  \u003ccode\u003ejava.util.Collection\u003c/code\u003e and\n  \u003ccode\u003ejava.util.Map\u003c/code\u003e to be\n  \u003ccode\u003eSerializable\u003c/code\u003e, unless the types\n  they are declared in are non-\u003ccode\u003eSerializable\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class NonSerializableClass {}\n\n  public class SerializableClass implements Serializable {\n      NonSerializableClass clazz; // warning: Non-serializable field \u0027clazz\u0027 in a Serializable class\n      static NonSerializableClass staticClazz; // no warnings\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    \u003ccode\u003eSerializable\u003c/code\u003e from a superclass but are not intended for serialization.\n  \u003c/li\u003e\n  \u003cli\u003e\n    List annotations that will make the inspection ignore the annotated fields.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether to ignore fields initialized with an anonymous class.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SerialAnnotationUsedOnWrongMember",
          "displayName": "\u0027@Serial\u0027 annotation used on wrong member",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods and fields in the \u003ccode\u003eSerializable\u003c/code\u003e and \u003ccode\u003eExternalizable\u003c/code\u003e\nclasses that are not suitable to be annotated with the \u003ccode\u003ejava.io.Serial\u003c/code\u003e annotation.\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass Test implements Serializable {\n  @Serial // The annotated field is not a part of serialization mechanism because it\u0027s not final\n  private static long serialVersionUID \u003d 7874493593505141603L;\n\n  @Serial // The annotated method is not a part of the serialization mechanism because it\u0027s not private\n  void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass Test implements Externalizable {\n  @Serial // The annotated method is not a part of the serialization mechanism as it\u0027s inside Externalizable class\n  private void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor information about all valid cases, refer the documentation for \u003ccode\u003ejava.io.Serial\u003c/code\u003e.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 14 or higher.\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExternalizableWithoutPublicNoArgConstructor",
          "displayName": "\u0027Externalizable\u0027 class without \u0027public\u0027 no-arg constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eExternalizable\u003c/code\u003e classes without a public no-argument constructor.\n\u003cp\u003eWhen an \u003ccode\u003eExternalizable\u003c/code\u003e object is reconstructed, an instance is created using the public\n  no-arg constructor before the \u003ccode\u003ereadExternal\u003c/code\u003e method called. If a public\n  no-arg constructor is not available, a \u003ccode\u003ejava.io.InvalidClassException\u003c/code\u003e will be\n  thrown at runtime.\n  \u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonSerializableObjectBoundToHttpSession",
          "displayName": "Non-serializable object bound to \u0027HttpSession\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports objects of classes not implementing \u003ccode\u003ejava.io.Serializable\u003c/code\u003e used as arguments to\n\u003ccode\u003ejavax.servlet.http.HttpSession.setAttribute()\u003c/code\u003e or\n\u003ccode\u003ejavax.servlet.http.HttpSession.putValue()\u003c/code\u003e.\n\u003cp\u003e\n  Such objects will not be serialized if the \u003ccode\u003eHttpSession\u003c/code\u003e is passivated or migrated,\n  and may result in difficult-to-diagnose bugs.\n\u003c/p\u003e\n\u003cp\u003e\n  This inspection assumes objects of the types \u003ccode\u003ejava.util.Collection\u003c/code\u003e and\n  \u003ccode\u003ejava.util.Map\u003c/code\u003e to be \u003ccode\u003eSerializable\u003c/code\u003e,\n  unless type parameters are non-\u003ccode\u003eSerializable\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(HttpSession session) {\n      session.setAttribute(\"foo\", new NonSerializable());\n  }\n  static class NonSerializable {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Spring Security",
      "inspections": [
        {
          "shortName": "SpringSecurityDebugActivatedInspection",
          "displayName": "Debug mode is activated in the Spring Security configuration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.security",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports activated \u003cstrong\u003e\u0026lt;debug\u0026gt;\u003c/strong\u003e that may expose sensitive information.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringSecurityAnnotationBeanPointersResolveInspection",
          "displayName": "Incorrect configuration of Spring beans referenced in the Spring Security annotation",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring.security",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved Spring beans referenced in \u003ca href\u003d\"https://spring.io/projects/spring-security\"\u003eSpring Security\u003c/a\u003e annotations.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cpre\u003e\u003ccode\u003e@WithUserDetails(value \u003d \"admin\", userDetailsServiceBeanName \u003d \"unknownUserDetailsService\")\n      // \"Cannot resolve \u0027unknownUserDetailsService\u0027 bean\" will be reported if \u0027unknownUserDetailsService\u0027 is not defined in the Spring model\n    \u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cpre\u003e\u003ccode\u003e@WithUserDetails(value \u003d \"admin\", userDetailsServiceBeanName \u003d \"jpaUserDetailsService\")\n      //\"Bean must be of \u0027org.springframework.security.core.userdetails.UserDetailsService\u0027 type\"\n      // will be reported if \"jpaUserDetailsService\"  bean is not of \u0027UserDetailsService\u0027 type\n    \u003c/code\u003e\u003c/pre\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringSecurityModelInspection",
          "displayName": "Incorrect Spring Security XML-based application context",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring.security",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports issues with the \u003ca href\u003d\"https://spring.io/projects/spring-security\"\u003eSpring Security\u003c/a\u003e XML-based context:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eUnresolved bean references\u003c/li\u003e\n  \u003cli\u003eMissing required tags or attributes\u003c/li\u003e\n  \u003cli\u003eIncorrect property types\u003c/li\u003e\n  \u003cli\u003eInconsistent \u003ccode\u003eenum\u003c/code\u003e properties\u003c/li\u003e\n  \u003cli\u003eIncorrect types of referenced beans\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAlso reports the following issues:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u0026lt;https\u0026gt; configuration errors\n    \u003cul\u003e\n      \u003cli\u003e\u0026lt;http\u0026gt; with the pattern \u0027/**\u0027 must be the last one\u003c/li\u003e\n      \u003cli\u003eMultiple \u0026lt;http\u0026gt; elements without \u0027pattern\u0027 are not allowed\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u0026lt;http\u0026gt; configuration errors\n    \u003cul\u003e\n      \u003cli\u003eEmpty tag if \u003ccode\u003esecurity\u003d\u0027none\u0027\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u0026lt;user-service\u0026gt;\n    \u003cul\u003e\n      \u003cli\u003eMust either have attribute \u0027properties\u0027 or list of \u0026lt;user\u0026gt; elements\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u0026lt;ldap-server\u0026gt;\n    \u003cul\u003e\n      \u003cli\u003e\u0027manager-password\u0027 is required when \u0027manager-dn\u0027 is used\u003c/li\u003e\n      \u003cli\u003eMust either have \u0027user-context-mapper-ref\u0027 or \u0027user-details-class\u0027\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u0026lt;authentication-provider\u0026gt;\n    \u003cul\u003e\n      \u003cli\u003eOnly one kind of user-service is allowed\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u0026lt;global-method-security\u0026gt;\n    \u003cul\u003e\n      \u003cli\u003e\u0027pre-post-annotations\u0027 must have the value \u0027enabled\u0027 to use \u0026lt;pre-post-annotation-handling\u0026gt;\u0027\u003c/li\u003e\n      \u003cli\u003eCannot use \u0027mode\u0027 with value \u0027aspectj\u0027 for \u0026lt;protect-pointcut\u0026gt; and \u0026lt;intercept-url\u0026gt;\u003c/li\u003e\n      \u003cli\u003e\u0027requires-channel\u0027 attribute only allowed for parent \u0026lt;http\u0026gt;\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u0026lt;protect\u0026gt;\n    \u003cul\u003e\n      \u003cli\u003eMixing \u0026lt;protect\u0026gt; with \u0026lt;global-method-security\u0026gt; is not recommended\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "TOML",
      "inspections": [
        {
          "shortName": "TomlUnresolvedReference",
          "displayName": "Unresolved reference",
          "defaultSeverity": "WARNING",
          "pluginId": "org.toml.lang",
          "pluginVersion": "231.9011.34",
          "language": "TOML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references in TOML files.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Version control",
      "inspections": [
        {
          "shortName": "IgnoreFileDuplicateEntry",
          "displayName": "Ignore file duplicates",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "IgnoreLang",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore).\nDuplicate entries in these files are redundant and can be removed.\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n    # Output directories\n    /out/\n    /target/\n    \u003cb\u003e\u003cspan style\u003d\"color: #BE9117; \"\u003e/out/\u003c/span\u003e\u003c/b\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "TestNG",
      "inspections": [
        {
          "shortName": "ConvertJavadoc",
          "displayName": "TestNG Javadoc can be converted to annotations",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003e\nAsserts your TestNG tests with Javadoc annotations and converts them to JDK annotations.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  /**\n    * @testng.before-test\n  */\n  public void sample() {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @BeforeTest\n  public void sample() {}\n\u003c/code\u003e\u003c/pre\u003e\n    \u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "DataProviderReturnType",
          "displayName": "Invalid data provider return type",
          "defaultSeverity": "ERROR",
          "pluginId": "TestNG-J",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods marked with \u003ccode\u003e@DataProvider\u003c/code\u003e annotation that doesn\u0027t return \u003ccode\u003eObject[][]\u003c/code\u003e or \u003ccode\u003eIterator\u0026lt;Object\u0026gt;\u003c/code\u003e.\nIf another type is returned, TestNG throws an exception.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\npublic class TestNgTest {\n  @DataProvider(name \u003d \"Languages\")\n  List\u0026ltString\u0026gt getData() {\n    return List.of(\"Java\", \"Kotlin\");\n  }\n\n  @Test(dataProvider \u003d \"Languages\")\n  public void testData(String language) {\n    System.out.println(language);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "groupsTestNG",
          "displayName": "Undefined group name",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nReports undefined group names passed to the \u003ccode\u003edependsOnGroups\u003c/code\u003e or \u003ccode\u003egroups\u003c/code\u003e attributes in the \u003ccode\u003e@Test\u003c/code\u003e annotation.\n\u003cp\u003eThe quick-fix adds an undefined name to a list of known groups.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eDefined Groups\u003c/b\u003e field to define a comma-separated list of known groups.\u003c/p\u003e\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "dependsOnMethodTestNG",
          "displayName": "Illegal method name passed to \u0027dependsOnMethods\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nReports illegal method names passed to the \u003ccode\u003edependsOnMethods\u003c/code\u003e attribute in the \u003ccode\u003e@Test\u003c/code\u003e annotation.\n\u003cp\u003eA method name is considered illegal if it can\u0027t be resolved into a valid, accessible \u003ccode\u003e@Test\u003c/code\u003e annotated method in the current class\n  or any of its parent classes.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class SampleTest {\n    @Test(dependsOnMethods \u003d \"testSpellignError\")\n    public void testSample() {}\n    @Test\n    public void testSpellingError(){}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\u003c/html\u003e\n"
        },
        {
          "shortName": "DuplicatedDataProviderNames",
          "displayName": "Duplicated data provider names",
          "defaultSeverity": "ERROR",
          "pluginId": "TestNG-J",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eTestNG\u003c/code\u003e data providers with equal names if \u003ccode\u003eorg.testng.TestNGException\u003c/code\u003e has occurred.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class DuplicatedDataProviders {\n    @DataProvider\n    public Object[][] intTestData() { // duplicate 1\n      return new Integer[][]{\n        new Integer[]{1, 1},\n      };\n    }\n\n    @DataProvider(name \u003d \"intTestData\")\n    public Object[][] someTestData() { // duplicate 2\n      return new Integer[][]{\n        new Integer[]{1, 1},\n      };\n    }\n\n    @Test(dataProvider \u003d \"intTestData\")\n    public void testIsOK(Integer key, Integer value) {\n      assertEquals(key, value);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MalformedDataProvider",
          "displayName": "Data provider problems",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nReports references to data provider methods that do not exist or are not accessible.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\npublic class InstanceDataProviderFromForeignClass {\n  // method data() doesn\u0027t exist in class A\n  @Test(dataProvider \u003d \"data\", dataProviderClass \u003d A.class)\n  public void test() {\n  }\n}\nclass A { }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n//the needed data() method is created in class A\nclass A {\n  @DataProvider\n  public Object[][] data() {\n    return new Object[][]{};\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "ConvertOldAnnotations",
          "displayName": "Old TestNG annotation @Configuration is used",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports TestNG \u003ccode\u003eorg.testng.annotations.Configuration\u003c/code\u003e annotations.\n\u003cp\u003eIt\u0027s better to configure a test suite with the modern \u003ccode\u003e@BeforeXXX\u003c/code\u003e/\u003ccode\u003e@AfterXXX\u003c/code\u003e annotations.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Test {\n    @Configuration(beforeSuite \u003d true, afterTest \u003d true)\n    public void afterBefore(){\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Test {\n    @AfterTest()\n    @BeforeSuite()\n    public void afterBefore(){\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JUnitTestNG",
          "displayName": "JUnit Test can be converted to TestNG",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any JUnit-based test class that can be converted into TestNG based unit test.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class ExampleTest {\n  @Test\n  public void testExample(){\n    assertEquals(2 + 2, 4);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nimport org.testng.Assert;\nimport org.testng.annotations.Test;\n\npublic class ExampleTest {\n  @Test\n  public void testExample(){\n    Assert.assertEquals(4, 2 + 2);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UndeclaredTests",
          "displayName": "Undeclared test",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports test classes that are not registered in \u003ccode\u003etesting.xml\u003c/code\u003e. This is often a mistake because such tests won\u0027t be executed.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExpectedExceptionNeverThrownTestNG",
          "displayName": "Expected exception never thrown in test method body",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports checked exceptions expected by a TestNG test method that are never thrown inside the method body.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test(expectedExceptions \u003d Exception.class) // warning: Expected \u0027Exception\u0027 never thrown\n  public void testEngineIsRunning() {\n    assertTrue(engine.isRunning());\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Android Lint: Security",
      "inspections": [
        {
          "shortName": "AndroidLintGetInstance",
          "displayName": "Cipher.getInstance with ECB",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCipher.getInstance with ECB\u003cbr\u003e\u003cbr\u003e\u003ccode\u003eCipher#getInstance\u003c/code\u003e should not be called with ECB as the cipher mode or without setting the cipher mode because the default mode on android is ECB, which is insecure.\u003cbr\u003e\u003cbr\u003eIssue id: GetInstance\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSetWorldReadable",
          "displayName": "File.setReadable() used to make file world-readable",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003eFile.setReadable()\u003c/code\u003e used to make file world-readable\u003cbr\u003e\u003cbr\u003eSetting files world-readable is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanisms for interactions such as \u003ccode\u003eContentProvider\u003c/code\u003e, \u003ccode\u003eBroadcastReceiver\u003c/code\u003e, and \u003ccode\u003eService\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: SetWorldReadable\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintReservedSystemPermission",
          "displayName": "Permission name is a reserved Android permission",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003ePermission name is a reserved Android permission\u003cbr\u003e\u003cbr\u003eThis check looks for custom permission declarations whose names are reserved values for system or Android SDK permissions, or begin with the reserved string \u003ccode\u003eandroid.\u003c/code\u003e\u003cbr/\u003e\n\u003cbr/\u003e\nPlease double check the permission name you have supplied. Attempting to redeclare a system or Android SDK permission will be ignored.  Using the prefix \u003ccode\u003eandroid.\u003c/code\u003e is a violation of the Android Compatibility Definition Document.\u003cbr\u003e\u003cbr\u003eIssue id: ReservedSystemPermission\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDeprecatedProvider",
          "displayName": "Using BC Provider",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing BC Provider\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003eBC\u003c/code\u003e provider has been deprecated and will not be provided when \u003ccode\u003etargetSdkVersion\u003c/code\u003e is P or higher.\u003cbr\u003e\u003cbr\u003eIssue id: DeprecatedProvider\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html\"\u003ehttps://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPermissionNamingConvention",
          "displayName": "Permission name does not follow recommended convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003ePermission name does not follow recommended convention\u003cbr\u003e\u003cbr\u003ePermissions should be prefixed with an app\u0027s package name, using reverse-domain-style naming. This prefix should be followed by \u003ccode\u003e.permission.\u003c/code\u003e, and then a description of the capability that the permission represents, in upper SNAKE_CASE. For example, \u003ccode\u003ecom.example.myapp.permission.ENGAGE_HYPERSPACE\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nFollowing this recommendation avoids naming collisions, and helps clearly identify the owner and intention of a custom permission.\u003cbr\u003e\u003cbr\u003eIssue id: PermissionNamingConvention\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSSLCertificateSocketFactoryCreateSocket",
          "displayName": "Insecure call to SSLCertificateSocketFactory.createSocket()",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInsecure call to \u003ccode\u003eSSLCertificateSocketFactory.createSocket()\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eWhen \u003ccode\u003eSSLCertificateSocketFactory.createSocket()\u003c/code\u003e is called with an \u003ccode\u003eInetAddress\u003c/code\u003e as the first parameter, TLS/SSL hostname verification is not performed, which could result in insecure network traffic caused by trusting arbitrary hostnames in TLS/SSL certificates presented by peers. In this case, developers must ensure that the \u003ccode\u003eInetAddress\u003c/code\u003e is explicitly verified against the certificate through other means, such as by calling `SSLCertificateSocketFactory.getDefaultHostnameVerifier() to get a \u003ccode\u003eHostnameVerifier\u003c/code\u003e and calling \u003ccode\u003eHostnameVerifier.verify()\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: SSLCertificateSocketFactoryCreateSocket\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUsingHttp",
          "displayName": "Using HTTP instead of HTTPS",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing HTTP instead of HTTPS\u003cbr\u003e\u003cbr\u003eThe Gradle Wrapper is available both via HTTP and HTTPS. HTTPS is more secure since it protects against man-in-the-middle attacks etc. Older projects created in Android Studio used HTTP but we now default to HTTPS and recommend upgrading existing projects.\u003cbr\u003e\u003cbr\u003eIssue id: UsingHttp\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInsecureBaseConfiguration",
          "displayName": "Insecure Base Configuration",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInsecure Base Configuration\u003cbr\u003e\u003cbr\u003ePermitting cleartext traffic could allow eavesdroppers to intercept data sent by your app, which impacts the privacy of your users. Consider only allowing encrypted traffic by setting the \u003ccode\u003ecleartextTrafficPermitted\u003c/code\u003e tag to \u003ccode\u003e\"false\"\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: InsecureBaseConfiguration\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/preview/features/security-config.html\"\u003ehttps://developer.android.com/preview/features/security-config.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintShortAlarm",
          "displayName": "Short or Frequent Alarm",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eShort or Frequent Alarm\u003cbr\u003e\u003cbr\u003eFrequent alarms are bad for battery life. As of API 22, the \u003ccode\u003eAlarmManager\u003c/code\u003e will override near-future and high-frequency alarm requests, delaying the alarm at least 5 seconds into the future and ensuring that the repeat interval is at least 60 seconds.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you really need to do work sooner than 5 seconds, post a delayed message or runnable to a Handler.\u003cbr\u003e\u003cbr\u003eIssue id: ShortAlarm\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnprotectedSMSBroadcastReceiver",
          "displayName": "Unprotected SMS BroadcastReceiver",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnprotected SMS \u003ccode\u003eBroadcastReceiver\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eBroadcastReceivers that declare an intent-filter for \u003ccode\u003eSMS_DELIVER\u003c/code\u003e or \u003ccode\u003eSMS_RECEIVED\u003c/code\u003e must ensure that the caller has the \u003ccode\u003eBROADCAST_SMS\u003c/code\u003e permission, otherwise it is possible for malicious actors to spoof intents.\u003cbr\u003e\u003cbr\u003eIssue id: UnprotectedSMSBroadcastReceiver\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintExportedContentProvider",
          "displayName": "Content provider does not require permission",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eContent provider does not require permission\u003cbr\u003e\u003cbr\u003eContent providers are exported by default and any application on the system can potentially use them to read and write data. If the content provider provides access to sensitive data, it should be protected by specifying \u003ccode\u003eexport\u003dfalse\u003c/code\u003e in the manifest or by protecting it with a permission that can be granted to other applications.\u003cbr\u003e\u003cbr\u003eIssue id: ExportedContentProvider\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintExportedPreferenceActivity",
          "displayName": "PreferenceActivity should not be exported",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003ePreferenceActivity should not be exported\u003cbr\u003e\u003cbr\u003eFragment injection gives anyone who can send your \u003ccode\u003ePreferenceActivity\u003c/code\u003e an intent the ability to load any fragment, with any arguments, in your process.\u003cbr\u003e\u003cbr\u003eIssue id: ExportedPreferenceActivity\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"http://securityintelligence.com/new-vulnerability-android-framework-fragment-injection\"\u003ehttp://securityintelligence.com/new-vulnerability-android-framework-fragment-injection\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUseCheckPermission",
          "displayName": "Using the result of check permission calls",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing the result of check permission calls\u003cbr\u003e\u003cbr\u003eYou normally want to use the result of checking a permission; these methods return whether the permission is held; they do not throw an error if the permission is not granted. Code which does not do anything with the return value probably meant to be calling the enforce methods instead, e.g. rather than \u003ccode\u003eContext#checkCallingPermission\u003c/code\u003e it should call \u003ccode\u003eContext#enforceCallingPermission\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: UseCheckPermission\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintBidiSpoofing",
          "displayName": "Bidirectional text spoofing",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eBidirectional text spoofing\u003cbr\u003e\u003cbr\u003eUnicode bidirectional text characters can alter the order in which the compiler processes tokens. However, this can also be used to hide malicious code, and can be difficult to spot. This lint check audits the source code and looks for cases where it looks like bidirectional text has the potential to be misleading.\u003cbr\u003e\u003cbr\u003eIssue id: BidiSpoofing\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://krebsonsecurity.com/2021/11/trojan-source-bug-threatens-the-security-of-all-code/\"\u003ehttps://krebsonsecurity.com/2021/11/trojan-source-bug-threatens-the-security-of-all-code/\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTrustAllX509TrustManager",
          "displayName": "Insecure TLS/SSL trust manager",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInsecure TLS/SSL trust manager\u003cbr\u003e\u003cbr\u003eThis check looks for X509TrustManager implementations whose \u003ccode\u003echeckServerTrusted\u003c/code\u003e or \u003ccode\u003echeckClientTrusted\u003c/code\u003e methods do nothing (thus trusting any certificate chain) which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers.\u003cbr\u003e\u003cbr\u003eIssue id: TrustAllX509TrustManager\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintExportedReceiver",
          "displayName": "Receiver does not require permission",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eReceiver does not require permission\u003cbr\u003e\u003cbr\u003eExported receivers (receivers which either set \u003ccode\u003eexported\u003dtrue\u003c/code\u003e or contain an intent-filter and do not specify \u003ccode\u003eexported\u003dfalse\u003c/code\u003e) should define a permission that an entity must have in order to launch the receiver or bind to it. Without this, any application can use this receiver.\u003cbr\u003e\u003cbr\u003eIssue id: ExportedReceiver\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIntentFilterExportedReceiver",
          "displayName": "Unspecified android:exported in manifest",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnspecified \u003ccode\u003eandroid:exported\u003c/code\u003e in manifest\u003cbr\u003e\u003cbr\u003eApps targeting Android 12 and higher are required to specify an explicit value for \u003ccode\u003eandroid:exported\u003c/code\u003e when the corresponding component has an intent filter defined. Otherwise, installation will fail. Set it to \u003ccode\u003etrue\u003c/code\u003e to make this activity accessible to other apps, and \u003ccode\u003efalse\u003c/code\u003e to limit it to be used only by this app or the OS. For launch activities, this should be set to true; otherwise, the app will fail to launch.\u003cbr/\u003e\n\u003cbr/\u003e\nPreviously, \u003ccode\u003eandroid:exported\u003c/code\u003e for components without any intent filters present used to default to \u003ccode\u003efalse\u003c/code\u003e, and when intent filters were present, the default was \u003ccode\u003etrue\u003c/code\u003e. Defaults which change value based on other values are confusing and lead to apps accidentally exporting components as a side-effect of adding intent filters. This is a security risk, and we have made this change to avoid introducing accidental vulnerabilities.\u003cbr/\u003e\n\u003cbr/\u003e\nWhile the default without intent filters remains unchanged, it is now required to explicitly specify a value when intent filters are present. Any app failing to meet this requirement will fail to install on any Android version after Android 11.\u003cbr/\u003e\n\u003cbr/\u003e\nWe recommend setting \u003ccode\u003eandroid:exported\u003c/code\u003e to false (even on previous versions of Android prior to this requirement) unless you have a good reason to export a particular component.\u003cbr\u003e\u003cbr\u003eIssue id: IntentFilterExportedReceiver\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintEasterEgg",
          "displayName": "Code contains easter egg",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eCode contains easter egg\u003cbr\u003e\u003cbr\u003eAn \"easter egg\" is code deliberately hidden in the code, both from potential users and even from other developers. This lint check looks for code which looks like it may be hidden from sight.\u003cbr\u003e\u003cbr\u003eIssue id: EasterEgg\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSystemPermissionTypo",
          "displayName": "Permission appears to be a standard permission with a typo",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003ePermission appears to be a standard permission with a typo\u003cbr\u003e\u003cbr\u003eThis check looks for required permissions that \u003ci\u003elook\u003c/i\u003e like well-known system permissions or permissions from the Android SDK, but aren\u0027t, and may be typos.\u003cbr/\u003e\n\u003cbr/\u003e\nPlease double check the permission value you have supplied.\u003cbr\u003e\u003cbr\u003eIssue id: SystemPermissionTypo\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintKnownPermissionError",
          "displayName": "Value specified for permission is a known error",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eValue specified for permission is a known error\u003cbr\u003e\u003cbr\u003eThis check looks for values specified in component permissions that are known errors, such as \u003ccode\u003eandroid:permission\u003d\"true\"\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\n Please double check the permission value you have supplied. The value is expected to be a  permission string from the system, another app, or your own, NOT a boolean.\u003cbr\u003e\u003cbr\u003eIssue id: KnownPermissionError\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintCustomPermissionTypo",
          "displayName": "Permission appears to be a custom permission with a typo",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003ePermission appears to be a custom permission with a typo\u003cbr\u003e\u003cbr\u003eThis check looks for required permissions that \u003ci\u003elook\u003c/i\u003e like custom permissions defined in the same manifest, but aren\u0027t, and may be typos.\u003cbr/\u003e\n\u003cbr/\u003e\nPlease double check the permission value you have supplied.\u003cbr\u003e\u003cbr\u003eIssue id: CustomPermissionTypo\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSecureRandom",
          "displayName": "Using a fixed seed with SecureRandom",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing a fixed seed with \u003ccode\u003eSecureRandom\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eSpecifying a fixed seed will cause the instance to return a predictable sequence of numbers. This may be useful for testing but it is not appropriate for secure use.\u003cbr\u003e\u003cbr\u003eIssue id: SecureRandom\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/java/security/SecureRandom.html\"\u003ehttps://developer.android.com/reference/java/security/SecureRandom.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDeletedProvider",
          "displayName": "Using Deleted Provider",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing Deleted Provider\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003eCrypto\u003c/code\u003e provider has been completely removed in Android P (and was deprecated in an earlier release). This means that the code will throw a \u003ccode\u003eNoSuchProviderException\u003c/code\u003e and the app will crash. Even if the code catches that exception at a higher level, this is not secure and should not be used.\u003cbr\u003e\u003cbr\u003eIssue id: DeletedProvider\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html\"\u003ehttps://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintHardwareIds",
          "displayName": "Hardware Id Usage",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eHardware Id Usage\u003cbr\u003e\u003cbr\u003eUsing these device identifiers is not recommended other than for high value fraud prevention and advanced telephony use-cases. For advertising use-cases, use \u003ccode\u003eAdvertisingIdClient$Info#getId\u003c/code\u003e and for analytics, use \u003ccode\u003eInstanceId#getId\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: HardwareIds\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/articles/user-data-ids.html\"\u003ehttps://developer.android.com/training/articles/user-data-ids.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAuthLeak",
          "displayName": "Code might contain an auth leak",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCode might contain an auth leak\u003cbr\u003e\u003cbr\u003eStrings in java apps can be discovered by decompiling apps, this lint check looks for code which looks like it may contain an url with a username and password\u003cbr\u003e\u003cbr\u003eIssue id: AuthLeak\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAddJavascriptInterface",
          "displayName": "addJavascriptInterface Called",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003eaddJavascriptInterface\u003c/code\u003e Called\u003cbr\u003e\u003cbr\u003eFor applications built for API levels below 17, \u003ccode\u003eWebView#addJavascriptInterface\u003c/code\u003e presents a security hazard as JavaScript on the target web page has the ability to use reflection to access the injected object\u0027s public fields and thus manipulate the host application in unintended ways.\u003cbr\u003e\u003cbr\u003eIssue id: AddJavascriptInterface\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,%20java.lang.String)\"\u003ehttps://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,%20java.lang.String)\u003c/a\u003e\u003cbr\u003e\u003ca href\u003d\"https://support.google.com/faqs/answer/9095419?hl\u003den\"\u003ehttps://support.google.com/faqs/answer/9095419?hl\u003den\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintJavascriptInterface",
          "displayName": "Missing @JavascriptInterface on methods",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing @JavascriptInterface on methods\u003cbr\u003e\u003cbr\u003eAs of API 17, you must annotate methods in objects registered with the \u003ccode\u003eaddJavascriptInterface\u003c/code\u003e method with a \u003ccode\u003e@JavascriptInterface\u003c/code\u003e annotation.\u003cbr\u003e\u003cbr\u003eIssue id: JavascriptInterface\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)\"\u003ehttps://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUsingC2DM",
          "displayName": "Using C2DM",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing C2DM\u003cbr\u003e\u003cbr\u003eThe C2DM library does not work on Android P or newer devices; you should migrate to Firebase Cloud Messaging to ensure reliable message delivery.\u003cbr\u003e\u003cbr\u003eIssue id: UsingC2DM\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developers.google.com/cloud-messaging/c2dm\"\u003ehttps://developers.google.com/cloud-messaging/c2dm\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnspecifiedImmutableFlag",
          "displayName": "Missing PendingIntent mutability flag",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing \u003ccode\u003ePendingIntent\u003c/code\u003e mutability flag\u003cbr\u003e\u003cbr\u003eApps targeting Android 12 and higher must specify either \u003ccode\u003eFLAG_IMMUTABLE\u003c/code\u003e or \u003ccode\u003eFLAG_MUTABLE\u003c/code\u003e when constructing a \u003ccode\u003ePendingIntent\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: UnspecifiedImmutableFlag\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/about/versions/12/behavior-changes-12#pending-intent-mutability\"\u003ehttps://developer.android.com/about/versions/12/behavior-changes-12#pending-intent-mutability\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWorldWriteableFiles",
          "displayName": "openFileOutput() with MODE_WORLD_WRITEABLE",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003eopenFileOutput()\u003c/code\u003e with \u003ccode\u003eMODE_WORLD_WRITEABLE\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eThere are cases where it is appropriate for an application to write world writeable files, but these should be reviewed carefully to ensure that they contain no private data, and that if the file is modified by a malicious application it does not trick or compromise your application.\u003cbr\u003e\u003cbr\u003eIssue id: WorldWriteableFiles\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnsafeProtectedBroadcastReceiver",
          "displayName": "Unsafe Protected BroadcastReceiver",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnsafe Protected \u003ccode\u003eBroadcastReceiver\u003c/code\u003e\u003cbr\u003e\u003cbr\u003e`BroadcastReceiver`s that declare an intent-filter for a protected-broadcast action string must check that the received intent\u0027s action string matches the expected value, otherwise it is possible for malicious actors to spoof intents.\u003cbr\u003e\u003cbr\u003eIssue id: UnsafeProtectedBroadcastReceiver\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDataExtractionRules",
          "displayName": "Missing data extraction rules",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing data extraction rules\u003cbr\u003e\u003cbr\u003eBefore Android 12, the attributes \u003ccode\u003eandroid:allowBackup\u003c/code\u003e and \u003ccode\u003eandroid:fullBackupContent\u003c/code\u003e were used to configure all forms of backup, including cloud backups, device-to-device transfers and adb backup.\u003cbr/\u003e\n\u003cbr/\u003e\nIn Android 12 and higher, these attributes have been deprecated and will only apply to cloud backups. You should instead use the attribute \u003ccode\u003eandroid:dataExtractionRules\u003c/code\u003e, specifying an \u003ccode\u003e@xml\u003c/code\u003e resource that configures which files to back up, for cloud backups and for device-to-device transfers, separately. If your \u003ccode\u003eminSdkVersion\u003c/code\u003e supports older versions, you\u0027ll still want to specify an \u003ccode\u003eandroid:fullBackupContent\u003c/code\u003e resource if the default behavior is not right for your app.\u003cbr\u003e\u003cbr\u003eIssue id: DataExtractionRules\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/about/versions/12/backup-restore#xml-changes\"\u003ehttps://developer.android.com/about/versions/12/backup-restore#xml-changes\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSSLCertificateSocketFactoryGetInsecure",
          "displayName": "Call to SSLCertificateSocketFactory.getInsecure()",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCall to \u003ccode\u003eSSLCertificateSocketFactory.getInsecure()\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003eSSLCertificateSocketFactory.getInsecure()\u003c/code\u003e method returns an SSLSocketFactory with all TLS/SSL security checks disabled, which could result in insecure network traffic caused by trusting arbitrary TLS/SSL certificates presented by peers. This method should be avoided unless needed for a special circumstance such as debugging. Instead, \u003ccode\u003eSSLCertificateSocketFactory.getDefault()\u003c/code\u003e should be used.\u003cbr\u003e\u003cbr\u003eIssue id: SSLCertificateSocketFactoryGetInsecure\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTileProviderPermissions",
          "displayName": "TileProvider should declare BIND_TILE_PROVIDER permission",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eTileProvider does not set permission\u003cbr\u003e\u003cbr\u003eTileProviders should require the \u003ccode\u003ecom.google.android.wearable.permission.BIND_TILE_PROVIDER\u003c/code\u003e permission to prevent arbitrary apps from binding to it.\u003cbr\u003e\u003cbr\u003eIssue id: TileProviderPermissions\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGrantAllUris",
          "displayName": "Content provider shares everything",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eContent provider shares everything\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e\u0026lt;grant-uri-permission\u003e\u003c/code\u003e element allows specific paths to be shared. This detector checks for a path URL of just \u0027/\u0027 (everything), which is probably not what you want; you should limit access to a subset.\u003cbr\u003e\u003cbr\u003eIssue id: GrantAllUris\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnsafeNativeCodeLocation",
          "displayName": "Native code outside library directory",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNative code outside library directory\u003cbr\u003e\u003cbr\u003eIn general, application native code should only be placed in the application\u0027s library directory, not in other locations such as the res or assets directories. Placing the code in the library directory provides increased assurance that the code will not be tampered with after application installation. Application developers should use the features of their development environment to place application native libraries into the lib directory of their compiled APKs. Embedding non-shared library native executables into applications should be avoided when possible.\u003cbr\u003e\u003cbr\u003eIssue id: UnsafeNativeCodeLocation\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInvalidPermission",
          "displayName": "Invalid Permission Attribute",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid Permission Attribute\u003cbr\u003e\u003cbr\u003eNot all elements support the permission attribute. If a permission is set on an invalid element, it is a no-op and ignored. Ensure that this permission attribute was set on the correct element to protect the correct component.\u003cbr\u003e\u003cbr\u003eIssue id: InvalidPermission\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintCustomX509TrustManager",
          "displayName": "Implements custom TLS trust manager",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eImplements custom TLS trust manager\u003cbr\u003e\u003cbr\u003eThis check looks for custom \u003ccode\u003eX509TrustManager\u003c/code\u003e implementations.\u003cbr\u003e\u003cbr\u003eIssue id: CustomX509TrustManager\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintHardcodedDebugMode",
          "displayName": "Hardcoded value of android:debuggable in the manifest",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eHardcoded value of \u003ccode\u003eandroid:debuggable\u003c/code\u003e in the manifest\u003cbr\u003e\u003cbr\u003eIt\u0027s best to leave out the \u003ccode\u003eandroid:debuggable\u003c/code\u003e attribute from the manifest. If you do, then the tools will automatically insert \u003ccode\u003eandroid:debuggable\u003dtrue\u003c/code\u003e when building an APK to debug on an emulator or device. And when you perform a release build, such as Exporting APK, it will automatically set it to \u003ccode\u003efalse\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nIf on the other hand you specify a specific value in the manifest file, then the tools will always use it. This can lead to accidentally publishing your app with debug information.\u003cbr\u003e\u003cbr\u003eIssue id: HardcodedDebugMode\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSignatureOrSystemPermissions",
          "displayName": "Declaring signatureOrSystem permissions",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDeclaring signatureOrSystem permissions\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003esignature\u003c/code\u003e protection level should probably be sufficient for most needs and works regardless of where applications are installed. The \u003ccode\u003esignatureOrSystem\u003c/code\u003e level is used for certain situations where multiple vendors have applications built into a system image and need to share specific features explicitly because they are being built together.\u003cbr\u003e\u003cbr\u003eIssue id: SignatureOrSystemPermissions\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintBadHostnameVerifier",
          "displayName": "Insecure HostnameVerifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInsecure HostnameVerifier\u003cbr\u003e\u003cbr\u003eThis check looks for implementations of \u003ccode\u003eHostnameVerifier\u003c/code\u003e whose \u003ccode\u003everify\u003c/code\u003e method always returns true (thus trusting any hostname) which could result in insecure network traffic caused by trusting arbitrary hostnames in TLS/SSL certificates presented by peers.\u003cbr\u003e\u003cbr\u003eIssue id: BadHostnameVerifier\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPackagedPrivateKey",
          "displayName": "Packaged private key",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003ePackaged private key\u003cbr\u003e\u003cbr\u003eIn general, you should not package private key files inside your app.\u003cbr\u003e\u003cbr\u003eIssue id: PackagedPrivateKey\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintExportedService",
          "displayName": "Exported service does not require permission",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eExported service does not require permission\u003cbr\u003e\u003cbr\u003eExported services (services which either set \u003ccode\u003eexported\u003dtrue\u003c/code\u003e or contain an intent-filter and do not specify \u003ccode\u003eexported\u003dfalse\u003c/code\u003e) should define a permission that an entity must have in order to launch the service or bind to it. Without this, any application can use this service.\u003cbr\u003e\u003cbr\u003eIssue id: ExportedService\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAcceptsUserCertificates",
          "displayName": "Allowing User Certificates",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAllowing User Certificates\u003cbr\u003e\u003cbr\u003eAllowing user certificates could allow eavesdroppers to intercept data sent by your app, \u0027which could impact the privacy of your users. Consider nesting your app\u0027s \u003ccode\u003etrust-anchors\u003c/code\u003e inside a \u003ccode\u003e\u0026lt;debug-overrides\u003e\u003c/code\u003e element to make sure they are only available when \u003ccode\u003eandroid:debuggable\u003c/code\u003e is set to \u003ccode\u003e\"true\"\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: AcceptsUserCertificates\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/articles/security-config#TrustingDebugCa\"\u003ehttps://developer.android.com/training/articles/security-config#TrustingDebugCa\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRiskyLibrary",
          "displayName": "Libraries with Privacy or Security Risks",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eLibraries with Privacy or Security Risks\u003cbr\u003e\u003cbr\u003eYour app is using a version of a library that has been identified by the library developer as a potential source of privacy and/or security risks. This may be a violation of Google Play policies (see \u003ca href\u003d\"https://play.google.com/about/monetization-ads/ads/\"\u003ehttps://play.google.com/about/monetization-ads/ads/\u003c/a\u003e) and/or affect your app\u0026#8217;s visibility on the Play Store.\u003cbr/\u003e\n\u003cbr/\u003e\nWhen available, the individual error messages from lint will include details about the reasons for this advisory.\u003cbr/\u003e\n\u003cbr/\u003e\nPlease try updating your app with an updated version of this library, or remove it from your app.\u003cbr\u003e\u003cbr\u003eIssue id: RiskyLibrary\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://play.google.com/sdks\"\u003ehttps://play.google.com/sdks\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnsafeDynamicallyLoadedCode",
          "displayName": "load used to dynamically load code",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003eload\u003c/code\u003e used to dynamically load code\u003cbr\u003e\u003cbr\u003eDynamically loading code from locations other than the application\u0027s library directory or the Android platform\u0027s built-in library directories is dangerous, as there is an increased risk that the code could have been tampered with. Applications should use \u003ccode\u003eloadLibrary\u003c/code\u003e when possible, which provides increased assurance that libraries are loaded from one of these safer locations. Application developers should use the features of their development environment to place application native libraries into the lib directory of their compiled APKs.\u003cbr\u003e\u003cbr\u003eIssue id: UnsafeDynamicallyLoadedCode\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAllowAllHostnameVerifier",
          "displayName": "Insecure HostnameVerifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInsecure \u003ccode\u003eHostnameVerifier\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eThis check looks for use of HostnameVerifier implementations whose \u003ccode\u003everify\u003c/code\u003e method always returns true (thus trusting any hostname) which could result in insecure network traffic caused by trusting arbitrary hostnames in TLS/SSL certificates presented by peers.\u003cbr\u003e\u003cbr\u003eIssue id: AllowAllHostnameVerifier\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWebViewClientOnReceivedSslError",
          "displayName": "Proceeds with the HTTPS connection despite SSL errors",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eProceeds with the HTTPS connection despite SSL errors\u003cbr\u003e\u003cbr\u003eThis check looks for \u003ccode\u003eonReceivedSslError\u003c/code\u003e implementations that invoke \u003ccode\u003eSslErrorHandler#proceed\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: WebViewClientOnReceivedSslError\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintProxyPassword",
          "displayName": "Proxy Password in Cleartext",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eProxy Password in Cleartext\u003cbr\u003e\u003cbr\u003eStoring proxy server passwords in clear text is dangerous if this file is shared via version control. If this is deliberate or this is a truly private project, suppress this warning.\u003cbr\u003e\u003cbr\u003eIssue id: ProxyPassword\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWorldReadableFiles",
          "displayName": "openFileOutput() with MODE_WORLD_READABLE",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003eopenFileOutput()\u003c/code\u003e with \u003ccode\u003eMODE_WORLD_READABLE\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eThere are cases where it is appropriate for an application to write world readable files, but these should be reviewed carefully to ensure that they contain no private data that is leaked to other applications.\u003cbr\u003e\u003cbr\u003eIssue id: WorldReadableFiles\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPackageManagerGetSignatures",
          "displayName": "Potential Multiple Certificate Exploit",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003ePotential Multiple Certificate Exploit\u003cbr\u003e\u003cbr\u003eImproper validation of app signatures could lead to issues where a malicious app submits itself to the Play Store with both its real certificate and a fake certificate and gains access to functionality or information it shouldn\u0027t have due to another application only checking for the fake certificate and ignoring the rest. Please make sure to validate all signatures returned by this method.\u003cbr\u003e\u003cbr\u003eIssue id: PackageManagerGetSignatures\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://bluebox.com/technical/android-fake-id-vulnerability/\"\u003ehttps://bluebox.com/technical/android-fake-id-vulnerability/\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Plugin DevKit",
      "inspections": [
        {
          "shortName": "DevKitPropertiesQuotesValidation",
          "displayName": "Quotes validation in properties files",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports wrong number of quotes around parameter in property value.\n\u003cp\u003e\n  If parameters are present in the property value, then the value will be passed as a pattern to \u003ccode\u003ejava.text.MessageFormat\u003c/code\u003e.\n  This means that single quotes are used for escaping. Thus to keep a quote visible, it must be duplicated:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e\u0027{0}\u0027\u003c/code\u003e \u0026rarr; \u003ccode\u003e{0}\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u0027\u0027{0}\u0027\u0027\u003c/code\u003e \u0026rarr; \u003ccode\u003e\u0027$value$\u0027\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  When using choice format, nested formats are evaluated as formats themselves, and second double quotes are required.\n  When passing \u003ccode\u003e1\u003c/code\u003e:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e{0, choice, 0#no|#1\u0027\u0027{0}\u0027\u0027 file}\u003c/code\u003e \u0026rarr; \u003ccode\u003e{0} files\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e{0, choice, 0#no|#1\u0027\u0027\u0027\u0027{0}\u0027\u0027\u0027\u0027 file}\u003c/code\u003e \u0026rarr; \u003ccode\u003e\u0027$number_of_files$\u0027 files\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Android Lint: Productivity",
      "inspections": [
        {
          "shortName": "AndroidLintKtxExtensionAvailable",
          "displayName": "KTX Extension Available",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eKTX Extension Available\u003cbr\u003e\u003cbr\u003eAndroid KTX extensions augment some libraries with support for modern Kotlin language features like extension functions, extension properties, lambdas, named parameters, coroutines, and more.\u003cbr/\u003e\n\u003cbr/\u003e\nIn Kotlin projects, use the KTX version of a library by replacing the dependency in your \u003ccode\u003ebuild.gradle\u003c/code\u003e file. For example, you can replace \u003ccode\u003eandroidx.fragment:fragment\u003c/code\u003e with \u003ccode\u003eandroidx.fragment:fragment-ktx\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: KtxExtensionAvailable\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/kotlin/ktx\"\u003ehttps://developer.android.com/kotlin/ktx\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Style",
      "inspections": [
        {
          "shortName": "UnusedVersionCatalogEntry",
          "displayName": "Unused version catalog entry",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "231.9011.34",
          "language": "TOML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e                                            \n\u003cp\u003eDetects unused keys in TOML descriptors of version catalogs. \u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n// build.gradle\ndependencies {\n  implementation libs.foo.bar\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n// libs.versions.toml\n[libraries]\nfoo-bar \u003d \"com.gradle:example:1.0.0\"\nbar-baz \u003d \"com.gradle:example:2.0.0\" // highlights bar-baz\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Shell script",
      "inspections": [
        {
          "shortName": "ShellCheck",
          "displayName": "ShellCheck",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.sh",
          "pluginVersion": "231.9011.34",
          "language": "Shell Script",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports shell script bugs detected by the integrated \u003ca href\u003d\"https://github.com/koalaman/shellcheck\"\u003eShellCheck\u003c/a\u003e static analysis tool.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "HOCON",
      "inspections": [
        {
          "shortName": "HoconIncludeResolution",
          "displayName": "Include resolution",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.hocon",
          "pluginVersion": "2023.1.0",
          "language": "HOCON",
          "isGlobalTool": false,
          "enabled": true,
          "description": ""
        },
        {
          "shortName": "HoconRequiredIncludeResolution",
          "displayName": "Required include resolution",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.plugins.hocon",
          "pluginVersion": "2023.1.0",
          "language": "HOCON",
          "isGlobalTool": false,
          "enabled": true,
          "description": ""
        }
      ]
    },
    {
      "name": "Java 9",
      "inspections": [
        {
          "shortName": "ReplaceNullCheck",
          "displayName": "Null check can be replaced with method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003enull\u003c/code\u003e checks that can be replaced with a call to a static method from \u003ccode\u003eObjects\u003c/code\u003e or \u003ccode\u003eStream\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (message \u003d\u003d null) {\n    application.messageStorage().save(new EmptyMessage());\n  } else {\n    application.messageStorage().save(message);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  application.messageStorage()\n    .save(Objects.requireNonNullElseGet(message, () -\u003e new EmptyMessage()));\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eDon\u0027t warn if the replacement is longer than the original\u003c/b\u003e option to ignore the cases when the replacement is longer than the\n  original code.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Java9CollectionFactory",
          "displayName": "Immutable collection creation can be replaced with collection factory call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ejava.util.Collections\u003c/code\u003e unmodifiable collection calls\nthat can be converted to newer collection factory methods.\nThese can be replaced with e.g. \u003ccode\u003eList.of()\u003c/code\u003e or \u003ccode\u003eSet.of()\u003c/code\u003e introduced in Java 9\nor \u003ccode\u003eList.copyOf()\u003c/code\u003e introduced in Java 10.\n\n\u003cp\u003eNote that in contrast to \u003ccode\u003ejava.util.Collections\u003c/code\u003e methods, Java 9 collection factory methods:\n\u003cul\u003e\n  \u003cli\u003eDo not accept \u003ccode\u003enull\u003c/code\u003e values.\n  \u003cli\u003eRequire unique set elements and map keys.\n  \u003cli\u003eDo not accept \u003ccode\u003enull\u003c/code\u003e arguments to query methods like \u003ccode\u003eList.contains()\u003c/code\u003e or \u003ccode\u003eMap.get()\u003c/code\u003e of the collections returned.\n\u003c/ul\u003e\n\u003cp\u003eWhen these cases are violated, exceptions are thrown.\n  This can change the semantics of the code after the migration.\u003c/p\u003e\n\u003cp\u003eExample:\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;Integer\u003e even \u003d Collections.unmodifiableList(\n    Arrays.asList(2, 4, 6, 8, 10, 2));\n  List\u0026lt;Integer\u003e evenCopy \u003d Collections.unmodifiableList(\n    new ArrayList\u0026lt;\u003e(list1));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;Integer\u003e even \u003d List.of(2, 4, 6, 8, 10, 2);\n  List\u0026lt;Integer\u003e evenCopy \u003d List.copyOf(list);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 9 or higher.\n\u003cp\u003e\nUse the \u003cb\u003eDo not warn when content is non-constant\u003c/b\u003e option to report only in cases when the supplied arguments are compile-time constants.\nThis reduces the chances that the behavior changes,\nbecause it\u0027s not always possible to statically check whether original elements are unique and not \u003ccode\u003enull\u003c/code\u003e.\n\u003cp\u003e\n  Use the \u003cb\u003eSuggest \u0027Map.ofEntries\u0027\u003c/b\u003e option to suggest replacing unmodifiable maps with more than 10 entries with  \u003ccode\u003eMap.ofEntries()\u003c/code\u003e.\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaRequiresAutoModule",
          "displayName": "Dependencies on automatic modules",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of automatic modules in a \u003ccode\u003erequires\u003c/code\u003e directive.\n\u003cp\u003eAn automatic\nmodule is unreliable since it can depend on the types on the class path,\nand its name and exported packages can change if it\u0027s\n  converted into an explicit module.\u003c/p\u003e\n\u003cp\u003eCorresponds to \u003ccode\u003e-Xlint:requires-automatic\u003c/code\u003e and \u003ccode\u003e-Xlint:requires-transitive-automatic\u003c/code\u003e Javac options.\nThe first option increases awareness of when automatic modules are used.\nThe second warns the authors of a module that they\u0027re putting the users of that module at risk by establishing implied readability to an automatic module.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  //module-info.java\n  module org.printer {\n    requires transitive drivers.corp.org; // reported in case \u0027drivers.corp.org\u0027 is an automatic module\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eHighlight only transitive dependencies\u003c/b\u003e option to warn only about transitive dependencies.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": " Android Lint: Security",
      "inspections": [
        {
          "shortName": "AndroidLintSetWorldWritable",
          "displayName": "File.setWritable() used to make file world-writable",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003eFile.setWritable()\u003c/code\u003e used to make file world-writable\u003cbr\u003e\u003cbr\u003eSetting files world-writable is very dangerous, and likely to cause security holes in applications. It is strongly discouraged; instead, applications should use more formal mechanisms for interactions such as \u003ccode\u003eContentProvider\u003c/code\u003e, \u003ccode\u003eBroadcastReceiver\u003c/code\u003e, and \u003ccode\u003eService\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: SetWorldWritable\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Oracle",
      "inspections": [
        {
          "shortName": "OraUnmatchedForwardDeclarationInspection",
          "displayName": "Forward declaration without definition",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "Oracle",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declarations of procedures and functions that are missing their implementation in code.\n\u003cp\u003eIn Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names\nof such procedures or functions that are left without implementation.\u003c/p\u003e\n\u003cp\u003eExample (Oracle):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDECLARE PROCEDURE foo(a int, b varchar2);\nBEGIN\n    NULL;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003efoo\u003c/code\u003e procedure is declared but is missing implementation. We can add the implementation to get rid of the error.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDECLARE PROCEDURE foo(a int, b varchar2);\n  PROCEDURE foo(a int, b varchar2) IS\nBEGIN\n    NULL;\nEND;\nBEGIN\n    NULL;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OraMissingBodyInspection",
          "displayName": "Missing body for package/object type specification",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "Oracle",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports package and object type specifications that are missing body declarations.\n\u003cp\u003ePackage specifications and object types that declare routines as well as package specifications with cursors must have body\n  declarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are\n  invoked in program code.\u003c/p\u003e\n\u003cp\u003eExample (Oracle):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE OR REPLACE PACKAGE ppp IS\n    FUNCTION foo(a INT) RETURN INT;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OraOverloadInspection",
          "displayName": "Overloading errors",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "Oracle",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports invalid cases of subprogram overloading in Oracle.\n\u003cp\u003eExample (Oracle):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDECLARE\n    SUBTYPE fff IS BINARY_INTEGER;\n    SUBTYPE ggg IS NATURAL;\n    PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n    PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\nBEGIN\n    NULL;\nEND;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a\n  BINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,\nsee \u003ca href\u003d\"https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm\"\u003eRestrictions on Overloading at docs.oracle.com\u003c/a\u003e.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Less",
      "inspections": [
        {
          "shortName": "LessResolvedByNameOnly",
          "displayName": "Missing import",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.plugins.less",
          "pluginVersion": "231.9011.34",
          "language": "LESS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a reference to a variable or mixin that is declared in another file, which is not explicitly\n\u003ca href\u003d\"http://lesscss.org/features/#import-atrules-feature\"\u003eimported\u003c/a\u003e in the current file.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n* {\n  margin: @var-in-other-file;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LessUnresolvedMixin",
          "displayName": "Unresolved mixin",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.less",
          "pluginVersion": "231.9011.34",
          "language": "LESS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a reference to a \u003ca href\u003d\"http://lesscss.org/features/#mixins-feature\"\u003eLess mixin\u003c/a\u003e that is not resolved.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n* {\n  .unknown-mixin();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LessUnresolvedVariable",
          "displayName": "Unresolved variable",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.less",
          "pluginVersion": "231.9011.34",
          "language": "LESS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a reference to a \u003ca href\u003d\"http://lesscss.org/features/#variables-feature\"\u003eLess variable\u003c/a\u003e that is not resolved.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n* {\n  margin: @unknown-var;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Method metrics",
      "inspections": [
        {
          "shortName": "GroovyOverlyLongMethod",
          "displayName": "Overly long method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that are too long.\n\u003cp\u003e\n  Methods that are too long\n  may be confusing, and are a good sign that refactoring is necessary.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eMaximum statements per method\u003c/b\u003e field to specify the maximum acceptable number of non-comment source\n  statements a method might have.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyOverlyNestedMethod",
          "displayName": "Overly nested method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods whose bodies are too deeply nested.\n\u003cp\u003e\n  Methods with too much statement\n  nesting may be confusing, and are a good sign that refactoring may be necessary.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n Use the \u003cb\u003eMaximum nesting depth\u003c/b\u003e field to specify the maximum acceptable nesting depth a method might have.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyOverlyComplexMethod",
          "displayName": "Overly complex method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that have too high a cyclomatic complexity.\n\u003cp\u003e\n  Cyclomatic\n  complexity is basically a measurement of the number of branching points in a method. Methods with too high\n  a cyclomatic complexity may be confusing and difficult to test.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n Use the \u003cb\u003eMethod complexity limit\u003c/b\u003e field to specify the maximum acceptable cyclomatic complexity a method might have.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyMethodWithMoreThanThreeNegations",
          "displayName": "Method with more than three negations",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods with three or more negation operations (\u003ccode\u003e!\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e).\nSuch methods may be unnecessarily confusing.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyMethodParameterCount",
          "displayName": "Method with too many parameters",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods with too many parameters. Method with too many parameters\nis a good sign that refactoring is necessary. Methods whose signatures are inherited from\nlibrary classes are ignored by this inspection.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eMaximum number of parameters:\u003c/b\u003e field to specify the maximum acceptable number of parameters a method might have.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyMultipleReturnPointsPerMethod",
          "displayName": "Method with multiple return points",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods with too many return points. Methods with too\nmany return points may be confusing, and hard to refactor.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\n  int foo(int a) {\n    if (a \u003e 0) {\n      return a\n    }\n    if (a \u0026lt; 0) return -a\n    return 0\n  }\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the field provided below to specify the maximum acceptable number of return points a method\n  might have.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Compiler issues",
      "inspections": [
        {
          "shortName": "JavacQuirks",
          "displayName": "Javac quirks",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports known Javac issues, performance problems, and incompatibilities.\nFor example, type inference may be slow when it has to process many nested calls.\n\u003cp\u003eThe following code triggers a warning, as the vararg method call has 50+ poly arguments:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Arrays.asList(\n      Arrays.asList(\"a1\", \"b1\"),\n      Arrays.asList(\"a2\", \"b2\"),\n      ...\n      Arrays.asList(\"a100\", \"b100\"));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix adds explicit type arguments, which makes compilation and IDE processing much faster:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  //noinspection RedundantTypeArguments\n  Arrays.\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;asList(\n      Arrays.asList(\"a1\", \"b1\"),\n      Arrays.asList(\"a2\", \"b2\"),\n      ...\n      Arrays.asList(\"a100\", \"b100\"));\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PreviewFeature",
          "displayName": "Preview Feature warning",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of Preview Feature APIs, i.e. of a module, package, class, interface, method, constructor, field, or enum constant\nin the \u003ccode\u003ejava.*\u003c/code\u003e or \u003ccode\u003ejavax.*\u003c/code\u003e namespace annotated with \u003ccode\u003e@PreviewFeature\u003c/code\u003e.\n\u003cp\u003e\n  A preview feature is a new feature of the Java language, Java Virtual Machine, or Java SE API that is fully specified, fully implemented,\n  and is yet impermanent. The notion of a preview feature is defined in \u003ca href\u003d\"https://openjdk.org/jeps/12\"\u003eJEP 12\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  If some piece of code depends on a preview API, it may stop compiling in future JDK versions if the feature is changed or removed.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThe inspection only reports if the language level of the project or module is \u003cb\u003ePreview\u003c/b\u003e.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2021.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SynchronizeOnValueBasedClass",
          "displayName": "Value-based warnings",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports attempts to synchronize on an instance of a value-based class that produce compile-time warnings and raise\nrun-time exceptions starting from Java 16.\n\u003cp\u003e\n  For example, \u003ccode\u003ejava.lang.Double\u003c/code\u003e is annotated with \u003ccode\u003ejdk.internal.ValueBased\u003c/code\u003e, so the following code will\n  produce a compile-time warning:\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nDouble d \u003d 20.0;\nsynchronized (d) { ... } // javac warning\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2021.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UNCHECKED_WARNING",
          "displayName": "Unchecked warning",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code on which an unchecked warning will be issued by the javac compiler.\nEvery unchecked warning may potentially trigger \u003ccode\u003eClassCastException\u003c/code\u003e at runtime.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List items \u003d Arrays.asList(\"string\", \"string\");\n  List\u0026lt;Integer\u0026gt; numbers \u003d Collections.unmodifiableList(items); // unchecked assignment\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix tries to generify the containing file,\n  which may expose any problems in the editor and during compilation that previously only appeared at runtime:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; items \u003d Arrays.asList(\"string\", \"string\");\n  List\u0026lt;Integer\u0026gt; numbers \u003d Collections.unmodifiableList(items); // incompatible types\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "YAML",
      "inspections": [
        {
          "shortName": "YAMLDuplicatedKeys",
          "displayName": "Duplicated YAML keys",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.plugins.yaml",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicated keys in YAML files.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  same_key: some value\n  same_key: another value\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "YAMLUnusedAnchor",
          "displayName": "Unused anchor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.yaml",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unused anchors.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  some_key: \u0026some_anchor\n    key1: value1\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "YAMLUnresolvedAlias",
          "displayName": "Unresolved alias",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.plugins.yaml",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved aliases in YAML files.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  some_key: *unknown_alias\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "YAMLRecursiveAlias",
          "displayName": "Recursive alias",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.plugins.yaml",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports recursion in YAML aliases.\n\u003cp\u003eAlias can\u0027t be recursive and be used inside the data referenced by a corresponding anchor.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  some_key: \u0026some_anchor\n    sub_key1: value1\n    sub_key2: *some_anchor\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "YAMLSchemaValidation",
          "displayName": "Validation by JSON Schema",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.yaml",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\u003cp\u003e\u003cb\u003eScheme example:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  {\n    \"properties\": {\n      \"SomeNumberProperty\": {\n        \"type\": \"number\"\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cb\u003eThe following is an example with the corresponding warning:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  SomeNumberProperty: hello world\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "YAMLSchemaDeprecation",
          "displayName": "Deprecated YAML key",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.plugins.yaml",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports deprecated keys in YAML files.\n\u003cp\u003eDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\u003c/p\u003e\n\u003cp\u003eNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard \u003ccode\u003edeprecationMessage\u003c/code\u003e extension.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eScheme deprecation example:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  {\n    \"properties\": {\n      \"SomeDeprecatedProperty\": {\n        \"deprecationMessage\": \"Baz\",\n        \"description\": \"Foo bar\"\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cb\u003eThe following is an example with the corresponding warning:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  SomeDeprecatedProperty: some value\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Stapler",
      "inspections": [
        {
          "shortName": "Jexl",
          "displayName": "Checks syntax of JEXL expressions",
          "defaultSeverity": "ERROR",
          "pluginId": "Stapler plugin for IntelliJ IDEA",
          "pluginVersion": "3.0.1",
          "language": "Jelly",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nThis inspection performs the syntax check on JEXL expressions inside Jelly scripts.\n\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "JSValidateTypes",
          "displayName": "Type mismatch",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports incorrect type of: \n\u003cul\u003e\n  \u003cli\u003ea parameter in a function call\u003c/li\u003e\n  \u003cli\u003ea return value\u003c/li\u003e\n  \u003cli\u003ean assigned expression\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTypeScript code is ignored.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSValidateJSDoc",
          "displayName": "Syntax errors and unresolved references in JSDoc",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a syntax discrepancy in a documentation comment.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSLastCommaInArrayLiteral",
          "displayName": "Unneeded last comma in array literal",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of a trailing comma in an array literal.\n\n\u003cp\u003eThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\u003c/p\u003e\n\n\u003cp\u003eAlthough trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.\u003c/p\u003e\n\n\u003cp\u003eYou can configure formatting options for trailing commas in \u003cb\u003eCode Style\u003c/b\u003e | \u003cb\u003eJavaScript\u003c/b\u003e or \u003cb\u003eTypeScript\u003c/b\u003e | \u003cb\u003ePunctuation\u003c/b\u003e. \u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6PreferShortImport",
          "displayName": "Import can be shortened",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an ES6 import whose \u003ccode\u003efrom\u003c/code\u003e part can be shortened. Suggests importing the parent directory.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSDuplicatedDeclaration",
          "displayName": "Duplicate declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports multiple declarations in a scope.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSJoinVariableDeclarationAndAssignment",
          "displayName": "Variable declaration can be merged with the first assignment to the variable",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSLastCommaInObjectLiteral",
          "displayName": "Unneeded last comma in object literal",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of a trailing comma in object literals.\n\n\u003cp\u003eThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\u003c/p\u003e\n\n\u003cp\u003eTrailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.\u003c/p\u003e\n\n\u003cp\u003eYou can configure formatting options for trailing commas in \u003cb\u003eCode Style\u003c/b\u003e | \u003cb\u003eJavaScript\u003c/b\u003e or \u003cb\u003eTypeScript\u003c/b\u003e | \u003cb\u003ePunctuation\u003c/b\u003e.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6ShorthandObjectProperty",
          "displayName": "Property can be replaced with shorthand",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nvar obj \u003d {foo:foo}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter applying the quick-fix the code looks as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nvar obj \u003d {foo}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSUnresolvedLibraryURL",
          "displayName": "Missed locally stored library for HTTP link",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a URL of an external JavaScript library that is not associated with\nany locally stored file. Suggests downloading the library.\nSuch association enables the IDE to provide proper code completion and navigation. \n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WebpackConfigHighlighting",
          "displayName": "Webpack config compliance with JSON Schema",
          "defaultSeverity": "WARNING",
          "pluginId": "intellij.webpack",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nValidates options in  webpack config files (which name should start with `webpack`, e.g. `webpack.config.js`)\nagainst \u003ca href\u003d\"https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json\"\u003ewebpack options schema\u003c/a\u003e.\n\u003cbr/\u003e\u003cbr/\u003e\nDisable this inspection to turn off validation and code completion inside the configuration object.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSReferencingMutableVariableFromClosure",
          "displayName": "Referencing mutable variable from closure",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports access to outer mutable variables from functions. \n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (var i \u003d 1; i \u0026lt;\u003d 3; i++) {\n    setTimeout(function() {\n        console.log(i); // bad\n    }, 0);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSUnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unneeded semicolon.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSCommentMatchesSignature",
          "displayName": "Mismatched JSDoc and function signature",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function.\nSuggests updating parameters in JSDoc comment.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n/**\n * @param height Height in pixels\n */\nfunction sq(height, width) {} // width is not documented\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n/**\n * @param height Height in pixels\n * @param width\n */\nfunction sq(height, width) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSNonStrictModeUsed",
          "displayName": "Non-strict mode used",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a JavaScript file that is not in the \u003ccode\u003estrict\u003c/code\u003e mode.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSUnfilteredForInLoop",
          "displayName": "Unfiltered for..in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unfiltered \u003ccode\u003efor-in\u003c/code\u003e loops.\n\u003cbr/\u003e\u003cbr/\u003e\nThe use of this construct results in processing not only own properties of an object but properties from its prototype as well.\nIt may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties\nor when \u003ccode\u003eObject\u003c/code\u003e\u0027s prototype may be incorrectly modified.\nFor example, the following code will print \u003cb\u003e42\u003c/b\u003e and \u003cb\u003emyMethod\u003c/b\u003e:\n\u003cbr/\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\nObject.prototype.myMethod \u003d function myMethod() {};\nlet a \u003d { foo: 42 };\nfor (let i in a) {\n  console.log(a[i]);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSuggests replacing the whole loop with a \u003ccode\u003eObject.keys()\u003c/code\u003e method or adding a \u003ccode\u003ehasOwnProperty()\u003c/code\u003e check. After applying the quick-fix the code looks as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfor (let i in a) {\n  if (a.hasOwnProperty(i)) {\n    console.log(a[i]);\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSMismatchedCollectionQueryUpdate",
          "displayName": "Mismatched query and update of collection",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a collection of fields or variables whose contents are either queried and not updated\nor updated and not queried. Such mismatched queries and updates are pointless\nand may indicate either dead code or a typographical error.\n\u003cp\u003e\nQuery methods are automatically detected, based on whether they return something, or a callback is passed to them.\nUse the table below to specify which methods are update methods.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSCheckFunctionSignatures",
          "displayName": "Signature mismatch",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number.\nAlso, reports if the overloading function doesn\u0027t match the overloaded one in terms of parameters and return types.\n\n\u003cp\u003eTypeScript code is ignored.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSAnnotator",
          "displayName": "ECMAScript specification is not followed",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.\n\u003cbr\u003e\nGenerally, such errors must always be reported and shouldn\u0027t be disabled.\nBut in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE\u0027s checker, it may be handy to disable reporting these very basic errors.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSDeprecatedSymbols",
          "displayName": "Deprecated symbol used",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of a deprecated function variable.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6RedundantNestingInTemplateLiteral",
          "displayName": "Redundant nesting in template literal",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nlet a \u003d `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter applying the quick-fix the code looks as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nlet a \u003d `Hello, Brave New World!`\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSAccessibilityCheck",
          "displayName": "Inaccessible @private and @protected members referenced",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a reference to a JavaScript member that is marked with a \u003ccode\u003e@private\u003c/code\u003e or \u003ccode\u003e@protected\u003c/code\u003e tag but\ndoes not comply with visibility rules that these tags imply.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSPrimitiveTypeWrapperUsage",
          "displayName": "Primitive type object wrapper used",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an improper usage of a wrapper for primitive types or a property of a primitive type being\nmodified, as in the latter case the assigned value will be lost.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSMethodCanBeStatic",
          "displayName": "Method can be made \u0027static\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a class method that can be safely made \u003ccode\u003estatic\u003c/code\u003e.\nA method can be \u003ccode\u003estatic\u003c/code\u003e if it does not reference any of its class\u0027 non-static methods\nand non-static fields and is not overridden in a subclass.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the first checkbox below to inspect only \u003ccode\u003eprivate\u003c/code\u003e  methods.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSXUnresolvedComponent",
          "displayName": "Unresolved JSX component",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved reference to a JSX component.\nSuggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.\n\u003cp\u003eThe template for a new component can be modified in Editor | File and Code Templates.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSUnresolvedExtXType",
          "displayName": "Unresolved Ext JS xtype",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an Ext JS \u003ccode\u003extype\u003c/code\u003e reference that doesn\u0027t have a corresponding class.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSJQueryEfficiency",
          "displayName": "JQuery selector can be optimized",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional).\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSXSyntaxUsed",
          "displayName": "JSX syntax used",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of a JSX tag in JavaScript code.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6ClassMemberInitializationOrder",
          "displayName": "Use of possibly unassigned property in a static initializer",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "ECMAScript 6",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.\n\u003cbr/\u003e\u003cbr/\u003e\nInitialization of class members happens consequently for fields, so a field cannot reference another field that is declared later.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6DestructuringVariablesMerge",
          "displayName": "Destructuring properties with the same key",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports multiple destructuring properties with identical keys. Suggests merging the properties.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSUndeclaredVariable",
          "displayName": "Implicitly declared global JavaScript variable",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an implicit declaration of a global variable.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  var aaa \u003d 1; // good\n  bbb \u003d 2; // bad, if bbb is not declared with \u0027var\u0027 somewhere\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSUnresolvedReference",
          "displayName": "Unresolved JavaScript reference",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved reference in JavaScript code.\n\u003cp\u003eTypeScript code is ignored.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSFileReferences",
          "displayName": "Unresolved file reference",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSClosureCompilerSyntax",
          "displayName": "Incorrect usage of JSDoc tags",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports warnings implied by \u003cem\u003eGoogle Closure Compiler\u003c/em\u003e annotations including correct use of \u003ccode\u003e@abstract\u003c/code\u003e, \u003ccode\u003e@interface\u003c/code\u003e, and \u003ccode\u003e@implements\u003c/code\u003e tags.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Imports and dependencies",
      "inspections": [
        {
          "shortName": "PackageJsonMismatchedDependency",
          "displayName": "Mismatched dependencies in package.json",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a dependency from package.json that is not installed or doesn\u0027t match the specified \u003ca href\u003d\"https://docs.npmjs.com/about-semantic-versioning\"\u003eversion range\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NpmUsedModulesInstalled",
          "displayName": "Missing module dependency",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a module from a \u003ccode\u003erequire()\u003c/code\u003e call or an \u003ccode\u003eimport\u003c/code\u003e statement that is not installed or is not listed in package.json dependencies.\n\u003cp\u003eSuggests installing the module and/or including it into package.json.\u003c/p\u003e\n\u003cp\u003eFor \u003ccode\u003erequire()\u003c/code\u003e calls, works only in the files from the scope of \u003cem\u003eNode.js Core\u003c/em\u003e JavaScript library.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UpdateDependencyToLatestVersion",
          "displayName": "Update package.json dependencies to latest versions",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nSuggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSUrlImportUsage",
          "displayName": "URL import is used",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks used URL imports in the JavaScript language.\nSuggests downloading the module for the specified remote URL.\nSuch association enables the IDE to provide proper code completion and navigation.\n\u003cbr/\u003e\n\u003cbr/\u003e\nURLs in import specifiers are supported only for ECMAScript modules in the JavaScript language.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ES6UnusedImports",
          "displayName": "Unused import",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a redundant \u003ccode\u003eimport\u003c/code\u003e statement.\nThis is usually the case if the imported symbols are not used in the source file.\nTo avoid side-effects, consider using bare import \u003ccode\u003eimport \u0027packageName\u0027\u003c/code\u003e instead of the regular one.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSXNamespaceValidation",
          "displayName": "Missing JSX namespace",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of a JSX construction without importing namespace.\nHaving the namespace in the file scope ensures proper code compilation.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Code",
      "inspections": [
        {
          "shortName": "SpringCacheAnnotationsOnInterfaceInspection",
          "displayName": "Cache* annotations defined on interfaces/interface methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003e@Cache*\u003c/code\u003e annotations on interfaces.\u003c/p\u003e\n\n\u003cp\u003eYou should annotate only concrete classes (and methods of concrete classes) with \u003ccode\u003e@Cache*\u003c/code\u003e.\nAnnotating an interface (or an interface method) with \u003ccode\u003e@Cache*\u003c/code\u003e requires using interface-based proxies.\nSince Java annotations are not inherited from interfaces, the proxying and weaving infrastructure will not be able to recognize the caching settings\nwhen using class-based proxies (\u003ccode\u003eproxy-target-class\u003d\"true\"\u003c/code\u003e) or the weaving-based aspect (\u003ccode\u003emode\u003d\"aspectj\"\u003c/code\u003e).\nAs a result, the object will not be wrapped in a caching proxy.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringCacheableComponentsInspection",
          "displayName": "Incorrectly configured \u0027caching\u0027 annotation",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports incorrect \u0027caching\u0027 annotations: \u003ccode\u003e@Cacheable\u003c/code\u003e, \u003ccode\u003e@CacheEvict\u003c/code\u003e, \u003ccode\u003e@CachePut\u003c/code\u003e, \u003ccode\u003e@CacheConfig\u003c/code\u003e, and so on.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n@org.springframework.stereotype.Component\npublic class MyCacheManager implements CacheManager{... }\n\npublic class MyConfiguration {\n   @Cacheable(value \u003d \"a\",\n       cacheResolver \u003d\"myCacheManager\") // reports \"Bean must be of \u0027org.springframework.cache.interceptor.CacheResolver\u0027 type\"\n   public String getCache(String isbn) { ...}\n\n   @Cacheable(value \u003d \"abc\",\n   private String getAbc() // reports \"Caching annotations should be defined on public methods\"\n   {...}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AsyncMethodInspection",
          "displayName": "Incorrect @Async method signature",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect return types of \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html\"\u003e@Async\u003c/a\u003e methods.\u003c/p\u003e\n\n\u003cp\u003eFor target method signatures, any parameter types are allowed.\n  However, the return type should be either \u003ccode\u003evoid\u003c/code\u003e or \u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html\"\u003eFuture\u003c/a\u003e.\n  It is also possible to return the more specific \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/concurrent/ListenableFuture.html\"\u003eListenableFuture\u003c/a\u003e or \u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html\"\u003eCompletableFuture\u003c/a\u003e types,\n  which allow for richer interaction with the asynchronous task and for immediate composition with further processing steps.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringJavaInjectionPointsAutowiringInspection",
          "displayName": "Incorrect autowiring in Spring bean components",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports autowiring problems on injection points of Spring beans\n\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html\"\u003e@Component\u003c/a\u003e,\n\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Service.html\"\u003e@Service\u003c/a\u003e,\nand so on.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eMore than one bean of \u0027concrete\u0027 type\u003c/li\u003e\n  \u003cli\u003eNo beans of \u0027concrete\u0027 type\u003c/li\u003e\n  \u003cli\u003eNo bean with qualifier\u003c/li\u003e\n  \u003cli\u003eIncorrect usages of \u003ccode\u003e@Autowired\u003c/code\u003e on Spring bean constructors\u003c/li\u003e\n  \u003cli\u003eInjected or autowired fields/methods in classes that are not valid Spring beans\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\npublic interface FooInterface {...}\n  @Component public class FooBean implements FooInterface {...}\n  @Component public class OtherBean implements FooInterface {...}\n\n@Component\npublic class MyComponent {\n\t@Autowired\n\tFooInterface foo;  // \"Could not autowire. There is more than one bean of \u0027FooInterface\u0027 type.\n                     // Beans: fooBean(FooBean.java), otherBean(OtherBean.java)\"\n}\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n@Component\npublic class MyComponent {\n\t@Autowired\n\tpublic MyComponent(BarBean bean) {...} // reports \u0027Only one @Autowired constructor is allowed\u0027\n\n\t@Autowired\n\tpublic MyComponent(FooBean bean) {...} // reports \u0027Only one @Autowired constructor is allowed\u0027\n}\n\n@Component\npublic class MyFactory {  // reports \u0027 No matching @Autowired constructor\u0027\n\tpublic MyFactory(String str) {...}\n\tpublic MyFactory(int count) {...}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\npublic class FooBeanClass {\n  @Autowired   // reports \u0027Autowired members must be defined in valid Spring beans: @Component, @Service, and so on\u0027\n  ServiceBean bean;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringDependsOnUnresolvedBeanInspection",
          "displayName": "Incorrectly referenced bean in @DependsOn annotation",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect bean references in the \u003ccode\u003evalue\u003c/code\u003e parameter of the\n\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/DependsOn.html\"\u003e@DependsOn\u003c/a\u003e\nannotation.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Component\n  @DependsOn(\"unknown\")  // reports \"Cannot resolve bean \u0027unknown\u0027\"\n  public class MyComponent {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringCacheableAndCachePutInspection",
          "displayName": "Incorrect usage of @CachePut and @Cacheable on the same method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/CachePut.html\"\u003e@CachePut\u003c/a\u003e\nand \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html\"\u003e@Cacheable\u003c/a\u003e\nannotations declared on the same method.\u003c/p\u003e\n\nWhile \u003ccode\u003e@Cacheable\u003c/code\u003e causes the method to skip the execution using the cache, \u003ccode\u003e@CachePut\u003c/code\u003e forces the execution in order to update the cache.\nThis leads to unexpected behavior and should be avoided, except in very specific cases when conditions in annotations exclude them from each other.\nNote also that such conditions should not rely on the result object (the \u003ccode\u003e#result\u003c/code\u003e variable) as these are validated upfront to confirm the exclusion.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringComponentScan",
          "displayName": "Invalid package in @ComponentScan or its meta annotation",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved packages in\n\u003ca href\u003dhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html\u003e@ComponentScan\u003c/a\u003e\nannotations and corresponding aliased attributes of \u003ccode\u003e@ComponentScan\u003c/code\u003e meta annotations.\u003cbr\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @ComponentScan(basePackages \u003d {\n     \"com.my.company\",\n     \"com.unknown\" // reports \"\u0027Cannot resolve package \u0027unknown\u0027\"\n  }) +\n  @Configuration +\n  public class MyConfiguration {}\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringTransactionalMethodCallsInspection",
          "displayName": "@Transactional self-invocation method calls",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction-declarative-annotations\"\u003eUsing\n  @Transactional\u003c/a\u003e:\nIn proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that\nself-invocation (in effect, a method within the target object calling another method of the target object) does not lead to an actual\ntransaction at runtime even if the invoked method is marked with @Transactional.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringConfigurationProxyMethods",
          "displayName": "@Configuration proxyMethods usage warnings",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports warnings on incorrectly used proxy methods.\n\nSpring Framework 5.2 has introduced an optimization for @Configuration class processing that can be enabled via an attribute\n@Configuration(proxyBeanMethods \u003d false).\n\u003cbr\u003e\u003cbr\u003e\nIf you disable\n\u003cpre\u003e\u003ccode\u003eproxyBeanMethods\u003c/code\u003e\u003c/pre\u003e\nthe proxy instances are no longer created and calling the method invokes it again (returning a new instance every time).\nAs a result, you have no guarantee that you\u0027re actually injecting the corresponding bean in the context.\n\u003c!-- tooltip end --\u003e\n\u003cbr\u003e\u003cbr\u003e\n\u003cstrong\u003eIncorrect bean method call example:\u003c/strong\u003e\u003cbr\u003e\u003cbr\u003e\n\u003cpre\u003e\n@Configuration(proxyBeanMethods \u003d false)\nclass TestConfiguration {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean() {\n    return new SecondBean(firstBean()); // -\u003e \u003cstrong\u003eincorrect call\u003c/strong\u003e\n  }\n}\n\u003c/pre\u003e\n\u003cbr\u003e\n\n\u003chr\u003e\n\u003cstrong\u003eYou can set\n  \u003cpre\u003e\u003ccode\u003eproxyBeanMethods\u003c/code\u003e\u003c/pre\u003e\n  to true or rewrite the code as follows:\u003c/strong\u003e\u003cbr\u003e\u003cbr\u003e\n\u003cpre\u003e\n@Configuration(proxyBeanMethods \u003d false)\nclass TestConfiguration {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean(FirstBean someBean) { // -\u003e \u003cstrong\u003ecorrect injected instance\u003c/strong\u003e\n    return new SecondBean(someBean);\n  }\n}\n\u003c/pre\u003e\n\u003cbr\u003e\n\n\u003chr\u003e\n\u003cstrong\u003eAlso, the inspection checks @Bean method calls in a class without the @Configuration stereotype (in \"bean lite mode\"):\u003c/strong\u003e\u003cbr\u003e\u003cbr\u003e\n\u003cpre\u003e\n@Component\nclass TestComponent {\n  @Bean\n  public FirstBean firstBean() {\n    return new FirstBean();\n  }\n\n  @Bean\n  public SecondBean secondBean() {\n    return new SecondBean(firstBean()); // -\u003e \u003cstrong\u003eincorrect call\u003c/strong\u003e\n  }\n}\n\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringJavaStaticMembersAutowiringInspection",
          "displayName": "Incorrect Spring component autowiring or injection on a static class member",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports autowired and injected static methods/fields of Spring components.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n@Component\npublic class MyComponent {\n\t@Autowired\n\tstatic FooInterface foo;  // reports \"Don\u0027t autowire static members\"\n}\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringRequiredAnnotationInspection",
          "displayName": "@Required Spring bean property is not injected",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003e@Required\u003c/code\u003e setter bean properties that are not injected or autowired.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;beans\u0026gt;\n  \u0026lt;bean class\u003d\"beans.MyComponent\" id\u003d\"foo\"/\u0026gt;\n  // reports \"Required properties missing: \u0027port\u0027\"\n\u0026lt;/beans\u0026gt;\n\n\u003chr/\u003e\n\npublic class MyComponent {\n   @Required\n   public void setPort(int port) // reports \"Required property \u0027port\u0027 is not injected\"\n   {...}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ContextJavaBeanUnresolvedMethodsInspection",
          "displayName": "Unknown init/destroy method in the @Bean annotation",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved method references on \u003ccode\u003einitMethod\u003c/code\u003e and \u003ccode\u003edestroyMethod\u003c/code\u003e parameters\n  of the \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html\"\u003e@Bean\u003c/a\u003e annotation.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\"Cannot resolve method\" will be reported on \u0027doInit\u0027 expression if MyBean class doesn\u0027t contain \u0027public void \u0027doInit\u0027(){...}\u0027 method\n\u003cpre\u003e\u003ccode\u003e\n  public class MyBean {...}\n\n  @Component\n  public class MyComponent {\n     @Bean(initMethod\u003d\"doInit\" )\n     public MyBean myBean() {...}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn this example, the inspection will report an unresolved method reference if \u003ccode\u003eMyBean\u003c/code\u003e doesn\u0027t define the \u003ccode\u003edoInit()\u003c/code\u003e method.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringTransactionalComponentInspection",
          "displayName": "Invalid \u0027PlatformTransactionManager\u0027 declaration in @Transactional component",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports\n\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/PlatformTransactionManager.html\"\u003ePlatformTransactionManager\u003c/a\u003e\nclasses that are not correctly defined in the application context for the current\n\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html\"\u003e@Transactional\u003c/a\u003e\ncomponent.\n\u003c/body\u003e\n\u003c/html\u003e\n\n"
        },
        {
          "shortName": "SpringPropertySource",
          "displayName": "Unresolved file references in @PropertySource and @TestPropertySource locations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved files or directories in\n\u003ca href\u003dhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/PropertySource.html\u003e@PropertySource\u003c/a\u003e\nand \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/TestPropertySource.html\"\u003e@TestPropertySource\u003c/a\u003e\nannotations.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Configuration\n  @PropertySource(\"classpath:/com/mycompany/unknown.properties\") // reports \"Cannot resolve file unknown.properties\"\n  public class AppConfig {...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringCacheNamesInspection",
          "displayName": "Incorrect required cache names definition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect \u003ccode\u003e@Cache*\u003c/code\u003e annotation names.\u003c/p\u003e\n\n\u003cp\u003eAt least one cache name should be provided per cache operation: \u003ccode\u003e@Cacheable(\"cache_name\")\u003c/code\u003e or \u003ccode\u003e@Cacheable(cacheNames \u003d\"cache_name\")\u003c/code\u003e.\n\u003ccode\u003e@CacheConfig#cacheNames()\u003c/code\u003e can be used for sharing common cache-related settings at the class level.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringTestingDirtiesContextInspection",
          "displayName": "Invalid @DirtiesContext \u0027mode\u0027 configuration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect \u0027mode\u0027 configuration in the\n\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/annotation/DirtiesContext.html\"\u003e@DirtiesContext\u003c/a\u003e\nannotation.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @ContextConfiguration\n  @DirtiesContext(methodMode \u003d MethodMode.AFTER_METHOD, // Setting the method mode on an annotated test class has no meaning. For class-level control, use classMode instead.\n                  hierarchyMode \u003d DirtiesContext.HierarchyMode.CURRENT_LEVEL) // hierarchyMode should be used when the context is configured as part of a hierarchy via @ContextHierarchy\n  public class MyTest {\n    @DirtiesContext(classMode \u003d DirtiesContext.ClassMode.AFTER_CLASS, // Setting the class mode on an annotated test method has no meaning. For method-level control use methodMode instead..\n                     hierarchyMode \u003d DirtiesContext.HierarchyMode.CURRENT_LEVEL) // hierarchyMode should be used when the context is configured as part of a hierarchy via @ContextHierarchy\n    public void testFoo() {...}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringImportResource",
          "displayName": "Unresolved file references in @ImportResource locations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved files and directories in \u003ccode\u003elocations\u003c/code\u003e attributes\nof \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ImportResource.html\"\u003e@ImportResource\u003c/a\u003e annotations\nand the corresponding aliased attributes of the \u003ccode\u003e@ImportResource\u003c/code\u003e meta annotations.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Configuration\n  @ImportResource(locations \u003d \"classpath:META-INF/unknown-context.xml\") // reports \"Cannot resolve file \u0027unknown-context.xml\u0027\"\n  public class MyConfiguration {...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringContextConfigurationInspection",
          "displayName": "Invalid @ContextConfiguration",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect Spring context configurations.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUnresolved files and directories in \u003ccode\u003elocations\u003c/code\u003e attributes\n    and corresponding aliased attributes of \u003ccode\u003e@ContextConfiguration\u003c/code\u003e meta annotations\n  \u003c/li\u003e\n  \u003cli\u003eMissing default application context file\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFor more information, see \u003ca href\u003dhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/ContextConfiguration.html\u003e@ContextConfiguration\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @ContextConfiguration(locations \u003d \"classpath:META-INF/unknown-context.xml\") // reports \"Cannot resolve file \u0027unknown-context.xml\u0027\"\n  class MyTests {...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringJavaAutowiredFieldsWarningInspection",
          "displayName": "Non recommended \u0027field\u0027 injections",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports injected or autowired fields in Spring components.\u003c/p\u003e\n\n\u003cp\u003eThe quick-fix suggests the recommended constructor-based dependency injection in beans\nand assertions for mandatory fields.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass MyComponent {\n  @Inject MyCollaborator collaborator; // injected field\n\n  public void myBusinessMethod() {\n    collaborator.doSomething(); // throws NullPointerException\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cbr\u003e\n\n\u003cp\u003eAfter applying the quick-fix:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator \u003d collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething(); // now this call is safe\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ScheduledMethodInspection",
          "displayName": "Incorrect @Scheduled method signature",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html\"\u003e@Scheduled\u003c/a\u003e methods.\u003c/p\u003e\n\n\u003cp\u003eAccording to Spring Documentation, methods to be scheduled must return void and must not expect any arguments.\n  If the method needs to interact with other objects from the Application Context,\n  they should be provided through dependency injection.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringTestingTransactionalInspection",
          "displayName": "Invalid transactional lifecycle method declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports invalid transactional lifecycle method declarations annotated with\n\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/transaction/BeforeTransaction.html\"\u003e@BeforeTransaction\u003c/a\u003e\nand \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/transaction/AfterTransaction.html\"\u003e@AfterTransaction\u003c/a\u003e\nin testing classes annotated as\n\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html\"\u003e@Transactional\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAnnotated methods must have no arguments and no return type.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @ContextConfiguration\n  @Transactional\n  public class AbstractShowcaseTest {\n    @BeforeTransaction // Expected method return type is \u0027void\u0027\n    public boolean setupData() {...}\n\n    @AfterTransaction // Wrong number of arguments\n    public void disposeData(boolean a) throws Exception {...}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringEventListenerInspection",
          "displayName": "Incorrectly configured  @EventListener methods ",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect\n  \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html\"\u003e@EventListener\u003c/a\u003e methods.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Configuration @ComponentScan\n  open class Config\n\n  data class MyEvent(val string: String)\n\n  @Component\n  class LogComponent {\n    @EventListener // Method annotated with @EventListener must be public\n    private fun logCommands(commandName: MyEvent) {}\n\n    @EventListener // Method must have maximum one parameter\n    fun processCommand(commandName: MyEvent, text: String) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringLookupInjectionInspection",
          "displayName": "Incorrectly referenced bean in @Lookup annotation of Spring component",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect bean references in the \u003ccode\u003evalue\u003c/code\u003e parameter of the\n\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Lookup.html\"\u003e@Lookup\u003c/a\u003e\nannotation.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Component public class FooBean {...}\n  @Component public class OtherBean {...}\n\n  @Component public class MyComponent {\n  @Lookup(\"fooBean\")\n  public FooBean fooBean() {...}\n\n  @Lookup(\"fooBean\") // reports \"Bean must be of \u0027OtherBean\u0027 type\"\n  public OtherBean otherBean() {...}\n\n  @Lookup(\"unknown\") // reports \"Cannot resolve bean \u0027unknown\u0027\"\n  public OtherBean fooBean() {...}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringTestingSqlInspection",
          "displayName": "Invalid @Sql and @SqlGroup configurations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved file references in the \u003ccode\u003escripts\u003c/code\u003e attributes of the\n\u003ca href\u003dhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/jdbc/Sql.html\u003e@Sql\u003c/a\u003e\nannotation and the corresponding aliased attributes of the \u003ccode\u003e@Sql\u003c/code\u003e meta annotations.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @SqlGroup({\n     @Sql(\"not-found\"), // reports \"Cannot resolve file \u0027not-found\"\n     @Sql(\"found.sql\")\n  })\n  public class MyTestWithSqlData {...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringProfileExpression",
          "displayName": "Incorrectly configured @Profile expression",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect\n\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Profile.html\"\u003e@Profile\u003c/a\u003e\nexpressions:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eSpring profiles must not be empty\u003c/li\u003e\n  \u003cli\u003e\u0027\u0026\u0027 and \u0027|\u0027 operators must not be mixed without parentheses in Spring profile expressions\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003c!-- correctly configured --\u003e\n  @Configuration\n  @Profile(\"a \u0026 (b | c)\")\n  public class MyConfiguration {...}\n\n  \u003c!-- empty  --\u003e\n  @Configuration\n  @Profile() // reports \"Profile expression must contain text\"\n  public class MyConfiguration {...}\n\n  \u003c!-- mixed operators without  parentheses --\u003e\n  @Configuration\n  @Profile(\"a \u0026 b | c\") // reports \"Malformed profile expression\"\n  public class MyConfiguration {...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Function metrics",
      "inspections": [
        {
          "shortName": "ParametersPerFunctionJS",
          "displayName": "Function with too many parameters",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function with too many parameters.\nSuch functions often indicate problems with design.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the field below to specify the maximum acceptable number of parameters for a function.\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FunctionWithMultipleReturnPointsJS",
          "displayName": "Function with multiple return points",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function with multiple return points.\nSuch functions are hard to understand and maintain.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StatementsPerFunctionJS",
          "displayName": "Overly long function",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an overly long function.\nFunction length is calculated by counting up the number of non-empty statements in the function.\nFunctions that are too long are error-prone and difficult to test.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the field below to specify the maximum acceptable number of statements in a function.\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestingDepthJS",
          "displayName": "Overly nested function",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function whose body contains statements that are too deeply nested within other statements.\nSuch functions may be confusing and indicate that refactoring may be necessary.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the field provided below to specify the maximum acceptable nesting depth allowed in a function.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CyclomaticComplexityJS",
          "displayName": "Overly complex function",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function with too many branching points in a function (too high cyclomatic complexity). Such functions\nmay be confusing and hard to test.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the field provided below to specify the maximum acceptable cyclomatic complexity for a function.\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThreeNegationsPerFunctionJS",
          "displayName": "Function with more than three negations",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function with three or more negation operations (\u003ccode\u003e!\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e).\nSuch functions may be unnecessarily confusing.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FunctionWithMultipleLoopsJS",
          "displayName": "Function with multiple loops",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function with multiple loop statements.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Potentially confusing code constructs",
      "inspections": [
        {
          "shortName": "ConfusingFloatingPointLiteralJS",
          "displayName": "Confusing floating point literal",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConfusingFloatingPointLiteral.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports any floating point number that does not have a decimal point, or any numbers before the decimal point,\nor and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MagicNumberJS",
          "displayName": "Magic number",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/MagicNumber.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports a \"magic number\" that is a numeric literal used without being named by a constant declaration.\nMagic numbers can result in code whose intention is unclear, and may result in errors if a magic\nnumber is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000,\n0.0 and 1.0 are ignored.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EmptyStatementBodyJS",
          "displayName": "Statement with empty body",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, or \u003ccode\u003ewith\u003c/code\u003e statement with an empty body. Such statements often result from typos, and may cause confusion.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the checkbox below to specify whether the statements with empty block statements as bodies \nshould be reported.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestedConditionalExpressionJS",
          "displayName": "Nested conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a ternary conditional expression within another ternary condition.\nSuch nested conditionals may be extremely confusing, and best replaced by more explicit conditional\nlogic.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PointlessArithmeticExpressionJS",
          "displayName": "Pointless arithmetic expression",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an arithmetic expression that include adding or subtracting zero, multiplying by\nzero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OverlyComplexBooleanExpressionJS",
          "displayName": "Overly complex boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/OverlyComplexBooleanExpression.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the field below to specify the maximum number of terms allowed in an arithmetic expression.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OverlyComplexArithmeticExpressionJS",
          "displayName": "Overly complex arithmetic expression",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/OverlyComplexArithmeticExpression.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the field below to specify the maximum number of terms allowed in an arithmetic expression.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NegatedConditionalExpressionJS",
          "displayName": "Negated conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/NegatedConditional.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports a conditional expression whose condition is negated.\nSuggests flipping the order of branches in the conditional expression to increase the clarity of the statement.\nExample: \u003ccode\u003e!condition ? 2 : 1\u003c/code\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestedFunctionJS",
          "displayName": "Nested function",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function nested inside another function.\nAlthough JavaScript allows functions to be nested, such constructs may be confusing.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the checkbox below to ignore anonymous nested functions.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DynamicallyGeneratedCodeJS",
          "displayName": "Execution of dynamically generated code",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a call of the \u003ccode\u003eeval()\u003c/code\u003e, \u003ccode\u003esetTimeout()\u003c/code\u003e,\nor \u003ccode\u003esetInterval()\u003c/code\u003e function or an allocation of a \u003ccode\u003eFunction\u003c/code\u003e\nobject.  These functions are used to execute arbitrary strings of JavaScript text, which often\ndynamically generated.  This can be very confusing, and may be a security risk.\n\u003cbr/\u003e\u003cbr/\u003e\nIgnores the cases when a callback function is provided to these methods statically, without code generation.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IncrementDecrementResultUsedJS",
          "displayName": "Result of increment or decrement used",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an increment (\u003ccode\u003e++\u003c/code\u003e) or decrement\n(\u003ccode\u003e--\u003c/code\u003e) expression where the result of the assignment is\nused in a containing expression. Such assignments can result in confusion due to the order\nof operations, as evaluation of the assignment may affect the outer expression in unexpected\nways. Example: \u003ccode\u003evar a \u003d b++\u003c/code\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CallerJS",
          "displayName": "Use of \u0027caller\u0027 property",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of the \u003ccode\u003ecaller\u003c/code\u003e property in a JavaScript function.\nUsing this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BlockStatementJS",
          "displayName": "Unnecessary block statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a block statement that is not used as the body of \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e,\n\u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003edo\u003c/code\u003e, \u003ccode\u003ewith\u003c/code\u003e, or \u003ccode\u003etry\u003c/code\u003e statements, or as the\nbody of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for \u003ccode\u003elet\u003c/code\u003e and \u003ccode\u003econst\u003c/code\u003e variables,\nbut still free-standing block statements may be confusing and result in subtle bugs when used with \u003ccode\u003evar\u003c/code\u003e variables.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConfusingPlusesOrMinusesJS",
          "displayName": "Confusing sequence of \u0027+\u0027 or \u0027-\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a suspicious combination of \u003ccode\u003e+\u003c/code\u003e or \u003ccode\u003e-\u003c/code\u003e\ncharacters in JavaScript code (for example, \u003ccode\u003ea+++b\u003c/code\u003e.  Such sequences are confusing,\nand their semantics may change through changes in the whitespace.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NegatedIfStatementJS",
          "displayName": "Negated \u0027if\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003cb\u003eif\u003c/b\u003e statements which have an \u003cb\u003eelse\u003c/b\u003e branch and a negated condition.\nFlipping the order of the \u003cb\u003eif\u003c/b\u003e and \u003cb\u003eelse\u003c/b\u003e\nbranches will usually increase the clarity of such statements.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Declaration redundancy",
      "inspections": [
        {
          "shortName": "TrivialFunctionalExpressionUsage",
          "displayName": "Trivial usage of functional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports functional interface methods calls that are directly invoked on the definition of the lambda, method reference, or anonymous class.\nSuch method calls can be replaced with the body of the functional interface implementation.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean contains(List\u0026lt;String\u0026gt; names, String name) {\n    return ((Predicate\u0026lt;String\u0026gt;)x -\u003e {\n      return names.contains(x);\n    }).test(name);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen the quick-fix is applied, the method call changes to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean contains(List\u0026lt;String\u0026gt; names, String name) {\n    return names.contains(name);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SameReturnValue",
          "displayName": "Method always returns the same value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods and method hierarchies that always return the same constant.\n\u003cp\u003e\nThe inspection works differently in batch-mode\n  (from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e)\n  and on-the-fly in the editor:\n\u003cul\u003e\n  \u003cli\u003eIn batch-mode, the inspection reports methods and method hierarchies that always\n    return the same constant.\u003c/li\u003e\n  \u003cli\u003eIn the editor, the inspection only reports methods that have more than one \u003ccode\u003ereturn\u003c/code\u003e\n    statement, do not have super methods, and cannot be overridden. If a method overrides or\n    implements a method, a contract may require it to return a specific constant, but at the\n    same time, we may want to have several exit points. If a method can be overridden, it is\n    possible that a different value will be returned in subclasses.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X {\n                // Warn only in batch-mode:\n    int xxx() { // Method \u0027xxx()\u0027 and all its overriding methods always return \u00270\u0027\n      return 0;\n    }\n  }\n\n  class Y extends X {\n    @Override\n    int xxx() {\n        return 0;\n    }\n\n                // Warn only in batch-mode:\n    int yyy() { // Method \u0027yyy()\u0027 always returns \u00270\u0027\n        return 0;\n    }\n\n                                  // Warn both in batch-mode and on-the-fly:\n    final int zzz(boolean flag) { // Method \u0027zzz()\u0027 always returns \u00270\u0027\n        if (Math.random() \u003e 0.5) {\n            return 0;\n        }\n        return 0;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantLambdaParameterType",
          "displayName": "Redundant lambda parameter types",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambda formal parameter types that are redundant because they can be inferred from the context.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Map\u0026lt;String, Integer\u0026gt; map \u003d ...\n  map.forEach((String s, Integer i) -\u003e log.info(s + \"\u003d\" + i));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix removes the parameter types from the lambda.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Map\u0026lt;String, Integer\u0026gt; map \u003d ...\n  map.forEach((s, i) -\u003e log.info(s + \"\u003d\" + i));\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SameParameterValue",
          "displayName": "Method parameter always has the same value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method parameters that always have the same constant value.\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  static void printPoint(int x, int y) { // x is always 0\n    System.out.println(x + \", \" + y);\n  }\n\n  public static void main(String[] args) {\n    printPoint(0, 1);\n    printPoint(0, 2);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix inlines the constant value. This may simplify the method implementation.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore when inline parameter initializer would not succeed\u003c/b\u003e option to suppress the inspections when:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003ethe parameter is modified inside the method.\u003c/li\u003e\n  \u003cli\u003ethe parameter value that is being passed is a reference to an inaccessible field (only in Java).\u003c/li\u003e\n  \u003cli\u003ethe parameter is a vararg (only in Java).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eMaximal reported method visibility\u003c/b\u003e option to control the maximum visibility of methods to be reported.\n\u003c/p\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eMinimal reported method usage count\u003c/b\u003e field to specify the minimal number of method usages with the same parameter value.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ProtectedMemberInFinalClass",
          "displayName": "\u0027protected\u0027 member in \u0027final\u0027 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eprotected\u003c/code\u003e members in \u003ccode\u003efinal\u003c/code\u003eclasses.\n\u003cp\u003eSince \u003ccode\u003efinal\u003c/code\u003e classes cannot be inherited, marking the method as \u003ccode\u003eprotected\u003c/code\u003e\n  may be confusing. It is better to declare such members as \u003ccode\u003eprivate\u003c/code\u003e or package-visible instead.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erecord Bar(int a, int b) {\n  protected int sum() { \n     return a + b;\n  }\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erecord Bar(int a, int b) {\n  int sum() { \n     return a + b;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAs shown in the example, a class can be marked as \u003ccode\u003efinal\u003c/code\u003e explicitly or implicitly.\u003c/p\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DefaultAnnotationParam",
          "displayName": "Default annotation parameter value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports annotation parameters that are assigned to their \u003ccode\u003edefault\u003c/code\u003e value.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @interface Test {\n      Class\u0026lt;?\u003e expected() default Throwable.class;\n  }\n\n  @Test(expected \u003d Throwable.class)\n  void testSmth() {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test()\n  void testSmth() {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DuplicateThrows",
          "displayName": "Duplicate throws",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicate exceptions in a method \u003ccode\u003ethrows\u003c/code\u003e list.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f() throws Exception, Exception {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f() throws Exception {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore exceptions subclassing others \u003c/b\u003e option to ignore exceptions subclassing other exceptions.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "AccessStaticViaInstance",
          "displayName": "Access static member via instance reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports references to \u003ccode\u003estatic\u003c/code\u003e methods and fields via a class instance rather than the class itself.\n\u003cp\u003eEven though referring to static members via instance variables is allowed by The Java Language Specification,\n  this makes the code confusing as the reader may think that the result of the method depends on the instance.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the instance variable with the class name.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s1 \u003d s.valueOf(0);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d String.valueOf(0);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnusedReturnValue",
          "displayName": "Method can be made \u0027void\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods whose return values are never used when called.\nThe return type of such methods can be made \u003ccode\u003evoid\u003c/code\u003e.\n\u003cp\u003eMethods annotated with Error Prone\u0027s or AssertJ\u0027s \u003ccode\u003e@CanIgnoreReturnValue\u003c/code\u003e annotation will not be reported.\n  The quick-fix updates the method signature and removes \u003ccode\u003ereturn\u003c/code\u003e statements from inside the method.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // reported if visibility setting is Protected or Public\n  protected String myToUpperCase(String s) {\n    return s.toUpperCase();\n  }\n\n  // simple setter, reporting depends on setting\n  public String setStr(String str) {\n    myStr \u003d str;\n    return myStr;\n  }\n\n  void test() {\n    setStr(\"value\");          // return value is unused\n    myToUpperCase(\"result\");  // return value is unused\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied to both methods:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    protected void myToUpperCase(String s) {\n      // \u0027return\u0027 removed completely\n      // as \u0027s.toUpperCase()\u0027 has no side effect\n    }\n\n    public void setStr(String str) {\n      myStr \u003d str;\n      // \u0027return\u0027 removed\n    }\n  ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  \u003cb\u003eNOTE:\u003c/b\u003e Some methods might not be reported during in-editor highlighting due to performance reasons.\n  To see all results, run the inspection using \u003cb\u003eCode | Inspect Code\u003c/b\u003e or \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e\u003e\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore simple setters\u003c/b\u003e option to ignore unused return values from simple setter calls.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eMaximal reported method visibility\u003c/b\u003e option to control the maximum visibility of methods to be reported.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnusedLabel",
          "displayName": "Unused label",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports labels that are not targets of any \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e statements.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  label: \u003cb\u003efor\u003c/b\u003e (int i \u003d 0; i \u0026lt; 10; i++) {\n    \u003cb\u003eif\u003c/b\u003e (i \u003d\u003d 3) {\n      \u003cb\u003ebreak\u003c/b\u003e;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied, the label is removed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003efor\u003c/b\u003e (int i \u003d 0; i \u0026lt; 10; i++) {\n    \u003cb\u003eif\u003c/b\u003e (i \u003d\u003d 3) {\n      \u003cb\u003ebreak\u003c/b\u003e;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnusedLibrary",
          "displayName": "Unused library",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports libraries attached to the specified inspection scope that\nare not used directly in code.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantExplicitClose",
          "displayName": "Redundant \u0027close()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary calls to \u003ccode\u003eclose()\u003c/code\u003e at the end of a try-with-resources block and suggests removing them.\n\u003cp\u003e\u003cb\u003eExample\u003c/b\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try(MyAutoCloseable ac \u003d new MyAutoCloseable()) {\n    foo();\n    ac.close();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try(MyAutoCloseable ac \u003d new MyAutoCloseable()) {\n    foo();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FunctionalExpressionCanBeFolded",
          "displayName": "Functional expression can be folded",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method references or lambda expressions that point to a method of their own functional interface type and hence can be\nreplaced with their qualifiers removing unnecessary object allocation.\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  SwingUtilities.invokeLater(r::run);\n  SwingUtilities.invokeAndWait(() -\u003e r.run());\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  SwingUtilities.invokeLater(r);\n  SwingUtilities.invokeAndWait(r);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection reports only if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EmptyMethod",
          "displayName": "Empty method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty methods that can be removed.\n\u003cp\u003eMethods are considered empty if they are empty themselves and if they are overridden or\n implemented by empty methods only. Note that methods containing only comments and the \u003ccode\u003esuper()\u003c/code\u003e call with own parameters are\n  also considered empty.\u003c/p\u003e\n\u003cp\u003eThe inspection ignores methods with special annotations, for example, the \u003ccode\u003ejavax.ejb.Init\u003c/code\u003e and \u003ccode\u003ejavax.ejb.Remove\u003c/code\u003e EJB annotations .\u003c/p\u003e\n\u003cp\u003eThe quick-fix safely removes unnecessary methods.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eComments and javadoc count as content\u003c/b\u003e option to select whether methods with comments should be treated as non-empty.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eAdditional special annotations\u003c/b\u003e option to configure additional annotations that should be ignored by this inspection.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryModuleDependencyInspection",
          "displayName": "Unnecessary module dependency",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports dependencies on modules that are not used. The quick-fix safely removes such unused dependencies.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantThrows",
          "displayName": "Redundant \u0027throws\u0027 clause",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports exceptions that are declared in a method\u0027s signature but never thrown by the method itself or its implementations and overriding methods.\n\u003cp\u003eThe inspection ignores methods related to serialization, for example the methods \u003ccode\u003ereadObject()\u003c/code\u003e and \u003ccode\u003ewriteObject()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void method() throws InterruptedException {\n    System.out.println();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix removes unnecessary exceptions from the declaration and normalizes redundant \u003ccode\u003etry\u003c/code\u003e-\u003ccode\u003ecatch\u003c/code\u003e statements:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void method() {\n    System.out.println();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  \u003cb\u003eNote:\u003c/b\u003e Some exceptions may not be reported during in-editor highlighting for performance reasons.\n  To see all results, run the inspection by selecting  \u003cb\u003eCode | Inspect Code\u003c/b\u003e or \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e from the main menu.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore exceptions thrown by entry point methods\u003c/b\u003e option to not report exceptions thrown by\n  for example \u003ccode\u003emain()\u003c/code\u003e methods.\n  Entry point methods can be configured in the settings of the\n  \u003ca href\u003d\"settings://Errors?Unused%20Declaration%20entry%20point\"\u003eJava | Declaration redundancy | Unused declaration\u003c/a\u003e inspection.\n  \u003cbr\u003e\u003cbr\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "unused",
          "displayName": "Unused declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes, methods, or fields that are not used or unreachable from the entry points.\n\u003cp\u003e An entry point can be a main method, tests, classes from outside the specified scope, classes accessible from\n  \u003ccode\u003emodule-info.java\u003c/code\u003e, and so on. It is possible to configure custom entry points by using name patterns or annotations.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Department {\n    private Organization myOrganization;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, \u003ccode\u003eDepartment\u003c/code\u003e explicitly references \u003ccode\u003eOrganization\u003c/code\u003e but if \u003ccode\u003eDepartment\u003c/code\u003e class itself is unused, then inspection will report both classes. \u003c/p\u003e\n\u003cp\u003e\n  The inspection also reports parameters that are not used by their methods and all method implementations and overriders, as well as local\n  variables that are declared but not used.\n\u003c/p\u003e\n\u003cp\u003e\n  \u003cb\u003eNote:\u003c/b\u003e Some unused members may not be reported during in-editor code highlighting. For performance reasons, a non-private member is\n  checked only when its name rarely occurs in the project.\n  To see all results, run the inspection by selecting \u003cb\u003eCode | Inspect Code\u003c/b\u003e or \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e from the main menu.\n\u003c/p\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the visibility settings below to configure members to be reported. For example, configuring report \u003ccode\u003eprivate\u003c/code\u003e methods only means\n  that \u003ccode\u003epublic\u003c/code\u003e methods of \u003ccode\u003eprivate\u003c/code\u003e inner class will be reported but \u003ccode\u003eprotected\u003c/code\u003e methods of top level class\n  will be ignored.\u003c/p\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eentry points\u003c/b\u003e tab to configure entry points to be considered during the inspection run.\u003c/p\u003e\n\u003cp\u003e You can add entry points manually when inspection results are ready.\u003c/p\u003e\n\u003cp\u003e If your code uses unsupported frameworks, there are several options:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eIf the framework relies on annotations, use the \u003cb\u003eAnnotations...\u003c/b\u003e button to configure the framework\u0027s annotations.\u003c/li\u003e\n  \u003cli\u003eIf the framework doesn\u0027t rely on annotations, try to configure class name patterns that are expected by the framework.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis way the annotated code accessible by the framework internals will be treated as used.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SillyAssignment",
          "displayName": "Variable is assigned to itself",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignments of a variable to itself.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a \u003d a;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix removes the assigment.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EmptyInitializer",
          "displayName": "Empty class initializer",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty class initializer blocks.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WeakerAccess",
          "displayName": "Declaration access can be weaker",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields, methods or classes that may have their access modifier narrowed down.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Sample {\n    void foo() {\n        bar(\"foo\", \"foo\");\n    }\n    void bar(String x, String y) { } // can be private\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Sample {\n    void foo() {\n        bar(\"foo\", \"foo\");\n    }\n    private void bar(String x, String y) { }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the inspection\u0027s options to define the rules for the modifier change suggestions.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CanBeFinal",
          "displayName": "Declaration can have \u0027final\u0027 modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields, methods, or classes that may have the \u003ccode\u003efinal\u003c/code\u003e modifier added to their declarations.\n\u003cp\u003eFinal classes can\u0027t be extended, final methods can\u0027t be overridden, and final fields can\u0027t be reassigned.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Person {\n    private String name;\n\n    Person(String name) {\n      this.name \u003d name;\n    }\n\n    public String getName() {\n      return name;\n    }\n\n    public String toString() {\n      return getName();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public final class Person {\n    private final String name;\n\n    Person(String name) {\n      this.name \u003d name;\n    }\n\n    public final String getName() {\n      return name;\n    }\n\n    public final String toString() {\n      return getName();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eReport classes\u003c/b\u003e and \u003cb\u003eReport methods\u003c/b\u003e options to define which declarations are to be reported.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "FinalMethodInFinalClass",
          "displayName": "\u0027final\u0027 method in \u0027final\u0027 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efinal\u003c/code\u003e methods in \u003ccode\u003efinal\u003c/code\u003e classes.\n\u003cp\u003eSince \u003ccode\u003efinal\u003c/code\u003e classes cannot be inherited, marking a method as \u003ccode\u003efinal\u003c/code\u003e\n  may be unnecessary and confusing.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erecord Bar(int a, int b) {\n  public final int sum() { \n     return a + b;\n  }\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003erecord Bar(int a, int b) {\n  public int sum() { \n     return a + b;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAs shown in the example, a class can be marked as \u003ccode\u003efinal\u003c/code\u003e explicitly or implicitly.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Java9RedundantRequiresStatement",
          "displayName": "Redundant \u0027requires\u0027 directive in module-info",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant \u003ccode\u003erequires\u003c/code\u003e directives in Java Platform Module System \u003ccode\u003emodule-info.java\u003c/code\u003e files.\nA \u003ccode\u003erequires\u003c/code\u003e directive is redundant when a module \u003ccode\u003eA\u003c/code\u003e requires a module \u003ccode\u003eB\u003c/code\u003e,\nbut the code in module \u003ccode\u003eA\u003c/code\u003e doesn\u0027t import any packages or classes from \u003ccode\u003eB\u003c/code\u003e.\nFurthermore, all modules have an implicitly declared dependence on the \u003ccode\u003ejava.base\u003c/code\u003e module,\ntherefore a \u003ccode\u003erequires java.base;\u003c/code\u003e directive is always redundant.\n\u003cp\u003e\n  The quick-fix deletes the redundant \u003ccode\u003erequires\u003c/code\u003e directive.\n  If the deleted dependency re-exported modules that are actually used, the fix adds a \u003ccode\u003erequires\u003c/code\u003e directives for these modules.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 9 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantRecordConstructor",
          "displayName": "Redundant record constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant constructors declared inside Java records.\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  record Point(int x, int y) {\n    public Point {} // could be removed\n  }\n  \n  record Point(int x, int y) {\n    public Point(int x, int y) { // could be removed\n      this.x \u003d x;\n      this.y \u003d y;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix removes the redundant constructors.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n   // could be converted to compact constructor\n  record Range(int from, int to) {\n    public Range(int from, int to) {\n      if (from \u003e to) throw new IllegalArgumentException();\n      this.from \u003d from;\n      this.to \u003d to;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix converts this code into a compact constructor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 16 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Invalid elements",
      "inspections": [
        {
          "shortName": "CssInvalidHtmlTagReference",
          "displayName": "Invalid type selector",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a CSS \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\"\u003etype selector\u003c/a\u003e that matches an unknown HTML element.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssUnresolvedCustomProperty",
          "displayName": "Unresolved custom property",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved reference to a \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/CSS/--*\"\u003ecustom property\u003c/a\u003e\namong the arguments of the \u003ccode\u003evar()\u003c/code\u003e function.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssUnknownTarget",
          "displayName": "Unresolved file reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved file reference, for example, an incorrect path in an \u003ccode\u003e@import\u003c/code\u003e statement.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssInvalidCharsetRule",
          "displayName": "Misplaced or incorrect @charset",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a misplaced \u003ccode\u003e@charset\u003c/code\u003e at-rule or an incorrect charset value.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssInvalidPseudoSelector",
          "displayName": "Invalid pseudo-selector",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an incorrect CSS \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\"\u003epseudo-class\u003c/a\u003e\n\u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\"\u003epseudo-element\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssInvalidImport",
          "displayName": "Misplaced @import",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a misplaced \u003ccode\u003e@import\u003c/code\u003e statement.\n\u003cp\u003e\n  According to the \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/CSS/@import\"\u003especification\u003c/a\u003e,\n  \u003ccode\u003e@import\u003c/code\u003e rules must precede all other types of rules, except \u003ccode\u003e@charset\u003c/code\u003e rules.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssUnresolvedClassInComposesRule",
          "displayName": "Unresolved class in \u0027composes\u0027 rule",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a CSS class reference in the \u003ca href\u003d\"https://github.com/css-modules/css-modules#composition\"\u003e\u0027composes\u0027\u003c/a\u003e\nrule that cannot be resolved to any valid target.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  .className {/* ... */}\n\n  .otherClassName {\n    composes: className;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssNegativeValue",
          "displayName": "Negative property value",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssInvalidPropertyValue",
          "displayName": "Invalid property value",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an incorrect CSS property value.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssInvalidAtRule",
          "displayName": "Unknown at-rule",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unknown \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\"\u003eCSS at-rule\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssInvalidFunction",
          "displayName": "Invalid function",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unknown \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions\"\u003eCSS function\u003c/a\u003e or an incorrect function parameter.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssInvalidMediaFeature",
          "displayName": "Invalid media feature",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unknown \u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\"\u003eCSS media feature\u003c/a\u003e\nor an incorrect media feature value.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssUnknownProperty",
          "displayName": "Unknown property",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unknown CSS property or a property used in a wrong context.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAdd the unknown property to the \u0027Custom CSS properties\u0027 list to skip validation.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java 8",
      "inspections": [
        {
          "shortName": "Guava",
          "displayName": "Guava\u0027s functional primitives can be replaced with Java",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of Guava\u0027s functional primitives that can be migrated to standard Java API calls.\n\u003cp\u003eFor example, the inspection reports usages of classes and interfaces like \u003ccode\u003eFluentIterable\u003c/code\u003e, \u003ccode\u003eOptional\u003c/code\u003e, \u003ccode\u003eFunction\u003c/code\u003e,\n  \u003ccode\u003ePredicate\u003c/code\u003e, or \u003ccode\u003eSupplier\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ImmutableList\u0026lt;String\u0026gt; results \u003d FluentIterable.from(List.of(1, 2, 3)).transform(Object::toString).toList();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; results \u003d List.of(1, 2, 3).stream().map(Object::toString).collect(Collectors.toList());\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nThe quick-fix may change the semantics. Some lazy-evaluated Guava\u0027s iterables can be transformed to eager-evaluated.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Java8MapForEach",
          "displayName": "Map.forEach() can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nSuggests replacing \u003ccode\u003efor(Entry\u0026lt;?,?\u0026gt; entry : map.entrySet()) {...}\u003c/code\u003e or\n\u003ccode\u003emap.entrySet().forEach(entry -\u0026gt; ...)\u003c/code\u003e with \u003ccode\u003emap.forEach((key, value) -\u003e ...)\u003c/code\u003e.\n\u003cp\u003eExample\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void print(Map\u0026lt;String, Integer\u0026gt; map) {\n    map.entrySet().forEach(entry -\u003e {\n      String str \u003d entry.getKey();\n      System.out.println(str + \":\" + entry.getValue());\n    });\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void print(Map\u0026lt;String, Integer\u0026gt; map) {\n    map.forEach((str, value) -\u003e System.out.println(str + \":\" + value));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  When the \u003cb\u003eDo not report loops\u003c/b\u003e option is enabled, only \u003ccode\u003eentrySet().forEach()\u003c/code\u003e cases will be reported.\n  However, the quick-fix action will be available for \u003ccode\u003efor\u003c/code\u003e-loops as well.\n\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifyForEach",
          "displayName": "Simplifiable forEach() call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eforEach()\u003c/code\u003e calls that can be replaced with a more concise method or from which intermediate steps can be extracted.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; findNStrings(List\u0026lt;String\u0026gt; list, int n) {\n    List\u0026lt;String\u0026gt; other \u003d new ArrayList\u0026lt;\u003e();\n    list.forEach(s -\u003e {\n      if(s.length() \u003e n) other.add(s);\n    });\n    return other;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; findNStrings(List\u0026lt;String\u0026gt; list, int n) {\n    List\u0026lt;String\u0026gt; other \u003d list.stream()\n      .filter(s -\u003e s.length() \u003e n)\n      .collect(Collectors.toList());\n    return other;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Convert2streamapi",
          "displayName": "Loop can be collapsed with Stream API",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports loops which can be replaced with stream API calls using lambda expressions.\n\u003cp\u003eSuch a replacement changes the style from imperative to more functional and makes the code more compact.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eboolean\u003c/b\u003e check(List\u0026lt;String\u003e data) {\n    \u003cb\u003efor\u003c/b\u003e (String e : data) {\n      String trimmed \u003d e.trim();\n      \u003cb\u003eif\u003c/b\u003e (!trimmed.startsWith(\"xyz\")) {\n        \u003cb\u003ereturn\u003c/b\u003e false;\n      }\n    }\n    return true;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eboolean\u003c/b\u003e check(List\u0026lt;String\u003e data) {\n    \u003cb\u003ereturn\u003c/b\u003e data.stream().map(String::trim).allMatch(trimmed -\u003e trimmed.startsWith(\"xyz\"));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CodeBlock2Expr",
          "displayName": "Statement lambda can be replaced with expression lambda",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambda expressions with code block bodies when expression-style bodies can be used instead.\nThe result of the conversion is shorter and more clear.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Comparable\u0026lt;String\u0026gt; c \u003d o -\u003e {return 0;};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Comparable\u0026lt;String\u0026gt; c \u003d o -\u003e 0;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Anonymous2MethodRef",
          "displayName": "Anonymous type can be replaced with method reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports anonymous classes which can be replaced with method references.\n\u003cp\u003e\n  Note that if an anonymous class is converted into an unbound method reference, the same method reference object \n  can be reused by the Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,\n  separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, \n  e.g. when anonymous class instances are used as \u003ccode\u003eHashMap\u003c/code\u003e keys.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    Runnable r \u003d new Runnable() {\n      @Override\n      public void run() {\n        System.out.println();\n      }\n    };\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix changes this code to the compact form: \u003ccode\u003eRunnable r \u003d System.out::println;\u003c/code\u003e.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eReport when interface is not annotated with @FunctionalInterface\u003c/b\u003e option to enable this inspection for\n  interfaces which are not annotated with @FunctionalInterface.\u003c/p\u003e\n\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Java8ListSort",
          "displayName": "\u0027Collections.sort()\u0027 can be replaced with \u0027List.sort()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls of \u003ccode\u003eCollections.sort(list, comparator)\u003c/code\u003e which can be replaced with \u003ccode\u003elist.sort(comparator)\u003c/code\u003e.\n\u003cp\u003e\u003ccode\u003eCollections.sort\u003c/code\u003e is just a wrapper, so it is better to use an instance method directly.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FoldExpressionIntoStream",
          "displayName": "Expression can be folded into Stream chain",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions with a repeating pattern which could be replaced with \u003ci\u003eStream API\u003c/i\u003e or \u003ccode\u003eString.join()\u003c/code\u003e.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean allStartWith(String a, String b, String c, String d, String prefix) {\n    return a.startsWith(prefix) \u0026\u0026 b.startsWith(prefix) \u0026\u0026 c.startsWith(prefix) \u0026\u0026 d.startsWith(prefix);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean foo(String a, String b, String c, String d, String prefix) {\n    return Stream.of(a, b, c, d).allMatch(s -\u003e s.startsWith(prefix));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String joinAll(String a, String b, String c, String d) {\n    return a + \",\" + b + \",\" + c + \",\" + d;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String joinAll(String a, String b, String c, String d) {\n    return String.join(\",\", a, b, c, d);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Java8CollectionRemoveIf",
          "displayName": "Loop can be replaced with \u0027Collection.removeIf()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports loops which can be collapsed into a single \u003ccode\u003eCollection.removeIf\u003c/code\u003e call.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (Iterator\u0026lt;String\u0026gt; it \u003d collection.iterator(); it.hasNext(); ) {\n    String aValue \u003d it.next();\n    if(shouldBeRemoved(aValue)) {\n      it.remove();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  collection.removeIf(aValue -\u003e shouldBeRemoved(aValue));\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  This inspection only reports if the language level of the project or module is 8 or higher.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Java8MapApi",
          "displayName": "Simplifiable \u0027Map\u0027 operations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports common usage patterns of \u003ccode\u003ejava.util.Map\u003c/code\u003e and suggests replacing them with:\n\u003ccode\u003egetOrDefault()\u003c/code\u003e, \u003ccode\u003ecomputeIfAbsent()\u003c/code\u003e, \u003ccode\u003eputIfAbsent()\u003c/code\u003e, \u003ccode\u003emerge()\u003c/code\u003e, or \u003ccode\u003ereplaceAll()\u003c/code\u003e.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  map.containsKey(key) ? map.get(key) : \"default\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  map.getOrDefault(key, \"default\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; list \u003d map.get(key);\n  if (list \u003d\u003d null) {\n    list \u003d new ArrayList\u0026lt;\u0026gt;();\n    map.put(key, list);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  map.computeIfAbsent(key, localKey -\u003e new ArrayList\u0026lt;\u0026gt;());\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Integer val \u003d map.get(key);\n  if (val \u003d\u003d null) map.put(key, 1);\n  else map.put(key, val + 1);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  map.merge(key, 1, (localKey, localValue) -\u003e localValue + 1);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (Map.Entry\u0026lt;String, String\u0026gt; entry : map.entrySet()) {\n    map.put(entry.getKey(), transform(entry.getValue()));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  map.replaceAll((localKey, localValue) -\u003e transform(localValue));\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eNote that the replacement with \u003ccode\u003ecomputeIfAbsent()\u003c/code\u003e or \u003ccode\u003emerge()\u003c/code\u003e might work incorrectly for some \u003ccode\u003eMap\u003c/code\u003e\n  implementations if the code extracted to the lambda expression modifies the same \u003ccode\u003eMap\u003c/code\u003e. By default,\n  the warning doesn\u0027t appear if this code might have side effects. If necessary, enable the\n  \u003cb\u003eSuggest replacement even if lambda may have side effects\u003c/b\u003e option to always show the warning.\u003c/p\u003e\n\u003cp\u003eAlso, due to different handling of the \u003ccode\u003enull\u003c/code\u003e value in old methods like \u003ccode\u003eput()\u003c/code\u003e and newer methods like\n  \u003ccode\u003ecomputeIfAbsent()\u003c/code\u003e or \u003ccode\u003emerge()\u003c/code\u003e, semantics might change if storing the \u003ccode\u003enull\u003c/code\u003e value into given\n  \u003ccode\u003eMap\u003c/code\u003e is important. The inspection won\u0027t suggest the replacement when the value is statically known to be nullable,\n  but for values with unknown nullability the replacement is still suggested. In these cases, we recommended suppressing the warning\n  and adding an explanatory comment.\n\u003c/p\u003e\n\u003cp\u003eThis inspection reports only if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StaticPseudoFunctionalStyleMethod",
          "displayName": "Pseudo-functional expression using static class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of pseudo-functional code if \u003ccode\u003eJava Stream API\u003c/code\u003e is available.\n\u003cp\u003eThough \u003ccode\u003eguava Iterable API\u003c/code\u003e provides functionality similar to \u003ccode\u003eJava Streams API\u003c/code\u003e, it\u0027s slightly different and\n  may miss some features.\n  Especially, primitive-specialized stream variants like \u003ccode\u003eIntStream\u003c/code\u003e are more performant than generic variants.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nList\u0026lt;String\u0026gt; transformedIterable \u003d Iterables.transform(someList, someTransformFunction);//warning: Pseudo functional style code\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eList\u0026lt;String\u0026gt; transformedIterable \u003d someList.stream().map(someTransformFunction).collect(Collectors.toList());\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  \u003cb\u003eNote:\u003c/b\u003e Code semantics can be changed; for example, guava\u0027s \u003ccode\u003eIterable.transform\u003c/code\u003e produces a lazy-evaluated iterable,\n  but the replacement is eager-evaluated.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eStatic method calls translated to the \u0027Stream\u0027 API\u003c/b\u003e option\n  to configure static method calls that should be translated to the \u003ccode\u003estream\u003c/code\u003e API.\n\u003c/p\u003e\n\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ComparatorCombinators",
          "displayName": "\u0027Comparator\u0027 combinator can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eComparator\u003c/code\u003e instances defined as lambda expressions that could be expressed using\n \u003ccode\u003eComparator.comparing()\u003c/code\u003e calls.\nChained comparisons which can be replaced by \u003ccode\u003eComparator.thenComparing()\u003c/code\u003e expression are also reported.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  myList.sort((person1, person2) -\u003e person1.getName().compareTo(person2.getName()));\n\n  myList2.sort((person1, person2) -\u003e {\n      int res \u003d person1.first().compareTo(person2.first());\n      if(res \u003d\u003d 0) res \u003d person1.second().compareTo(person2.second());\n      if(res \u003d\u003d 0) res \u003d person1.third() - person2.third();\n      return res;\n  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fixes are applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  myList.sort(Comparator.comparing(Person::getName));\n\n  myList2.sort(Comparator.comparing(Person::first)\n                         .thenComparing(Person::second)\n                         .thenComparingInt(Person::third));\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Convert2MethodRef",
          "displayName": "Lambda can be replaced with method reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambdas that can be replaced with method references. While often it could be a matter of taste, method references are more clear\nand readable compared to lambdas.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Runnable r \u003d () -\u003e System.out.println();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Runnable r \u003d System.out::println;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  The inspection may suggest method references even if a lambda doesn\u0027t call any method, like replacing \u003ccode\u003eobj -\u003e obj !\u003d null\u003c/code\u003e\n  with \u003ccode\u003eObjects::nonNull\u003c/code\u003e. \n  Use the \u003ca href\u003d\"settings://preferences.sourceCode.Java?Lambda%20Body\"\u003eSettings | Editor | Code Style | Java | Code Generation\u003c/a\u003e\n  settings to configure special method references.\n\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "AnonymousHasLambdaAlternative",
          "displayName": "Anonymous type has shorter lambda alternative",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports anonymous classes which could be transformed to a constructor or a factory method call with a lambda expression argument.\n\u003cp\u003eThe following classes are reported by this inspection:\n\u003cul\u003e\n  \u003cli\u003eAnonymous classes extending \u003ccode\u003eThreadLocal\u003c/code\u003e which have an \u003ccode\u003einitialValue()\u003c/code\u003e method (can be replaced with \u003ccode\u003eThreadLocal.withInitial\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eAnonymous classes extending \u003ccode\u003eThread\u003c/code\u003e which have a \u003ccode\u003erun()\u003c/code\u003e method (can be replaced with \u003ccode\u003enew Thread(Runnable)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003enew\u003c/b\u003e Thread() {\n    @Override\n    \u003cb\u003epublic void\u003c/b\u003e run() {\n      System.out.println(\"Hello from thread!\");\n    }\n  }.start();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003enew\u003c/b\u003e Thread(() -\u003e {\n    System.out.println(\"Hello from thread!\");\n  }).start();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Java8ListReplaceAll",
          "displayName": "Loop can be replaced with \u0027List.replaceAll()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports loops which can be collapsed into a single \u003ccode\u003eList.replaceAll()\u003c/code\u003e call.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (int i \u003d 0; i \u0026lt; strings.size(); i++) {\n    String str \u003d strings.get(i).toLowerCase();\n    strings.set(i, str);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  strings.replaceAll(String::toLowerCase);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  This inspection only reports if the language level of the project or module is 8 or higher.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LambdaCanBeMethodCall",
          "displayName": "Lambda can be replaced with method call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambda expressions which can be replaced with a call to a JDK method.\n\u003cp\u003eFor example, an expression \u003ccode\u003ex -\u0026gt; x\u003c/code\u003e of type \u003ccode\u003eFunction\u0026lt;T, T\u0026gt;\u003c/code\u003e\n  can be replaced with a \u003ccode\u003eFunction.identity()\u003c/code\u003e call.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Convert2Lambda",
          "displayName": "Anonymous type can be replaced with lambda",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports anonymous classes which can be replaced with lambda expressions.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  new Thread(new Runnable() {\n    @Override\n    public void run() {\n      // run thread\n    }\n  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  new Thread(() -\u003e {\n    // run thread\n  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nNote that if an anonymous class is converted into a stateless lambda, the same lambda object\ncan be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,\nseparate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases,\ne.g. when anonymous class instances are used as \u003ccode\u003eHashMap\u003c/code\u003e keys.\n\u003c/p\u003e\n\u003cp\u003eLambda syntax is not supported in Java 1.7 and earlier JVMs.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eReport when interface is not annotated with @FunctionalInterface \u003c/b\u003e option to ignore the cases in which an anonymous\nclass implements an interface without \u003ccode\u003e@FunctionalInterface\u003c/code\u003e annotation.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "ES6BindWithArrowFunction",
          "displayName": "Suspicious usage of \u0027bind\u0027 with arrow function",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports  \u003ccode\u003ebind\u003c/code\u003e used together with an arrow function.\u003cbr/\u003e\nBecause arrow functions use lexical \u003ccode\u003ethis\u003c/code\u003e,  a \u003ccode\u003ebind\u003c/code\u003e call will have no effect on them.\u003cbr/\u003e\nSee \u003ca href\u003d\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this\"\u003ehere\u003c/a\u003e for details.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InfiniteLoopJS",
          "displayName": "Infinite loop statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, or \u003ccode\u003edo\u003c/code\u003e statement which\ncan only exit by throwing an exception. Such statements often indicate coding errors.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSConsecutiveCommasInArrayLiteral",
          "displayName": "Consecutive commas in array literal",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a consecutive comma in an array literal. The skipped element accepts the \u003ccode\u003eundefined\u003c/code\u003e value,\nbut it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSPotentiallyInvalidUsageOfThis",
          "displayName": "Potentially invalid reference to \u0027this\u0027 from closure",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003ethis\u003c/code\u003e in closure that is used for referencing properties of outer context. \u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfunction Outer() {\n  this.outerProp \u003d 1;\n  function inner() {\n    // bad, because \u0027outerProp\u0027 of Outer\n    // won\u0027t be updated here\n    // on calling \u0027new Outer()\u0027 as may be expected\n    this.outerProp \u003d 2;\n  }\n  inner();\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSConstructorReturnsPrimitive",
          "displayName": "Constructor returns primitive value",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a constructor function that returns a primitive value.\nWhen called with \u003ccode\u003enew\u003c/code\u003e, this value will be lost and an object will be returned instead. To avoid warnings, use the \u003ccode\u003e@return\u003c/code\u003e tag to specify\nthe return of the function.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSPotentiallyInvalidConstructorUsage",
          "displayName": "Potentially invalid constructor usage",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after \u003ccode\u003enew\u003c/code\u003e, using\na constructor\u0027s prototype or calling a constructor without \u003ccode\u003enew\u003c/code\u003e. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc \u003ccode\u003e@constructor\u003c/code\u003e tag.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSEqualityComparisonWithCoercion",
          "displayName": "Equality operator may cause type coercion",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of an equality operator that may cause unexpected type coercions.\nSuggests replacing  \u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e with type-safe equality operators \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003d\u003c/code\u003e.\n\u003cp\u003eDepending on the option selected, one of the following cases will be reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    All usages of \u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e operators.\n  \u003c/li\u003e\n  \u003cli\u003e\n    All usages except comparison with null. Some code styles allow using \u003ccode\u003ex \u003d\u003d null\u003c/code\u003e as a replacement for\n    \u003ccode\u003ex \u003d\u003d\u003d null || x \u003d\u003d\u003d undefined\u003c/code\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Only suspicious expressions, such as: \u003ccode\u003e\u003d\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e comparisons\n    with \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e\u0027\u0027\u003c/code\u003e,\n    \u003ccode\u003enull\u003c/code\u003e, \u003ccode\u003etrue\u003c/code\u003e,\n    \u003ccode\u003efalse\u003c/code\u003e, or \u003ccode\u003eundefined\u003c/code\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InfiniteRecursionJS",
          "displayName": "Infinite recursion",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function which must either recurse\ninfinitely or throw an exception. Such functions may not return normally.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ForLoopThatDoesntUseLoopVariableJS",
          "displayName": "\u0027for\u0027 loop where update or condition does not use loop variable",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003efor\u003c/code\u003e loop where the condition or update does not use the \u003ccode\u003efor\u003c/code\u003e loop variable.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSVoidFunctionReturnValueUsed",
          "displayName": "Void function return value used",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a return value of a function that doesn\u0027t return anything.\nCalling of such functions always produces an \u003ccode\u003eundefined\u003c/code\u003e value and such assignment may indicate an error. \u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nlet a \u003d console.log(\u0027foo\u0027);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cbr/\u003e\nThe following usages are ignored:\n\u003cul\u003e\n  \u003cli\u003eInside a return statement\u003c/li\u003e\n  \u003cli\u003eIn some binary operations\u003c/li\u003e\n  \u003cli\u003eFor overridden non-void functions\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
          "displayName": "Possibly incorrect target of indexed property access",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a potentially invalid indexed property access, for example, \u003ccode\u003eArray[1]\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DivideByZeroJS",
          "displayName": "Division by zero",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports division by zero or a remainder by zero.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSSuspiciousEqPlus",
          "displayName": "Suspicious \u0027\u003d+\u0027 assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an assignment in the form \u003ccode\u003ea \u003d+ b\u003c/code\u003e.\nSuggests replacing with \u003ccode\u003ea +\u003d b\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSPotentiallyInvalidUsageOfClassThis",
          "displayName": "Potentially invalid reference to \u0027this\u0027 of a class from closure",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an attempt to reference a member of an ECMAScript class via the \u003ccode\u003ethis.\u003c/code\u003e qualifier in a nested function that is not a lambda.\u003cbr/\u003e\n\u003ccode\u003ethis\u003c/code\u003e in a nested function that is not a lambda is the function\u0027s own \u003ccode\u003ethis\u003c/code\u003e and doesn\u0027t relate to the outer class.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSSuspiciousNameCombination",
          "displayName": "Suspicious variable/parameter name combination",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copied from community/java/java-impl/src/inspectionDescriptions/SuspiciousNameCombination.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003evar\u003c/b\u003e x \u003d 0;\n  \u003cb\u003evar\u003c/b\u003e y \u003d x;\n\u003c/code\u003e\u003c/pre\u003e\nor\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003evar\u003c/b\u003e x \u003d 0, y \u003d 0;\n  \u003cb\u003evar\u003c/b\u003e rc \u003d \u003cb\u003enew\u003c/b\u003e Rectangle(y, x, 20, 20);\n\u003c/code\u003e\u003c/pre\u003e\nHere the inspection guesses that \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e are mixed up.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eSpecify the names that should not be used together. An error is reported\n  if a parameter name or an assignment target name contains words from one group while the name of the assigned or passed\n  variable contains words from another group.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSTypeOfValues",
          "displayName": "\u0027typeof\u0027 comparison with non-standard value",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a comparison of a \u003ccode\u003etypeof\u003c/code\u003e expression with a literal string which is not one of the standard types: \u003ccode\u003eundefined\u003c/code\u003e, \u003ccode\u003eobject\u003c/code\u003e, \u003ccode\u003eboolean\u003c/code\u003e, \u003ccode\u003enumber\u003c/code\u003e, \u003ccode\u003estring\u003c/code\u003e, \u003ccode\u003efunction\u003c/code\u003e, or \u003ccode\u003esymbol\u003c/code\u003e.\nSuch comparisons always return \u003ccode\u003efalse\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObjectAllocationIgnoredJS",
          "displayName": "Result of object allocation ignored",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports object allocation where the result of the allocated object is ignored, for example, \u003ccode\u003enew Error();\u003c/code\u003e as a statement, without any assignment.\nSuch allocation expressions may  indicate an odd object initialization strategy. \n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSComparisonWithNaN",
          "displayName": "Comparison with NaN",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a comparison with NaN. Comparisons like \u003ccode\u003eexpr \u003d\u003d NaN\u003c/code\u003e or \u003ccode\u003eexpr \u003d\u003d\u003d NaN\u003c/code\u003e are always evaluated to \u003ccode\u003efalse\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSIncompatibleTypesComparison",
          "displayName": "Comparison of expressions having incompatible types",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a comparison with operands of incompatible types or an operand with a type without possible common values.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "JavaFX",
      "inspections": [
        {
          "shortName": "JavaFxEventHandler",
          "displayName": "Event handler method signature problems",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.javaFX",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports event handler issues, including incompatible argument types, ambiguous event handler methods, and incorrect return types.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JavaFxUnresolvedFxIdReference",
          "displayName": "Unresolved fx:id attribute reference",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.javaFX",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved fx:id references. The quick-fix creates the corresponding fields.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JavaFxRedundantPropertyValue",
          "displayName": "JavaFX redundant property values",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.javaFX",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports properties in .fxml files (both attributes and tags) that have the default values and therefore are redundant.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaFxDefaultTag",
          "displayName": "Unnecessary default tag",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.javaFX",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant tags in .fxml files. These tags correspond to a class property which\nis declared in the @DefaultProperty class annotation, that is why they can be omitted.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaFxResourcePropertyValue",
          "displayName": "The value from properties file is incompatible with the attribute type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.javaFX",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports attribute values defined in a .properties file that do not match the type of the attribute.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JavaFxUnusedImports",
          "displayName": "JavaFX unused imports",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.javaFX",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unused imports in .fxml files.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaFxUnresolvedStyleClassReference",
          "displayName": "Unresolved style class reference",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.javaFX",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved CSS style classes.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaFxColorRgb",
          "displayName": "Color component is out of range",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.javaFX",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports RGB color components that are out of the valid range.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Assignment issues",
      "inspections": [
        {
          "shortName": "GroovyAssignabilityCheck",
          "displayName": "Incompatible type assignments",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignments with incompatible types.\n\u003cp\u003eSuch assignments might result in various runtime exceptions.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A {}\n  class B {}\n\n  // incompatible assignment\n  A a \u003d new B()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyNestedAssignment",
          "displayName": "Nested assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignment expressions nested inside other expressions.\nWhile admirably terse, such expressions may be confusing, and violate the general design principle that a given construct\nshould do precisely one thing.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\na \u003d b \u003d 1\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyResultOfAssignmentUsed",
          "displayName": "Result of assignment used",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignment expressions nested inside other expressions to use the assigned value immediately.\n\u003cp\u003e\n  Such expressions may be confusing and violating the general design principle that a\n  given construct should do precisely one thing.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyUncheckedAssignmentOfMemberOfRawType",
          "displayName": "Unchecked assignment from members of raw type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unchecked assignments from members of raw type.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List list \u003d new ArrayList()\n  List\u0026ltString\u0026gt a \u003d \u003cb\u003elist.get(0)\u003c/b\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyAssignmentToForLoopParameter",
          "displayName": "Assignment to \u0027for\u0027 loop parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignments to \u003cb\u003efor\u003c/b\u003e loop parameters inside the \u003cb\u003efor\u003c/b\u003e loop body.\n\u003cp\u003eWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (value in [1, 2, 3]) {\n      value \u003d 4 // warning\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyAssignmentCanBeOperatorAssignment",
          "displayName": "Assignment can be replaced with operator assignment",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignments which can be replaced by an operator assignment.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a \u003d a + b\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a +\u003d b\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore conditional operators\u003c/b\u003e option to ignore \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e operators.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore obscure operators\u003c/b\u003e option to ignore \u003ccode\u003e^\u003c/code\u003e and \u003ccode\u003e%\u003c/code\u003e operators.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyAssignmentToMethodParameter",
          "displayName": "Assignment to method parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignment to method parameters.\n\u003cp\u003eWhile occasionally intended, this construct can be extremely confusing, and is often the result of a typo.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def m(a, b, c) {\n      a \u003d [] // warning\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovySillyAssignment",
          "displayName": "Silly assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignments of a variable to itself.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Kotlin Android",
      "inspections": [
        {
          "shortName": "IllegalIdentifier",
          "displayName": "Illegal Android Identifier",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Android projects identifiers that are not accepted by the Android runtime.\nFor example, method names with whitespaces.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Test {\n      var `a b c` \u003d 3\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the problem change the identifier\u0027s name to match the Android runtime requirements.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "TypeParameterFindViewById",
          "displayName": "Cast can be converted to findViewById with type parameter",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efindViewById\u003c/code\u003e calls with type casts that can be converted to \u003ccode\u003efindViewById\u003c/code\u003e with a type parameter from Android 8.0 (API level 26).\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Extractions",
      "inspections": [
        {
          "shortName": "ExtractKtorModule",
          "displayName": "Extract Application module from the current embeddedServer block",
          "defaultSeverity": "WARNING",
          "pluginId": "intellij.ktor",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports that there is no distinct Application module that is used for the whole Ktor application.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Logging",
      "inspections": [
        {
          "shortName": "KotlinLoggerInitializedWithForeignClass",
          "displayName": "Logger initialized with foreign class",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eLogger\u003c/code\u003e instances initialized with a class literal other than the class the \u003ccode\u003eLogger\u003c/code\u003e\nresides in.\n\u003cp\u003e\n    This can happen when copy-pasting from another class.\n    It may result in logging events under an unexpected category and incorrect filtering.\n\u003c/p\u003e\n\u003cp\u003e\n    Use the inspection options to specify the logger factory classes and methods recognized by this inspection.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass AnotherService\nclass MyService {\n    private val logger \u003d LoggerFactory.getLogger(AnotherService::class.java)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass MyService {\n    private val logger \u003d LoggerFactory.getLogger(MyService::class.java)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinPlaceholderCountMatchesArgumentCount",
          "displayName": "Number of placeholders does not match number of arguments in logging call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports SLF4J or Log4j 2 logging calls, such as \u003ccode\u003elogger.info(\"{}: {}\", key)\u003c/code\u003e where the number of \u003ccode\u003e{}\u003c/code\u003e placeholders\nin the logger message doesn\u0027t match the number of other arguments to the logging call.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Style",
      "inspections": [
        {
          "shortName": "ChangeToOperator",
          "displayName": "Method call can be replaced with operator invocation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method calls that can be replaced with operator invocations.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a.plus(b)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a + b\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrUnnecessarySealedModifier",
          "displayName": "Unnecessary \u0027sealed\u0027 modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unnecessary \u003ccode\u003esealed\u003c/code\u003e modifiers which used on methods, fields, or variables.\u003c/p\u003e\n\u003cp\u003eThis modifier has effect only on classes, interfaces and traits.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003esealed\u003c/b\u003e boolean foo() {} // modifier is unnecessary\n  \u003cb\u003esealed\u003c/b\u003e Object bar // modifier is unnecessary\n\n  // modifier is required and therefore not highlighted\n  \u003cb\u003esealed\u003c/b\u003e class A {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrUnnecessaryNonSealedModifier",
          "displayName": "Unnecessary \u0027non-sealed\u0027 modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unnecessary \u003ccode\u003enon-sealed\u003c/code\u003e modifiers which used on methods, fields, or variables.\u003c/p\u003e\n\u003cp\u003eThis modifier has effect only on classes, interfaces and traits.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003enon-sealed\u003c/b\u003e boolean foo() {} // modifier is unnecessary\n  \u003cb\u003enon-sealed\u003c/b\u003e Object bar // modifier is unnecessary\n\n  // modifier is required and therefore not highlighted\n  \u003cb\u003enon-sealed\u003c/b\u003e class A {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JavaStylePropertiesInvocation",
          "displayName": "Java-style property access",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports properties accessed via method calls.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n      int foo\n  }\n\n  def bar \u003d new Foo()\n  print(\u003cb\u003ebar.getFoo()\u003c/b\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n      int foo\n  }\n\n  def bar \u003d new Foo()\n  print(\u003cb\u003ebar.foo\u003c/b\u003e)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrUnnecessaryFinalModifier",
          "displayName": "Unnecessary \u0027final\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unnecessary \u003ccode\u003efinal\u003c/code\u003e modifiers when used with the record definition.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003efinal\u003c/b\u003e record R(int a) {} // modifier is unnecessary\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrUnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unnecessary semicolons.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  print 2; print 3 // semicolon is required\n  print 2; // semicolon is unnecessary\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyConditional",
          "displayName": "Ternary expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports ternary expressions.\n\u003cp\u003eSome coding standards prohibit the use of the condition operator in favor of \u003ccode\u003eif\u003c/code\u003e statements.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ChangeToMethod",
          "displayName": "Operator invocation can be replaced with method call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports operator invocations that can be replaced with method calls.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a + b\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a.plus(b)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrUnnecessaryAlias",
          "displayName": "Unnecessary import alias",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unnecessary import aliases.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import com.foo.Bar as Bar\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import com.foo.Bar\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrStringStyleViolation",
          "displayName": "String style violation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports strings with quotation that doesn\u0027t match code style.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def hw \u003d \"Hello, world!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def hw \u003d \u0027Hello, world!\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the fields provided below to specify code style for different kinds of strings.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrUnnecessaryPublicModifier",
          "displayName": "Unnecessary \u0027public\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unnecessary \u003ccode\u003epublic\u003c/code\u003e modifiers as Groovy classes and methods are \u003ccode\u003epublic\u003c/code\u003e by default.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Foo{\n      public void bar(){\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo{\n      void bar(){\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrUnnecessaryDefModifier",
          "displayName": "Unnecessary \u0027def\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unnecessary \u003ccode\u003edef\u003c/code\u003e modifiers when used with explicit type declaration.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003edef\u003c/b\u003e boolean foo() {} // modifier is unnecessary\n  \u003cb\u003edef\u003c/b\u003e Object bar // modifier is unnecessary\n\n  // modifier is required and therefore not highlighted\n  \u003cb\u003edef\u003c/b\u003e (int a, String b) \u003d []\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Manifest",
      "inspections": [
        {
          "shortName": "MisspelledHeader",
          "displayName": "Unknown or misspelled header name",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "Manifest",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n  Reports any unknown and probably misspelled header names and provides possible variants.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MissingFinalNewline",
          "displayName": "Missing final new line",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "Manifest",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports if manifest files do not end with a final newline as required by the JAR file specification.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Markdown",
      "inspections": [
        {
          "shortName": "MarkdownUnresolvedFileReference",
          "displayName": "Unresolved file references",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.plugins.markdown",
          "pluginVersion": "231.9011.34",
          "language": "Markdown",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved file references in Markdown files.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MarkdownNoTableBorders",
          "displayName": "Table doesn\u0027t have side borders",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.plugins.markdown",
          "pluginVersion": "231.9011.34",
          "language": "Markdown",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks if table has correct side borders.\nFor compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MarkdownOutdatedTableOfContents",
          "displayName": "Outdated table of contents section",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.plugins.markdown",
          "pluginVersion": "231.9011.34",
          "language": "Markdown",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks if a particular table of contents section corresponds to the actual structure of the document.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MarkdownIncorrectlyNumberedListItem",
          "displayName": "Incorrectly numbered list item",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.plugins.markdown",
          "pluginVersion": "231.9011.34",
          "language": "Markdown",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eOrdered list items are expected to have straight numeration starting from 1.\u003c/p\u003e\n\u003cp\u003eThe motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an \u003ccode\u003e\u0026lt;ol\u0026gt;\u003c/code\u003e element for such list, that will number items continuously from 1.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MarkdownLinkDestinationWithSpaces",
          "displayName": "Links should not contain spaces",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.plugins.markdown",
          "pluginVersion": "231.9011.34",
          "language": "Markdown",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nTo ensure consistency between different tools, file links should not contain spaces.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  [Some file link](some file.md)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix replaces spaces with their url-encoded equivalent:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  [Some file link](some%20file.md)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MarkdownUnresolvedLinkLabel",
          "displayName": "Unresolved link label",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.plugins.markdown",
          "pluginVersion": "231.9011.34",
          "language": "Markdown",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved link labels in Markdown files.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MarkdownIncorrectTableFormatting",
          "displayName": "Incorrect table formatting",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.plugins.markdown",
          "pluginVersion": "231.9011.34",
          "language": "Markdown",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks if table is correctly formatted.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MarkdownUnresolvedHeaderReference",
          "displayName": "Unresolved header reference",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.plugins.markdown",
          "pluginVersion": "231.9011.34",
          "language": "Markdown",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved header references in Markdown files.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Initialization",
      "inspections": [
        {
          "shortName": "InstanceVariableInitialization",
          "displayName": "Instance field may not be initialized",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instance variables that may be uninitialized upon object initialization.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    public int bar;\n\n    static { }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables\n  reported as initialized will always be initialized.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore primitive fields\u003c/b\u003e option to ignore uninitialized primitive fields.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AbstractMethodCallInConstructor",
          "displayName": "Abstract method called during object construction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eabstract\u003c/code\u003e methods of the current class during object construction.\n\u003cp\u003eA method is called during object construction if it is inside a:\n\u003cul\u003e\n  \u003cli\u003eConstructor\u003c/li\u003e\n  \u003cli\u003eNon-static instance initializer\u003c/li\u003e\n  \u003cli\u003eNon-static field initializer\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eclone()\u003c/code\u003e method\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ereadObject()\u003c/code\u003e method\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ereadObjectNoData()\u003c/code\u003e method\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSuch calls may result in subtle bugs, as object initialization may happen before the method call.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class Parent {\n    abstract void abstractMethod();\n  }\n\n  class Child extends Parent {\n    Child() {\n      abstractMethod();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection shares the functionality with the following inspections:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eOverridable method called during object construction\u003c/li\u003e\n  \u003cli\u003eOverridden method called during object construction\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnly one inspection should be enabled at once to prevent warning duplication.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DoubleBraceInitialization",
          "displayName": "Double brace initialization",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ca href\u003d\"https://www.c2.com/cgi/wiki?DoubleBraceInitialization\"\u003eDouble Brace Initialization\u003c/a\u003e.\n\u003cp\u003eDouble brace initialization may cause memory leaks when used in a non-static context because it creates an anonymous class\n  that will reference the surrounding object.\u003c/p\u003e\n\u003cp\u003eCompared to regular initialization, double brace initialization provides worse performance since it requires loading an\n  additional class.\u003c/p\u003e\n\u003cp\u003eIt may also cause failure of \u003ccode\u003eequals()\u003c/code\u003e comparisons if the \u003ccode\u003eequals()\u003c/code\u003e method doesn\u0027t accept subclasses as\n  parameters.\u003c/p\u003e\n\u003cp\u003eIn addition, before Java 9, double brace initialization couldn\u0027t be combined with the diamond operator since it was incompatible\n  with anonymous classes.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;Integer\u0026gt; list \u003d new ArrayList\u0026lt;\u0026gt;() {{\n    add(1);\n    add(2);\n  }};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;Integer\u0026gt; list \u003d new ArrayList\u0026lt;\u0026gt;();\n  list.add(1);\n  list.add(2);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThisEscapedInConstructor",
          "displayName": "\u0027this\u0027 reference escaped in object construction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports possible escapes of \u003ccode\u003ethis\u003c/code\u003e during the object initialization. The escapes occur when \u003ccode\u003ethis\u003c/code\u003e is used as a method argument\nor an object of assignment in a constructor or initializer. Such escapes may result in subtle bugs, as the object is now available in the\ncontext where it is not guaranteed to be initialized.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    {\n      System.out.println(this);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "OverridableMethodCallDuringObjectConstruction",
          "displayName": "Overridable method called during object construction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to overridable methods of the current class during object construction.\n\u003cp\u003eA method is called during object construction if it is inside a:\n\u003cul\u003e\n  \u003cli\u003eConstructor\u003c/li\u003e\n  \u003cli\u003eNon-static instance initializer\u003c/li\u003e\n  \u003cli\u003eNon-static field initializer\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eclone()\u003c/code\u003e method\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ereadObject()\u003c/code\u003e method\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ereadObjectNoData()\u003c/code\u003e method\u003c/li\u003e\n\u003cp\u003eMethods are overridable if they are not declared as \u003ccode\u003efinal\u003c/code\u003e, \u003ccode\u003estatic\u003c/code\u003e, or \u003ccode\u003eprivate\u003c/code\u003e.\n  Package-local methods are considered safe, even though they are overridable. Such calls may result in subtle bugs,\n  as object initialization may happen before the method call.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Parent {\n    void someMethod() { }\n  }\n\n  class Child extends Parent {\n    Child() {\n      someMethod();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n  \u003cp\u003eThis inspection shares the functionality with the following inspections:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eAbstract method called during object construction\u003c/li\u003e\n  \u003cli\u003eOverridden method called during object construction\u003c/li\u003e\n\u003c/ul\u003e\n  \u003cp\u003eOnly one inspection should be enabled at once to prevent warning duplication.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StaticVariableUninitializedUse",
          "displayName": "Static field used before initialization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003estatic\u003c/code\u003e variables that are read before initialization.\n\u003cp\u003eThe inspection ignores equality checks with \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    public static int bar;\n\n    public static void main(String[] args) {\n      System.out.println(bar);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that this inspection uses a very conservative dataflow algorithm and may incorrectly report \u003ccode\u003estatic\u003c/code\u003e variables as uninitialized. Variables\n  reported as initialized will always be initialized.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore primitive fields\u003c/b\u003e option to ignore uninitialized primitive fields.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "OverriddenMethodCallDuringObjectConstruction",
          "displayName": "Overridden method called during object construction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any calls to overridden methods of the current class during object construction.\nThis happens if an object construction is inside:\n\u003cul\u003e\n  \u003cli\u003eA constructor\u003c/li\u003e\n  \u003cli\u003eA non-static instance initializer\u003c/li\u003e\n  \u003cli\u003eA non-static field initializer\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eclone()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ereadObject()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ereadObjectNoData()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSuch calls may result in subtle bugs, as the object is not guaranteed to be initialized before the method call occurs.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class Parent {\n    void someMethod() { }\n  }\n\n  class Child extends Parent {\n    Child() {\n      someMethod();\n    }\n\n    @Override\n    void someMethod() { }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection shares its functionality with:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eThe \u003cb\u003eAbstract method called during object construction\u003c/b\u003e inspection\u003c/li\u003e\n  \u003cli\u003eThe \u003cb\u003eOverridable method called during object construction\u003c/b\u003e inspection\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnly one inspection should be enabled at the same time to prevent duplicate warnings.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonFinalStaticVariableUsedInClassInitialization",
          "displayName": "Non-final static field is used during class initialization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the use of non-\u003ccode\u003efinal\u003c/code\u003e \u003ccode\u003estatic\u003c/code\u003e variables during class initialization.\n\u003cp\u003eIn such cases, the code semantics may become dependent on the class creation order. Additionally, such cases may lead to the use of\n  variables before their initialization, and generally cause difficult and confusing bugs.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    public static int bar \u003d 0;\n\n    static {\n      System.out.println(bar);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StaticVariableInitialization",
          "displayName": "Static field may not be initialized",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003estatic\u003c/code\u003e variables that may be uninitialized upon class initialization.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    public static int bar;\n\n    static { }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that this inspection uses a very conservative dataflow algorithm and may incorrectly report \u003ccode\u003estatic\u003c/code\u003e variables as uninitialized. Variables\n  reported as initialized will always be initialized.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore primitive fields\u003c/b\u003e option to ignore uninitialized primitive fields.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonThreadSafeLazyInitialization",
          "displayName": "Unsafe lazy initialization of \u0027static\u0027 field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003estatic\u003c/code\u003e variables that are lazily initialized in a non-thread-safe manner.\n\u003cp\u003eLazy initialization of \u003ccode\u003estatic\u003c/code\u003e variables should be done with an appropriate synchronization construct\n  to prevent different threads from performing conflicting initialization.\u003c/p\u003e\n\u003cp\u003eWhen applicable, a quick-fix, which introduces the\n\u003ca href\u003d\"https://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom\"\u003elazy initialization holder class idiom\u003c/a\u003e, is suggested.\n  This idiom makes use of the fact that the JVM guarantees that a class will not be initialized until it is used.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X {\n    private static List\u0026lt;String\u0026gt; list;\n\n    public List\u0026lt;String\u0026gt; getList() {\n      if (list \u003d\u003d null) {\n        list \u003d List.of(\"one\", \"two\", \"tree\");\n      }\n      return list;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X {\n    private static final class ListHolder {\n      static final List\u0026lt;String\u0026gt; list \u003d List.of(\"one\", \"two\", \"tree\");\n    }\n\n    public List\u0026lt;String\u0026gt; getList() {\n      return ListHolder.list;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InstanceVariableUninitializedUse",
          "displayName": "Instance field used before initialization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instance variables that are read before initialization.\n\u003cp\u003eThe inspection ignores equality checks with \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    int bar;\n\n    Foo() {\n      System.out.println(bar);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables\n  reported as initialized will always be initialized.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore if annotated by\u003c/b\u003e option to specify special annotations. The inspection will ignore fields\n  annotated with one of these annotations.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore primitive fields\u003c/b\u003e option to ignore uninitialized primitive fields.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Gradle",
      "inspections": [
        {
          "shortName": "GradleKotlinxCoroutinesDeprecation",
          "displayName": "Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Gradle",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ekotlinx.coroutines\u003c/code\u003e library dependencies in Gradle that should be updated to be compatible with Kotlin 1.3+.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  dependencies {\n      implementation \u0027org.jetbrains.kotlinx:kotlinx-coroutines-core:0.0.1\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix changes the \u003ccode\u003ekotlinx.coroutines\u003c/code\u003e library version to a compatible with Kotlin 1.3:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  dependencies {\n      implementation \u0027org.jetbrains.kotlinx:kotlinx-coroutines-core:0.27.0-eap13\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java language level issues",
      "inspections": [
        {
          "shortName": "ForwardCompatibility",
          "displayName": "Forward compatibility",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Java code constructs that may fail to compile in future Java versions.\n\u003cp\u003eThe following problems are reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse of \u003ccode\u003eassert\u003c/code\u003e, \u003ccode\u003eenum\u003c/code\u003e or \u003ccode\u003e_\u003c/code\u003e as an identifier\u003c/li\u003e\n  \u003cli\u003eUse of the \u003ccode\u003evar\u003c/code\u003e, \u003ccode\u003eyield\u003c/code\u003e, or \u003ccode\u003erecord\u003c/code\u003e restricted identifier as a type name\u003c/li\u003e\n  \u003cli\u003eUnqualified calls to the \u003ccode\u003eyield()\u003c/code\u003e method\u003c/li\u003e\n  \u003cli\u003eModifiers on the \u003ccode\u003erequires java.base\u003c/code\u003e statement inside of \u003ccode\u003emodule-info.java\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // This previously legal class does not compile with Java 14,\n  // as \u0027yield\u0027 became a restricted identifier.\n  public class yield {} \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFixing these issues timely may simplify migration to future Java versions.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EnumClass",
          "displayName": "Enumerated class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003cb\u003eenum\u003c/b\u003e classes.\nSuch statements are not supported in Java 1.4 and earlier JVM.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AnnotationClass",
          "displayName": "Annotation interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports annotation interfaces.\nSuch interfaces are not supported under Java 1.4 and earlier.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ForeachStatement",
          "displayName": "Enhanced \u0027for\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports enhanced \u003ccode\u003efor\u003c/code\u003e statements.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (int x: Arrays.asList(1, 2, 3)) {\n    System.out.println(x);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (Iterator\u0026lt;Integer\u0026gt; iterator \u003d Arrays.asList(1, 2, 3).iterator(); iterator.hasNext(); ) {\n    final int x \u003d iterator.next();\n    System.out.println(x);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ci\u003eEnhanced\u003c/i\u003e \u003ccode\u003efor\u003c/code\u003e \u003ci\u003estatement\u003c/i\u003e appeared in Java 5.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VarargParameter",
          "displayName": "Varargs method",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that accept an arbitrary number of parameters (also known as varargs methods).\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum EnumConstants {\n  A(null), B, C;\n\n  EnumConstants(String... ss) {}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix is available to replace a variable argument\n  parameter with an equivalent array parameter. Relevant arguments in method calls are wrapped in an array initializer expression.\n  After the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum EnumConstants {\n  A(null), B(new String[]{}), C(new String[]{});\n\n  EnumConstants(String[] ss) {}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ci\u003eVarargs method\u003c/i\u003e appeared in Java 5.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssertStatement",
          "displayName": "\u0027assert\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eassert\u003c/code\u003e statements. By default, \u003ccode\u003eassert\u003c/code\u003e statements are disabled during execution in the production\nenvironment. Consider using logger or exceptions instead.\n\u003cp\u003eThe \u003ccode\u003eassert\u003c/code\u003e statements are not supported in Java 1.3 and earlier JVM.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Annotation",
          "displayName": "Annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports annotations.\nAnnotations are not supported in Java 1.4 and earlier JVM.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Spring MVC",
      "inspections": [
        {
          "shortName": "MVCPathVariableInspection",
          "displayName": "Mismatch in @PathVariable declarations and usages",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.mvc",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003e@PathVariable\u003c/code\u003e parameters that are declared in the method signature but are absent in the URL path or vice versa.\n  The quick-fix adds the missing parameter.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @RequestMapping(\"/path/{myVariable}/\")\n  public String handler(@PathVariable String name_is_not_equal_to_myVariable) {\n    return \"...\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied the result looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @RequestMapping(\"/path/{myVariable}/\")\n  public String handler(@PathVariable String myVariable) {\n    return \"...\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringMVCViewInspection",
          "displayName": "Unresolved view reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.mvc",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved Spring MVC View references.\u003c/p\u003e\n\u003cp\u003eExample\u003c/p\u003e\n\u003cpre\u003e\n  @RequestMapping\n  public String viewHandler() {\n    return \"viewName\"; // will be highlighted if no view with \"viewName\" can be found\n  }\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringMVCInitBinder",
          "displayName": "Non-void @InitBinder method",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring.mvc",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports Spring MVC Controller methods annotated with \u003ccode\u003e@InitBinder\u003c/code\u003e that are not declared as \u003ccode\u003evoid\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAccording to the \u003ca href\u003dhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html\u003especification\u003c/a\u003e,\n  init-binder methods should be declared as \u003ccode\u003evoid\u003c/code\u003e.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java 7",
      "inspections": [
        {
          "shortName": "Convert2Diamond",
          "displayName": "Explicit type can be replaced with \u0027\u003c\u003e\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003enew\u003c/code\u003e expressions with type arguments that can be replaced a with diamond type \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; list \u003d new ArrayList\u0026lt;String\u0026gt;(); // reports array list type argument\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; list \u003d new ArrayList\u0026lt;\u0026gt;();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 7 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SafeVarargsDetector",
          "displayName": "Possible heap pollution from parameterized vararg type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods with variable arity, which can be annotated as \u003ccode\u003e@SafeVarargs\u003c/code\u003e.\nThe \u003ccode\u003e@SafeVarargs\u003c/code\u003e annotation suppresses unchecked warnings about parameterized array creation at call sites.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Foo\u0026lt;T\u0026gt; {\n    private List\u0026lt;T\u0026gt; list \u003d new ArrayList\u0026lt;\u0026gt;();\n\n    public final void safeVarargs(T... elements) {\n      Collections.addAll(list, elements);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Foo\u0026lt;T\u0026gt; {\n    private List\u0026lt;T\u0026gt; list \u003d new ArrayList\u0026lt;\u0026gt;();\n\n    @SafeVarargs\n    public final void safeVarargs(T... elements) {\n      Collections.addAll(list, elements);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  This annotation is not supported under Java 1.6 or earlier JVMs.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TryFinallyCanBeTryWithResources",
          "displayName": "\u0027try finally\u0027 can be replaced with \u0027try\u0027 with resources",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003etry\u003c/code\u003e-\u003ccode\u003efinally\u003c/code\u003e statements that can use Java 7 Automatic Resource Management,\nwhich is less error-prone.\n\u003cp\u003eA quick-fix is available to convert a \u003ccode\u003etry\u003c/code\u003e-\u003ccode\u003efinally\u003c/code\u003e\n  statement into a \u003ccode\u003etry\u003c/code\u003e-with-resources statement.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  PrintStream printStream \u003d new PrintStream(fileName);\n  try {\n    printStream.print(true);\n  } finally {\n    printStream.close();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix is provided to pass the cause to a constructor:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try (PrintStream printStream \u003d new PrintStream(fileName)) {\n    printStream.print(true);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 7 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EqualsReplaceableByObjectsCall",
          "displayName": "\u0027equals()\u0027 expression replaceable by \u0027Objects.equals()\u0027 expression",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions that can be replaced with a call to \u003ccode\u003ejava.util.Objects#equals\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(Object a, Object b) {\n    boolean result \u003d a !\u003d null \u0026\u0026 a.equals(b);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void f(Object a, Object b) {\n    boolean result \u003d Objects.equals(a, b);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Replacing expressions like \u003ccode\u003ea !\u003d null \u0026\u0026 a.equals(b)\u003c/code\u003e with \u003ccode\u003eObjects.equals(a, b)\u003c/code\u003e\n  slightly changes the semantics. Use the \u003cb\u003eHighlight expressions like \u0027a !\u003d null \u0026\u0026 a.equals(b)\u0027\u003c/b\u003e option to enable or disable this behavior.\n\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 7 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TryWithIdenticalCatches",
          "displayName": "Identical \u0027catch\u0027 branches in \u0027try\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports identical \u003ccode\u003ecatch\u003c/code\u003e sections in a single \u003ccode\u003etry\u003c/code\u003e statement.\n\u003cp\u003eCollapsing such sections into one \u003ci\u003emulti-catch\u003c/i\u003e block reduces code duplication and prevents\n  the situations when one \u003ccode\u003ecatch\u003c/code\u003e section is updated, and another one is not.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    try {\n        doSmth();\n    }\n    catch (IOException e) {\n        LOG.error(e);\n    }\n    catch (URISyntaxException e) {\n        LOG.error(e);\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix is available to make the code more compact:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    try {\n        doSmth();\n    }\n    catch (IOException | URISyntaxException e) {\n        LOG.error(e);\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 7 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Vue",
      "inspections": [
        {
          "shortName": "VueDeprecatedSymbol",
          "displayName": "Deprecated symbol",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.vue",
          "pluginVersion": "231.9011.34",
          "language": "Vue",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a deprecated Vue symbol.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VueDuplicateTag",
          "displayName": "Duplicate template/script tag",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.vue",
          "pluginVersion": "231.9011.34",
          "language": "Vue",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports multiple usages of the \u003ccode\u003etemplate\u003c/code\u003e or \u003ccode\u003escript\u003c/code\u003e tag in a Vue file.\n  \u003cp\u003e\u003ca href\u003d\"https://vue-loader.vuejs.org/spec.html\"\u003eVue Component specification\u003c/a\u003e indicates that each \u003ccode\u003e*.vue\u003c/code\u003e file can contain at most one \u003ccode\u003etemplate\u003c/code\u003e or \u003ccode\u003escript\u003c/code\u003e block at a time.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VueDataFunction",
          "displayName": "Data function",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.vue",
          "pluginVersion": "231.9011.34",
          "language": "Vue",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a Vue component \u003ca href\u003d\"https://vuejs.org/v2/api/#data\"\u003edata\u003c/a\u003e property that is not a function. Suggests wrapping an object literal with a function.\n\u003cp\u003eWhen defining a component, \u003ccode\u003edata\u003c/code\u003e must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for \u003ccode\u003edata\u003c/code\u003e, that very object will be shared by reference across all instances created! With a \u003ccode\u003edata\u003c/code\u003e function,  every time a new instance is created we can simply call it to return a fresh copy of the initial data.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VueUnrecognizedDirective",
          "displayName": "Unrecognized directive",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.vue",
          "pluginVersion": "231.9011.34",
          "language": "Vue",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unrecognized Vue directive.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VueMissingComponentImportInspection",
          "displayName": "Missing component import",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.vue",
          "pluginVersion": "231.9011.34",
          "language": "Vue",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VueUnrecognizedSlot",
          "displayName": "Unrecognized slot",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.plugins.vue",
          "pluginVersion": "231.9011.34",
          "language": "Vue",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unrecognized Vue slot.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "UnnecessaryReturnJS",
          "displayName": "Unnecessary \u0027return\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unnecessary \u003ccode\u003ereturn\u003c/code\u003e statement, that is, a \u003ccode\u003ereturn\u003c/code\u003e statement that \nreturns no value and occurs just before the function would have \"fallen through\" the bottom.\nThese statements may be safely removed.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TrivialConditionalJS",
          "displayName": "Redundant conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a conditional expression of the form\n\u003cpre\u003e\u003ccode\u003e\ncondition ? true : false\ncondition ? false : true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  These expressions may be safely converted to\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\ncondition\n!condition\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnreachableCodeJS",
          "displayName": "Unreachable code",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code that can never be executed, which almost certainly indicates an error\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LoopStatementThatDoesntLoopJS",
          "displayName": "Loop statement that doesn\u0027t loop",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, or \u003ccode\u003edo\u003c/code\u003e statement\nwhose bodies are guaranteed to execute at most once. Normally, this indicates an error.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PointlessBooleanExpressionJS",
          "displayName": "Pointless statement or boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a pointless or pointlessly complicated boolean expression or statement.\n\u003cp\u003eExample:\n\u003cpre\u003e\u003ccode\u003e\n  let a \u003d !(false \u0026\u0026 x);\n  let b \u003d false || x;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied the result looks like:\n\u003cpre\u003e\u003ccode\u003e\n  let a \u003d true;\n  let b \u003d x;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TailRecursionJS",
          "displayName": "Tail recursion",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a tail recursion, that is, when a function calls itself\nas its last action before returning.  A tail recursion can always be replaced by looping, which will be considerably faster.\nSome JavaScript engines perform this optimization, while others do not.  Thus, tail recursive solutions may have considerably different\nperformance characteristics in different environments.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConditionalExpressionWithIdenticalBranchesJS",
          "displayName": "Conditional expression with identical branches",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a ternary conditional expression with identical \u003ccode\u003ethen\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e branches.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousTypeOfGuard",
          "displayName": "Unsound type guard check",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003etypeof\u003c/code\u003e or \u003ccode\u003einstanceof\u003c/code\u003e unsound type guard check.\nThe \u003ccode\u003etypeof x\u003c/code\u003e type guard can be unsound in one of the following two cases:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003etypeof x\u003c/code\u003e never corresponds to the specified value (for example, \u003ccode\u003etypeof x \u003d\u003d\u003d \u0027number\u0027\u003c/code\u003e when \u003ccode\u003ex\u003c/code\u003e is of the type \u0027string | boolean\u0027)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etypeof x\u003c/code\u003e always corresponds to the specified value (for example,  \u003ccode\u003etypeof x \u003d\u003d\u003d \u0027string\u0027\u003c/code\u003e when \u003ccode\u003ex\u003c/code\u003e is of the type \u0027string\u0027)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\nThe \u003ccode\u003ex instanceof A\u003c/code\u003e type guard can be unsound in one of the following two cases:\n\u003cul\u003e\n  \u003cli\u003eThe type of \u003ccode\u003ex\u003c/code\u003e is not related to \u003ccode\u003eA\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eThe type of \u003ccode\u003ex\u003c/code\u003e is \u003ccode\u003eA\u003c/code\u003e or a subtype of \u003ccode\u003eA\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryLabelOnContinueStatementJS",
          "displayName": "Unnecessary label on \u0027continue\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a labeled \u003ccode\u003econtinue\u003c/code\u003e statement\nwhose labels may be removed without changing the flow of control.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IfStatementWithTooManyBranchesJS",
          "displayName": "\u0027if\u0027 statement with too many branches",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an \u003ccode\u003eif\u003c/code\u003e statement with too many\nbranches. Such statements may be confusing, and \noften indicate inadequate levels of design abstraction.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the field below to specify the maximum number of branches expected.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DuplicateConditionJS",
          "displayName": "Duplicate condition in \u0027if\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicate conditions in different branches of an\n\u003ccode\u003eif\u003c/code\u003e statement. Duplicate conditions usually represent programmer oversight.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (a) {\n    ...\n  } else if (a) {\n    ...\n  }\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantConditionalExpressionJS",
          "displayName": "Constant conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a conditional expression in the format \u003ccode\u003etrue? result1: result2\u003c/code\u003e or \u003ccode\u003efalse? result1: result2\u003c/b\u003e.\nSuggests simplifying the expression.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryContinueJS",
          "displayName": "Unnecessary \u0027continue\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unnecessary \u003ccode\u003econtinue\u003c/code\u003e statement at the end of a loop. Suggests removing such statements.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ForLoopReplaceableByWhileJS",
          "displayName": "\u0027for\u0027 loop may be replaced by \u0027while\u0027 loop",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003efor\u003c/code\u003e loop\nthat contains neither initialization nor an update component. Suggests replacing the loop with a simpler \u003ccode\u003ewhile\u003c/code\u003e statement.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for(; exitCondition(); ) {\n    process();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied the result looks like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  while(exitCondition()) {\n    process();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the checkbox below if you wish this inspection to ignore \u003cb\u003efor\u003c/b\u003e loops with trivial or non-existent conditions.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSObjectNullOrUndefined",
          "displayName": "Object is \u0027null\u0027 or \u0027undefined\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an error caused by invoking a method,\naccessing a property, or calling a function on an object that is \u003ccode\u003eundefined\u003c/code\u003e or \u003ccode\u003enull\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryLabelOnBreakStatementJS",
          "displayName": "Unnecessary label on \u0027break\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a labeled \u003ccode\u003ebreak\u003c/code\u003e statement\nwhose labels may be removed without changing the flow of control.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IfStatementWithIdenticalBranchesJS",
          "displayName": "\u0027if\u0027 statement with identical branches",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an \u003ccode\u003eif\u003c/code\u003e statement with identical \u003ccode\u003ethen\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e branches. Such statements are almost\ncertainly an error.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TrivialIfJS",
          "displayName": "Redundant \u0027if\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an \u003ccode\u003eif\u003c/code\u003e statement that\ncan be simplified to a single assignment or\na \u003ccode\u003ereturn\u003c/code\u003e statement.  \u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nif(foo())\n {\n  return true;\n }\n else\n {\n   return false;\n }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter applying the quick-fix the code looks as follows:\u003c/p\u003e\n\u003cpre\u003e\n \u003ccode\u003ereturn foo();\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryLabelJS",
          "displayName": "Unnecessary label",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unused label.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Setup",
      "inspections": [
        {
          "shortName": "SpringFacetInspection",
          "displayName": "Incorrect XML application context setup in Spring facet",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports XML application contexts that are not configured in the Spring facet\nand not imported with \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ImportResource.html\"\u003e@ImportResource\u003c/a\u003e(locations\u003d\"...\")\nor \u003ccode\u003e\u0026lt;import .../\u0026gt;\u003c/code\u003e from other application contexts defined in the Spring facet.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringFacetProgrammaticInspection",
          "displayName": "Spring facet programmatic configuration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "Checks programmatic Spring context code setup in Spring facet."
        },
        {
          "shortName": "SpringFacetCodeInspection",
          "displayName": "Incorrect @Configuration class setup in Spring facet",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html\"\u003e@Configuration\u003c/a\u003e\n  classes that are not configured in the Spring facet.\u003c/p\u003e\n\n\u003cp\u003eThe inspection does not trigger when \u003ccode\u003e@Configuration\u003c/code\u003e classes are scanned\n(with \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html\"\u003e@ComponentScan\u003c/a\u003e or\n\u0026lt;component-scan .../\u0026gt;),\nimported(\u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Import.html\"\u003e@Import\u003c/a\u003e)\nor used in any other way (for example, configured in \u003ccode\u003espring.factories\u003c/code\u003e files) from application contexts already defined in the Spring facet.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Sass/SCSS",
      "inspections": [
        {
          "shortName": "SassScssUnresolvedPlaceholderSelector",
          "displayName": "Unresolved placeholder selector",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.sass",
          "pluginVersion": "231.9011.34",
          "language": "SCSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved \u003ca href\u003d\"https://sass-lang.com/documentation/variables\"\u003eSass/SCSS placeholder selector\u003c/a\u003e reference.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n* {\n  @extend %unknown-placeholder-selector;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SassScssResolvedByNameOnly",
          "displayName": "Missing import",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.plugins.sass",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a reference to a variable, mixin, or function that is declared in another file but this file isn\u0027t \nexplicitly \u003ca href\u003d\"https://sass-lang.com/documentation/at-rules/import\"\u003eimported\u003c/a\u003e in the current file.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n* {\n  margin: $var-in-other-file;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SassScssUnresolvedVariable",
          "displayName": "Unresolved variable",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.sass",
          "pluginVersion": "231.9011.34",
          "language": "SCSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved \u003ca href\u003d\"https://sass-lang.com/documentation/variables\"\u003eSass/SCSS variable\u003c/a\u003e reference.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n* {\n  margin: $unknown-var;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SassScssUnresolvedMixin",
          "displayName": "Unresolved mixin",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.sass",
          "pluginVersion": "231.9011.34",
          "language": "SCSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved \u003ca href\u003d\"https://sass-lang.com/documentation/at-rules/mixin\"\u003eSass/SCSS mixin\u003c/a\u003e reference.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n* {\n  @include unknown-mixin;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "CssNoGenericFontName",
          "displayName": "Missing generic font family name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nVerifies that the \u003ccode\u003e\u003ca href\u003d\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\"\u003efont-family\u003c/a\u003e\u003c/code\u003e property\ncontains a generic font family name as a fallback alternative.\n\u003cp\u003e\n  Generic font family names are: \u003ccode\u003eserif\u003c/code\u003e, \u003ccode\u003esans-serif\u003c/code\u003e, \u003ccode\u003ecursive\u003c/code\u003e, \u003ccode\u003efantasy\u003c/code\u003e,\n  and \u003ccode\u003emonospace\u003c/code\u003e.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssMissingComma",
          "displayName": "Missing comma in selector list",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a multi-line selector. Most likely this means that several single-line selectors are actually intended\nbut a comma is missing at the end of one or several lines.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\ninput /* comma has probably been forgotten */\n.button {\n  margin: 1px;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CssNonIntegerLengthInPixels",
          "displayName": "Non-integer length in pixels",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "231.9011.34",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a non-integer length in pixels.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e width: 3.14px\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "OpenAPI",
      "inspections": [
        {
          "shortName": "KtorOpenApi",
          "displayName": "Generate OpenAPI documentation for current module",
          "defaultSeverity": "INFORMATION",
          "pluginId": "intellij.ktor",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports that there is no OpenAPI documentation for the current Ktor module.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Reflective access",
      "inspections": [
        {
          "shortName": "JavaLangInvokeHandleSignature",
          "displayName": "MethodHandle/VarHandle type mismatch",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eMethodHandle\u003c/code\u003e and \u003ccode\u003eVarHandle\u003c/code\u003e factory method calls that don\u0027t match any method or field.\n\u003cp\u003eAlso reports arguments to \u003ccode\u003eMethodHandle.invoke()\u003c/code\u003e and similar methods, that don\u0027t match the \u003ccode\u003eMethodHandle\u003c/code\u003e signature\n  and arguments to \u003ccode\u003eVarHandle.set()\u003c/code\u003e that don\u0027t match the \u003ccode\u003eVarHandle\u003c/code\u003e type.\n  \u003c!-- tooltip end --\u003e\n\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\n  MethodHandle mh \u003d MethodHandles.lookup().findVirtual(\n      MyClass.class, \"foo\", MethodType.methodType(void.class, int.class));\n  \u003ci\u003e// the argument should be an \u003cb\u003eint\u003c/b\u003e value\u003c/i\u003e\n  mh.invoke(myObj, \"\u003cb\u003eabc\u003c/b\u003e\");\n\u003c/pre\u003e\n\u003cbr\u003e\n\u003cpre\u003e\n  \u003ci\u003e// the argument should be \u003cb\u003eString\u003c/b\u003e.class\u003c/i\u003e\n  VarHandle vh \u003d MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", \u003cb\u003eint\u003c/b\u003e.class);\n\u003c/pre\u003e\n\u003cbr\u003e\n\u003cpre\u003e\n  VarHandle vh \u003d MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", String.class);\n  \u003ci\u003e// the argument should be a \u003cb\u003eString\u003c/b\u003e value\u003c/i\u003e\n  vh.set(myObj, \u003cb\u003e42\u003c/b\u003e);\n\u003c/pre\u003e\n\u003cp\u003e\n  \u003csmall\u003eNew in 2017.2\u003c/small\u003e\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Java9ReflectionClassVisibility",
          "displayName": "Reflective access across modules issues",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eClass.forName()\u003c/code\u003e and \u003ccode\u003eClassLoader.loadClass()\u003c/code\u003e calls\nwhich try to access classes that aren\u0027t visible in the current scope due to Java 9 module accessibility rules.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 9 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaReflectionMemberAccess",
          "displayName": "Reflective access to non-existent or not visible class member",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports reflective access to fields and methods that don\u0027t exist or aren\u0027t visible.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Field stringHashField() throws NoSuchFieldException {\n    return String.class.getField(\"hash\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Field stringHashField() throws NoSuchFieldException {\n    return String.class.getDeclaredField(\"hash\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  With a \u003ccode\u003efinal\u003c/code\u003e class, it\u0027s clear if there is a field or method with the specified name in the class.\n\u003c/p\u003e\n\u003cp\u003e\n  With non-\u003ccode\u003efinal\u003c/code\u003e classes, it\u0027s possible that a subclass has a field or method with that name, so there could be false positives.\n  Use the inspection\u0027s settings to get rid of such false positives everywhere or with specific classes.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaReflectionInvocation",
          "displayName": "Reflective invocation arguments mismatch",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports cases in which the arguments provided to \u003ccode\u003eMethod.invoke()\u003c/code\u003e and \u003ccode\u003eConstructor.newInstance()\u003c/code\u003e\ndo not match the signature specified in \u003ccode\u003eClass.getMethod()\u003c/code\u003e and \u003ccode\u003eClass.getConstructor()\u003c/code\u003e.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Method m \u003d myObj.getClass().getMethod(\"myMethod\", \u003cb\u003eint\u003c/b\u003e.class);\n  \u003ci\u003e// the argument should be an \u003cb\u003eint\u003c/b\u003e value\u003c/i\u003e\n  m.invoke(myObj, \"\u003cb\u003eabc\u003c/b\u003e\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Error handling",
      "inspections": [
        {
          "shortName": "ThrowsRuntimeException",
          "displayName": "Unchecked exception declared in \u0027throws\u0027 clause",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declaration of an unchecked exception (\u003ccode\u003ejava.lang.RuntimeException\u003c/code\u003e or one of its subclasses) in the \u003ccode\u003ethrows\u003c/code\u003e\nclause of a method.\n\u003cp\u003eDeclarations of unchecked exceptions are not required and may be deleted or moved to a Javadoc \u003ccode\u003e@throws\u003c/code\u003e tag.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class InvalidDataException extends RuntimeException {}\n\n  class TextEditor {\n    void readSettings() throws InvalidDataException {} // warning: Unchecked exception \u0027InvalidDataException\u0027 declared in \u0027throws\u0027 clause\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryInitCause",
          "displayName": "Unnecessary call to \u0027Throwable.initCause()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eThrowable.initCause()\u003c/code\u003e where an exception constructor also takes a \u003ccode\u003eThrowable cause\u003c/code\u003e argument.\n\u003cp\u003eIn this case, the \u003ccode\u003einitCause()\u003c/code\u003e call can be removed and its argument can be added to the call to the exception\u0027s constructor.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n      process();\n  }\n  catch (RuntimeException ex) {\n    RuntimeException wrapper \u003d new RuntimeException(\"Error while processing\");\n    wrapper.initCause(ex); // Unnecessary call to \u0027Throwable.initCause()\u0027\n    throw wrapper;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix is available to pass the cause argument to the constructor. After the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n      process();\n  }\n  catch (RuntimeException ex) {\n    RuntimeException wrapper \u003d new RuntimeException(\"Error while processing\", ex);\n    throw wrapper;\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BadExceptionCaught",
          "displayName": "Prohibited \u0027Exception\u0027 caught",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ecatch\u003c/code\u003e clauses that catch an inappropriate exception.\n\u003cp\u003eSome exceptions, for example\n  \u003ccode\u003ejava.lang.NullPointerException\u003c/code\u003e or\n  \u003ccode\u003ejava.lang.IllegalMonitorStateException\u003c/code\u003e, represent programming errors\n  and therefore almost certainly should not be caught in production code.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    return component.getMousePosition(true) !\u003d null;\n  } catch (NullPointerException e) { // warning: Prohibited exception \u0027NullPointerException\u0027 caught\n    return false;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eProhibited exceptions\u003c/b\u003e list to specify which exceptions should be reported.\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThreadDeathRethrown",
          "displayName": "\u0027ThreadDeath\u0027 not rethrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003etry\u003c/code\u003e statements that catch\n\u003ccode\u003ejava.lang.ThreadDeath\u003c/code\u003e and do not rethrow the exception.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    executeInParallel(request);\n  } catch (ThreadDeath ex) { // warning: ThreadDeath \u0027ex\u0027 not rethrown\n    return false;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UncheckedExceptionClass",
          "displayName": "Unchecked \u0027Exception\u0027 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports subclasses of \u003ccode\u003ejava.lang.RuntimeException\u003c/code\u003e.\n\u003cp\u003eSome coding standards require that all user-defined exception classes are checked.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class EnigmaException extends RuntimeException {} // warning: Unchecked exception class \u0027EnigmaException\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BadExceptionDeclared",
          "displayName": "Prohibited exception declared",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that declare an inappropriate exception in their \u003ccode\u003ethrows\u003c/code\u003e clause.\nFor example an exception can be inappropriate because it is overly generic,\nsuch as \u003ccode\u003ejava.lang.Exception\u003c/code\u003e or \u003ccode\u003ejava.lang.Throwable\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void describeModule(String module) throws Exception {} // warning: Prohibited exception \u0027Exception\u0027 declared\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eProhibited exceptions\u003c/b\u003e list to specify which exceptions should be reported.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore exceptions declared on methods overriding a library method\u003c/b\u003e option to ignore exceptions declared by methods\n    that override a library method.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NullThrown",
          "displayName": "\u0027null\u0027 thrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003enull\u003c/code\u003e literals that are used as the argument of a \u003ccode\u003ethrow\u003c/code\u003e statement.\n\u003cp\u003eSuch constructs produce a \u003ccode\u003ejava.lang.NullPointerException\u003c/code\u003e that usually should not be thrown programmatically.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThrowCaughtLocally",
          "displayName": "\u0027throw\u0027 caught by containing \u0027try\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ethrow\u003c/code\u003e statements whose exceptions are always\ncaught by containing \u003ccode\u003etry\u003c/code\u003e statements.\n\u003cp\u003eUsing \u003ccode\u003ethrow\u003c/code\u003e\n  statements as a \"goto\" to change the local flow of control is confusing and results in poor performance.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    if (!Files.isDirectory(PROJECTS)) {\n        throw new IllegalStateException(\"Directory not found.\"); // warning: \u0027throw\u0027 caught by containing \u0027try\u0027 statement\n    }\n    ...\n  } catch (Exception e) {\n      LOG.error(\"run failed\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore rethrown exceptions\u003c/b\u003e option to ignore exceptions that are rethrown.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EmptyFinallyBlock",
          "displayName": "Empty \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty \u003ccode\u003efinally\u003c/code\u003e blocks.\n\u003cp\u003eEmpty \u003ccode\u003efinally\u003c/code\u003e blocks usually indicate coding errors. They may also remain after code refactoring and can safely be removed.\u003c/p\u003e\n\u003cp\u003eThis inspection doesn\u0027t report empty \u003ccode\u003efinally\u003c/code\u003e blocks found in JSP files.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    Files.readString(Paths.get(\"in.txt\"));\n  } catch (IOException e) {\n    throw new RuntimeException(e);\n  } finally {\n\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    Files.readString(Paths.get(\"in.txt\"));\n  } catch (IOException e) {\n    throw new RuntimeException(e);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TooBroadThrows",
          "displayName": "Overly broad \u0027throws\u0027 clause",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ethrows\u003c/code\u003e clauses with exceptions that are more generic than the\nexceptions that the method actually throws.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public void createFile() throws Exception { // warning: \u0027throws Exception\u0027 is too broad, masking exception \u0027IOException\u0027\n    File file \u003d new File(\"pathToFile\");\n    file.createNewFile();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public void createFile() throws IOException {\n    File file \u003d new File(\"pathToFile\");\n    file.createNewFile();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eMaximum number of hidden exceptions to warn\u003c/b\u003e field to ignore exceptions, that hide a larger number of other exceptions than specified.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eOnly warn on RuntimeException, Exception, Error or Throwable\u003c/b\u003e option to have this inspection warn only on the most generic\n    exceptions.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore exceptions declared on methods overriding a library method\u003c/b\u003e option to ignore overly broad \u003ccode\u003ethrows\u003c/code\u003e clauses\n    in methods that override a library method.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore exceptions which hide others but are themselves thrown\u003c/b\u003e option to ignore any exceptions that hide other exceptions\n    but still may be thrown from the method body and thus\n    are technically not overly broad.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CatchMayIgnoreException",
          "displayName": "Catch block may ignore exception",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ecatch\u003c/code\u003e blocks that are empty or may ignore an exception.\n\u003cp\u003eWhile occasionally intended, empty \u003ccode\u003ecatch\u003c/code\u003e blocks may complicate debugging.\nAlso, ignoring a \u003ccode\u003ecatch\u003c/code\u003e parameter might be wrong.\n  Finally, the static code analyzer reports if it detects that a \u003ccode\u003ecatch\u003c/code\u003e block may silently ignore important VM\n  exceptions like \u003ccode\u003eNullPointerException\u003c/code\u003e. Ignoring such an exception\n(without logging or rethrowing it) may hide a bug.\u003c/p\u003e\n\n\u003cp\u003e\n  The inspection won\u0027t report any \u003ccode\u003ecatch\u003c/code\u003e parameters named \u003ccode\u003eignore\u003c/code\u003e or \u003ccode\u003eignored\u003c/code\u003e.\n  Conversely, the inspection will warn you about any \u003ccode\u003ecatch\u003c/code\u003e parameters named \u003ccode\u003eignore\u003c/code\u003e or \u003ccode\u003eignored\u003c/code\u003e that are actually in use.\n  Additionally, the inspection won\u0027t report \u003ccode\u003ecatch\u003c/code\u003e parameters inside test sources named \u003ccode\u003eexpected\u003c/code\u003e or \u003ccode\u003eok\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  You can use a quick-fix to change the exception name to \u003ccode\u003eignored\u003c/code\u003e.\n  For empty \u003cb\u003ecatch\u003c/b\u003e blocks, an additional quick-fix to generate the \u003cb\u003ecatch\u003c/b\u003e body is suggested.\n  You can modify the \"Catch Statement Body\" template on the Code tab in\n  \u003ca href\u003d\"settings://fileTemplates\"\u003eSettings | Editor | File and Code Templates\u003c/a\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    throwingMethod();\n  } catch (IOException ex) {\n\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    System.out.println(System.in.read());\n  } catch (IOException ignored) {\n\n  }\n\u003c/code\u003e\u003c/pre\u003e\n  \u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eDo not warn when \u0027catch\u0027 block contains a comment\u003c/b\u003e option to ignore \u003ccode\u003ecatch\u003c/code\u003e blocks with comments.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eDo not warn when \u0027catch\u0027 block is not empty\u003c/b\u003e option to ignore \u003ccode\u003ecatch\u003c/code\u003e blocks that contain\n    statements or comments inside, while the variable itself is not used.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eDo not warn when exception named \u0027ignore(d)\u0027 is not actually ignored\u003c/b\u003e option to ignore\n    variables named \u003ccode\u003eignored\u003c/code\u003e if they are in use.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ContinueOrBreakFromFinallyBlock",
          "displayName": "\u0027continue\u0027 or \u0027break\u0027 inside \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e statements inside of \u003ccode\u003efinally\u003c/code\u003e blocks.\n\u003cp\u003eWhile occasionally intended, such statements are very confusing, may mask thrown exceptions, and complicate debugging.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    while (true) {\n        try {\n          throwingMethod();\n        } finally {\n            continue;\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThrowableSupplierOnlyThrowException",
          "displayName": "Throwable supplier never returns a value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eSupplier\u003c/code\u003e lambdas in \u003ccode\u003eOptional.orElseThrow()\u003c/code\u003e calls that throw an exception, instead of returning it.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\noptional.orElseThrow(() -\u003e {\n    throw new RuntimeException();\n});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\noptional.orElseThrow(() -\u003e new RuntimeException());\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2023.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FinallyBlockCannotCompleteNormally",
          "displayName": "\u0027finally\u0027 block which can not complete normally",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ethrow\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e, \u003ccode\u003econtinue\u003c/code\u003e, and \u003ccode\u003eyield\u003c/code\u003e statements that are used inside \u003ccode\u003efinally\u003c/code\u003e blocks.\nThese cause the \u003ccode\u003efinally\u003c/code\u003e block to not complete normally but to complete abruptly.\nAny exceptions thrown from the \u003ccode\u003etry\u003c/code\u003e and \u003ccode\u003ecatch\u003c/code\u003e blocks of the same \u003ccode\u003etry\u003c/code\u003e-\u003ccode\u003ecatch\u003c/code\u003e statement will be suppressed.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void x() {\n    \u003cb\u003etry\u003c/b\u003e {\n      throw new RuntimeException();\n    } \u003cb\u003efinally\u003c/b\u003e {\n      // if bar() returns true, the RuntimeException will be suppressed\n      \u003cb\u003eif\u003c/b\u003e (bar()) \u003cb\u003ereturn\u003c/b\u003e;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EmptyTryBlock",
          "displayName": "Empty \u0027try\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty \u003ccode\u003etry\u003c/code\u003e blocks, including try-with-resources statements.\n\u003cp\u003e\u003ccode\u003etry\u003c/code\u003e blocks with comments are considered empty.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nThis inspection doesn\u0027t report empty \u003ccode\u003etry\u003c/code\u003e blocks found in JSP files.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CaughtExceptionImmediatelyRethrown",
          "displayName": "Caught exception is immediately rethrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ecatch\u003c/code\u003e blocks that immediately rethrow\nthe caught exception without performing any action on it.\nSuch \u003ccode\u003ecatch\u003c/code\u003e blocks are unnecessary and have no error\nhandling.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n        try {\n            new FileInputStream(\"\");\n        } catch (FileNotFoundException e) {\n            throw e;\n        }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReturnFromFinallyBlock",
          "displayName": "\u0027return\u0027 inside \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ereturn\u003c/code\u003e statements inside of \u003ccode\u003efinally\u003c/code\u003e blocks.\n\u003cp\u003eWhile occasionally intended, such \u003ccode\u003ereturn\u003c/code\u003e statements may mask thrown exceptions\nand complicate debugging.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    foo();\n  } finally {\n    if (bar()) return;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonFinalFieldOfException",
          "displayName": "Non-final field of \u0027Exception\u0027 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields in subclasses of \u003ccode\u003ejava.lang.Exception\u003c/code\u003e that are not declared \u003ccode\u003efinal\u003c/code\u003e.\n\u003cp\u003eData on exception objects should not be modified\n  because this may result in losing the error context for later debugging and logging.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class EditorException extends Exception {\n    private String message; // warning: Non-final field \u0027message\u0027 of exception class\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CheckedExceptionClass",
          "displayName": "Checked exception class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports checked exception classes (that is, subclasses of \u003ccode\u003ejava.lang.Exception\u003c/code\u003e that are\nnot subclasses of \u003ccode\u003ejava.lang.RuntimeException\u003c/code\u003e).\n\u003cp\u003eSome coding standards suppress checked user-defined exception classes.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class IllegalMoveException extends Exception {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestedTryStatement",
          "displayName": "Nested \u0027try\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports nested \u003ccode\u003etry\u003c/code\u003e statements.\n\u003cp\u003eNested \u003ccode\u003etry\u003c/code\u003e statements\n  may result in unclear code and should probably have their \u003ccode\u003ecatch\u003c/code\u003e and \u003ccode\u003efinally\u003c/code\u003e sections\n  merged.\n  \u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ErrorRethrown",
          "displayName": "\u0027Error\u0027 not rethrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003etry\u003c/code\u003e statements that catch\n\u003ccode\u003ejava.lang.Error\u003c/code\u003e or any of its subclasses and do not rethrow the error.\n\u003cp\u003eStatements that catch \u003ccode\u003ejava.lang.ThreadDeath\u003c/code\u003e are not\n  reported.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    executeTests(request);\n  }\n  catch (OutOfMemoryError ex) { // warning: Error \u0027ex\u0027 not rethrown\n    return false;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExceptionFromCatchWhichDoesntWrap",
          "displayName": "\u0027throw\u0027 inside \u0027catch\u0027 block which ignores the caught exception",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports exceptions that are thrown from inside \u003ccode\u003ecatch\u003c/code\u003e blocks but do not \"wrap\" the caught exception.\n\u003cp\u003eWhen an exception is thrown in response to an exception, wrapping the initial exception prevents losing valuable context information,\n  such as stack frames and line numbers.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ...\n  catch (IOException e) {\n    closeAllConnections();\n    throw new ConnectException(\"Connection problem.\"); // warning: \u0027throw\u0027 inside \u0027catch\u0027 block ignores the caught exception \u0027e\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore if result of exception method call is used\u003c/b\u003e option to indicate whether the inspection should ignore exceptions whose\n    argument is the result of a method\n    call on the original exception, such as \u003ccode\u003egetMessage()\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore if thrown exception cannot wrap an exception\u003c/b\u003e option to ignore \u003ccode\u003ethrow\u003c/code\u003e statements that throw exceptions without a\n    constructor that accepts a \u003ccode\u003eThrowable\u003c/code\u003e cause.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InstanceofCatchParameter",
          "displayName": "\u0027instanceof\u0027 on \u0027catch\u0027 parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports cases in which an \u003ccode\u003einstanceof\u003c/code\u003e expression is used for testing the type of a parameter in a \u003ccode\u003ecatch\u003c/code\u003e block.\n\u003cp\u003eTesting the type of \u003ccode\u003ecatch\u003c/code\u003e parameters is usually better done by having separate\n  \u003ccode\u003ecatch\u003c/code\u003e blocks instead of using \u003ccode\u003einstanceof\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(Runnable runnable) {\n    try {\n        runnable.run();\n    } catch (Throwable throwable) {\n        if (throwable instanceof NoClassDefFoundError) { // warning: \u0027instanceof\u0027 on \u0027catch\u0027 parameter \u0027throwable\u0027\n            System.out.println(\"Class not found!\");\n        }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TooBroadCatch",
          "displayName": "Overly broad \u0027catch\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ecatch\u003c/code\u003e blocks with parameters that are more generic than the\nexception thrown by the corresponding \u003ccode\u003etry\u003c/code\u003e block.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try  {\n    File file \u003d new File(pathToFile);\n    return file.getAbsolutePath();\n  } catch (Exception ex) { // warning: \u0027catch\u0027 of \u0027Exception\u0027 is too broad, masking exceptions \u0027RuntimeException\u0027\n    return defaultFilePath;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try  {\n    File file \u003d new File(pathToFile);\n    return file.getAbsolutePath();\n  } catch (RuntimeException ex) {\n    return defaultFilePath;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eOnly warn on RuntimeException, Exception, Error or Throwable\u003c/b\u003e option to have this inspection warn only on the most generic exceptions.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore exceptions which hide others but are themselves thrown\u003c/b\u003e option to ignore any exceptions that hide other exceptions but\n    still may be thrown and thus are technically not overly broad.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NewExceptionWithoutArguments",
          "displayName": "Exception constructor called without arguments",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports creation of a exception instance without any arguments specified.\n\u003cp\u003eWhen an exception is constructed without any arguments, it contains no information about the problem that occurred, which makes\n  debugging needlessly hard.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  throw new IOException(); // warning: exception without arguments\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThrowFromFinallyBlock",
          "displayName": "\u0027throw\u0027 inside \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ethrow\u003c/code\u003e statements inside \u003ccode\u003efinally\u003c/code\u003e\nblocks.\n\u003cp\u003eWhile occasionally intended, such \u003ccode\u003ethrow\u003c/code\u003e statements may conceal exceptions thrown from \u003ccode\u003etry\u003c/code\u003e-\u003ccode\u003ecatch\u003c/code\u003e and thus\n  tremendously complicate the debugging process.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BadExceptionThrown",
          "displayName": "Prohibited exception thrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ethrow\u003c/code\u003e statements that throw an inappropriate exception.\nFor example an exception can be inappropriate because it is overly generic,\nsuch as \u003ccode\u003ejava.lang.Exception\u003c/code\u003e or \u003ccode\u003ejava.io.IOException\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void setup(Mode mode) {\n      if (mode \u003d\u003d null)\n          throw new RuntimeException(\"Problem during setup\"); // warning: Prohibited exception \u0027RuntimeException\u0027 thrown\n      ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eProhibited exceptions\u003c/b\u003e list to specify which exceptions should be reported.\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExtendsThrowable",
          "displayName": "Class directly extends \u0027Throwable\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that directly extend \u003ccode\u003ejava.lang.Throwable\u003c/code\u003e.\n\u003cp\u003eExtending \u003ccode\u003ejava.lang.Throwable\u003c/code\u003e directly is generally considered bad practice.\n  It is usually enough to extend \u003ccode\u003ejava.lang.RuntimeException\u003c/code\u003e, \u003ccode\u003ejava.lang.Exception\u003c/code\u003e, or - in special\n  cases - \u003ccode\u003ejava.lang.Error\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class EnigmaThrowable extends Throwable {} // warning: Class \u0027EnigmaThrowable\u0027 directly extends \u0027java.lang.Throwable\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Android Lint: Correctness",
      "inspections": [
        {
          "shortName": "AndroidLintManifestResource",
          "displayName": "Manifest Resource References",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eManifest Resource References\u003cbr\u003e\u003cbr\u003eElements in the manifest can reference resources, but those resources cannot vary across configurations (except as a special case, by version, and except for a few specific package attributes such as the application title and icon).\u003cbr\u003e\u003cbr\u003eIssue id: ManifestResource\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintScopedStorage",
          "displayName": "Affected by scoped storage",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAffected by scoped storage\u003cbr\u003e\u003cbr\u003eScoped storage is enforced on Android 10+ (or Android 11+ if using \u003ccode\u003erequestLegacyExternalStorage\u003c/code\u003e). In particular, \u003ccode\u003eWRITE_EXTERNAL_STORAGE\u003c/code\u003e will no longer provide write access to all files; it will provide the equivalent of \u003ccode\u003eREAD_EXTERNAL_STORAGE\u003c/code\u003e instead.\u003cbr/\u003e\n\u003cbr/\u003e\nThe \u003ccode\u003eMANAGE_EXTERNAL_STORAGE\u003c/code\u003e permission can be used to manage all files, but it is rarely necessary and most apps on Google Play are not allowed to use it. Most apps should instead migrate to use scoped storage. To modify or delete files, apps should request write access from the user as described at \u003ca href\u003d\"https://goo.gle/android-mediastore-createwriterequest\"\u003ehttps://goo.gle/android-mediastore-createwriterequest\u003c/a\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nTo learn more, read these resources: Play policy: \u003ca href\u003d\"https://goo.gle/policy-storage-help\"\u003ehttps://goo.gle/policy-storage-help\u003c/a\u003e Allowable use cases: \u003ca href\u003d\"https://goo.gle/policy-storage-usecases\"\u003ehttps://goo.gle/policy-storage-usecases\u003c/a\u003e\u003cbr\u003e\u003cbr\u003eIssue id: ScopedStorage\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://goo.gle/android-storage-usecases\"\u003ehttps://goo.gle/android-storage-usecases\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintImpliedTouchscreenHardware",
          "displayName": "Touchscreen not optional",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eTouchscreen not optional\u003cbr\u003e\u003cbr\u003eApps require the \u003ccode\u003eandroid.hardware.touchscreen\u003c/code\u003e feature by default. If you want your app to be available on TV, you must also explicitly declare that a touchscreen is not required as follows:\u003cbr/\u003e\n\u003ccode\u003e\u0026lt;uses-feature android:name\u003d\"android.hardware.touchscreen\" android:required\u003d\"false\"/\u003e\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eIssue id: ImpliedTouchscreenHardware\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/manifest/uses-feature-element.html\"\u003ehttps://developer.android.com/guide/topics/manifest/uses-feature-element.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInvalidAnalyticsName",
          "displayName": "Invalid Analytics Name",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid Analytics Name\u003cbr\u003e\u003cbr\u003eEvent names and parameters must follow the naming conventions defined in the`FirebaseAnalytics#logEvent()` documentation.\u003cbr\u003e\u003cbr\u003eIssue id: InvalidAnalyticsName\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics#logEvent(java.lang.String,%20android.os.Bundle)\"\u003ehttps://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics#logEvent(java.lang.String,%20android.os.Bundle)\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintBatteryLife",
          "displayName": "Battery Life Issues",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eBattery Life Issues\u003cbr\u003e\u003cbr\u003eThis issue flags code that either\u003cbr/\u003e\n* negatively affects battery life, or\u003cbr/\u003e\n* uses APIs that have recently changed behavior to prevent background tasks from consuming memory and battery excessively.\u003cbr/\u003e\n\u003cbr/\u003e\nGenerally, you should be using \u003ccode\u003eWorkManager\u003c/code\u003e instead.\u003cbr/\u003e\n\u003cbr/\u003e\nFor more details on how to update your code, please see \u003ca href\u003d\"https://developer.android.com/topic/performance/background-optimization\"\u003ehttps://developer.android.com/topic/performance/background-optimization\u003c/a\u003e\u003cbr\u003e\u003cbr\u003eIssue id: BatteryLife\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNotInterpolated",
          "displayName": "Incorrect Interpolation",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncorrect Interpolation\u003cbr\u003e\u003cbr\u003eTo insert the value of a variable, you can use \u003ccode\u003e${variable}\u003c/code\u003e inside a string literal, but \u003cb\u003eonly\u003c/b\u003e if you are using double quotes!\u003cbr\u003e\u003cbr\u003eIssue id: NotInterpolated\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://www.groovy-lang.org/syntax.html#_string_interpolation\"\u003ehttps://www.groovy-lang.org/syntax.html#_string_interpolation\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWearableActionDuplicate",
          "displayName": "Duplicate watch face configuration activities found",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDuplicate watch face configuration activities found\u003cbr\u003e\u003cbr\u003eIf and only if a watch face service defines \u003ccode\u003ewearableConfigurationAction\u003c/code\u003e metadata, with the value \u003ccode\u003eWATCH_FACE_EDITOR\u003c/code\u003e, there should be an activity in the same package, which has an intent filter for \u003ccode\u003eWATCH_FACE_EDITOR\u003c/code\u003e (with com.google.android.wearable.watchface.category.WEARABLE_CONFIGURATION if minSdkVersion is less than 30).\u003cbr\u003e\u003cbr\u003eIssue id: WearableActionDuplicate\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/wearables/watch-faces/configuration\"\u003ehttps://developer.android.com/training/wearables/watch-faces/configuration\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintProguard",
          "displayName": "Using obsolete ProGuard configuration",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing obsolete ProGuard configuration\u003cbr\u003e\u003cbr\u003eUsing \u003ccode\u003e-keepclasseswithmembernames\u003c/code\u003e in a proguard config file is not correct; it can cause some symbols to be renamed which should not be.\u003cbr/\u003e\n\u003cbr/\u003e\nEarlier versions of ADT used to create proguard.cfg files with the wrong format. Instead of \u003ccode\u003e-keepclasseswithmembernames\u003c/code\u003e use \u003ccode\u003e-keepclasseswithmembers\u003c/code\u003e, since the old flags also implies \"allow shrinking\" which means symbols only referred to from XML and not Java (such as possibly CustomViews) can get deleted.\u003cbr\u003e\u003cbr\u003eIssue id: Proguard\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://issuetracker.google.com/36928077\"\u003ehttps://issuetracker.google.com/36928077\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintCommitPrefEdits",
          "displayName": "Missing commit() on SharedPreference editor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing \u003ccode\u003ecommit()\u003c/code\u003e on \u003ccode\u003eSharedPreference\u003c/code\u003e editor\u003cbr\u003e\u003cbr\u003eAfter calling \u003ccode\u003eedit()\u003c/code\u003e on a \u003ccode\u003eSharedPreference\u003c/code\u003e, you must call \u003ccode\u003ecommit()\u003c/code\u003e or \u003ccode\u003eapply()\u003c/code\u003e on the editor to save the results.\u003cbr\u003e\u003cbr\u003eIssue id: CommitPrefEdits\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintExtraTranslation",
          "displayName": "Extra translation",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eExtra translation\u003cbr\u003e\u003cbr\u003eIf a string appears in a specific language translation file, but there is no corresponding string in the default locale, then this string is probably unused. (It\u0027s technically possible that your application is only intended to run in a specific locale, but it\u0027s still a good idea to provide a fallback.)\u003cbr/\u003e\n\u003cbr/\u003e\nNote that these strings can lead to crashes if the string is looked up on any locale not providing a translation, so it\u0027s important to clean them up.\u003cbr\u003e\u003cbr\u003eIssue id: ExtraTranslation\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNotificationId0",
          "displayName": "Notification Id is 0",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNotification Id is 0\u003cbr\u003e\u003cbr\u003eThe notification id \u003cb\u003ecannot\u003c/b\u003e be 0; using 0 here can make the service not run in the foreground.\u003cbr\u003e\u003cbr\u003eIssue id: NotificationId0\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingIntentFilterForMediaSearch",
          "displayName": "Missing MEDIA_PLAY_FROM_SEARCH intent-filter",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing MEDIA_PLAY_FROM_SEARCH intent-filter\u003cbr\u003e\u003cbr\u003eTo support voice searches on Android Auto, you should also register an \u003ccode\u003eintent-filter\u003c/code\u003e for the action \u003ccode\u003eandroid.media.action.MEDIA_PLAY_FROM_SEARCH\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nTo do this, add\n\u003cpre\u003e\n`\u0026lt;intent-filter\u003e`\n    `\u0026lt;action android:name\u003d\"android.media.action.MEDIA_PLAY_FROM_SEARCH\" /\u003e`\n`\u0026lt;/intent-filter\u003e`\n\u003c/pre\u003e\nto your \u003ccode\u003e\u0026lt;activity\u003e\u003c/code\u003e or \u003ccode\u003e\u0026lt;service\u003e\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: MissingIntentFilterForMediaSearch\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/auto/audio/index.html#support_voice\"\u003ehttps://developer.android.com/training/auto/audio/index.html#support_voice\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintStringEscaping",
          "displayName": "Invalid string escapes",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid string escapes\u003cbr\u003e\u003cbr\u003eApostrophes (\u0027) must always be escaped (with a \\\\), unless they appear in a string which is itself escaped in double quotes (\").\u003cbr\u003e\u003cbr\u003eIssue id: StringEscaping\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWrongThread",
          "displayName": "Wrong Thread",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWrong Thread\u003cbr\u003e\u003cbr\u003eEnsures that a method which expects to be called on a specific thread, is actually called from that thread. For example, calls on methods in widgets should always be made on the UI thread.\u003cbr\u003e\u003cbr\u003eIssue id: WrongThread\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/components/processes-and-threads.html#Threads\"\u003ehttps://developer.android.com/guide/components/processes-and-threads.html#Threads\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintOpenForTesting",
          "displayName": "Extending API only allowed from tests",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eExtending API only allowed from tests\u003cbr\u003e\u003cbr\u003eClasses or methods annotated with \u003ccode\u003e@OpenForTesting\u003c/code\u003e are only allowed to be subclassed or overridden from unit tests.\u003cbr\u003e\u003cbr\u003eIssue id: OpenForTesting\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDeviceAdmin",
          "displayName": "Malformed Device Admin",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMalformed Device Admin\u003cbr\u003e\u003cbr\u003eIf you register a broadcast receiver which acts as a device admin, you must also register an \u003ccode\u003e\u0026lt;intent-filter\u003e\u003c/code\u003e for the action \u003ccode\u003eandroid.app.action.DEVICE_ADMIN_ENABLED\u003c/code\u003e, without any \u003ccode\u003e\u0026lt;data\u003e\u003c/code\u003e, such that the device admin can be activated/deactivated.\u003cbr/\u003e\n\u003cbr/\u003e\nTo do this, add\n\u003cpre\u003e\n`\u0026lt;intent-filter\u003e`\n    `\u0026lt;action android:name\u003d\"android.app.action.DEVICE_ADMIN_ENABLED\" /\u003e`\n`\u0026lt;/intent-filter\u003e`\n\u003c/pre\u003e\nto your \u003ccode\u003e\u0026lt;receiver\u003e\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: DeviceAdmin\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintHighAppVersionCode",
          "displayName": "VersionCode too high",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eVersionCode too high\u003cbr\u003e\u003cbr\u003eThe declared \u003ccode\u003eversionCode\u003c/code\u003e is an Integer. Ensure that the version number is not close to the limit. It is recommended to monotonically increase this number each minor or major release of the app. Note that updating an app with a versionCode over \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e is not possible.\u003cbr\u003e\u003cbr\u003eIssue id: HighAppVersionCode\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/studio/publish/versioning.html\"\u003ehttps://developer.android.com/studio/publish/versioning.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintParcelClassLoader",
          "displayName": "Default Parcel Class Loader",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDefault Parcel Class Loader\u003cbr\u003e\u003cbr\u003eThe documentation for \u003ccode\u003eParcel#readParcelable(ClassLoader)\u003c/code\u003e (and its variations) says that you can pass in \u003ccode\u003enull\u003c/code\u003e to pick up the default class loader. However, that ClassLoader is a system class loader and is not able to find classes in your own application.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you are writing your own classes into the \u003ccode\u003eParcel\u003c/code\u003e (not just SDK classes like \u003ccode\u003eString\u003c/code\u003e and so on), then you should supply a \u003ccode\u003eClassLoader\u003c/code\u003e for your application instead; a simple way to obtain one is to just call \u003ccode\u003egetClass().getClassLoader()\u003c/code\u003e from your own class.\u003cbr\u003e\u003cbr\u003eIssue id: ParcelClassLoader\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/android/os/Parcel.html\"\u003ehttps://developer.android.com/reference/android/os/Parcel.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintJobSchedulerService",
          "displayName": "JobScheduler problems",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eJobScheduler problems\u003cbr\u003e\u003cbr\u003eThis check looks for various common mistakes in using the JobScheduler API: the service class must extend \u003ccode\u003eJobService\u003c/code\u003e, the service must be registered in the manifest and the registration must require the permission \u003ccode\u003eandroid.permission.BIND_JOB_SERVICE\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: JobSchedulerService\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/topic/performance/scheduling.html\"\u003ehttps://developer.android.com/topic/performance/scheduling.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRequiredSize",
          "displayName": "Missing layout_width or layout_height attributes",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing \u003ccode\u003elayout_width\u003c/code\u003e or \u003ccode\u003elayout_height\u003c/code\u003e attributes\u003cbr\u003e\u003cbr\u003eAll views must specify an explicit \u003ccode\u003elayout_width\u003c/code\u003e and \u003ccode\u003elayout_height\u003c/code\u003e attribute. There is a runtime check for this, so if you fail to specify a size, an exception is thrown at runtime.\u003cbr/\u003e\n\u003cbr/\u003e\nIt\u0027s possible to specify these widths via styles as well. GridLayout, as a special case, does not require you to specify a size.\u003cbr\u003e\u003cbr\u003eIssue id: RequiredSize\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInstantiatable",
          "displayName": "Registered class is not instantiatable",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eRegistered class is not instantiatable\u003cbr\u003e\u003cbr\u003eActivities, services, broadcast receivers etc. registered in the manifest file (or for custom views, in a layout file) must be \"instantiatable\" by the system, which means that the class must be public, it must have an empty public constructor, and if it\u0027s an inner class, it must be a static inner class.\u003cbr\u003e\u003cbr\u003eIssue id: Instantiatable\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAdapterViewChildren",
          "displayName": "AdapterView cannot have children in XML",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003eAdapterView\u003c/code\u003e cannot have children in XML\u003cbr\u003e\u003cbr\u003eAn \u003ccode\u003eAdapterView\u003c/code\u003e such as a `ListView`s must be configured with data from Java code, such as a \u003ccode\u003eListAdapter\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: AdapterViewChildren\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/android/widget/AdapterView.html\"\u003ehttps://developer.android.com/reference/android/widget/AdapterView.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTextViewEdits",
          "displayName": "TextView should probably be an EditText instead",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eTextView should probably be an EditText instead\u003cbr\u003e\u003cbr\u003eUsing a \u003ccode\u003e\u0026lt;TextView\u003e\u003c/code\u003e to input text is generally an error, you should be using \u003ccode\u003e\u0026lt;EditText\u003e\u003c/code\u003e instead.  \u003ccode\u003eEditText\u003c/code\u003e is a subclass of \u003ccode\u003eTextView\u003c/code\u003e, and some of the editing support is provided by \u003ccode\u003eTextView\u003c/code\u003e, so it\u0027s possible to set some input-related properties on a \u003ccode\u003eTextView\u003c/code\u003e. However, using a \u003ccode\u003eTextView\u003c/code\u003e along with input attributes is usually a cut \u0026amp; paste error. To input text you should be using \u003ccode\u003e\u0026lt;EditText\u003e\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nThis check also checks subclasses of \u003ccode\u003eTextView\u003c/code\u003e, such as \u003ccode\u003eButton\u003c/code\u003e and \u003ccode\u003eCheckBox\u003c/code\u003e, since these have the same issue: they should not be used with editable attributes.\u003cbr\u003e\u003cbr\u003eIssue id: TextViewEdits\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintResourceType",
          "displayName": "Wrong Resource Type",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWrong Resource Type\u003cbr\u003e\u003cbr\u003eEnsures that resource id\u0027s passed to APIs are of the right type; for example, calling \u003ccode\u003eResources.getColor(R.string.name)\u003c/code\u003e is wrong.\u003cbr\u003e\u003cbr\u003eIssue id: ResourceType\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSdCardPath",
          "displayName": "Hardcoded reference to /sdcard",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eHardcoded reference to \u003ccode\u003e/sdcard\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eYour code should not reference the \u003ccode\u003e/sdcard\u003c/code\u003e path directly; instead use \u003ccode\u003eEnvironment.getExternalStorageDirectory().getPath()\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nSimilarly, do not reference the \u003ccode\u003e/data/data/\u003c/code\u003e path directly; it can vary in multi-user scenarios. Instead, use \u003ccode\u003eContext.getFilesDir().getPath()\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: SdCardPath\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/data-storage#filesExternal\"\u003ehttps://developer.android.com/training/data-storage#filesExternal\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRedundantLabel",
          "displayName": "Redundant label on activity",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eRedundant label on activity\u003cbr\u003e\u003cbr\u003eWhen an activity does not have a label attribute, it will use the one from the application tag. Since the application has already specified the same label, the label on this activity can be omitted.\u003cbr\u003e\u003cbr\u003eIssue id: RedundantLabel\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMinSdkTooLow",
          "displayName": "API Version Too Low",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eAPI Version Too Low\u003cbr\u003e\u003cbr\u003eThe value of the \u003ccode\u003eminSdkVersion\u003c/code\u003e property is too low and can be incremented without noticeably reducing the number of supported devices.\u003cbr\u003e\u003cbr\u003eIssue id: MinSdkTooLow\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintStopShip",
          "displayName": "Code contains STOPSHIP marker",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eCode contains \u003ccode\u003eSTOPSHIP\u003c/code\u003e marker\u003cbr\u003e\u003cbr\u003eUsing the comment \u003ccode\u003e// STOPSHIP\u003c/code\u003e can be used to flag code that is incomplete but checked in. This comment marker can be used to indicate that the code should not be shipped until the issue is addressed, and lint will look for these. In Gradle projects, this is only checked for non-debug (release) builds.\u003cbr/\u003e\n\u003cbr/\u003e\nIn Kotlin, the \u003ccode\u003eTODO()\u003c/code\u003e method is also treated as a stop ship marker; you can use it to make incomplete code compile, but it will throw an exception at runtime and therefore should be fixed before shipping releases.\u003cbr\u003e\u003cbr\u003eIssue id: StopShip\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMockLocation",
          "displayName": "Using mock location provider in production",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing mock location provider in production\u003cbr\u003e\u003cbr\u003eUsing a mock location provider (by requiring the permission \u003ccode\u003eandroid.permission.ACCESS_MOCK_LOCATION\u003c/code\u003e) should \u003cb\u003eonly\u003c/b\u003e be done in debug builds (or from tests). In Gradle projects, that means you should only request this permission in a test or debug source set specific manifest file.\u003cbr/\u003e\n\u003cbr/\u003e\nTo fix this, create a new manifest file in the debug folder and move the \u003ccode\u003e\u0026lt;uses-permission\u003e\u003c/code\u003e element there. A typical path to a debug manifest override file in a Gradle project is src/debug/AndroidManifest.xml.\u003cbr\u003e\u003cbr\u003eIssue id: MockLocation\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintCutPasteId",
          "displayName": "Likely cut \u0026 paste mistakes",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eLikely cut \u0026amp; paste mistakes\u003cbr\u003e\u003cbr\u003eThis lint check looks for cases where you have cut \u0026amp; pasted calls to \u003ccode\u003efindViewById\u003c/code\u003e but have forgotten to update the R.id field. It\u0027s possible that your code is simply (redundantly) looking up the field repeatedly, but lint cannot distinguish that from a case where you for example want to initialize fields \u003ccode\u003eprev\u003c/code\u003e and \u003ccode\u003enext\u003c/code\u003e and you cut \u0026amp; pasted \u003ccode\u003efindViewById(R.id.prev)\u003c/code\u003e and forgot to update the second initialization to \u003ccode\u003eR.id.next\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: CutPasteId\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGradleDependency",
          "displayName": "Obsolete Gradle Dependency",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eObsolete Gradle Dependency\u003cbr\u003e\u003cbr\u003eThis detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find.\u003cbr\u003e\u003cbr\u003eIssue id: GradleDependency\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWrongViewCast",
          "displayName": "Mismatched view type",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMismatched view type\u003cbr\u003e\u003cbr\u003eKeeps track of the view types associated with ids and if it finds a usage of the id in the Java code it ensures that it is treated as the same type.\u003cbr\u003e\u003cbr\u003eIssue id: WrongViewCast\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDuplicateActivity",
          "displayName": "Activity registered more than once",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eActivity registered more than once\u003cbr\u003e\u003cbr\u003eAn activity should only be registered once in the manifest. If it is accidentally registered more than once, then subtle errors can occur, since attribute declarations from the two elements are not merged, so you may accidentally remove previous declarations.\u003cbr\u003e\u003cbr\u003eIssue id: DuplicateActivity\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMangledCRLF",
          "displayName": "Mangled file line endings",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eMangled file line endings\u003cbr\u003e\u003cbr\u003eOn Windows, line endings are typically recorded as carriage return plus newline: \\r\\n.\u003cbr/\u003e\n\u003cbr/\u003e\nThis detector looks for invalid line endings with repeated carriage return characters (without newlines). Previous versions of the ADT plugin could accidentally introduce these into the file, and when editing the file, the editor could produce confusing visual artifacts.\u003cbr\u003e\u003cbr\u003eIssue id: MangledCRLF\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d375421\"\u003ehttps://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d375421\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUniqueConstants",
          "displayName": "Overlapping Enumeration Constants",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eOverlapping Enumeration Constants\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e@IntDef\u003c/code\u003e annotation allows you to create a light-weight \"enum\" or type definition. However, it\u0027s possible to accidentally specify the same value for two or more of the values, which can lead to hard-to-detect bugs. This check looks for this scenario and flags any repeated constants.\u003cbr/\u003e\n\u003cbr/\u003e\nIn some cases, the repeated constant is intentional (for example, renaming a constant to a more intuitive name, and leaving the old name in place for compatibility purposes).  In that case, simply suppress this check by adding a \u003ccode\u003e@SuppressLint(\"UniqueConstants\")\u003c/code\u003e annotation.\u003cbr\u003e\u003cbr\u003eIssue id: UniqueConstants\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSimpleDateFormat",
          "displayName": "Implied locale in date format",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eImplied locale in date format\u003cbr\u003e\u003cbr\u003eAlmost all callers should use \u003ccode\u003egetDateInstance()\u003c/code\u003e, \u003ccode\u003egetDateTimeInstance()\u003c/code\u003e, or \u003ccode\u003egetTimeInstance()\u003c/code\u003e to get a ready-made instance of SimpleDateFormat suitable for the user\u0027s locale. The main reason you\u0027d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).\u003cbr/\u003e\n\u003cbr/\u003e\nTherefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing.\u003cbr\u003e\u003cbr\u003eIssue id: SimpleDateFormat\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/java/text/SimpleDateFormat.html\"\u003ehttps://developer.android.com/reference/java/text/SimpleDateFormat.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintImpliedQuantity",
          "displayName": "Implied Quantities",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eImplied Quantities\u003cbr\u003e\u003cbr\u003ePlural strings should generally include a \u003ccode\u003e%s\u003c/code\u003e or \u003ccode\u003e%d\u003c/code\u003e formatting argument. In locales like English, the \u003ccode\u003eone\u003c/code\u003e quantity only applies to a single value, 1, but that\u0027s not true everywhere. For example, in Slovene, the \u003ccode\u003eone\u003c/code\u003e quantity will apply to 1, 101, 201, 301, and so on. Similarly, there are locales where multiple values match the \u003ccode\u003ezero\u003c/code\u003e and \u003ccode\u003etwo\u003c/code\u003e quantities.\u003cbr/\u003e\n\u003cbr/\u003e\nIn these locales, it is usually an error to have a message which does not include a formatting argument (such as \u0027%d\u0027), since it will not be clear from the grammar what quantity the quantity string is describing.\u003cbr\u003e\u003cbr\u003eIssue id: ImpliedQuantity\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/resources/string-resource.html#Plurals\"\u003ehttps://developer.android.com/guide/topics/resources/string-resource.html#Plurals\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintViewBindingType",
          "displayName": "tools:viewBindingType issues",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003etools:viewBindingType\u003c/code\u003e issues\u003cbr\u003e\u003cbr\u003eAll issues related to using the View Binding \u003ccode\u003etools:viewBindingType\u003c/code\u003e attribute.\u003cbr\u003e\u003cbr\u003eIssue id: ViewBindingType\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNonConstantResourceId",
          "displayName": "Checks use of resource IDs in places requiring constants.",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eChecks use of resource IDs in places requiring constants\u003cbr\u003e\u003cbr\u003eAvoid the usage of resource IDs where constant expressions are required.\u003cbr/\u003e\n\u003cbr/\u003e\nA future version of the Android Gradle Plugin will generate R classes with non-constant IDs in order to improve the performance of incremental compilation.\u003cbr\u003e\u003cbr\u003eIssue id: NonConstantResourceId\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWifiManagerLeak",
          "displayName": "WifiManager Leak",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWifiManager Leak\u003cbr\u003e\u003cbr\u003eOn versions prior to Android N (24), initializing the \u003ccode\u003eWifiManager\u003c/code\u003e via \u003ccode\u003eContext#getSystemService\u003c/code\u003e can cause a memory leak if the context is not the application context. Change \u003ccode\u003econtext.getSystemService(...)\u003c/code\u003e to \u003ccode\u003econtext.getApplicationContext().getSystemService(...)\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: WifiManagerLeak\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGradleGetter",
          "displayName": "Gradle Implicit Getter Call",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eGradle Implicit Getter Call\u003cbr\u003e\u003cbr\u003eGradle will let you replace specific constants in your build scripts with method calls, so you can for example dynamically compute a version string based on your current version control revision number, rather than hardcoding a number.\u003cbr/\u003e\n\u003cbr/\u003e\nWhen computing a version name, it\u0027s tempting to for example call the method to do that \u003ccode\u003egetVersionName\u003c/code\u003e. However, when you put that method call inside the \u003ccode\u003edefaultConfig\u003c/code\u003e block, you will actually be calling the Groovy getter for the \u003ccode\u003eversionName\u003c/code\u003e property instead. Therefore, you need to name your method something which does not conflict with the existing implicit getters. Consider using \u003ccode\u003ecompute\u003c/code\u003e as a prefix instead of \u003ccode\u003eget\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: GradleGetter\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGradleOverrides",
          "displayName": "Value overridden by Gradle build script",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eValue overridden by Gradle build script\u003cbr\u003e\u003cbr\u003eThe value of (for example) \u003ccode\u003eminSdkVersion\u003c/code\u003e is only used if it is not specified in the \u003ccode\u003ebuild.gradle\u003c/code\u003e build scripts. When specified in the Gradle build scripts, the manifest value is ignored and can be misleading, so should be removed to avoid ambiguity.\u003cbr\u003e\u003cbr\u003eIssue id: GradleOverrides\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWebViewApiAvailability",
          "displayName": "WebView API Availability",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWebView API Availability\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003eandroidx.webkit\u003c/code\u003e library is a static library you can add to your Android application allowing you to use new APIs on older platform versions, targeting more devices.\u003cbr\u003e\u003cbr\u003eIssue id: WebViewApiAvailability\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/androidx/webkit/package-summary\"\u003ehttps://developer.android.com/reference/androidx/webkit/package-summary\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintCustomSplashScreen",
          "displayName": "Application-defined Launch Screen",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eApplication-defined Launch Screen\u003cbr\u003e\u003cbr\u003eStarting in Android 12 (API 31+), the application\u0027s Launch Screen is provided by the system and the application should not create its own, otherwise the user will see two splashscreens. Please check the \u003ccode\u003eSplashScreen\u003c/code\u003e class to check how the Splash Screen can be controlled and customized.\u003cbr\u003e\u003cbr\u003eIssue id: CustomSplashScreen\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/ui/splash-screen\"\u003ehttps://developer.android.com/guide/topics/ui/splash-screen\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWrongFolder",
          "displayName": "Resource file in the wrong res folder",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eResource file in the wrong \u003ccode\u003eres\u003c/code\u003e folder\u003cbr\u003e\u003cbr\u003eResource files are sometimes placed in the wrong folder, and it can lead to subtle bugs that are hard to understand. This check looks for problems in this area, such as attempting to place a layout \"alias\" file in a \u003ccode\u003elayout/\u003c/code\u003e folder rather than the \u003ccode\u003evalues/\u003c/code\u003e folder where it belongs.\u003cbr\u003e\u003cbr\u003eIssue id: WrongFolder\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPrivateApi",
          "displayName": "Using Private APIs",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing Private APIs\u003cbr\u003e\u003cbr\u003eUsing reflection to access hidden/private Android APIs is not safe; it will often not work on devices from other vendors, and it may suddenly stop working (if the API is removed) or crash spectacularly (if the API behavior changes, since there are no guarantees for compatibility).\u003cbr\u003e\u003cbr\u003eIssue id: PrivateApi\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/preview/restrictions-non-sdk-interfaces\"\u003ehttps://developer.android.com/preview/restrictions-non-sdk-interfaces\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWrongThreadInterprocedural",
          "displayName": "Wrong Thread (Interprocedural)",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eWrong Thread (Interprocedural)\u003cbr\u003e\u003cbr\u003eSearches for interprocedural call paths that violate thread annotations in the program. Tracks the flow of instantiated types and lambda expressions to increase accuracy across method boundaries.\u003cbr\u003e\u003cbr\u003eIssue id: WrongThreadInterprocedural\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/components/processes-and-threads.html#Threads\"\u003ehttps://developer.android.com/guide/components/processes-and-threads.html#Threads\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGradleCompatible",
          "displayName": "Incompatible Gradle Versions",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncompatible Gradle Versions\u003cbr\u003e\u003cbr\u003eThere are some combinations of libraries, or tools and libraries, that are incompatible, or can lead to bugs. One such incompatibility is compiling with a version of the Android support libraries that is not the latest version (or in particular, a version lower than your \u003ccode\u003etargetSdkVersion\u003c/code\u003e).\u003cbr\u003e\u003cbr\u003eIssue id: GradleCompatible\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInstantApps",
          "displayName": "Instant App Issues",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInstant App Issues\u003cbr\u003e\u003cbr\u003eThis issue flags code that will not work correctly in Instant Apps\u003cbr\u003e\u003cbr\u003eIssue id: InstantApps\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintCommitTransaction",
          "displayName": "Missing commit() calls",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing \u003ccode\u003ecommit()\u003c/code\u003e calls\u003cbr\u003e\u003cbr\u003eAfter creating a \u003ccode\u003eFragmentTransaction\u003c/code\u003e, you typically need to commit it as well\u003cbr\u003e\u003cbr\u003eIssue id: CommitTransaction\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSuspiciousImport",
          "displayName": "\u0027import android.R\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u0027\u003ccode\u003eimport android.R\u003c/code\u003e\u0027 statement\u003cbr\u003e\u003cbr\u003eImporting \u003ccode\u003eandroid.R\u003c/code\u003e is usually not intentional; it sometimes happens when you use an IDE and ask it to automatically add imports at a time when your project\u0027s R class it not present.\u003cbr/\u003e\n\u003cbr/\u003e\nOnce the import is there you might get a lot of \"confusing\" error messages because of course the fields available on \u003ccode\u003eandroid.R\u003c/code\u003e are not the ones you\u0027d expect from just looking at your own \u003ccode\u003eR\u003c/code\u003e class.\u003cbr\u003e\u003cbr\u003eIssue id: SuspiciousImport\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintResourceAsColor",
          "displayName": "Should pass resolved color instead of resource id",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eShould pass resolved color instead of resource id\u003cbr\u003e\u003cbr\u003eMethods that take a color in the form of an integer should be passed an RGB triple, not the actual color resource id. You must call \u003ccode\u003egetResources().getColor(resource)\u003c/code\u003e to resolve the actual color value first.\u003cbr/\u003e\n\u003cbr/\u003e\nSimilarly, methods that take a dimension integer should be passed an actual dimension (call \u003ccode\u003egetResources().getDimension(resource)\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eIssue id: ResourceAsColor\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingMediaBrowserServiceIntentFilter",
          "displayName": "Missing MediaBrowserService intent-filter",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing MediaBrowserService intent-filter\u003cbr\u003e\u003cbr\u003eAn Automotive Media App requires an exported service that extends \u003ccode\u003eandroid.service.media.MediaBrowserService\u003c/code\u003e with an \u003ccode\u003eintent-filter\u003c/code\u003e for the action \u003ccode\u003eandroid.media.browse.MediaBrowserService\u003c/code\u003e to be able to browse and play media.\u003cbr/\u003e\n\u003cbr/\u003e\nTo do this, add\n\u003cpre\u003e\n`\u0026lt;intent-filter\u003e`\n    `\u0026lt;action android:name\u003d\"android.media.browse.MediaBrowserService\" /\u003e`\n`\u0026lt;/intent-filter\u003e`\n\u003c/pre\u003e\nto the service that extends \u003ccode\u003eandroid.service.media.MediaBrowserService\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eIssue id: MissingMediaBrowserServiceIntentFilter\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/auto/audio/index.html#config_manifest\"\u003ehttps://developer.android.com/training/auto/audio/index.html#config_manifest\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInconsistentArrays",
          "displayName": "Inconsistencies in array element counts",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInconsistencies in array element counts\u003cbr\u003e\u003cbr\u003eWhen an array is translated in a different locale, it should normally have the same number of elements as the original array. When adding or removing elements to an array, it is easy to forget to update all the locales, and this lint warning finds inconsistencies like these.\u003cbr/\u003e\n\u003cbr/\u003e\nNote however that there may be cases where you really want to declare a different number of array items in each configuration (for example where the array represents available options, and those options differ for different layout orientations and so on), so use your own judgment to decide if this is really an error.\u003cbr/\u003e\n\u003cbr/\u003e\nYou can suppress this error type if it finds false errors in your project.\u003cbr\u003e\u003cbr\u003eIssue id: InconsistentArrays\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLogTagMismatch",
          "displayName": "Mismatched Log Tags",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMismatched Log Tags\u003cbr\u003e\u003cbr\u003eWhen guarding a \u003ccode\u003eLog.v(tag, ...)\u003c/code\u003e call with \u003ccode\u003eLog.isLoggable(tag)\u003c/code\u003e, the tag passed to both calls should be the same. Similarly, the level passed in to \u003ccode\u003eLog.isLoggable\u003c/code\u003e should typically match the type of \u003ccode\u003eLog\u003c/code\u003e call, e.g. if checking level \u003ccode\u003eLog.DEBUG\u003c/code\u003e, the corresponding \u003ccode\u003eLog\u003c/code\u003e call should be \u003ccode\u003eLog.d\u003c/code\u003e, not \u003ccode\u003eLog.i\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: LogTagMismatch\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInvalidUsesTagAttribute",
          "displayName": "Invalid name attribute for uses element",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid \u003ccode\u003ename\u003c/code\u003e attribute for \u003ccode\u003euses\u003c/code\u003e element\u003cbr\u003e\u003cbr\u003eThe \u0026lt;uses\u003e element in \u003ccode\u003e\u0026lt;automotiveApp\u003e\u003c/code\u003e should contain a valid value for the \u003ccode\u003ename\u003c/code\u003e attribute. Valid values are \u003ccode\u003emedia\u003c/code\u003e, \u003ccode\u003enotification\u003c/code\u003e, or \u003ccode\u003esms\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: InvalidUsesTagAttribute\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/auto/start/index.html#auto-metadata\"\u003ehttps://developer.android.com/training/auto/start/index.html#auto-metadata\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnsupportedChromeOsCameraSystemFeature",
          "displayName": "Looking for Rear Camera only feature",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eLooking for Rear Camera only feature\u003cbr\u003e\u003cbr\u003eYou should look for the \u003ccode\u003eFEATURE_CAMERA_ANY\u003c/code\u003e features to include all possible cameras that may be on the device. Looking for \u003ccode\u003eFEATURE_CAMERA\u003c/code\u003e only looks for a rear facing camera, which certain tablets or Chrome OS devices don\u0027t have, as well as newer device configurations and modes may place the device in a state where the rear camera is not available. To fix the issue, look for \u003ccode\u003eFEATURE_CAMERA_ANY\u003c/code\u003e instead.\u003cbr\u003e\u003cbr\u003eIssue id: UnsupportedChromeOsCameraSystemFeature\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWrongConstant",
          "displayName": "Incorrect constant",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncorrect constant\u003cbr\u003e\u003cbr\u003eEnsures that when parameter in a method only allows a specific set of constants, calls obey those rules.\u003cbr\u003e\u003cbr\u003eIssue id: WrongConstant\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAppCompatMethod",
          "displayName": "Using Wrong AppCompat Method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing Wrong AppCompat Method\u003cbr\u003e\u003cbr\u003eWhen using the appcompat library, there are some methods you should be calling instead of the normal ones; for example, \u003ccode\u003egetSupportActionBar()\u003c/code\u003e instead of \u003ccode\u003egetActionBar()\u003c/code\u003e. This lint check looks for calls to the wrong method.\u003cbr\u003e\u003cbr\u003eIssue id: AppCompatMethod\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/topic/libraries/support-library/\"\u003ehttps://developer.android.com/topic/libraries/support-library/\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintBrokenIterator",
          "displayName": "Broken Iterator",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eBroken Iterator\u003cbr\u003e\u003cbr\u003e\u003cb\u003eFor LinkedHashMap:\u003c/b\u003e\u003cbr/\u003e\n\u003cbr/\u003e\nThe spliterators returned by \u003ccode\u003eLinkedHashMap\u003c/code\u003e in Android Nougat (API levels 24 and 25) use the wrong order (inconsistent with the iterators, which use the correct order), despite reporting \u003ccode\u003eSpliterator.ORDERED\u003c/code\u003e. You may use the following code fragments to obtain a correctly ordered \u003ccode\u003eSpliterator\u003c/code\u003e on API level 24 and 25:\u003cbr/\u003e\n\u003cbr/\u003e\nFor a Collection view \u003ccode\u003ec \u003d lhm.entrySet()\u003c/code\u003e, \u003ccode\u003ec \u003d lhm.keySet()\u003c/code\u003e or \u003ccode\u003ec \u003d lhm.values()\u003c/code\u003e, use \u003ccode\u003ejava.util.Spliterators.spliterator(c, c.spliterator().characteristics())\u003c/code\u003e instead of \u003ccode\u003ec.spliterator()\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nInstead of \u003ccode\u003ec.stream()\u003c/code\u003e or \u003ccode\u003ec.parallelStream()\u003c/code\u003e, use \u003ccode\u003ejava.util.stream.StreamSupport.stream(spliterator, false)\u003c/code\u003e to construct a (nonparallel) Stream from such a \u003ccode\u003eSpliterator\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cb\u003eFor Vector:\u003c/b\u003e\u003cbr/\u003e\n\u003cbr/\u003e\nThe \u003ccode\u003elistIterator()\u003c/code\u003e returned for a \u003ccode\u003eVector\u003c/code\u003e has a broken \u003ccode\u003eadd()\u003c/code\u003e implementation on Android N (API level 24). Consider switching to \u003ccode\u003eArrayList\u003c/code\u003e and if necessary adding synchronization.\u003cbr\u003e\u003cbr\u003eIssue id: BrokenIterator\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/java/util/LinkedHashMap\"\u003ehttps://developer.android.com/reference/java/util/LinkedHashMap\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintOldTargetApi",
          "displayName": "Target SDK attribute is not targeting latest version",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eTarget SDK attribute is not targeting latest version\u003cbr\u003e\u003cbr\u003eWhen your application runs on a version of Android that is more recent than your \u003ccode\u003etargetSdkVersion\u003c/code\u003e specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the \u003ccode\u003etargetSdkVersion\u003c/code\u003e is less than 14, your app may get an option button in the UI.\u003cbr/\u003e\n\u003cbr/\u003e\nTo fix this issue, set the \u003ccode\u003etargetSdkVersion\u003c/code\u003e to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: \u003ca href\u003d\"https://developer.android.com/reference/android/os/Build.VERSION_CODES.html\"\u003ehttps://developer.android.com/reference/android/os/Build.VERSION_CODES.html\u003c/a\u003e as well as follow this guide:\u003cbr/\u003e\n\u003ca href\u003d\"https://developer.android.com/distribute/best-practices/develop/target-sdk.html\"\u003ehttps://developer.android.com/distribute/best-practices/develop/target-sdk.html\u003c/a\u003e\u003cbr\u003e\u003cbr\u003eIssue id: OldTargetApi\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDiscouragedApi",
          "displayName": "Using discouraged APIs",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing discouraged APIs\u003cbr\u003e\u003cbr\u003eDiscouraged APIs are allowed and are not deprecated, but they may be unfit for common use (e.g. due to slow performance or subtle behavior).\u003cbr\u003e\u003cbr\u003eIssue id: DiscouragedApi\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSQLiteString",
          "displayName": "Using STRING instead of TEXT",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing STRING instead of TEXT\u003cbr\u003e\u003cbr\u003eIn SQLite, any column can store any data type; the declared type for a column is more of a hint as to what the data should be cast to when stored.\u003cbr/\u003e\n\u003cbr/\u003e\nThere are many ways to store a string. \u003ccode\u003eTEXT\u003c/code\u003e, \u003ccode\u003eVARCHAR\u003c/code\u003e, \u003ccode\u003eCHARACTER\u003c/code\u003e and \u003ccode\u003eCLOB\u003c/code\u003e are string types, \u003cb\u003ebut `STRING` is not\u003c/b\u003e. Columns defined as STRING are actually numeric.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you try to store a value in a numeric column, SQLite will try to cast it to a float or an integer before storing. If it can\u0027t, it will just store it as a string.\u003cbr/\u003e\n\u003cbr/\u003e\nThis can lead to some subtle bugs. For example, when SQLite encounters a string like \u003ccode\u003e1234567e1234\u003c/code\u003e, it will parse it as a float, but the result will be out of range for floating point numbers, so \u003ccode\u003eInf\u003c/code\u003e will be stored! Similarly, strings that look like integers will lose leading zeroes.\u003cbr/\u003e\n\u003cbr/\u003e\nTo fix this, you can change your schema to use a \u003ccode\u003eTEXT\u003c/code\u003e type instead.\u003cbr\u003e\u003cbr\u003eIssue id: SQLiteString\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://www.sqlite.org/datatype3.html\"\u003ehttps://www.sqlite.org/datatype3.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGradleDeprecatedConfiguration",
          "displayName": "Deprecated Gradle Configuration",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDeprecated Gradle Configuration\u003cbr\u003e\u003cbr\u003eSome Gradle configurations have been deprecated since Android Gradle Plugin 3.0.0 and will be removed in a future version of the Android Gradle Plugin.\u003cbr\u003e\u003cbr\u003eIssue id: GradleDeprecatedConfiguration\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://d.android.com/r/tools/update-dependency-configurations\"\u003ehttps://d.android.com/r/tools/update-dependency-configurations\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDeprecated",
          "displayName": "Using deprecated resources",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing deprecated resources\u003cbr\u003e\u003cbr\u003eDeprecated views, attributes and so on are deprecated because there is a better way to do something. Do it that new way. You\u0027ve been warned.\u003cbr\u003e\u003cbr\u003eIssue id: Deprecated\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMotionLayoutInvalidSceneFileReference",
          "displayName": "layoutDescription must specify a scene file",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003elayoutDescription must specify a scene file\u003cbr\u003e\u003cbr\u003eA motion scene file specifies the animations used in a \u003ccode\u003eMotionLayout\u003c/code\u003e. The \u003ccode\u003elayoutDescription\u003c/code\u003e is required to specify a valid motion scene file.\u003cbr\u003e\u003cbr\u003eIssue id: MotionLayoutInvalidSceneFileReference\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintOnClick",
          "displayName": "onClick method does not exist",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003eonClick\u003c/code\u003e method does not exist\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003eonClick\u003c/code\u003e attribute value should be the name of a method in this View\u0027s context to invoke when the view is clicked. This name must correspond to a public method that takes exactly one parameter of type \u003ccode\u003eView\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nMust be a string value, using \u0027\\;\u0027 to escape characters such as \u0027\\n\u0027 or \u0027\\uxxxx\u0027 for a unicode character.\u003cbr\u003e\u003cbr\u003eIssue id: OnClick\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAppLinksAutoVerify",
          "displayName": "App Links Auto Verification Failure",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eApp Links Auto Verification Failure\u003cbr\u003e\u003cbr\u003eEnsures that app links are correctly set and associated with website.\u003cbr\u003e\u003cbr\u003eIssue id: AppLinksAutoVerify\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://g.co/appindexing/applinks\"\u003ehttps://g.co/appindexing/applinks\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGradleIdeError",
          "displayName": "Gradle IDE Support Issues",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eGradle IDE Support Issues\u003cbr\u003e\u003cbr\u003eGradle is highly flexible, and there are things you can do in Gradle files which can make it hard or impossible for IDEs to properly handle the project. This lint check looks for constructs that potentially break IDE support.\u003cbr\u003e\u003cbr\u003eIssue id: GradleIdeError\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintValidFragment",
          "displayName": "Fragment not instantiatable",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eFragment not instantiatable\u003cbr\u003e\u003cbr\u003eFrom the Fragment documentation:\u003cbr/\u003e\n\u003cb\u003eEvery\u003c/b\u003e fragment must have an empty constructor, so it can be instantiated when restoring its activity\u0027s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with \u003ccode\u003esetArguments(Bundle)\u003c/code\u003e and later retrieved by the Fragment with \u003ccode\u003egetArguments()\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nNote that this is no longer true when you are using \u003ccode\u003eandroidx.fragment.app.Fragment\u003c/code\u003e; with the \u003ccode\u003eFragmentFactory\u003c/code\u003e you can supply any arguments you want (as of version androidx version 1.1).\u003cbr\u003e\u003cbr\u003eIssue id: ValidFragment\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/android/app/Fragment.html#Fragment()\"\u003ehttps://developer.android.com/reference/android/app/Fragment.html#Fragment()\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDuplicateIncludedIds",
          "displayName": "Duplicate ids across layouts combined with include tags",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDuplicate ids across layouts combined with include tags\u003cbr\u003e\u003cbr\u003eIt\u0027s okay for two independent layouts to use the same ids. However, if layouts are combined with include tags, then the id\u0027s need to be unique within any chain of included layouts, or \u003ccode\u003eActivity#findViewById()\u003c/code\u003e can return an unexpected view.\u003cbr\u003e\u003cbr\u003eIssue id: DuplicateIncludedIds\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintKotlinNullnessAnnotation",
          "displayName": "Kotlin nullability annotation",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eKotlin nullability annotation\u003cbr\u003e\u003cbr\u003eIn Kotlin, nullness is part of the type system; \u003ccode\u003es: String\u003c/code\u003e is \u003cb\u003enever\u003c/b\u003e null and \u003ccode\u003es: String?\u003c/code\u003e is sometimes null, whether or not you add in additional annotations stating \u003ccode\u003e@NonNull\u003c/code\u003e or \u003ccode\u003e@Nullable\u003c/code\u003e. These are likely copy/paste mistakes, and are misleading.\u003cbr\u003e\u003cbr\u003eIssue id: KotlinNullnessAnnotation\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSuspicious0dp",
          "displayName": "Suspicious 0dp dimension",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eSuspicious 0dp dimension\u003cbr\u003e\u003cbr\u003eUsing 0dp as the width in a horizontal \u003ccode\u003eLinearLayout\u003c/code\u003e with weights is a useful trick to ensure that only the weights (and not the intrinsic sizes) are used when sizing the children.\u003cbr/\u003e\n\u003cbr/\u003e\nHowever, if you use 0dp for the opposite dimension, the view will be invisible. This can happen if you change the orientation of a layout without also flipping the \u003ccode\u003e0dp\u003c/code\u003e dimension in all the children.\u003cbr\u003e\u003cbr\u003eIssue id: Suspicious0dp\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintResAuto",
          "displayName": "Hardcoded Package in Namespace",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eHardcoded Package in Namespace\u003cbr\u003e\u003cbr\u003eIn Gradle projects, the actual package used in the final APK can vary; for example,you can add a \u003ccode\u003e.debug\u003c/code\u003e package suffix in one version and not the other. Therefore, you should \u003cb\u003enot\u003c/b\u003e hardcode the application package in the resource; instead, use the special namespace \u003ccode\u003ehttp://schemas.android.com/apk/res-auto\u003c/code\u003e which will cause the tools to figure out the right namespace for the resource regardless of the actual package used during the build.\u003cbr\u003e\u003cbr\u003eIssue id: ResAuto\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintOrientation",
          "displayName": "Missing explicit orientation",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing explicit orientation\u003cbr\u003e\u003cbr\u003eThe default orientation of a \u003ccode\u003eLinearLayout\u003c/code\u003e is horizontal. It\u0027s pretty easy to believe that the layout is vertical, add multiple children to it, and wonder why only the first child is visible (when the subsequent children are off screen to the right). This lint rule helps pinpoint this issue by warning whenever a \u003ccode\u003eLinearLayout\u003c/code\u003e is used with an implicit orientation and multiple children.\u003cbr/\u003e\n\u003cbr/\u003e\nIt also checks for empty LinearLayouts without an \u003ccode\u003eorientation\u003c/code\u003e attribute that also defines an \u003ccode\u003eid\u003c/code\u003e attribute. This catches the scenarios where children will be added to the \u003ccode\u003eLinearLayout\u003c/code\u003e dynamically. \u003cbr\u003e\u003cbr\u003eIssue id: Orientation\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDuplicateDefinition",
          "displayName": "Duplicate definitions of resources",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDuplicate definitions of resources\u003cbr\u003e\u003cbr\u003eYou can define a resource multiple times in different resource folders; that\u0027s how string translations are done, for example. However, defining the same resource more than once in the same resource folder is likely an error, for example attempting to add a new resource without realizing that the name is already used, and so on.\u003cbr\u003e\u003cbr\u003eIssue id: DuplicateDefinition\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInternalInsetResource",
          "displayName": "Using internal inset dimension resource",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing internal inset dimension resource\u003cbr\u003e\u003cbr\u003eThe internal inset dimension resources are not a supported way to retrieve the relevant insets for your application. The insets are dynamic values that can change while your app is visible, and your app\u0027s window may not intersect with the system UI. To get the relevant value for your app and listen to updates, use \u003ccode\u003eandroidx.core.view.WindowInsetsCompat\u003c/code\u003e and related APIs.\u003cbr\u003e\u003cbr\u003eIssue id: InternalInsetResource\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintXmlEscapeNeeded",
          "displayName": "Missing XML Escape",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing XML Escape\u003cbr\u003e\u003cbr\u003eWhen a string contains characters that have special usage in XML, you must escape the characters.\u003cbr\u003e\u003cbr\u003eIssue id: XmlEscapeNeeded\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnusedQuantity",
          "displayName": "Unused quantity translations",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnused quantity translations\u003cbr\u003e\u003cbr\u003eAndroid defines a number of different quantity strings, such as \u003ccode\u003ezero\u003c/code\u003e, \u003ccode\u003eone\u003c/code\u003e, \u003ccode\u003efew\u003c/code\u003e and \u003ccode\u003emany\u003c/code\u003e. However, many languages do not distinguish grammatically between all these different quantities.\u003cbr/\u003e\n\u003cbr/\u003e\nThis lint check looks at the quantity strings defined for each translation and flags any quantity strings that are unused (because the language does not make that quantity distinction, and Android will therefore not look it up).\u003cbr/\u003e\n\u003cbr/\u003e\nFor example, in Chinese, only the \u003ccode\u003eother\u003c/code\u003e quantity is used, so even if you provide translations for \u003ccode\u003ezero\u003c/code\u003e and \u003ccode\u003eone\u003c/code\u003e, these strings will \u003cb\u003enot\u003c/b\u003e be returned when \u003ccode\u003egetQuantityString()\u003c/code\u003e is called, even with \u003ccode\u003e0\u003c/code\u003e or \u003ccode\u003e1\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: UnusedQuantity\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/resources/string-resource.html#Plurals\"\u003ehttps://developer.android.com/guide/topics/resources/string-resource.html#Plurals\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRestrictedApi",
          "displayName": "Restricted API",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eRestricted API\u003cbr\u003e\u003cbr\u003eThis API has been flagged with a restriction that has not been met.\u003cbr/\u003e\n\u003cbr/\u003e\nExamples of API restrictions:\u003cbr/\u003e\n* Method can only be invoked by a subclass\u003cbr/\u003e\n* Method can only be accessed from within the same library (defined by the Gradle library group id)\u003cbr/\u003e\n* Method can only be accessed from tests.\u003cbr/\u003e\n\u003cbr/\u003e\nYou can add your own API restrictions with the \u003ccode\u003e@RestrictTo\u003c/code\u003e annotation.\u003cbr\u003e\u003cbr\u003eIssue id: RestrictedApi\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTranslucentOrientation",
          "displayName": "Mixing screenOrientation and translucency",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMixing screenOrientation and translucency\u003cbr\u003e\u003cbr\u003eSpecifying a fixed screen orientation with a translucent theme isn\u0027t supported on apps with \u003ccode\u003etargetSdkVersion\u003c/code\u003e O or greater since there can be an another activity visible behind your activity with a conflicting request.\u003cbr/\u003e\n\u003cbr/\u003e\nFor example, your activity requests landscape and the visible activity behind your translucent activity request portrait. In this case the system can only honor one of the requests and currently prefers to honor the request from non-translucent activities since there is nothing visible behind them.\u003cbr/\u003e\n\u003cbr/\u003e\nDevices running platform version O or greater will throw an exception in your app if this state is detected.\u003cbr\u003e\u003cbr\u003eIssue id: TranslucentOrientation\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMultipleUsesSdk",
          "displayName": "Multiple \u003cuses-sdk\u003e elements in the manifest",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMultiple \u003ccode\u003e\u0026lt;uses-sdk\u003e\u003c/code\u003e elements in the manifest\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e\u0026lt;uses-sdk\u003e\u003c/code\u003e element should appear just once; the tools will \u003cb\u003enot\u003c/b\u003e merge the contents of all the elements so if you split up the attributes across multiple elements, only one of them will take effect. To fix this, just merge all the attributes from the various elements into a single \u0026lt;uses-sdk\u003e element.\u003cbr\u003e\u003cbr\u003eIssue id: MultipleUsesSdk\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/manifest/uses-sdk-element.html\"\u003ehttps://developer.android.com/guide/topics/manifest/uses-sdk-element.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintServiceCast",
          "displayName": "Wrong system service casts",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWrong system service casts\u003cbr\u003e\u003cbr\u003eWhen you call \u003ccode\u003eContext#getSystemService()\u003c/code\u003e, the result is typically cast to a specific interface. This lint check ensures that the cast is compatible with the expected type of the return value.\u003cbr\u003e\u003cbr\u003eIssue id: ServiceCast\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWatchFaceForAndroidX",
          "displayName": "AndroidX watch faces must use action WATCH_FACE_EDITOR",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAndroidX watch faces must use action \u003ccode\u003eWATCH_FACE_EDITOR\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eIf the package depends on \u003ccode\u003eandroidx.wear:wear-watchface\u003c/code\u003e, and an AndroidX watch face declares the \u003ccode\u003ewearableConfigurationAction\u003c/code\u003e metadata, its value should be \u003ccode\u003eandroidx.wear.watchface.editor.action.WATCH_FACE_EDITOR\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: WatchFaceForAndroidX\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/wearables/watch-faces/configuration\"\u003ehttps://developer.android.com/training/wearables/watch-faces/configuration\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingClass",
          "displayName": "Missing registered class",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing registered class\u003cbr\u003e\u003cbr\u003eIf a class is referenced in the manifest or in a layout file, it must also exist in the project (or in one of the libraries included by the project. This check helps uncover typos in registration names, or attempts to rename or move classes without updating the XML references properly.\u003cbr\u003e\u003cbr\u003eIssue id: MissingClass\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/manifest/manifest-intro.html\"\u003ehttps://developer.android.com/guide/topics/manifest/manifest-intro.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintCoarseFineLocation",
          "displayName": "android.permission.ACCESS_COARSE_LOCATION is also required",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCannot use \u003ccode\u003eACCESS_FINE_LOCATION\u003c/code\u003e without \u003ccode\u003eACCESS_COARSE_LOCATION\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eIf your app requires access to FINE location, on Android 12 and higher you must now request both FINE and COARSE. Users will have the option to grant only COARSE location. Ensure your app can work with just COARSE location.\u003cbr\u003e\u003cbr\u003eIssue id: CoarseFineLocation\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingDefaultResource",
          "displayName": "Missing Default",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing Default\u003cbr\u003e\u003cbr\u003eIf a resource is only defined in folders with qualifiers like \u003ccode\u003e-land\u003c/code\u003e or \u003ccode\u003e-en\u003c/code\u003e, and there is no default declaration in the base folder (\u003ccode\u003elayout\u003c/code\u003e or \u003ccode\u003evalues\u003c/code\u003e etc), then the app will crash if that resource is accessed on a device where the device is in a configuration missing the given qualifier.\u003cbr/\u003e\n\u003cbr/\u003e\nAs a special case, drawables do not have to be specified in the base folder; if there is a match in a density folder (such as \u003ccode\u003edrawable-mdpi\u003c/code\u003e) that image will be used and scaled. Note however that if you  only specify a drawable in a folder like \u003ccode\u003edrawable-en-hdpi\u003c/code\u003e, the app will crash in non-English locales.\u003cbr/\u003e\n\u003cbr/\u003e\nThere may be scenarios where you have a resource, such as a \u003ccode\u003e-fr\u003c/code\u003e drawable, which is only referenced from some other resource with the same qualifiers (such as a \u003ccode\u003e-fr\u003c/code\u003e style), which itself has safe fallbacks. However, this still makes it possible for somebody to accidentally reference the drawable and crash, so it is safer to create a default fallback in the base folder. Alternatively, you can suppress the issue by adding \u003ccode\u003etools:ignore\u003d\"MissingDefaultResource\"\u003c/code\u003e on the element.\u003cbr/\u003e\n\u003cbr/\u003e\n(This scenario frequently happens with string translations, where you might delete code and the corresponding resources, but forget to delete a translation. There is a dedicated issue id for that scenario, with the id \u003ccode\u003eExtraTranslation\u003c/code\u003e.)\u003cbr\u003e\u003cbr\u003eIssue id: MissingDefaultResource\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMergeMarker",
          "displayName": "Code contains merge marker",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCode contains merge marker\u003cbr\u003e\u003cbr\u003eMany version control systems leave unmerged files with markers such as \u0026lt;\u0026lt;\u0026lt; in the source code. This check looks for these markers, which are sometimes accidentally left in, particularly in resource files where they don\u0027t break compilation.\u003cbr\u003e\u003cbr\u003eIssue id: MergeMarker\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInvalidNavigation",
          "displayName": "No start destination specified",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNo start destination specified\u003cbr\u003e\u003cbr\u003eAll \u003ccode\u003e\u0026lt;navigation\u003e\u003c/code\u003e elements must have a start destination specified, and it must be a direct child of that \u003ccode\u003e\u0026lt;navigation\u003e\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: InvalidNavigation\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSlices",
          "displayName": "Slices",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eSlices\u003cbr\u003e\u003cbr\u003eThis check analyzes usages of the Slices API and offers suggestions based on best practices.\u003cbr\u003e\u003cbr\u003eIssue id: Slices\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInvalidResourceFolder",
          "displayName": "Invalid Resource Folder",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid Resource Folder\u003cbr\u003e\u003cbr\u003eThis lint check looks for a folder name that is not a valid resource folder name; these will be ignored and not packaged by the Android Gradle build plugin.\u003cbr/\u003e\n\u003cbr/\u003e\nNote that the order of resources is very important; for example, you can\u0027t specify a language before a network code.\u003cbr/\u003e\n\u003cbr/\u003e\nSimilarly, note that to use 3 letter region codes, you have to use a special BCP 47 syntax: the prefix b+ followed by the BCP 47 language tag but with \u003ccode\u003e+\u003c/code\u003e as the individual separators instead of \u003ccode\u003e-\u003c/code\u003e. Therefore, for the BCP 47 language tag \u003ccode\u003enl-ABW\u003c/code\u003e you have to use \u003ccode\u003eb+nl+ABW\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: InvalidResourceFolder\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/resources/providing-resources.html\"\u003ehttps://developer.android.com/guide/topics/resources/providing-resources.html\u003c/a\u003e\u003cbr\u003e\u003ca href\u003d\"https://tools.ietf.org/html/bcp47\"\u003ehttps://tools.ietf.org/html/bcp47\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDataBindingWithoutKapt",
          "displayName": "Data Binding without Annotation Processing",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eData Binding without Annotation Processing\u003cbr\u003e\u003cbr\u003eApps that use Kotlin and data binding should also apply the kotlin-kapt plugin.\u003cbr\u003e\u003cbr\u003eIssue id: DataBindingWithoutKapt\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://kotlinlang.org/docs/reference/kapt.html\"\u003ehttps://kotlinlang.org/docs/reference/kapt.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintStringFormatMatches",
          "displayName": "String.format string doesn\u0027t match the XML format string",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003eString.format\u003c/code\u003e string doesn\u0027t match the XML format string\u003cbr\u003e\u003cbr\u003eThis lint check ensures the following:\u003cbr/\u003e\n(1) If there are multiple translations of the format string, then all translations use the same type for the same numbered arguments\u003cbr/\u003e\n(2) The usage of the format string in Java is consistent with the format string, meaning that the parameter types passed to String.format matches those in the format string.\u003cbr\u003e\u003cbr\u003eIssue id: StringFormatMatches\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLocalSuppress",
          "displayName": "@SuppressLint on invalid element",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e@SuppressLint on invalid element\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e@SuppressAnnotation\u003c/code\u003e is used to suppress Lint warnings in Java files. However, while many lint checks analyzes the Java source code, where they can find annotations on (for example) local variables, some checks are analyzing the \u003ccode\u003e.class\u003c/code\u003e files. And in class files, annotations only appear on classes, fields and methods. Annotations placed on local variables disappear. If you attempt to suppress a lint error for a class-file based lint check, the suppress annotation not work. You must move the annotation out to the surrounding method.\u003cbr\u003e\u003cbr\u003eIssue id: LocalSuppress\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingId",
          "displayName": "Fragments should specify an id or tag",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eFragments should specify an \u003ccode\u003eid\u003c/code\u003e or \u003ccode\u003etag\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eIf you do not specify an \u003ccode\u003eandroid:id\u003c/code\u003e or an \u003ccode\u003eandroid:tag\u003c/code\u003e attribute on a \u003ccode\u003e\u0026lt;fragment\u003e\u003c/code\u003e element, then if the activity is restarted (for example for an orientation rotation) you may lose state. From the fragment documentation:\u003cbr/\u003e\n\u003cbr/\u003e\n\"Each fragment requires a unique identifier that the system can use to restore the fragment if the activity is restarted (and which you can use to capture the fragment to perform transactions, such as remove it).\u003cbr/\u003e\n\u003cbr/\u003e\n* Supply the \u003ccode\u003eandroid:id\u003c/code\u003e attribute with a unique ID.\u003cbr/\u003e\n* Supply the \u003ccode\u003eandroid:tag\u003c/code\u003e attribute with a unique string.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you provide neither of the previous two, the system uses the ID of the container view.\u003cbr\u003e\u003cbr\u003eIssue id: MissingId\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/components/fragments.html\"\u003ehttps://developer.android.com/guide/components/fragments.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNewerVersionAvailable",
          "displayName": "Newer Library Versions Available",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eNewer Library Versions Available\u003cbr\u003e\u003cbr\u003eThis detector checks with a central repository to see if there are newer versions available for the dependencies used by this project. This is similar to the \u003ccode\u003eGradleDependency\u003c/code\u003e check, which checks for newer versions available in the Android SDK tools and libraries, but this works with any MavenCentral dependency, and connects to the library every time, which makes it more flexible but also \u003cb\u003emuch\u003c/b\u003e slower.\u003cbr\u003e\u003cbr\u003eIssue id: NewerVersionAvailable\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWifiManagerPotentialLeak",
          "displayName": "WifiManager Potential Leak",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWifiManager Potential Leak\u003cbr\u003e\u003cbr\u003eOn versions prior to Android N (24), initializing the \u003ccode\u003eWifiManager\u003c/code\u003e via \u003ccode\u003eContext#getSystemService\u003c/code\u003e can cause a memory leak if the context is not the application context.\u003cbr/\u003e\n\u003cbr/\u003e\nIn many cases, it\u0027s not obvious from the code where the \u003ccode\u003eContext\u003c/code\u003e is coming from (e.g. it might be a parameter to a method, or a field initialized from various method calls). It\u0027s possible that the context being passed in is the application context, but to be on the safe side, you should consider changing \u003ccode\u003econtext.getSystemService(...)\u003c/code\u003e to \u003ccode\u003econtext.getApplicationContext().getSystemService(...)\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: WifiManagerPotentialLeak\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingTranslation",
          "displayName": "Incomplete translation",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncomplete translation\u003cbr\u003e\u003cbr\u003eIf an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.\u003cbr/\u003e\n\u003cbr/\u003e\nIf the string should \u003cb\u003enot\u003c/b\u003e be translated, you can add the attribute \u003ccode\u003etranslatable\u003d\"false\"\u003c/code\u003e on the \u003ccode\u003e\u0026lt;string\u003e\u003c/code\u003e element, or you can define all your non-translatable strings in a resource file called \u003ccode\u003edonottranslate.xml\u003c/code\u003e. Or, you can ignore the issue with a \u003ccode\u003etools:ignore\u003d\"MissingTranslation\"\u003c/code\u003e attribute.\u003cbr/\u003e\n\u003cbr/\u003e\nYou can tell lint (and other tools) which language is the default language in your \u003ccode\u003eres/values/\u003c/code\u003e folder by specifying \u003ccode\u003etools:locale\u003d\"languageCode\"\u003c/code\u003e for the root \u003ccode\u003e\u0026lt;resources\u003e\u003c/code\u003e element in your resource file. (The \u003ccode\u003etools\u003c/code\u003e prefix refers to the namespace declaration \u003ccode\u003ehttp://schemas.android.com/tools\u003c/code\u003e.)\u003cbr\u003e\u003cbr\u003eIssue id: MissingTranslation\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInconsistentLayout",
          "displayName": "Inconsistent Layouts",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInconsistent Layouts\u003cbr\u003e\u003cbr\u003eThis check ensures that a layout resource which is defined in multiple resource folders, specifies the same set of widgets.\u003cbr/\u003e\n\u003cbr/\u003e\nThis finds cases where you have accidentally forgotten to add a widget to all variations of the layout, which could result in a runtime crash for some resource configurations when a \u003ccode\u003efindViewById()\u003c/code\u003e fails.\u003cbr/\u003e\n\u003cbr/\u003e\nThere \u003cb\u003eare\u003c/b\u003e cases where this is intentional. For example, you may have a dedicated large tablet layout which adds some extra widgets that are not present in the phone version of the layout. As long as the code accessing the layout resource is careful to handle this properly, it is valid. In that case, you can suppress this lint check for the given extra or missing views, or the whole layout\u003cbr\u003e\u003cbr\u003eIssue id: InconsistentLayout\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGradlePluginVersion",
          "displayName": "Incompatible Android Gradle Plugin",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncompatible Android Gradle Plugin\u003cbr\u003e\u003cbr\u003eNot all versions of the Android Gradle plugin are compatible with all versions of the SDK. If you update your tools, or if you are trying to open a project that was built with an old version of the tools, you may need to update your plugin version number.\u003cbr\u003e\u003cbr\u003eIssue id: GradlePluginVersion\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAppCompatResource",
          "displayName": "Menu namespace",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMenu namespace\u003cbr\u003e\u003cbr\u003eWhen using the appcompat library, menu resources should refer to the \u003ccode\u003eshowAsAction\u003c/code\u003e (or \u003ccode\u003eactionViewClass\u003c/code\u003e, or \u003ccode\u003eactionProviderClass\u003c/code\u003e) in the \u003ccode\u003eapp:\u003c/code\u003e namespace, not the \u003ccode\u003eandroid:\u003c/code\u003e namespace.\u003cbr/\u003e\n\u003cbr/\u003e\nSimilarly, when \u003cb\u003enot\u003c/b\u003e using the appcompat library, you should be using the \u003ccode\u003eandroid:showAsAction\u003c/code\u003e (or \u003ccode\u003eactionViewClass\u003c/code\u003e, or \u003ccode\u003eactionProviderClass\u003c/code\u003e) attribute.\u003cbr\u003e\u003cbr\u003eIssue id: AppCompatResource\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingOnPlayFromSearch",
          "displayName": "Missing onPlayFromSearch.",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing \u003ccode\u003eonPlayFromSearch\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eTo support voice searches on Android Auto, in addition to adding an \u003ccode\u003eintent-filter\u003c/code\u003e for the action \u003ccode\u003eonPlayFromSearch\u003c/code\u003e, you also need to override and implement \u003ccode\u003eonPlayFromSearch(String query, Bundle bundle)\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eIssue id: MissingOnPlayFromSearch\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/auto/audio/index.html#support_voice\"\u003ehttps://developer.android.com/training/auto/audio/index.html#support_voice\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDeprecatedSinceApi",
          "displayName": "Using a method deprecated in earlier SDK",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing a method deprecated in earlier SDK\u003cbr\u003e\u003cbr\u003eSome backport methods are only necessary until a specific version of Android. These have been annotated with \u003ccode\u003e@DeprecatedSinceApi\u003c/code\u003e, specifying the relevant API level and replacement suggestions. Calling these methods when the \u003ccode\u003eminSdkVersion\u003c/code\u003e is already at the deprecated API level or above is unnecessary.\u003cbr\u003e\u003cbr\u003eIssue id: DeprecatedSinceApi\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNotificationPermission",
          "displayName": "Notifications Without Permission",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNotifications Without Permission\u003cbr\u003e\u003cbr\u003eWhen targeting Android 13 and higher, posting permissions requires holding the runtime permission \u003ccode\u003eandroid.permission.POST_NOTIFICATIONS\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: NotificationPermission\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGradleDeprecated",
          "displayName": "Deprecated Gradle Construct",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDeprecated Gradle Construct\u003cbr\u003e\u003cbr\u003eThis detector looks for deprecated Gradle constructs which currently work but will likely stop working in a future update.\u003cbr\u003e\u003cbr\u003eIssue id: GradleDeprecated\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAaptCrash",
          "displayName": "Potential AAPT crash",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003ePotential AAPT crash\u003cbr\u003e\u003cbr\u003eDefining a style which sets \u003ccode\u003eandroid:id\u003c/code\u003e to a dynamically generated id can cause many versions of \u003ccode\u003eaapt\u003c/code\u003e, the resource packaging tool, to crash. To work around this, declare the id explicitly with \u003ccode\u003e\u0026lt;item type\u003d\"id\" name\u003d\"...\" /\u003e\u003c/code\u003e instead.\u003cbr\u003e\u003cbr\u003eIssue id: AaptCrash\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintScrollViewCount",
          "displayName": "ScrollView can have only one child",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\u003ccode\u003eScrollView\u003c/code\u003e can have only one child\u003cbr\u003e\u003cbr\u003eA \u003ccode\u003eScrollView\u003c/code\u003e can only have one child widget. If you want more children, wrap them in a container layout.\u003cbr\u003e\u003cbr\u003eIssue id: ScrollViewCount\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPrivateResource",
          "displayName": "Using private resources",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing private resources\u003cbr\u003e\u003cbr\u003ePrivate resources should not be referenced; the may not be present everywhere, and even where they are they may disappear without notice.\u003cbr/\u003e\n\u003cbr/\u003e\nTo fix this, copy the resource into your own project instead.\u003cbr\u003e\u003cbr\u003eIssue id: PrivateResource\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMotionSceneFileValidationError",
          "displayName": "Validation errors in MotionScene files",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eValidation errors in \u003ccode\u003eMotionScene\u003c/code\u003e files\u003cbr\u003e\u003cbr\u003eA motion scene file specifies the animations used in a \u003ccode\u003eMotionLayout\u003c/code\u003e. This check performs various serious correctness checks in a motion scene file.\u003cbr\u003e\u003cbr\u003eIssue id: MotionSceneFileValidationError\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInnerclassSeparator",
          "displayName": "Inner classes should use $ rather than .",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInner classes should use \u003ccode\u003e$\u003c/code\u003e rather than \u003ccode\u003e.\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eWhen you reference an inner class in a manifest file, you must use \u0027$\u0027 instead of \u0027.\u0027 as the separator character, i.e. Outer$Inner instead of Outer.Inner.\u003cbr/\u003e\n\u003cbr/\u003e\n(If you get this warning for a class which is not actually an inner class, it\u0027s because you are using uppercase characters in your package name, which is not conventional.)\u003cbr\u003e\u003cbr\u003eIssue id: InnerclassSeparator\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSupportAnnotationUsage",
          "displayName": "Incorrect support annotation usage",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncorrect support annotation usage\u003cbr\u003e\u003cbr\u003eThis lint check makes sure that the support annotations (such as \u003ccode\u003e@IntDef\u003c/code\u003e and \u003ccode\u003e@ColorInt\u003c/code\u003e) are used correctly. For example, it\u0027s an error to specify an \u003ccode\u003e@IntRange\u003c/code\u003e where the \u003ccode\u003efrom\u003c/code\u003e value is higher than the \u003ccode\u003eto\u003c/code\u003e value.\u003cbr\u003e\u003cbr\u003eIssue id: SupportAnnotationUsage\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPxUsage",
          "displayName": "Using \u0027px\u0027 dimension",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing \u0027px\u0027 dimension\u003cbr\u003e\u003cbr\u003eFor performance reasons and to keep the code simpler, the Android system uses pixels as the standard unit for expressing dimension or coordinate values. That means that the dimensions of a view are always expressed in the code using pixels, but always based on the current screen density. For instance, if \u003ccode\u003emyView.getWidth()\u003c/code\u003e returns 10, the view is 10 pixels wide on the current screen, but on a device with a higher density screen, the value returned might be 15. If you use pixel values in your application code to work with bitmaps that are not pre-scaled for the current screen density, you might need to scale the pixel values that you use in your code to match the un-scaled bitmap source.\u003cbr\u003e\u003cbr\u003eIssue id: PxUsage\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/practices/screens_support.html#screen-independence\"\u003ehttps://developer.android.com/guide/practices/screens_support.html#screen-independence\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintOverride",
          "displayName": "Method conflicts with new inherited method",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMethod conflicts with new inherited method\u003cbr\u003e\u003cbr\u003eSuppose you are building against Android API 8, and you\u0027ve subclassed Activity. In your subclass you add a new method called \u003ccode\u003eisDestroyed\u003c/code\u003e(). At some later point, a method of the same name and signature is added to Android. Your method will now override the Android method, and possibly break its contract. Your method is not calling \u003ccode\u003esuper.isDestroyed()\u003c/code\u003e, since your compilation target doesn\u0027t know about the method.\u003cbr/\u003e\n\u003cbr/\u003e\nThe above scenario is what this lint detector looks for. The above example is real, since \u003ccode\u003eisDestroyed()\u003c/code\u003e was added in API 17, but it will be true for \u003cb\u003eany\u003c/b\u003e method you have added to a subclass of an Android class where your build target is lower than the version the method was introduced in.\u003cbr/\u003e\n\u003cbr/\u003e\nTo fix this, either rename your method, or if you are really trying to augment the builtin method if available, switch to a higher build target where you can deliberately add \u003ccode\u003e@Override\u003c/code\u003e on your overriding method, and call \u003ccode\u003esuper\u003c/code\u003e if appropriate etc.\u003cbr\u003e\u003cbr\u003eIssue id: Override\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingVersion",
          "displayName": "Missing application name/version",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing application name/version\u003cbr\u003e\u003cbr\u003eYou should define the version information for your application.\u003cbr/\u003e\n\u003cbr/\u003e\n\u003ccode\u003eandroid:versionCode\u003c/code\u003e: An integer value that represents the version of the application code, relative to other versions.\u003cbr/\u003e\n\u003cbr/\u003e\n\u003ccode\u003eandroid:versionName\u003c/code\u003e: A string value that represents the release version of the application code, as it should be shown to users.\u003cbr\u003e\u003cbr\u003eIssue id: MissingVersion\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/studio/publish/versioning#appversioning\"\u003ehttps://developer.android.com/studio/publish/versioning#appversioning\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintTypos",
          "displayName": "Spelling error",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eSpelling error\u003cbr\u003e\u003cbr\u003eThis check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged.\u003cbr\u003e\u003cbr\u003eIssue id: Typos\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintEnqueueWork",
          "displayName": "WorkManager Enqueue",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWorkManager Enqueue\u003cbr\u003e\u003cbr\u003e\u003ccode\u003eWorkContinuations\u003c/code\u003e cannot be enqueued automatically.  You must call \u003ccode\u003eenqueue()\u003c/code\u003e on a \u003ccode\u003eWorkContinuation\u003c/code\u003e to have it and its parent continuations enqueued inside \u003ccode\u003eWorkManager\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: EnqueueWork\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDiffUtilEquals",
          "displayName": "Suspicious DiffUtil Equality",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eSuspicious DiffUtil Equality\u003cbr\u003e\u003cbr\u003e\u003ccode\u003eareContentsTheSame\u003c/code\u003e is used by \u003ccode\u003eDiffUtil\u003c/code\u003e to produce diffs. If the method is implemented incorrectly, such as using identity equals instead of equals, or calling equals on a class that has not implemented it, weird visual artifacts can occur.\u003cbr\u003e\u003cbr\u003eIssue id: DiffUtilEquals\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://issuetracker.google.com/116789824\"\u003ehttps://issuetracker.google.com/116789824\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDuplicatePlatformClasses",
          "displayName": "Duplicate Platform Classes",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDuplicate Platform Classes\u003cbr\u003e\u003cbr\u003eThere are a number of libraries that duplicate not just functionality of the Android platform but using the exact same class names as the ones provided in Android -- for example the apache http classes. This can lead to unexpected crashes.\u003cbr/\u003e\n\u003cbr/\u003e\nTo solve this, you need to either find a newer version of the library which no longer has this problem, or to repackage the library (and all of its dependencies) using something like the \u003ccode\u003ejarjar\u003c/code\u003e tool, or finally, rewriting the code to use different APIs (for example, for http code, consider using \u003ccode\u003eHttpUrlConnection\u003c/code\u003e or a library like \u003ccode\u003eokhttp\u003c/code\u003e).\u003cbr\u003e\u003cbr\u003eIssue id: DuplicatePlatformClasses\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSwitchIntDef",
          "displayName": "Missing @IntDef in Switch",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing @IntDef in Switch\u003cbr\u003e\u003cbr\u003eThis check warns if a \u003ccode\u003eswitch\u003c/code\u003e statement does not explicitly include all the values declared by the typedef \u003ccode\u003e@IntDef\u003c/code\u003e declaration.\u003cbr\u003e\u003cbr\u003eIssue id: SwitchIntDef\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingFirebaseInstanceTokenRefresh",
          "displayName": "Missing Firebase Messaging Callback",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing Firebase Messaging Callback\u003cbr\u003e\u003cbr\u003eApps that use Firebase Cloud Messaging should implement the \u003ccode\u003eFirebaseMessagingService#onNewToken()\u003c/code\u003e callback in order to observe token changes.\u003cbr\u003e\u003cbr\u003eIssue id: MissingFirebaseInstanceTokenRefresh\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://firebase.google.com/docs/cloud-messaging/android/client#monitor-token-generation\"\u003ehttps://firebase.google.com/docs/cloud-messaging/android/client#monitor-token-generation\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintProtectedPermissions",
          "displayName": "Using system app permission",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing system app permission\u003cbr\u003e\u003cbr\u003ePermissions with the protection level \u003ccode\u003esignature\u003c/code\u003e, \u003ccode\u003eprivileged\u003c/code\u003e or \u003ccode\u003esignatureOrSystem\u003c/code\u003e are only granted to system apps. If an app is a regular non-system app, it will never be able to use these permissions.\u003cbr\u003e\u003cbr\u003eIssue id: ProtectedPermissions\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInvalidWearFeatureAttribute",
          "displayName": "Invalid attribute for Wear uses-feature",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid attribute for Wear uses-feature\u003cbr\u003e\u003cbr\u003eFor the \u003ccode\u003eandroid.hardware.type.watch\u003c/code\u003e uses-feature, android:required\u003d\"false\" is disallowed. A single APK for Wear and non-Wear devices is not supported.\u003cbr\u003e\u003cbr\u003eIssue id: InvalidWearFeatureAttribute\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/wearables/apps/packaging.html\"\u003ehttps://developer.android.com/training/wearables/apps/packaging.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSoonBlockedPrivateApi",
          "displayName": "Using Soon-to-Be Blocked Private API",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing Soon-to-Be Blocked Private API\u003cbr\u003e\u003cbr\u003eUsage of restricted non-SDK interface will throw an exception at runtime. Accessing non-SDK methods or fields through reflection has a high likelihood to break your app between versions, and is being restricted to facilitate future app compatibility.\u003cbr\u003e\u003cbr\u003eIssue id: SoonBlockedPrivateApi\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/preview/restrictions-non-sdk-interfaces\"\u003ehttps://developer.android.com/preview/restrictions-non-sdk-interfaces\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDiscouragedPrivateApi",
          "displayName": "Using Discouraged Private API",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing Discouraged Private API\u003cbr\u003e\u003cbr\u003eUsage of restricted non-SDK interface may throw an exception at runtime. Accessing non-SDK methods or fields through reflection has a high likelihood to break your app between versions, and is being restricted to facilitate future app compatibility.\u003cbr\u003e\u003cbr\u003eIssue id: DiscouragedPrivateApi\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/preview/restrictions-non-sdk-interfaces\"\u003ehttps://developer.android.com/preview/restrictions-non-sdk-interfaces\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSetJavaScriptEnabled",
          "displayName": "Using setJavaScriptEnabled",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing \u003ccode\u003esetJavaScriptEnabled\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eYour code should not invoke \u003ccode\u003esetJavaScriptEnabled\u003c/code\u003e if you are not sure that your app really requires JavaScript support.\u003cbr\u003e\u003cbr\u003eIssue id: SetJavaScriptEnabled\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/articles/security-tips\"\u003ehttps://developer.android.com/training/articles/security-tips\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintFullBackupContent",
          "displayName": "Valid Full Backup Content File",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eValid Full Backup Content File\u003cbr\u003e\u003cbr\u003eEnsures that \u003ccode\u003e\u0026lt;data-extraction-rules\u003c/code\u003e\u003e and \u003ccode\u003e\u0026lt;full-backup-content\u003e\u003c/code\u003e files, which configure backup options, are valid.\u003cbr\u003e\u003cbr\u003eIssue id: FullBackupContent\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://android-developers.googleblog.com/2015/07/auto-backup-for-apps-made-simple.html\"\u003ehttps://android-developers.googleblog.com/2015/07/auto-backup-for-apps-made-simple.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintFontValidation",
          "displayName": "Validation of font files",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eValidation of font files\u003cbr\u003e\u003cbr\u003eLook for problems in various font files.\u003cbr\u003e\u003cbr\u003eIssue id: FontValidation\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/text/downloadable-fonts.html\"\u003ehttps://developer.android.com/guide/topics/text/downloadable-fonts.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingBackupPin",
          "displayName": "Missing Backup Pin",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing Backup Pin\u003cbr\u003e\u003cbr\u003eIt is highly recommended to declare a backup \u003ccode\u003e\u0026lt;pin\u003e\u003c/code\u003e element. Not having a second pin defined can cause connection failures when the particular site certificate is rotated and the app has not yet been updated.\u003cbr\u003e\u003cbr\u003eIssue id: MissingBackupPin\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/preview/features/security-config.html\"\u003ehttps://developer.android.com/preview/features/security-config.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLeanbackUsesWifi",
          "displayName": "android.hardware.wifi on TV device",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing android.hardware.wifi on TV\u003cbr\u003e\u003cbr\u003eWiFi is not required for Android TV and many devices connect to the internet via alternative methods e.g. Ethernet.\u003cbr/\u003e\n\u003cbr/\u003e\nIf your app is not focused specifically on WiFi functionality and only wishes to connect to the internet, please modify your Manifest to contain: \u003ccode\u003e\u0026lt;uses-feature android:name\u003d\"android.hardware.wifi\" android:required\u003d\"false\" /\u003e\u003c/code\u003e\u003cbr/\u003e\n\u003cbr/\u003e\nUn-metered or non-roaming connections can be detected in software using \u003ccode\u003eNetworkCapabilities#NET_CAPABILITY_NOT_METERED\u003c/code\u003e and \u003ccode\u003eNetworkCapabilities#NET_CAPABILITY_NOT_ROAMING.\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eIssue id: LeanbackUsesWifi\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUseAlpha2",
          "displayName": "Using 3-letter Codes",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing 3-letter Codes\u003cbr\u003e\u003cbr\u003eFor compatibility with earlier devices, you should only use 3-letter language and region codes when there is no corresponding 2 letter code.\u003cbr\u003e\u003cbr\u003eIssue id: UseAlpha2\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://tools.ietf.org/html/bcp47\"\u003ehttps://tools.ietf.org/html/bcp47\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInvalidId",
          "displayName": "Invalid ID declaration",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid ID declaration\u003cbr\u003e\u003cbr\u003eAn id definition \u003cb\u003emust\u003c/b\u003e be of the form \u003ccode\u003e@+id/yourname\u003c/code\u003e. The tools have not rejected strings of the form \u003ccode\u003e@+foo/bar\u003c/code\u003e in the past, but that was an error, and could lead to tricky errors because of the way the id integers are assigned.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you really want to have different \"scopes\" for your id\u0027s, use prefixes instead, such as \u003ccode\u003elogin_button1\u003c/code\u003e and \u003ccode\u003elogin_button2\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: InvalidId\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUntranslatable",
          "displayName": "Translated Untranslatable",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eTranslated Untranslatable\u003cbr\u003e\u003cbr\u003eStrings can be marked with \u003ccode\u003etranslatable\u003dfalse\u003c/code\u003e to indicate that they are not intended to be translated, but are present in the resource file for other purposes (for example for non-display strings that should vary by some other configuration qualifier such as screen size or API level).\u003cbr/\u003e\n\u003cbr/\u003e\nThere are cases where translators accidentally translate these strings anyway, and lint will flag these occurrences with this lint check.\u003cbr\u003e\u003cbr\u003eIssue id: Untranslatable\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWebViewLayout",
          "displayName": "WebViews in wrap_content parents",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWebViews in wrap_content parents\u003cbr\u003e\u003cbr\u003eThe WebView implementation has certain performance optimizations which will not work correctly if the parent view is using \u003ccode\u003ewrap_content\u003c/code\u003e rather than \u003ccode\u003ematch_parent\u003c/code\u003e. This can lead to subtle UI bugs.\u003cbr\u003e\u003cbr\u003eIssue id: WebViewLayout\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintVisibleForTests",
          "displayName": "Visible Only For Tests",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eVisible Only For Tests\u003cbr\u003e\u003cbr\u003eWith the \u003ccode\u003e@VisibleForTesting\u003c/code\u003e annotation you can specify an \u003ccode\u003eotherwise\u003d\u003c/code\u003e attribute which specifies the intended visibility if the method had not been made more widely visible for the tests.\u003cbr/\u003e\n\u003cbr/\u003e\nThis check looks for accesses from production code (e.g. not tests) where the access would not have been allowed with the intended production visibility.\u003cbr\u003e\u003cbr\u003eIssue id: VisibleForTests\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingLeanbackLauncher",
          "displayName": "Missing Leanback Launcher Intent Filter",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing Leanback Launcher Intent Filter\u003cbr\u003e\u003cbr\u003eAn application intended to run on TV devices must declare a launcher activity for TV in its manifest using a \u003ccode\u003eandroid.intent.category.LEANBACK_LAUNCHER\u003c/code\u003e intent filter.\u003cbr\u003e\u003cbr\u003eIssue id: MissingLeanbackLauncher\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/tv/start/start.html#tv-activity\"\u003ehttps://developer.android.com/training/tv/start/start.html#tv-activity\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingLeanbackSupport",
          "displayName": "Missing Leanback Support",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing Leanback Support\u003cbr\u003e\u003cbr\u003eThe manifest should declare the use of the Leanback user interface required by Android TV.\u003cbr/\u003e\n\u003cbr/\u003e\nTo fix this, add\n\u003cpre\u003e\n`\u0026lt;uses-feature android:name\u003d\"android.software.leanback\"\n               android:required\u003d\"false\" /\u003e`\n\u003c/pre\u003e\nto your manifest.\u003cbr\u003e\u003cbr\u003eIssue id: MissingLeanbackSupport\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/tv/start/start.html#leanback-req\"\u003ehttps://developer.android.com/training/tv/start/start.html#leanback-req\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintResourceCycle",
          "displayName": "Cycle in resource definitions",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCycle in resource definitions\u003cbr\u003e\u003cbr\u003eThere should be no cycles in resource definitions as this can lead to runtime exceptions.\u003cbr\u003e\u003cbr\u003eIssue id: ResourceCycle\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingPrefix",
          "displayName": "Missing Android XML namespace",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing Android XML namespace\u003cbr\u003e\u003cbr\u003eMost Android views have attributes in the Android namespace. When referencing these attributes you \u003cb\u003emust\u003c/b\u003e include the namespace prefix, or your attribute will be interpreted by \u003ccode\u003eaapt\u003c/code\u003e as just a custom attribute.\u003cbr/\u003e\n\u003cbr/\u003e\nSimilarly, in manifest files, nearly all attributes should be in the \u003ccode\u003eandroid:\u003c/code\u003e namespace.\u003cbr\u003e\u003cbr\u003eIssue id: MissingPrefix\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintManifestOrder",
          "displayName": "Incorrect order of elements in manifest",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncorrect order of elements in manifest\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e\u0026lt;application\u003e\u003c/code\u003e tag should appear after the elements which declare which version you need, which features you need, which libraries you need, and so on. In the past there have been subtle bugs (such as themes not getting applied correctly) when the \u003ccode\u003e\u0026lt;application\u003e\u003c/code\u003e tag appears before some of these other elements, so it\u0027s best to order your manifest in the logical dependency order.\u003cbr\u003e\u003cbr\u003eIssue id: ManifestOrder\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUniquePermission",
          "displayName": "Permission names are not unique",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003ePermission names are not unique\u003cbr\u003e\u003cbr\u003eThe unqualified names or your permissions must be unique. The reason for this is that at build time, the \u003ccode\u003eaapt\u003c/code\u003e tool will generate a class named \u003ccode\u003eManifest\u003c/code\u003e which contains a field for each of your permissions. These fields are named using your permission unqualified names (i.e. the name portion after the last dot).\u003cbr/\u003e\n\u003cbr/\u003e\nIf more than one permission maps to the same field name, that field will arbitrarily name just one of them.\u003cbr\u003e\u003cbr\u003eIssue id: UniquePermission\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPendingBindings",
          "displayName": "Missing Pending Bindings",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing Pending Bindings\u003cbr\u003e\u003cbr\u003eWhen using a \u003ccode\u003eViewDataBinding\u003c/code\u003e in a \u003ccode\u003eonBindViewHolder\u003c/code\u003e method, you \u003cb\u003emust\u003c/b\u003e call \u003ccode\u003eexecutePendingBindings()\u003c/code\u003e before the method exits; otherwise the data binding runtime will update the UI in the next animation frame causing a delayed update and potential jumps if the item resizes.\u003cbr\u003e\u003cbr\u003eIssue id: PendingBindings\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnsupportedTvHardware",
          "displayName": "Unsupported TV Hardware Feature",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnsupported TV Hardware Feature\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e\u0026lt;uses-feature\u003e\u003c/code\u003e element should not require this unsupported TV hardware feature. Any uses-feature not explicitly marked with \u003ccode\u003erequired\u003d\"false\"\u003c/code\u003e is necessary on the device to be installed on. Ensure that any features that might prevent it from being installed on a TV device are reviewed and marked as not required in the manifest.\u003cbr\u003e\u003cbr\u003eIssue id: UnsupportedTvHardware\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/tv/start/hardware.html#unsupported-features\"\u003ehttps://developer.android.com/training/tv/start/hardware.html#unsupported-features\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintShowToast",
          "displayName": "Toast created but not shown",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eToast created but not shown\u003cbr\u003e\u003cbr\u003e\u003ccode\u003eToast.makeText()\u003c/code\u003e creates a \u003ccode\u003eToast\u003c/code\u003e but does \u003cb\u003enot\u003c/b\u003e show it. You must call \u003ccode\u003eshow()\u003c/code\u003e on the resulting object to actually make the \u003ccode\u003eToast\u003c/code\u003e appear.\u003cbr\u003e\u003cbr\u003eIssue id: ShowToast\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPermissionImpliesUnsupportedHardware",
          "displayName": "Permission Implies Unsupported Hardware",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003ePermission Implies Unsupported Hardware\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e\u0026lt;uses-permission\u003e\u003c/code\u003e element should not require a permission that implies an unsupported TV hardware feature. Google Play assumes that certain hardware related permissions indicate that the underlying hardware features are required by default. To fix the issue, consider declaring the corresponding \u003ccode\u003euses-feature\u003c/code\u003e element with \u003ccode\u003erequired\u003d\"false\"\u003c/code\u003e attribute.\u003cbr\u003e\u003cbr\u003eIssue id: PermissionImpliesUnsupportedHardware\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions\"\u003ehttps://developer.android.com/guide/topics/manifest/uses-feature-element.html#permissions\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintEmptySuperCall",
          "displayName": "Calling an empty super method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCalling an empty super method\u003cbr\u003e\u003cbr\u003eFor methods annotated with \u003ccode\u003e@EmptySuper\u003c/code\u003e, overriding methods should not also call the super implementation, either because it is empty, or perhaps it contains code not intended to be run when the method is overridden.\u003cbr\u003e\u003cbr\u003eIssue id: EmptySuperCall\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIllegalResourceRef",
          "displayName": "Name and version must be integer or string, not resource",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eName and version must be integer or string, not resource\u003cbr\u003e\u003cbr\u003eFor the \u003ccode\u003eversionCode\u003c/code\u003e attribute, you have to specify an actual integer literal; you cannot use an indirection with a \u003ccode\u003e@dimen/name\u003c/code\u003e resource. Similarly, the \u003ccode\u003eversionName\u003c/code\u003e attribute should be an actual string, not a string resource url.\u003cbr\u003e\u003cbr\u003eIssue id: IllegalResourceRef\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintStringFormatInvalid",
          "displayName": "Invalid format string",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid format string\u003cbr\u003e\u003cbr\u003eIf a string contains a \u0027%\u0027 character, then the string may be a formatting string which will be passed to \u003ccode\u003eString.format\u003c/code\u003e from Java code to replace each \u0027%\u0027 occurrence with specific values.\u003cbr/\u003e\n\u003cbr/\u003e\nThis lint warning checks for two related problems:\u003cbr/\u003e\n(1) Formatting strings that are invalid, meaning that \u003ccode\u003eString.format\u003c/code\u003e will throw exceptions at runtime when attempting to use the format string.\u003cbr/\u003e\n(2) Strings containing \u0027%\u0027 that are not formatting strings getting passed to a \u003ccode\u003eString.format\u003c/code\u003e call. In this case the \u0027%\u0027 will need to be escaped as \u0027%%\u0027.\u003cbr/\u003e\n\u003cbr/\u003e\nNOTE: Not all Strings which look like formatting strings are intended for use by \u003ccode\u003eString.format\u003c/code\u003e; for example, they may contain date formats intended for \u003ccode\u003eandroid.text.format.Time#format()\u003c/code\u003e. Lint cannot always figure out that a String is a date format, so you may get false warnings in those scenarios. See the suppress help topic for information on how to suppress errors in that case.\u003cbr\u003e\u003cbr\u003eIssue id: StringFormatInvalid\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNamespaceTypo",
          "displayName": "Misspelled namespace declaration",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMisspelled namespace declaration\u003cbr\u003e\u003cbr\u003eAccidental misspellings in namespace declarations can lead to some very obscure error messages. This check looks for potential misspellings to help track these down.\u003cbr\u003e\u003cbr\u003eIssue id: NamespaceTypo\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintStringFormatCount",
          "displayName": "Formatting argument types incomplete or inconsistent",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eFormatting argument types incomplete or inconsistent\u003cbr\u003e\u003cbr\u003eWhen a formatted string takes arguments, it usually needs to reference the same arguments in all translations (or all arguments if there are no translations.\u003cbr/\u003e\n\u003cbr/\u003e\nThere are cases where this is not the case, so this issue is a warning rather than an error by default. However, this usually happens when a language is not translated or updated correctly.\u003cbr\u003e\u003cbr\u003eIssue id: StringFormatCount\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintApplySharedPref",
          "displayName": "Use apply() on SharedPreferences",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUse \u003ccode\u003eapply()\u003c/code\u003e on \u003ccode\u003eSharedPreferences\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eConsider using \u003ccode\u003eapply()\u003c/code\u003e instead of \u003ccode\u003ecommit\u003c/code\u003e on shared preferences. Whereas \u003ccode\u003ecommit\u003c/code\u003e blocks and writes its data to persistent storage immediately, \u003ccode\u003eapply\u003c/code\u003e will handle it in the background.\u003cbr\u003e\u003cbr\u003eIssue id: ApplySharedPref\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintShiftFlags",
          "displayName": "Dangerous Flag Constant Declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDangerous Flag Constant Declaration\u003cbr\u003e\u003cbr\u003eWhen defining multiple constants for use in flags, the recommended style is to use the form \u003ccode\u003e1 \u0026lt;\u0026lt; 2\u003c/code\u003e, \u003ccode\u003e1 \u0026lt;\u0026lt; 3\u003c/code\u003e, \u003ccode\u003e1 \u0026lt;\u0026lt; 4\u003c/code\u003e and so on to ensure that the constants are unique and non-overlapping.\u003cbr\u003e\u003cbr\u003eIssue id: ShiftFlags\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnusedAttribute",
          "displayName": "Attribute unused on older versions",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAttribute unused on older versions\u003cbr\u003e\u003cbr\u003eThis check finds attributes set in XML files that were introduced in a version newer than the oldest version targeted by your application (with the \u003ccode\u003eminSdkVersion\u003c/code\u003e attribute).\u003cbr/\u003e\n\u003cbr/\u003e\nThis is not an error; the application will simply ignore the attribute. However, if the attribute is important to the appearance or functionality of your application, you should consider finding an alternative way to achieve the same result with only available attributes, and then you can optionally create a copy of the layout in a layout-vNN folder which will be used on API NN or higher where you can take advantage of the newer attribute.\u003cbr/\u003e\n\u003cbr/\u003e\nNote: This check does not only apply to attributes. For example, some tags can be unused too, such as the new \u003ccode\u003e\u0026lt;tag\u003e\u003c/code\u003e element in layouts introduced in API 21.\u003cbr\u003e\u003cbr\u003eIssue id: UnusedAttribute\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnknownIdInLayout",
          "displayName": "Reference to an id that is not in the current layout",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eReference to an id that is not in the current layout\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e@+id/\u003c/code\u003e syntax refers to an existing id, or creates a new one if it has not already been defined elsewhere. However, this means that if you have a typo in your reference, or if the referred view no longer exists, you do not get a warning since the id will be created on demand.\u003cbr/\u003e\n\u003cbr/\u003e\nThis is sometimes intentional, for example where you are referring to a view which is provided in a different layout via an include. However, it is usually an accident where you have a typo or you have renamed a view without updating all the references to it.\u003cbr\u003e\u003cbr\u003eIssue id: UnknownIdInLayout\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRemoteViewLayout",
          "displayName": "Unsupported View in RemoteView",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnsupported View in RemoteView\u003cbr\u003e\u003cbr\u003eIn a \u003ccode\u003eRemoteView\u003c/code\u003e, only some layouts and views are allowed.\u003cbr\u003e\u003cbr\u003eIssue id: RemoteViewLayout\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/android/widget/RemoteViews\"\u003ehttps://developer.android.com/reference/android/widget/RemoteViews\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLocaleFolder",
          "displayName": "Wrong locale name",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWrong locale name\u003cbr\u003e\u003cbr\u003eFrom the \u003ccode\u003ejava.util.Locale\u003c/code\u003e documentation:\u003cbr/\u003e\n\"Note that Java uses several deprecated two-letter codes. The Hebrew (\"he\") language code is rewritten as \"iw\", Indonesian (\"id\") as \"in\", and Yiddish (\"yi\") as \"ji\". This rewriting happens even if you construct your own Locale object, not just for instances returned by the various lookup methods.\u003cbr/\u003e\n\u003cbr/\u003e\nBecause of this, if you add your localized resources in for example \u003ccode\u003evalues-he\u003c/code\u003e they will not be used, since the system will look for \u003ccode\u003evalues-iw\u003c/code\u003e instead.\u003cbr/\u003e\n\u003cbr/\u003e\nTo work around this, place your resources in a \u003ccode\u003evalues\u003c/code\u003e folder using the deprecated language code instead.\u003cbr\u003e\u003cbr\u003eIssue id: LocaleFolder\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/java/util/Locale.html\"\u003ehttps://developer.android.com/reference/java/util/Locale.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIncludeLayoutParam",
          "displayName": "Ignored layout params on include",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIgnored layout params on include\u003cbr\u003e\u003cbr\u003eLayout parameters specified on an \u003ccode\u003e\u0026lt;include\u003e\u003c/code\u003e tag will only be used if you also override \u003ccode\u003elayout_width\u003c/code\u003e and \u003ccode\u003elayout_height\u003c/code\u003e on the \u003ccode\u003e\u0026lt;include\u003e\u003c/code\u003e tag; otherwise they will be ignored.\u003cbr\u003e\u003cbr\u003eIssue id: IncludeLayoutParam\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://stackoverflow.com/questions/2631614/does-android-xml-layouts-include-tag-really-work\"\u003ehttps://stackoverflow.com/questions/2631614/does-android-xml-layouts-include-tag-really-work\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingSuperCall",
          "displayName": "Missing Super Call",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing Super Call\u003cbr\u003e\u003cbr\u003eSome methods, such as \u003ccode\u003eView#onDetachedFromWindow\u003c/code\u003e, require that you also call the super implementation as part of your method.\u003cbr\u003e\u003cbr\u003eIssue id: MissingSuperCall\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInvalidWakeLockTag",
          "displayName": "Invalid Wake Lock Tag",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid Wake Lock Tag\u003cbr\u003e\u003cbr\u003eWake Lock tags must follow the naming conventions defined in the`PowerManager` documentation.\u003cbr\u003e\u003cbr\u003eIssue id: InvalidWakeLockTag\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/android/os/PowerManager.html\"\u003ehttps://developer.android.com/reference/android/os/PowerManager.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGradlePath",
          "displayName": "Gradle Path Issues",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eGradle Path Issues\u003cbr\u003e\u003cbr\u003eGradle build scripts are meant to be cross platform, so file paths use Unix-style path separators (a forward slash) rather than Windows path separators (a backslash). Similarly, to keep projects portable and repeatable, avoid using absolute paths on the system; keep files within the project instead. To share code between projects, consider creating an android-library and an AAR dependency\u003cbr\u003e\u003cbr\u003eIssue id: GradlePath\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnknownId",
          "displayName": "Reference to an unknown id",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eReference to an unknown id\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e@+id/\u003c/code\u003e syntax refers to an existing id, or creates a new one if it has not already been defined elsewhere. However, this means that if you have a typo in your reference, or if the referred view no longer exists, you do not get a warning since the id will be created on demand. This check catches errors where you have renamed an id without updating all of the references to it.\u003cbr\u003e\u003cbr\u003eIssue id: UnknownId\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintJcenterRepositoryObsolete",
          "displayName": "JCenter Repository Obsolete",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eJCenter Maven repository is read-only\u003cbr\u003e\u003cbr\u003eThe JCenter Maven repository is no longer accepting submissions of Maven artifacts since 31st March 2021.  Ensure that the project is configured to search in repositories with the latest versions of its dependencies.\u003cbr\u003e\u003cbr\u003eIssue id: JcenterRepositoryObsolete\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/r/tools/jcenter-end-of-service\"\u003ehttps://developer.android.com/r/tools/jcenter-end-of-service\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintResourceName",
          "displayName": "Resource with Wrong Prefix",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eResource with Wrong Prefix\u003cbr\u003e\u003cbr\u003eIn Gradle projects you can specify a resource prefix that all resources in the project must conform to. This makes it easier to ensure that you don\u0027t accidentally combine resources from different libraries, since they all end up in the same shared app namespace.\u003cbr\u003e\u003cbr\u003eIssue id: ResourceName\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPinSetExpiry",
          "displayName": "Validate \u003cpin-set\u003e expiration attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eValidate \u003ccode\u003e\u0026lt;pin-set\u003e\u003c/code\u003e expiration attribute\u003cbr\u003e\u003cbr\u003eEnsures that the \u003ccode\u003eexpiration\u003c/code\u003e attribute of the \u003ccode\u003e\u0026lt;pin-set\u003e\u003c/code\u003e element is valid and has not already expired or is expiring soon\u003cbr\u003e\u003cbr\u003eIssue id: PinSetExpiry\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/preview/features/security-config.html\"\u003ehttps://developer.android.com/preview/features/security-config.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDuplicateUsesFeature",
          "displayName": "Feature declared more than once",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eFeature declared more than once\u003cbr\u003e\u003cbr\u003eA given feature should only be declared once in the manifest.\u003cbr\u003e\u003cbr\u003eIssue id: DuplicateUsesFeature\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintCustomViewStyleable",
          "displayName": "Mismatched Styleable/Custom View Name",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMismatched Styleable/Custom View Name\u003cbr\u003e\u003cbr\u003eThe convention for custom views is to use a \u003ccode\u003edeclare-styleable\u003c/code\u003e whose name matches the custom view class name. The IDE relies on this convention such that for example code completion can be offered for attributes in a custom view in layout XML resource files.\u003cbr/\u003e\n\u003cbr/\u003e\n(Similarly, layout parameter classes should use the suffix \u003ccode\u003e_Layout\u003c/code\u003e.)\u003cbr\u003e\u003cbr\u003eIssue id: CustomViewStyleable\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRecyclerView",
          "displayName": "RecyclerView Problems",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eRecyclerView Problems\u003cbr\u003e\u003cbr\u003e\u003ccode\u003eRecyclerView\u003c/code\u003e will \u003cb\u003enot\u003c/b\u003e call \u003ccode\u003eonBindViewHolder\u003c/code\u003e again when the position of the item changes in the data set unless the item itself is invalidated or the new position cannot be determined.\u003cbr/\u003e\n\u003cbr/\u003e\nFor this reason, you should \u003cb\u003eonly\u003c/b\u003e use the position parameter while acquiring the related data item inside this method, and should \u003cb\u003enot\u003c/b\u003e keep a copy of it.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you need the position of an item later on (e.g. in a click listener), use \u003ccode\u003egetAdapterPosition()\u003c/code\u003e which will have the updated adapter position.\u003cbr\u003e\u003cbr\u003eIssue id: RecyclerView\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRange",
          "displayName": "Outside Range",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eOutside Range\u003cbr\u003e\u003cbr\u003eSome parameters are required to in a particular numerical range; this check makes sure that arguments passed fall within the range. For arrays, Strings and collections this refers to the size or length.\u003cbr\u003e\u003cbr\u003eIssue id: Range\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNfcTechWhitespace",
          "displayName": "Whitespace in NFC tech lists",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWhitespace in NFC tech lists\u003cbr\u003e\u003cbr\u003eIn a \u003ccode\u003e\u0026lt;tech-list\u003e\u003c/code\u003e, there can be whitespace around the \u003ccode\u003e\u0026lt;tech\u003e\u003c/code\u003e elements,but not inside them. This is because the code which reads in the tech list is currently very strict and will include the whitespace as part of the name.\u003cbr/\u003e\n\u003cbr/\u003e\nIn other words, use \u003ccode\u003e\u0026lt;tech\u003ename\u0026lt;/tech\u003e\u003c/code\u003e, not \u003ccode\u003e\u0026lt;tech\u003e name \u0026lt;/tech\u003e\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: NfcTechWhitespace\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://issuetracker.google.com/36988969\"\u003ehttps://issuetracker.google.com/36988969\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingTvBanner",
          "displayName": "TV Missing Banner",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eTV Missing Banner\u003cbr\u003e\u003cbr\u003eA TV application must provide a home screen banner for each localization if it includes a Leanback launcher intent filter. The banner is the app launch point that appears on the home screen in the apps and games rows.\u003cbr\u003e\u003cbr\u003eIssue id: MissingTvBanner\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/tv/start/start.html#banner\"\u003ehttps://developer.android.com/training/tv/start/start.html#banner\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInOrMmUsage",
          "displayName": "Using mm or in dimensions",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing \u003ccode\u003emm\u003c/code\u003e or \u003ccode\u003ein\u003c/code\u003e dimensions\u003cbr\u003e\u003cbr\u003eAvoid using \u003ccode\u003emm\u003c/code\u003e (millimeters) or \u003ccode\u003ein\u003c/code\u003e (inches) as the unit for dimensions.\u003cbr/\u003e\n\u003cbr/\u003e\nWhile it should work in principle, unfortunately many devices do not report the correct true physical density, which means that the dimension calculations won\u0027t work correctly. You are better off using \u003ccode\u003edp\u003c/code\u003e (and for font sizes, \u003ccode\u003esp\u003c/code\u003e).\u003cbr\u003e\u003cbr\u003eIssue id: InOrMmUsage\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintReferenceType",
          "displayName": "Incorrect reference types",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncorrect reference types\u003cbr\u003e\u003cbr\u003eWhen you generate a resource alias, the resource you are pointing to must be of the same type as the alias\u003cbr\u003e\u003cbr\u003eIssue id: ReferenceType\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPluralsCandidate",
          "displayName": "Potential Plurals",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003ePotential Plurals\u003cbr\u003e\u003cbr\u003eThis lint check looks for potential errors in internationalization where you have translated a message which involves a quantity and it looks like other parts of the string may need grammatical changes.\u003cbr/\u003e\n\u003cbr/\u003e\nFor example, rather than something like this:\n\u003cpre\u003e\n  \u0026lt;string name\u003d\"try_again\"\u003eTry again in %d seconds.\u0026lt;/string\u003e\n\u003c/pre\u003e\nyou should be using a plural:\n\u003cpre\u003e\n   \u0026lt;plurals name\u003d\"try_again\"\u003e\n        \u0026lt;item quantity\u003d\"one\"\u003eTry again in %d second\u0026lt;/item\u003e\n        \u0026lt;item quantity\u003d\"other\"\u003eTry again in %d seconds\u0026lt;/item\u003e\n    \u0026lt;/plurals\u003e\n\u003c/pre\u003e\nThis will ensure that in other languages the right set of translations are provided for the different quantity classes.\u003cbr/\u003e\n\u003cbr/\u003e\n(This check depends on some heuristics, so it may not accurately determine whether a string really should be a quantity. You can use tools:ignore to filter out false positives.\u003cbr\u003e\u003cbr\u003eIssue id: PluralsCandidate\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/resources/string-resource.html#Plurals\"\u003ehttps://developer.android.com/guide/topics/resources/string-resource.html#Plurals\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWatchFaceEditor",
          "displayName": "Watch face editor with incorrect launchMode",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWatch face editor must use launchMode\u003d\"standard\"\u003cbr\u003e\u003cbr\u003eWatch face editor activities must be able to launch in the Wear OS app activity task in order to work correctly. Thus only \u003ccode\u003elaunchMode\u003d\"standard\"\u003c/code\u003e is allowed. The watch face will not be shown on the watch if it does not satisfy this requirement.\u003cbr\u003e\u003cbr\u003eIssue id: WatchFaceEditor\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGetLocales",
          "displayName": "Locale crash",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eLocale crash\u003cbr\u003e\u003cbr\u003eThis check looks for usage of Lollipop-style locale folders (e.g. 3 letter language codes, or BCP 47 qualifiers) combined with an \u003ccode\u003eAssetManager#getLocales()\u003c/code\u003e call. This leads to crashes\u003cbr\u003e\u003cbr\u003eIssue id: GetLocales\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintVectorRaster",
          "displayName": "Vector Image Generation",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eVector Image Generation\u003cbr\u003e\u003cbr\u003eVector icons require API 21 or API 24 depending on used features, but when \u003ccode\u003eminSdkVersion\u003c/code\u003e is less than 21 or 24 and Android Gradle plugin 1.4 or higher is used, a vector drawable placed in the \u003ccode\u003edrawable\u003c/code\u003e folder is automatically moved to \u003ccode\u003edrawable-anydpi-v21\u003c/code\u003e or \u003ccode\u003edrawable-anydpi-v24\u003c/code\u003e and bitmap images are generated for different screen resolutions for backwards compatibility.\u003cbr/\u003e\n\u003cbr/\u003e\nHowever, there are some limitations to this raster image generation, and this lint check flags elements and attributes that are not fully supported. You should manually check whether the generated output is acceptable for those older devices.\u003cbr\u003e\u003cbr\u003eIssue id: VectorRaster\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingPermission",
          "displayName": "Missing Permissions",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing Permissions\u003cbr\u003e\u003cbr\u003eThis check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.\u003cbr/\u003e\n\u003cbr/\u003e\nFurthermore, for permissions that are revocable (with \u003ccode\u003etargetSdkVersion\u003c/code\u003e 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime.\u003cbr\u003e\u003cbr\u003eIssue id: MissingPermission\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingQuantity",
          "displayName": "Missing quantity translation",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing quantity translation\u003cbr\u003e\u003cbr\u003eDifferent languages have different rules for grammatical agreement with quantity. In English, for example, the quantity 1 is a special case. We write \"1 book\", but for any other quantity we\u0027d write \"n books\". This distinction between singular and plural is very common, but other languages make finer distinctions.\u003cbr/\u003e\n\u003cbr/\u003e\nThis lint check looks at each translation of a \u003ccode\u003e\u0026lt;plural\u003e\u003c/code\u003e and makes sure that all the quantity strings considered by the given language are provided by this translation.\u003cbr/\u003e\n\u003cbr/\u003e\nFor example, an English translation must provide a string for \u003ccode\u003equantity\u003d\"one\"\u003c/code\u003e. Similarly, a Czech translation must provide a string for \u003ccode\u003equantity\u003d\"few\"\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: MissingQuantity\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/resources/string-resource.html#Plurals\"\u003ehttps://developer.android.com/guide/topics/resources/string-resource.html#Plurals\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintEllipsizeMaxLines",
          "displayName": "Combining Ellipsize and Maxlines",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCombining Ellipsize and Maxlines\u003cbr\u003e\u003cbr\u003eCombining \u003ccode\u003eellipsize\u003c/code\u003e and \u003ccode\u003emaxLines\u003d1\u003c/code\u003e can lead to crashes on some devices. Earlier versions of lint recommended replacing \u003ccode\u003esingleLine\u003dtrue\u003c/code\u003e with \u003ccode\u003emaxLines\u003d1\u003c/code\u003e but that should not be done when using \u003ccode\u003eellipsize\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: EllipsizeMaxLines\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://issuetracker.google.com/issues/36950033\"\u003ehttps://issuetracker.google.com/issues/36950033\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMotionLayoutMissingId",
          "displayName": "Views inside MotionLayout require an id",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eViews inside \u003ccode\u003eMotionLayout\u003c/code\u003e require an \u003ccode\u003eandroid:id\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eViews inside \u003ccode\u003eMotionLayout\u003c/code\u003e require an \u003ccode\u003eandroid:id\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: MotionLayoutMissingId\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintOverrideAbstract",
          "displayName": "Not overriding abstract methods on older platforms",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNot overriding abstract methods on older platforms\u003cbr\u003e\u003cbr\u003eTo improve the usability of some APIs, some methods that used to be \u003ccode\u003eabstract\u003c/code\u003e have been made concrete by adding default implementations. This means that when compiling with new versions of the SDK, your code does not have to override these methods.\u003cbr/\u003e\n\u003cbr/\u003e\nHowever, if your code is also targeting older versions of the platform where these methods were still \u003ccode\u003eabstract\u003c/code\u003e, the code will crash. You must override all methods that used to be abstract in any versions targeted by your application\u0027s \u003ccode\u003eminSdkVersion\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: OverrideAbstract\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAppIndexingService",
          "displayName": "App Indexing Background Services",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eApp Indexing Background Services\u003cbr\u003e\u003cbr\u003eApps targeting Android 8.0 or higher can no longer rely on background services while listening for updates to the on-device index. Use a \u003ccode\u003eBroadcastReceiver\u003c/code\u003e for the \u003ccode\u003eUPDATE_INDEX\u003c/code\u003e intent to continue supporting indexing in your app.\u003cbr\u003e\u003cbr\u003eIssue id: AppIndexingService\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://firebase.google.com/docs/app-indexing/android/personal-content#add-a-broadcast-receiver-to-your-app\"\u003ehttps://firebase.google.com/docs/app-indexing/android/personal-content#add-a-broadcast-receiver-to-your-app\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWearableBindListener",
          "displayName": "Usage of Android Wear BIND_LISTENER is deprecated",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsage of Android Wear BIND_LISTENER is deprecated\u003cbr\u003e\u003cbr\u003eBIND_LISTENER receives all Android Wear events whether the application needs them or not. This can be inefficient and cause applications to wake up unnecessarily. With Google Play Services 8.2.0 or later it is recommended to use a more efficient combination of manifest listeners and api-based live listeners filtered by action, path and/or path prefix.\u003cbr\u003e\u003cbr\u003eIssue id: WearableBindListener\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://android-developers.googleblog.com/2016/04/deprecation-of-bindlistener.html\"\u003ehttps://android-developers.googleblog.com/2016/04/deprecation-of-bindlistener.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingInflatedId",
          "displayName": "ID not found in inflated resource",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eID not found in inflated resource\u003cbr\u003e\u003cbr\u003eChecks calls to layout inflation and makes sure that the referenced ids are found in the corresponding layout (or at least one of them, if the layout has multiple configurations.)\u003cbr\u003e\u003cbr\u003eIssue id: MissingInflatedId\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUsesMinSdkAttributes",
          "displayName": "Minimum SDK and target SDK attributes not defined",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMinimum SDK and target SDK attributes not defined\u003cbr\u003e\u003cbr\u003eThe manifest should contain a \u003ccode\u003e\u0026lt;uses-sdk\u003e\u003c/code\u003e element which defines the minimum API Level required for the application to run, as well as the target version (the highest API level you have tested the version for).\u003cbr\u003e\u003cbr\u003eIssue id: UsesMinSdkAttributes\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/manifest/uses-sdk-element.html\"\u003ehttps://developer.android.com/guide/topics/manifest/uses-sdk-element.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWearStandaloneAppFlag",
          "displayName": "Invalid or missing Wear standalone app flag",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid or missing Wear standalone app flag\u003cbr\u003e\u003cbr\u003eWearable apps should specify whether they can work standalone, without a phone app. Add a valid meta-data entry for \u003ccode\u003ecom.google.android.wearable.standalone\u003c/code\u003e to your application element and set the value to \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n\u003cpre\u003e\n\u0026lt;meta-data android:name\u003d\"com.google.android.wearable.standalone\"\n           android:value\u003d\"true\"/\u003e`\n\u003c/pre\u003e\n\u003cbr\u003e\u003cbr\u003eIssue id: WearStandaloneAppFlag\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/wearables/apps/packaging.html\"\u003ehttps://developer.android.com/training/wearables/apps/packaging.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnsupportedChromeOsHardware",
          "displayName": "Unsupported Chrome OS Hardware Feature",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eUnsupported Chrome OS Hardware Feature\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e\u0026lt;uses-feature\u003e\u003c/code\u003e element should not require this unsupported Chrome OS hardware feature. Any uses-feature not explicitly marked with \u003ccode\u003erequired\u003d\"false\"\u003c/code\u003e is necessary on the device to be installed on. Ensure that any features that might prevent it from being installed on a Chrome OS device are reviewed and marked as not required in the manifest.\u003cbr\u003e\u003cbr\u003eIssue id: UnsupportedChromeOsHardware\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/topic/arc/manifest.html#incompat-entries\"\u003ehttps://developer.android.com/topic/arc/manifest.html#incompat-entries\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWrongCall",
          "displayName": "Using wrong draw/layout method",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing wrong draw/layout method\u003cbr\u003e\u003cbr\u003eCustom views typically need to call \u003ccode\u003emeasure()\u003c/code\u003e on their children, not \u003ccode\u003eonMeasure\u003c/code\u003e. Ditto for onDraw, onLayout, etc.\u003cbr\u003e\u003cbr\u003eIssue id: WrongCall\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintImplicitSamInstance",
          "displayName": "Implicit SAM Instances",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eImplicit SAM Instances\u003cbr\u003e\u003cbr\u003eKotlin\u0027s support for SAM (single accessor method) interfaces lets you pass a lambda to the interface. This will create a new instance on the fly even though there is no explicit constructor call. If you pass one of these lambdas or method references into a method which (for example) stores or compares the object identity, unexpected results may happen.\u003cbr\u003e\u003cbr\u003eIssue id: ImplicitSamInstance\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAccidentalOctal",
          "displayName": "Accidental Octal",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAccidental Octal\u003cbr\u003e\u003cbr\u003eIn Groovy, an integer literal that starts with a leading 0 will be interpreted as an octal number. That is usually (always?) an accident and can lead to subtle bugs, for example when used in the \u003ccode\u003eversionCode\u003c/code\u003e of an app.\u003cbr\u003e\u003cbr\u003eIssue id: AccidentalOctal\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSourceLockedOrientationActivity",
          "displayName": "Incompatible setRequestedOrientation value",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncompatible setRequestedOrientation value\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003eActivity\u003c/code\u003e should not be locked to a portrait orientation so that users can take advantage of the multi-window environments and larger landscape-first screens that Android runs on such as Chrome OS. To fix the issue, consider calling \u003ccode\u003esetRequestedOrientation\u003c/code\u003e with the \u003ccode\u003eActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR\u003c/code\u003e or \u003ccode\u003eActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED\u003c/code\u003e options or removing the call all together.\u003cbr\u003e\u003cbr\u003eIssue id: SourceLockedOrientationActivity\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInflateParams",
          "displayName": "Layout Inflation without a Parent",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eLayout Inflation without a Parent\u003cbr\u003e\u003cbr\u003eWhen inflating a layout, avoid passing in null as the parent view, since otherwise any layout parameters on the root of the inflated layout will be ignored.\u003cbr\u003e\u003cbr\u003eIssue id: InflateParams\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/\"\u003ehttps://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAppBundleLocaleChanges",
          "displayName": "App Bundle handling of runtime locale changes",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eApp Bundle handling of runtime locale changes\u003cbr\u003e\u003cbr\u003eWhen changing locales at runtime (e.g. to provide an in-app language switcher), the Android App Bundle must be configured to not split by locale or the Play Core library must be used to download additional locales at runtime.\u003cbr\u003e\u003cbr\u003eIssue id: AppBundleLocaleChanges\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/app-bundle/configure-base#handling_language_changes\"\u003ehttps://developer.android.com/guide/app-bundle/configure-base#handling_language_changes\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintStringShouldBeInt",
          "displayName": "String should be int",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eString should be int\u003cbr\u003e\u003cbr\u003eThe properties \u003ccode\u003ecompileSdkVersion\u003c/code\u003e, \u003ccode\u003eminSdkVersion\u003c/code\u003e and \u003ccode\u003etargetSdkVersion\u003c/code\u003e are usually numbers, but can be strings when you are using an add-on (in the case of \u003ccode\u003ecompileSdkVersion\u003c/code\u003e) or a preview platform (for the other two properties).\u003cbr/\u003e\n\u003cbr/\u003e\nHowever, you can not use a number as a string (e.g. \"19\" instead of 19); that will result in a platform not found error message at build/sync time.\u003cbr\u003e\u003cbr\u003eIssue id: StringShouldBeInt\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintValidActionsXml",
          "displayName": "Invalid Action Descriptor",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid Action Descriptor\u003cbr\u003e\u003cbr\u003eEnsures that an actions XML file is properly formed\u003cbr\u003e\u003cbr\u003eIssue id: ValidActionsXml\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNewApi",
          "displayName": "Calling new methods on older versions",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCalling new methods on older versions\u003cbr\u003e\u003cbr\u003eThis check scans through all the Android API calls in the application and warns about any calls that are not available on \u003cb\u003eall\u003c/b\u003e versions targeted by this application (according to its minimum SDK attribute in the manifest).\u003cbr/\u003e\n\u003cbr/\u003e\nIf you really want to use this API and don\u0027t need to support older devices just set the \u003ccode\u003eminSdkVersion\u003c/code\u003e in your \u003ccode\u003ebuild.gradle\u003c/code\u003e or \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e files.\u003cbr/\u003e\n\u003cbr/\u003e\nIf your code is \u003cb\u003edeliberately\u003c/b\u003e accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the \u003ccode\u003e@TargetApi\u003c/code\u003e annotation specifying the local minimum SDK to apply, such as \u003ccode\u003e@TargetApi(11)\u003c/code\u003e, such that this check considers 11 rather than your manifest file\u0027s minimum SDK as the required API level.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you are deliberately setting \u003ccode\u003eandroid:\u003c/code\u003e attributes in style definitions, make sure you place this in a \u003ccode\u003evalues-v\u003c/code\u003e\u003ci\u003eNN\u003c/i\u003e folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.\u003cbr/\u003e\n\u003cbr/\u003e\nSimilarly, you can use tools:targetApi\u003d\"11\" in an XML file to indicate that the element will only be inflated in an adequate context.\u003cbr\u003e\u003cbr\u003eIssue id: NewApi\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRequiresFeature",
          "displayName": "Requires Feature",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eRequires Feature\u003cbr\u003e\u003cbr\u003eSome APIs require optional features to be present. This check makes sure that calls to these APIs are surrounded by a check which enforces this.\u003cbr\u003e\u003cbr\u003eIssue id: RequiresFeature\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAnnotateVersionCheck",
          "displayName": "Annotate SDK_INT checks",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAnnotate SDK_INT checks\u003cbr\u003e\u003cbr\u003eMethods which perform \u003ccode\u003eSDK_INT\u003c/code\u003e version checks (or field constants which reflect the result of a version check) in libraries should be annotated with \u003ccode\u003e@ChecksSdkIntAtLeast\u003c/code\u003e. This makes it possible for lint to correctly check calls into the library later to correctly understand that problematic code which is wrapped within a call into this library is safe after all.\u003cbr\u003e\u003cbr\u003eIssue id: AnnotateVersionCheck\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintFileEndsWithExt",
          "displayName": "File endsWith on file extensions",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eFile endsWith on file extensions\u003cbr\u003e\u003cbr\u003eThe Kotlin extension method \u003ccode\u003eFile.endsWith(suffix)\u003c/code\u003e checks whole path components, not just string suffixes. This means that \u003ccode\u003eFile(\"foo.txt\").endsWith(\".txt\")\u003c/code\u003e will return false. Instead you might have intended \u003ccode\u003efile.path.endsWith\u003c/code\u003e or \u003ccode\u003efile.extension.equals\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: FileEndsWithExt\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintHighSamplingRate",
          "displayName": "High sensor sampling rate",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eHigh sensor sampling rate\u003cbr\u003e\u003cbr\u003eMost apps don\u0027t need access to high sensor sampling rate. Double check your use case to ensure your app absolutely needs access to sensor sampling rate \u003e 200Hz. Be prepared for your app to be rejected from listing on Play Store until your use case for high sensor sampling rate has been reviewed and validated by the policy team.\u003cbr\u003e\u003cbr\u003eIssue id: HighSamplingRate\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInvalidImeActionId",
          "displayName": "Invalid imeActionId declaration",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid imeActionId declaration\u003cbr\u003e\u003cbr\u003e\u003ccode\u003eandroid:imeActionId\u003c/code\u003e should not be a resource ID such as \u003ccode\u003e@+id/resName\u003c/code\u003e. It must be an integer constant, or an integer resource reference, as defined in \u003ccode\u003eEditorInfo\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: InvalidImeActionId\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/android/view/inputmethod/EditorInfo.html\"\u003ehttps://developer.android.com/reference/android/view/inputmethod/EditorInfo.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNestedScrolling",
          "displayName": "Nested scrolling widgets",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNested scrolling widgets\u003cbr\u003e\u003cbr\u003eA scrolling widget such as a \u003ccode\u003eScrollView\u003c/code\u003e should not contain any nested scrolling widgets since this has various usability issues\u003cbr\u003e\u003cbr\u003eIssue id: NestedScrolling\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIntentFilterUniqueDataAttributes",
          "displayName": "Data tags should only declare unique attributes",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eData tags should only declare unique attributes\u003cbr\u003e\u003cbr\u003e\u003ccode\u003e\u0026lt;intent-filter\u003e\u003c/code\u003e \u003ccode\u003e\u0026lt;data\u003e\u003c/code\u003e tags should only declare a single unique attribute (i.e. scheme OR host, but not both). This better matches the runtime behavior of intent filters, as they combine all of the declared data attributes into a single matcher which is allowed to handle any combination across attribute types.\u003cbr/\u003e\n\u003cbr/\u003e\nFor example, the following two \u003ccode\u003e\u0026lt;intent-filter\u003e\u003c/code\u003e declarations are the same:\n\u003cpre\u003e\n\u0026lt;intent-filter\u003e\n    \u0026lt;data android:scheme\u003d\"http\" android:host\u003d\"example.com\" /\u003e\n    \u0026lt;data android:scheme\u003d\"https\" android:host\u003d\"example.org\" /\u003e\n\u0026lt;/intent-filter\u003e\n\u003c/pre\u003e\n\n\u003cpre\u003e\n\u0026lt;intent-filter\u003e\n    \u0026lt;data android:scheme\u003d\"http\"/\u003e\n    \u0026lt;data android:scheme\u003d\"https\"/\u003e\n    \u0026lt;data android:host\u003d\"example.com\" /\u003e\n    \u0026lt;data android:host\u003d\"example.org\" /\u003e\n\u0026lt;/intent-filter\u003e\n\u003c/pre\u003e\n\u003cbr/\u003e\nThey both handle all of the following:\u003cbr/\u003e\n* \u003ca href\u003d\"http://example.com\"\u003ehttp://example.com\u003c/a\u003e\u003cbr/\u003e\n* \u003ca href\u003d\"https://example.com\"\u003ehttps://example.com\u003c/a\u003e\u003cbr/\u003e\n* \u003ca href\u003d\"http://example.org\"\u003ehttp://example.org\u003c/a\u003e\u003cbr/\u003e\n* \u003ca href\u003d\"https://example.org\"\u003ehttps://example.org\u003c/a\u003e\u003cbr/\u003e\n\u003cbr/\u003e\nThe second one better communicates the combining behavior and is clearer to an external reader that one should not rely on the scheme/host being self contained. It is not obvious in the first that \u003ca href\u003d\"http://example.org\"\u003ehttp://example.org\u003c/a\u003e is also matched, which can lead to confusion (or incorrect behavior) with a more complex set of schemes/hosts.\u003cbr/\u003e\n\u003cbr/\u003e\nNote that this does not apply to host + port, as those must be declared in the same \u003ccode\u003e\u0026lt;data\u003e\u003c/code\u003e tag and are only associated with each other.\u003cbr\u003e\u003cbr\u003eIssue id: IntentFilterUniqueDataAttributes\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/components/intents-filters\"\u003ehttps://developer.android.com/guide/components/intents-filters\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWrongCase",
          "displayName": "Wrong case for view tag",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWrong case for view tag\u003cbr\u003e\u003cbr\u003eMost layout tags, such as \u003ccode\u003e\u0026lt;Button\u003e\u003c/code\u003e, refer to actual view classes and are therefore capitalized. However, there are exceptions such as \u003ccode\u003e\u0026lt;fragment\u003e\u003c/code\u003e and \u003ccode\u003e\u0026lt;include\u003e\u003c/code\u003e. This lint check looks for incorrect capitalizations.\u003cbr\u003e\u003cbr\u003eIssue id: WrongCase\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/components/fragments.html\"\u003ehttps://developer.android.com/guide/components/fragments.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintCanvasSize",
          "displayName": "Wrong Canvas Size",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWrong Canvas Size\u003cbr\u003e\u003cbr\u003eIn a custom view\u0027s draw implementation, you should normally call \u003ccode\u003egetWidth\u003c/code\u003e and \u003ccode\u003egetHeight\u003c/code\u003e on the custom view itself, not on the \u003ccode\u003ecanvas\u003c/code\u003e instance.\u003cbr/\u003e\n\u003cbr/\u003e\nCanvas width and height are the width and height of the \u003ccode\u003eCanvas\u003c/code\u003e, which is not always the same as size of the view.\u003cbr/\u003e\n\u003cbr/\u003e\nIn the hardware accelerated path the width and height of the canvas typically always match that of the \u003ccode\u003eView\u003c/code\u003e because every view goes to its own recorded \u003ccode\u003eDisplayList\u003c/code\u003e. But in software rendering there\u0027s just one canvas that is clipped and transformed as it makes its way through the \u003ccode\u003eView\u003c/code\u003e tree, and otherwise remains the same \u003ccode\u003eCanvas\u003c/code\u003e object for every View\u0027s draw method.\u003cbr/\u003e\n\u003cbr/\u003e\nYou should only use Canvas state to adjust how much you draw, such as a quick-reject for early work avoidance if it\u0027s going to be clipped away, but not what you draw.\u003cbr\u003e\u003cbr\u003eIssue id: CanvasSize\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintHalfFloat",
          "displayName": "Incorrect Half Float",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncorrect Half Float\u003cbr\u003e\u003cbr\u003eHalf-precision floating point are stored in a short data type, and should be manipulated using the \u003ccode\u003eandroid.util.Half\u003c/code\u003e class. This check flags usages where it appears that these values are used incorrectly.\u003cbr\u003e\u003cbr\u003eIssue id: HalfFloat\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintQueryPermissionsNeeded",
          "displayName": "Using APIs affected by query permissions",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing APIs affected by query permissions\u003cbr\u003e\u003cbr\u003eApps that target Android 11 cannot query or interact with other installed apps by default. If you need to query or interact with other installed apps, you may need to add a \u003ccode\u003e\u0026lt;queries\u003e\u003c/code\u003e declaration in your manifest.\u003cbr/\u003e\n\u003cbr/\u003e\nAs a corollary, the methods \u003ccode\u003ePackageManager#getInstalledPackages\u003c/code\u003e and \u003ccode\u003ePackageManager#getInstalledApplications\u003c/code\u003e will no longer return information about all installed apps. To query specific apps or types of apps, you can use methods like \u003ccode\u003ePackageManager#getPackageInfo\u003c/code\u003e or \u003ccode\u003ePackageManager#queryIntentActivities\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: QueryPermissionsNeeded\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://g.co/dev/packagevisibility\"\u003ehttps://g.co/dev/packagevisibility\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnlocalizedSms",
          "displayName": "SMS phone number missing country code",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eSMS phone number missing country code\u003cbr\u003e\u003cbr\u003eSMS destination numbers must start with a country code or the application code must ensure that the SMS is only sent when the user is in the same country as the receiver.\u003cbr\u003e\u003cbr\u003eIssue id: UnlocalizedSms\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintObjectAnimatorBinding",
          "displayName": "Incorrect ObjectAnimator Property",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncorrect ObjectAnimator Property\u003cbr\u003e\u003cbr\u003eThis check cross references properties referenced by String from \u003ccode\u003eObjectAnimator\u003c/code\u003e and \u003ccode\u003ePropertyValuesHolder\u003c/code\u003e method calls and ensures that the corresponding setter methods exist and have the right signatures.\u003cbr\u003e\u003cbr\u003eIssue id: ObjectAnimatorBinding\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNonResizeableActivity",
          "displayName": "Activity is set to be non resizeable",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eActivity is set to be non resizeable\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e\u0026lt;activity\u003e\u003c/code\u003e element should be allowed to be resized to allow users to take advantage of the multi-window environments available on larger screen Android devices.\u003cbr/\u003e\n\u003cbr/\u003e\nTo fix the issue, consider declaring the corresponding activity element with \u003ccode\u003eresizableActivity\u003d\"true\"\u003c/code\u003e attribute.\u003cbr\u003e\u003cbr\u003eIssue id: NonResizeableActivity\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/topic/arc/window-management\"\u003ehttps://developer.android.com/topic/arc/window-management\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNetworkSecurityConfig",
          "displayName": "Valid Network Security Config File",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eValid Network Security Config File\u003cbr\u003e\u003cbr\u003eEnsures that a \u003ccode\u003e\u0026lt;network-security-config\u003e\u003c/code\u003e file, which is pointed to by an \u003ccode\u003eandroid:networkSecurityConfig\u003c/code\u003e attribute in the manifest file, is valid\u003cbr\u003e\u003cbr\u003eIssue id: NetworkSecurityConfig\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/preview/features/security-config.html\"\u003ehttps://developer.android.com/preview/features/security-config.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintStateListReachable",
          "displayName": "Unreachable state in a \u003cselector\u003e",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnreachable state in a \u003ccode\u003e\u0026lt;selector\u003e\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eIn a selector, only the last child in the state list should omit a state qualifier. If not, all subsequent items in the list will be ignored since the given item will match all.\u003cbr\u003e\u003cbr\u003eIssue id: StateListReachable\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNotConstructor",
          "displayName": "Not a Constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNot a Constructor\u003cbr\u003e\u003cbr\u003eThis check catches methods that look like they were intended to be constructors, but aren\u0027t.\u003cbr\u003e\u003cbr\u003eIssue id: NotConstructor\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDuplicateIds",
          "displayName": "Duplicate ids within a single layout",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eDuplicate ids within a single layout\u003cbr\u003e\u003cbr\u003eWithin a layout, id\u0027s should be unique since otherwise \u003ccode\u003efindViewById()\u003c/code\u003e can return an unexpected view.\u003cbr\u003e\u003cbr\u003eIssue id: DuplicateIds\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLibraryCustomView",
          "displayName": "Custom views in libraries should use res-auto-namespace",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eCustom views in libraries should use res-auto-namespace\u003cbr\u003e\u003cbr\u003eWhen using a custom view with custom attributes in a library project, the layout must use the special namespace \u003ca href\u003d\"http://schemas.android.com/apk/res-auto\"\u003ehttp://schemas.android.com/apk/res-auto\u003c/a\u003e instead of a URI which includes the library project\u0027s own package. This will be used to automatically adjust the namespace of the attributes when the library resources are merged into the application project.\u003cbr\u003e\u003cbr\u003eIssue id: LibraryCustomView\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintVectorDrawableCompat",
          "displayName": "Using VectorDrawableCompat",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing VectorDrawableCompat\u003cbr\u003e\u003cbr\u003eTo use VectorDrawableCompat, you need to make two modifications to your project. First, set \u003ccode\u003eandroid.defaultConfig.vectorDrawables.useSupportLibrary \u003d true\u003c/code\u003e in your \u003ccode\u003ebuild.gradle\u003c/code\u003e file, and second, use \u003ccode\u003eapp:srcCompat\u003c/code\u003e instead of \u003ccode\u003eandroid:src\u003c/code\u003e to refer to vector drawables.\u003cbr\u003e\u003cbr\u003eIssue id: VectorDrawableCompat\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/graphics/vector-drawable-resources\"\u003ehttps://developer.android.com/guide/topics/graphics/vector-drawable-resources\u003c/a\u003e\u003cbr\u003e\u003ca href\u003d\"https://medium.com/androiddevelopers/using-vector-assets-in-android-apps-4318fd662eb9\"\u003ehttps://medium.com/androiddevelopers/using-vector-assets-in-android-apps-4318fd662eb9\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintFindViewByIdCast",
          "displayName": "Add Explicit Cast",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAdd Explicit Cast\u003cbr\u003e\u003cbr\u003eIn Android O, the \u003ccode\u003efindViewById\u003c/code\u003e signature switched to using generics, which means that most of the time you can leave out explicit casts and just assign the result of the \u003ccode\u003efindViewById\u003c/code\u003e call to variables of specific view classes.\u003cbr/\u003e\n\u003cbr/\u003e\nHowever, due to language changes between Java 7 and 8, this change may cause code to not compile without explicit casts. This lint check looks for these scenarios and suggests casts to be added now such that the code will continue to compile if the language level is updated to 1.8.\u003cbr\u003e\u003cbr\u003eIssue id: FindViewByIdCast\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMissingConstraints",
          "displayName": "Missing Constraints in ConstraintLayout",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing Constraints in ConstraintLayout\u003cbr\u003e\u003cbr\u003eThe layout editor allows you to place widgets anywhere on the canvas, and it records the current position with designtime attributes (such as \u003ccode\u003elayout_editor_absoluteX\u003c/code\u003e). These attributes are \u003cb\u003enot\u003c/b\u003e applied at runtime, so if you push your layout on a device, the widgets may appear in a different location than shown in the editor. To fix this, make sure a widget has both horizontal and vertical constraints by dragging from the edge connections.\u003cbr\u003e\u003cbr\u003eIssue id: MissingConstraints\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGradleDynamicVersion",
          "displayName": "Gradle Dynamic Version",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eGradle Dynamic Version\u003cbr\u003e\u003cbr\u003eUsing \u003ccode\u003e+\u003c/code\u003e in dependencies lets you automatically pick up the latest available version rather than a specific, named version. However, this is not recommended; your builds are not repeatable; you may have tested with a slightly different version than what the build server used. (Using a dynamic version as the major version number is more problematic than using it in the minor version position.)\u003cbr\u003e\u003cbr\u003eIssue id: GradleDynamicVersion\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLockedOrientationActivity",
          "displayName": "Incompatible screenOrientation manifest value",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIncompatible screenOrientation value\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e\u0026lt;activity\u003e\u003c/code\u003e element should not be locked to any orientation so that users can take advantage of the multi-window environments and larger screens available on Android. To fix the issue, consider declaring the corresponding activity element with `screenOrientation\u003d\"unspecified\"\u003ccode\u003eor \u003c/code\u003e\"fullSensor\"` attribute.\u003cbr\u003e\u003cbr\u003eIssue id: LockedOrientationActivity\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/topic/arc/window-management\"\u003ehttps://developer.android.com/topic/arc/window-management\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintReturnThis",
          "displayName": "Method must return this",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMethod must return \u003ccode\u003ethis\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eMethods annotated with \u003ccode\u003e@ReturnThis\u003c/code\u003e (usually in the super method that this method is overriding) should also \u003ccode\u003ereturn this\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: ReturnThis\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLongLogTag",
          "displayName": "Too Long Log Tags",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eToo Long Log Tags\u003cbr\u003e\u003cbr\u003eLog tags are only allowed to be at most 23 tag characters long.\u003cbr\u003e\u003cbr\u003eIssue id: LongLogTag\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintBottomAppBar",
          "displayName": "BottomAppBar Problems",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eBottomAppBar Problems\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003eBottomAppBar\u003c/code\u003e widget must be placed within a \u003ccode\u003eCoordinatorLayout\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: BottomAppBar\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintExifInterface",
          "displayName": "Using android.media.ExifInterface",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing \u003ccode\u003eandroid.media.ExifInterface\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003eandroid.media.ExifInterface\u003c/code\u003e implementation has some known security bugs in older versions of Android. There is a new implementation available of this library in the support library, which is preferable.\u003cbr\u003e\u003cbr\u003eIssue id: ExifInterface\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintProguardSplit",
          "displayName": "Proguard.cfg file contains generic Android rules",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eProguard.cfg file contains generic Android rules\u003cbr\u003e\u003cbr\u003eEarlier versions of the Android tools bundled a single \u003ccode\u003eproguard.cfg\u003c/code\u003e file containing a ProGuard configuration file suitable for Android shrinking and obfuscation. However, that version was copied into new projects, which means that it does not continue to get updated as we improve the default ProGuard rules for Android.\u003cbr/\u003e\n\u003cbr/\u003e\nIn the new version of the tools, we have split the ProGuard configuration into two halves:\u003cbr/\u003e\n* A simple configuration file containing only project-specific flags, in your project\u003cbr/\u003e\n* A generic configuration file containing the recommended set of ProGuard options for Android projects. This generic file lives in the SDK install directory which means that it gets updated along with the tools.\u003cbr/\u003e\n\u003cbr/\u003e\nIn order for this to work, the proguard.config property in the \u003ccode\u003eproject.properties\u003c/code\u003e file now refers to a path, so you can reference both the generic file as well as your own (and any additional files too).\u003cbr/\u003e\n\u003cbr/\u003e\nTo migrate your project to the new setup, create a new \u003ccode\u003eproguard-project.txt\u003c/code\u003e file in your project containing any project specific ProGuard flags as well as any customizations you have made, then update your project.properties file to contain:\u003cbr/\u003e\n\u003ccode\u003eproguard.config\u003d${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eIssue id: ProguardSplit\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAppCompatCustomView",
          "displayName": "Appcompat Custom Widgets",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eAppcompat Custom Widgets\u003cbr\u003e\u003cbr\u003eIn order to support features such as tinting, the appcompat library will automatically load special appcompat replacements for the builtin widgets. However, this does not work for your own custom views.\u003cbr/\u003e\n\u003cbr/\u003e\nInstead of extending the \u003ccode\u003eandroid.widget\u003c/code\u003e classes directly, you should instead extend one of the delegate classes in \u003ccode\u003eandroidx.appcompat.widget.AppCompatTextView\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: AppCompatCustomView\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintRegistered",
          "displayName": "Class is not registered in the manifest",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eClass is not registered in the manifest\u003cbr\u003e\u003cbr\u003eActivities, services and content providers should be registered in the \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e file using \u003ccode\u003e\u0026lt;activity\u003e\u003c/code\u003e, \u003ccode\u003e\u0026lt;service\u003e\u003c/code\u003e and \u003ccode\u003e\u0026lt;provider\u003e\u003c/code\u003e tags.\u003cbr/\u003e\n\u003cbr/\u003e\nIf your activity is simply a parent class intended to be subclassed by other \"real\" activities, make it an abstract class.\u003cbr\u003e\u003cbr\u003eIssue id: Registered\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/guide/topics/manifest/manifest-intro.html\"\u003ehttps://developer.android.com/guide/topics/manifest/manifest-intro.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintBlockedPrivateApi",
          "displayName": "Using Blocked Private API",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing Blocked Private API\u003cbr\u003e\u003cbr\u003eUsage of restricted non-SDK interface is forbidden for this targetSDK. Accessing non-SDK methods or fields through reflection has a high likelihood to break your app between versions, and is being restricted to facilitate future app compatibility.\u003cbr\u003e\u003cbr\u003eIssue id: BlockedPrivateApi\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/preview/restrictions-non-sdk-interfaces\"\u003ehttps://developer.android.com/preview/restrictions-non-sdk-interfaces\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGridLayout",
          "displayName": "GridLayout validation",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eGridLayout validation\u003cbr\u003e\u003cbr\u003eDeclaring a layout_row or layout_column that falls outside the declared size of a GridLayout\u0027s \u003ccode\u003erowCount\u003c/code\u003e or \u003ccode\u003ecolumnCount\u003c/code\u003e is usually an unintentional error.\u003cbr\u003e\u003cbr\u003eIssue id: GridLayout\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintMutatingSharedPrefs",
          "displayName": "Mutating an Immutable SharedPrefs Set",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMutating an Immutable SharedPrefs Set\u003cbr\u003e\u003cbr\u003eAs stated in the docs for \u003ccode\u003eSharedPreferences.getStringSet\u003c/code\u003e, you must not modify the set returned by \u003ccode\u003egetStringSet\u003c/code\u003e:\u003cbr/\u003e\n\u003cbr/\u003e\n  \"Note that you \u0026lt;em\u003emust not\u0026lt;/em\u003e modify the set instance returned    by this call.  The consistency of the stored data is not guaranteed    if you do, nor is your ability to modify the instance at all.\"\u003cbr\u003e\u003cbr\u003eIssue id: MutatingSharedPrefs\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWearableConfigurationAction",
          "displayName": "Wear configuration action metadata must match an activity",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eWear configuration action metadata must match an activity\u003cbr\u003e\u003cbr\u003eOnly when a watch face service defines \u003ccode\u003ewearableConfigurationAction\u003c/code\u003e metadata, with the value \u003ccode\u003eWATCH_FACE_EDITOR\u003c/code\u003e, there should be an activity in the same package, which has an intent filter for \u003ccode\u003eWATCH_FACE_EDITOR\u003c/code\u003e (with \u003ccode\u003ecom.google.android.wearable.watchface.category.WEARABLE_CONFIGURATION\u003c/code\u003e if \u003ccode\u003eminSdkVersion\u003c/code\u003e is less than 30).\u003cbr\u003e\u003cbr\u003eIssue id: WearableConfigurationAction\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/wearables/watch-faces/configuration\"\u003ehttps://developer.android.com/training/wearables/watch-faces/configuration\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintCheckResult",
          "displayName": "Ignoring results",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eIgnoring results\u003cbr\u003e\u003cbr\u003eSome methods have no side effects, and calling them without doing something without the result is suspicious.\u003cbr\u003e\u003cbr\u003eIssue id: CheckResult\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintParcelCreator",
          "displayName": "Missing Parcelable CREATOR field",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eMissing Parcelable \u003ccode\u003eCREATOR\u003c/code\u003e field\u003cbr\u003e\u003cbr\u003eAccording to the \u003ccode\u003eParcelable\u003c/code\u003e interface documentation, \"Classes implementing the Parcelable interface must also have a static field called \u003ccode\u003eCREATOR\u003c/code\u003e, which is an object implementing the \u003ccode\u003eParcelable.Creator\u003c/code\u003e interface.\"\u003cbr\u003e\u003cbr\u003eIssue id: ParcelCreator\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/android/os/Parcelable.html\"\u003ehttps://developer.android.com/reference/android/os/Parcelable.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNotificationIconCompatibility",
          "displayName": "Notification Icon Compatibility",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNotification Icon Compatibility\u003cbr\u003e\u003cbr\u003eNotification icons should define a raster image to support Android versions below 5.0 (API 21). Note that the way Lint decides whether an icon is a notification icon is based on the filename prefix \u003ccode\u003eic_stat_\u003c/code\u003e. This corresponds to the naming convention documented in \u003ca href\u003d\"https://material.io/design/iconography/\"\u003ehttps://material.io/design/iconography/\u003c/a\u003e\u003cbr\u003e\u003cbr\u003eIssue id: NotificationIconCompatibility\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintPermissionImpliesUnsupportedChromeOsHardware",
          "displayName": "Permission Implies Unsupported Chrome OS Hardware",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003ePermission Implies Unsupported Chrome OS Hardware\u003cbr\u003e\u003cbr\u003eThe \u003ccode\u003e\u0026lt;uses-permission\u003e\u003c/code\u003e element should not require a permission that implies an unsupported Chrome OS hardware feature. Google Play assumes that certain hardware related permissions indicate that the underlying hardware features are required by default. To fix the issue, consider declaring the corresponding uses-feature element with \u003ccode\u003erequired\u003d\"false\"\u003c/code\u003e attribute.\u003cbr\u003e\u003cbr\u003eIssue id: PermissionImpliesUnsupportedChromeOsHardware\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/topic/arc/manifest.html#implied-features\"\u003ehttps://developer.android.com/topic/arc/manifest.html#implied-features\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintDefaultLocale",
          "displayName": "Implied default locale in case conversion",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eImplied default locale in case conversion\u003cbr\u003e\u003cbr\u003eCalling \u003ccode\u003eString#toLowerCase()\u003c/code\u003e or \u003ccode\u003e#toUpperCase()\u003c/code\u003e \u003cb\u003ewithout specifying an explicit locale\u003c/b\u003e is a common source of bugs. The reason for that is that those methods will use the current locale on the user\u0027s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for \u003ccode\u003ei\u003c/code\u003e is \u003cb\u003enot\u003c/b\u003e \u003ccode\u003eI\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you want the methods to just perform ASCII replacement, for example to convert an enum name, call \u003ccode\u003eString#toUpperCase(Locale.US)\u003c/code\u003e instead. If you really want to use the current locale, call \u003ccode\u003eString#toUpperCase(Locale.getDefault())\u003c/code\u003e instead.\u003cbr\u003e\u003cbr\u003eIssue id: DefaultLocale\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/java/util/Locale.html#default_locale\"\u003ehttps://developer.android.com/reference/java/util/Locale.html#default_locale\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSuspiciousIndentation",
          "displayName": "Suspicious indentation",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eSuspicious indentation\u003cbr\u003e\u003cbr\u003eThis check looks for cases where the indentation suggests a grouping that isn\u0027t actually there in the code. A common example of this would be something like\n\u003cpre\u003e\nif (column \u003e width)\n    line++\n    column \u003d 0\n\u003c/pre\u003e\nHere, the \u003ccode\u003ecolumn \u003d 0\u003c/code\u003e line will be executed every single time, not just if the condition is true.\u003cbr\u003e\u003cbr\u003eIssue id: SuspiciousIndentation\u003cbr\u003e\u003cbr\u003eAvailable options:\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cb\u003ealways-run\u003c/b\u003e (default is false):\u003cbr/\u003e\nWhether this check should be included while editing.\u003cbr/\u003e\n\u003cbr/\u003e\nWhile you\u0027re editing, it\u0027s common to have a temporary situation where you have suspicious indentation scenarios -- e.g. you start typing an \u003ccode\u003eif\u003c/code\u003e statement on the line above something you want to make conditional, and you haven\u0027t indented it yet. It can be distracting and misleading to suddenly have both statements light up as errors. Therefore, lint will avoid including this check when running on the fly in the editor, unless it looks like the file has not been recently edited. With this option, you can turn it on in all cases.\u003cbr/\u003e\n\u003cbr/\u003e\nTo configure this option, use a \u003ccode\u003elint.xml\u003c/code\u003e file with an \u0026lt;option\u003e like this:\u003cbr/\u003e\n\n\u003cpre\u003e\n\u0026lt;lint\u003e\n    \u0026lt;issue id\u003d\"SuspiciousIndentation\"\u003e\n        \u0026lt;option name\u003d\"always-run\" value\u003d\"false\" /\u003e\n    \u0026lt;/issue\u003e\n\u0026lt;/lint\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintExtraText",
          "displayName": "Extraneous text in resource files",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eExtraneous text in resource files\u003cbr\u003e\u003cbr\u003eNon-value resource files should only contain elements and attributes. Any XML text content found in the file is likely accidental (and potentially dangerous if the text resembles XML and the developer believes the text to be functional).\u003cbr\u003e\u003cbr\u003eIssue id: ExtraText\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintValidRestrictions",
          "displayName": "Invalid Restrictions Descriptor",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid Restrictions Descriptor\u003cbr\u003e\u003cbr\u003eEnsures that an applications restrictions XML file is properly formed\u003cbr\u003e\u003cbr\u003eIssue id: ValidRestrictions\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/reference/android/content/RestrictionsManager.html\"\u003ehttps://developer.android.com/reference/android/content/RestrictionsManager.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintGestureBackNavigation",
          "displayName": "Usage of KeyEvent.KEYCODE_BACK",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsage of KeyEvent.KEYCODE_BACK\u003cbr\u003e\u003cbr\u003eStarting in Android 13 (API 33+), the handling of back events is moving to an ahead-of-time callback model. Use \u003ccode\u003eOnBackInvokedDispatcher.registerOnBackInvokedCallback(...)\u003c/code\u003e and \u003ccode\u003eonBackInvokedCallback\u003c/code\u003e or AndroidX\u0027s \u003ccode\u003eOnBackPressedDispatcher\u003c/code\u003e with an implemented \u003ccode\u003eonBackPressedCallback\u003c/code\u003e to handle back gestures and key presses.\u003cbr\u003e\u003cbr\u003eIssue id: GestureBackNavigation\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/about/versions/13/features/predictive-back-gesture\"\u003ehttps://developer.android.com/about/versions/13/features/predictive-back-gesture\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInlinedApi",
          "displayName": "Using inlined constants on older versions",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing inlined constants on older versions\u003cbr\u003e\u003cbr\u003eThis check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that\u0027s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it\u0027s safe and can be suppressed or whether the code needs to be guarded.\u003cbr/\u003e\n\u003cbr/\u003e\nIf you really want to use this API and don\u0027t need to support older devices just set the \u003ccode\u003eminSdkVersion\u003c/code\u003e in your \u003ccode\u003ebuild.gradle\u003c/code\u003e or \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e files.\u003cbr/\u003e\n\u003cbr/\u003e\nIf your code is \u003cb\u003edeliberately\u003c/b\u003e accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the \u003ccode\u003e@TargetApi\u003c/code\u003e annotation specifying the local minimum SDK to apply, such as \u003ccode\u003e@TargetApi(11)\u003c/code\u003e, such that this check considers 11 rather than your manifest file\u0027s minimum SDK as the required API level.\u003cbr\u003e\u003cbr\u003eIssue id: InlinedApi\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintInvalidVectorPath",
          "displayName": "Invalid vector paths",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid vector paths\u003cbr\u003e\u003cbr\u003eThis check ensures that vector paths are valid. For example, it makes sure that the numbers are not using scientific notation (such as 1.0e3) which can lead to runtime crashes on older devices. As another example, it flags numbers like \u003ccode\u003e.5\u003c/code\u003e which should be written as \u003ccode\u003e0.5\u003c/code\u003e instead to avoid crashes on some pre-Marshmallow devices.\u003cbr\u003e\u003cbr\u003eIssue id: InvalidVectorPath\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://issuetracker.google.com/37008268\"\u003ehttps://issuetracker.google.com/37008268\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNotSibling",
          "displayName": "Invalid Constraints",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eInvalid Constraints\u003cbr\u003e\u003cbr\u003eLayout constraints in a given \u003ccode\u003eConstraintLayout\u003c/code\u003e or \u003ccode\u003eRelativeLayout\u003c/code\u003e should reference other views within the same relative layout (but not itself!)\u003cbr\u003e\u003cbr\u003eIssue id: NotSibling\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintSpUsage",
          "displayName": "Using dp instead of sp for text sizes",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUsing \u003ccode\u003edp\u003c/code\u003e instead of \u003ccode\u003esp\u003c/code\u003e for text sizes\u003cbr\u003e\u003cbr\u003eWhen setting text sizes, you should normally use \u003ccode\u003esp\u003c/code\u003e, or \"scale-independent pixels\". This is like the \u003ccode\u003edp\u003c/code\u003e unit, but it is also scaled by the user\u0027s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user\u0027s preference.\u003cbr/\u003e\n\u003cbr/\u003e\nThere \u003cb\u003eare\u003c/b\u003e cases where you might need to use \u003ccode\u003edp\u003c/code\u003e; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user\u0027s font size settings are not respected, so consider adjusting the layout itself to be more flexible.\u003cbr\u003e\u003cbr\u003eIssue id: SpUsage\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/training/multiscreen/screendensities.html\"\u003ehttps://developer.android.com/training/multiscreen/screendensities.html\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintWrongRegion",
          "displayName": "Suspicious Language/Region Combination",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eSuspicious Language/Region Combination\u003cbr\u003e\u003cbr\u003eAndroid uses the letter codes ISO 639-1 for languages, and the letter codes ISO 3166-1 for the region codes. In many cases, the language code and the country where the language is spoken is the same, but it is also often not the case. For example, while \u0027se\u0027 refers to Sweden, where Swedish is spoken, the language code for Swedish is \u003cb\u003enot\u003c/b\u003e \u003ccode\u003ese\u003c/code\u003e (which refers to the Northern Sami language), the language code is \u003ccode\u003esv\u003c/code\u003e. And similarly the region code for \u003ccode\u003esv\u003c/code\u003e is El Salvador.\u003cbr/\u003e\n\u003cbr/\u003e\nThis lint check looks for suspicious language and region combinations, to help catch cases where you\u0027ve accidentally used the wrong language or region code. Lint knows about the most common regions where a language is spoken, and if a folder combination is not one of these, it is flagged as suspicious.\u003cbr/\u003e\n\u003cbr/\u003e\nNote however that it may not be an error: you can theoretically have speakers of any language in any region and want to target that with your resources, so this check is aimed at tracking down likely mistakes, not to enforce a specific set of region and language combinations.\u003cbr\u003e\u003cbr\u003eIssue id: WrongRegion\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIntentReset",
          "displayName": "Suspicious mix of setType and setData",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eSuspicious mix of \u003ccode\u003esetType\u003c/code\u003e and \u003ccode\u003esetData\u003c/code\u003e\u003cbr\u003e\u003cbr\u003eIntent provides the following APIs: \u003ccode\u003esetData(Uri)\u003c/code\u003e and \u003ccode\u003esetType(String)\u003c/code\u003e. Unfortunately, setting one clears the other. If you want to set both, you should call \u003ccode\u003esetDataAndType(Uri, String)\u003c/code\u003e instead.\u003cbr\u003e\u003cbr\u003eIssue id: IntentReset\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnusedTranslation",
          "displayName": "Unused Translation",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eUnused Translation\u003cbr\u003e\u003cbr\u003eIf an application defines a translation for a language which is not included in the app\u0027s \u003ccode\u003elocaleConfig\u003c/code\u003e file (when declared in the manifest), that language will be \"unused\"; it will not be presented to the user. Usually this means you have forgotten to include it in the locale config file.\u003cbr\u003e\u003cbr\u003eIssue id: UnusedTranslation\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/about/versions/13/features/app-languages\"\u003ehttps://developer.android.com/about/versions/13/features/app-languages\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintAndroidGradlePluginVersion",
          "displayName": "Obsolete Android Gradle Plugin Version",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eObsolete Android Gradle Plugin Version\u003cbr\u003e\u003cbr\u003eThis detector looks for usage of the Android Gradle Plugin where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find.\u003cbr\u003e\u003cbr\u003eIssue id: AndroidGradlePluginVersion\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintIncompatibleMediaBrowserServiceCompatVersion",
          "displayName": "Obsolete version of MediaBrowserServiceCompat",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eObsolete version of MediaBrowserServiceCompat\u003cbr\u003e\u003cbr\u003e\u003ccode\u003eMediaBrowserServiceCompat\u003c/code\u003e from version 23.2.0 to 23.4.0 of the Support v4 Library used private APIs and will not be compatible with future versions of Android beyond Android N. Please upgrade to version 24.0.0 or higher of the Support Library.\u003cbr\u003e\u003cbr\u003eIssue id: IncompatibleMediaBrowserServiceCompatVersion\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Migration",
      "inspections": [
        {
          "shortName": "CastDueToProgressionResolutionChangeMigration",
          "displayName": "Progression resolution change since 1.9",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n    Reports overloaded function calls where an argument requires an explicit cast to resolve to a proper declaration.\n    The current compiler warning (available since Kotlin 1.6.20) will become an error in Kotlin 1.8.\n\u003c/p\u003e\n\u003cp\u003e\n    Progressions and ranges types (\u003ccode\u003ekotlin.ranges\u003c/code\u003e) will start implementing the \u003ccode\u003eCollection\u003c/code\u003e interface in Kotlin\n    1.9 and later. This update will cause a change in resolution for overloaded functions. For instance, in the example below, the\n    \u003ccode\u003etest(1..5)\u003c/code\u003e call will be resolved to \u003ccode\u003etest(t: Any)\u003c/code\u003e in Kotlin 1.8 and earlier and to\n    \u003ccode\u003etest(t: Collection\u0026lt;*\u0026gt;)\u003c/code\u003e in Kotlin 1.9 and later.\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(t: Any) { }\n  fun test(t: Collection\u0026lt;*\u0026gt;) { }\n  fun invoke() {\n    test(1..5) // IntRange becomes Collection in 1.9\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe provided quick-fix captures the behaviour specific to the compiler of version 1.8 and earlier:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(t: Any) { }\n  fun test(t: Collection\u0026lt;*\u0026gt;) { }\n\n  fun invoke() {\n    test(1..5) // resolved to \u0027test(t: T)\u0027 before Kotlin 1.9\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(t: Any) { }\n  fun test(t: Collection\u0026lt;*\u0026gt;) { }\n\n  fun invoke() {\n    test((1..5) as Iterable\u0026lt;Int\u0026gt;) // resolved to \u0027test(t: T)\u0027 in Kotlin 1.9\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInspection is available for the Kotlin language level starting from 1.6.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinDeprecation",
          "displayName": "Usage of redundant or deprecated syntax or deprecated symbols",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports obsolete language features and unnecessarily verbose code constructs during the code cleanup operation (\u003cb\u003eCode | Code Cleanup\u003c/b\u003e).\n\u003cp\u003e\nThe quick-fix automatically replaces usages of obsolete language features or unnecessarily verbose code constructs with compact and up-to-date syntax.\n\u003cp\u003e\nIt also replaces deprecated symbols with their proposed substitutions.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ProhibitTypeParametersForLocalVariablesMigration",
          "displayName": "Local variable with type parameters",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports local variables with type parameters.\u003c/p\u003e\n\u003cp\u003eA type parameter for a local variable doesn\u0027t make sense because it can\u0027t be specialized.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      val \u0026lt;T\u0026gt; x \u003d \"\"\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      val x \u003d \"\"\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is 1.4 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "FromClosedRangeMigration",
          "displayName": "MIN_VALUE step in fromClosedRange() since 1.3",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eIntProgression.fromClosedRange()\u003c/code\u003e and \u003ccode\u003eLongProgression.fromClosedRange()\u003c/code\u003e with\n\u003ccode\u003eMIN_VALUE\u003c/code\u003e step.\n\u003cp\u003e\nIt is prohibited to call \u003ccode\u003eIntProgression.fromClosedRange()\u003c/code\u003e and \u003ccode\u003eLongProgression.fromClosedRange()\u003c/code\u003e with\n\u003ccode\u003eMIN_VALUE\u003c/code\u003e step. All such calls should be checked during migration to Kotlin 1.3+.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  IntProgression.fromClosedRange(12, 143, Int.MIN_VALUE)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the problem change the step of the progression.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RestrictReturnStatementTargetMigration",
          "displayName": "Target label does not denote a function since 1.4",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports labels that don\u0027t points to a functions.\n\u003cp\u003eIt\u0027s forbidden to declare a target label that does not denote a function.\u003c/p\u003e\n\u003cp\u003eThe quick-fix removes the label.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun testValLabelInReturn() {\n      L@ val fn \u003d { return@L }\n      fn()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun testValLabelInReturn() {\n      L@ val fn \u003d { return }\n      fn()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 1.4 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ProhibitJvmOverloadsOnConstructorsOfAnnotationClassesMigration",
          "displayName": "\u0027@JvmOverloads\u0027 annotation cannot be used on constructors of annotation classes since 1.4",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003e@JvmOverloads\u003c/code\u003e on constructors of annotation classes because it\u0027s meaningless.\u003c/p\u003e\n\u003cp\u003e\n    There is no footprint of \u003ccode\u003e@JvmOverloads\u003c/code\u003e in the generated bytecode and Kotlin metadata,\n    so \u003ccode\u003e@JvmOverloads\u003c/code\u003e doesn\u0027t affect the generated bytecode and the code behavior.\n\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e@JvmOverloads\u003c/code\u003e on constructors of annotation classes causes a compilation error since Kotlin 1.4.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  annotation class A \u003cb\u003e@JvmOverloads\u003c/b\u003e constructor(val x: Int \u003d 1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  annotation class A constructor(val x: Int \u003d 1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ProhibitUseSiteTargetAnnotationsOnSuperTypesMigration",
          "displayName": "Meaningless annotations targets on superclass",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports meaningless annotation targets on superclasses since Kotlin 1.4.\u003c/p\u003e\n\u003cp\u003eAnnotation targets such as \u003ccode\u003e@get:\u003c/code\u003e are meaningless on superclasses and are prohibited.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface Foo\n\n  annotation class Ann\n\n  class E : @field:Ann @get:Ann @set:Ann @setparam:Ann Foo\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface Foo\n\n  annotation class Ann\n\n  class E : Foo\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is 1.4 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "AmbiguousExpressionInWhenBranchMigration",
          "displayName": "Ambiguous logical expressions in \u0027when\u0027 branches since 1.7",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports ambiguous logical expressions in \u003ccode\u003ewhen\u003c/code\u003e branches which cause compilation errors in Kotlin 1.8 and later.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun Int.matches(strict: Boolean): Boolean \u003d when (strict) {\n      true -\u003e this \u003d\u003d 6\n      this in (4..7) -\u003e true // is ambiguous\n      else -\u003e false\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun Int.matches(strict: Boolean): Boolean \u003d when (strict) {\n      true -\u003e this \u003d\u003d 6\n      (this in (4..7)) -\u003e true // wrapped in parentheses\n      else -\u003e false\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInspection is available for Kotlin language level starting from 1.7.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ObsoleteExperimentalCoroutines",
          "displayName": "Experimental coroutines usages are deprecated since 1.3",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code that uses experimental coroutines.\n\u003cp\u003eSuch usages are incompatible with Kotlin 1.3+ and should be updated.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObsoleteKotlinJsPackages",
          "displayName": "\u0027kotlin.browser\u0027 and \u0027kotlin.dom\u0027 packages are deprecated since 1.4",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003ekotlin.dom\u003c/code\u003e and \u003ccode\u003ekotlin.browser\u003c/code\u003e packages.\n\u003cp\u003eThese packages were moved to \u003ccode\u003ekotlinx.dom\u003c/code\u003e and \u003ccode\u003ekotlinx.browser\u003c/code\u003e\n    respectively in Kotlin 1.4+.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WarningOnMainUnusedParameterMigration",
          "displayName": "Unused \u0027args\u0027 on \u0027main\u0027 since 1.4",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003emain\u003c/code\u003e function with an unused single parameter.\n\u003cp\u003eSince Kotlin 1.4, it is possible to use the \u003ccode\u003emain\u003c/code\u003e function without parameter as the entry point to the Kotlin program.\nThe compiler reports a warning for the \u003ccode\u003emain\u003c/code\u003e function with an unused parameter.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "InlineClassDeprecatedMigration",
          "displayName": "Inline classes are deprecated since 1.5",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n    Reports inline classes that are deprecated and cause compilation warnings in Kotlin 1.5 and later.\n    See \u003ca href\u003d\"https://kotlinlang.org/docs/whatsnew15.html#inline-classes\"\u003eWhat\u0027s new in Kotlin 1.5.0\u003c/a\u003e\n\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  inline class Password(val s: String)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @JvmInline\n  value class Password(val s: String)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eInspection is available for Kotlin language level starting from 1.5.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OverrideDeprecatedMigration",
          "displayName": "Do not propagate method deprecation through overrides since 1.9",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a declarations that are propagated by \u003ccode\u003e@Deprecated\u003c/code\u003e annotation that will lead to compilation error since 1.9.\n\u003cp\u003eMotivation types:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        Implementation changes are required for implementation design/architectural reasons\n    \u003c/li\u003e\n    \u003cli\u003e\n        Inconsistency in the design (things are done differently in different contexts)\n    \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eMore details:\u003c/b\u003e \u003ca href\u003d\"https://youtrack.jetbrains.com/issue/KT-47902\"\u003eKT-47902: Do not propagate method deprecation through overrides\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe quick-fix copies \u003ccode\u003e@Deprecated\u003c/code\u003e annotation from the parent declaration.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  open class \u003cb\u003eBase\u003c/b\u003e {\n      @Deprecated(\"Don\u0027t use\")\n      open fun foo() {}\n  }\n\n  class \u003cb\u003eDerived\u003c/b\u003e : \u003cb\u003eBase\u003c/b\u003e() {\n      override fun foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  open class \u003cb\u003eBase\u003c/b\u003e {\n      @Deprecated(\"Don\u0027t use\")\n      open fun foo() {}\n  }\n\n  class \u003cb\u003eDerived\u003c/b\u003e : \u003cb\u003eBase\u003c/b\u003e() {\n      @Deprecated(\"Don\u0027t use\")\n      override fun foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is 1.6 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonExhaustiveWhenStatementMigration",
          "displayName": "Non-exhaustive \u0027when\u0027 statements will be prohibited since 1.7",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a non-exhaustive \u003ccode\u003ewhen\u003c/code\u003e statements that will lead to compilation error since 1.7.\n\u003cp\u003eMotivation types:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        Problematic/meaningless usage patterns need to be discouraged/blocked (e.g. counterintuitive behaviors)\n        \u003cul\u003e\n            \u003cli\u003e\n                Code is error-prone\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        Inconsistency in the design (things are done differently in different contexts)\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eImpact types:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        Compilation. Some code that used to compile won\u0027t compile any more\n        \u003cul\u003e\n            \u003cli\u003e\n                There were cases when such code worked with no exceptions\n                \u003cul\u003e\n                    \u003cli\u003e\n                        Some such code could compile without any warnings\n                    \u003c/li\u003e\n                \u003c/ul\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eMore details:\u003c/b\u003e \u003ca href\u003d\"https://youtrack.jetbrains.com/issue/KT-47709\"\u003eKT-47709: Make when statements with enum, sealed, and Boolean subjects exhaustive by default\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe quick-fix adds the missing \u003ccode\u003eelse -\u003e {}\u003c/code\u003e branch.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  sealed class \u003cb\u003eBase\u003c/b\u003e {\n      class \u003cb\u003eA\u003c/b\u003e : \u003cb\u003eBase\u003c/b\u003e()\n      class \u003cb\u003eB\u003c/b\u003e : \u003cb\u003eBase\u003c/b\u003e()\n  }\n\n  fun test(base: \u003cb\u003eBase\u003c/b\u003e) {\n      when (base) {\n          is \u003cb\u003eBase\u003c/b\u003e.\u003cb\u003eA\u003c/b\u003e -\u003e \"\"\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  sealed class \u003cb\u003eBase\u003c/b\u003e {\n      class \u003cb\u003eA\u003c/b\u003e : \u003cb\u003eBase\u003c/b\u003e()\n      class \u003cb\u003eB\u003c/b\u003e : \u003cb\u003eBase\u003c/b\u003e()\n  }\n\n  fun test(base: \u003cb\u003eBase\u003c/b\u003e) {\n      when (base) {\n          is \u003cb\u003eBase\u003c/b\u003e.\u003cb\u003eA\u003c/b\u003e -\u003e \"\"\n          else -\u003e {}\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is 1.6 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AddConversionCallMigration",
          "displayName": "Explicit conversion from `Int` needed since 1.9",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports expressions that will be of type \u003ccode\u003eInt\u003c/code\u003e, thus causing compilation errors in Kotlin 1.9 and later.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun takeByte(x: Byte) {}\n\n  fun foo() {\n      takeByte(1 + 1) // will be resolved to Int in 1.9\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun takeByte(x: Byte) {}\n\n  fun foo() {\n      takeByte((1 + 1).toByte()) // will be resolved to Int in 1.9\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eInspection is available for Kotlin language level starting from 1.7.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ProhibitRepeatedUseSiteTargetAnnotationsMigration",
          "displayName": "Repeated annotation which is not marked as \u0027@Repeatable\u0027",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports the repeated use of a non-\u003ccode\u003e@Repeatable\u003c/code\u003e annotation on property accessors.\u003c/p\u003e\n\u003cp\u003e\n    As a result of using non-\u003ccode\u003e@Repeatable\u003c/code\u003e annotation multiple times, both annotation usages\n    will appear in the bytecode leading to an ambiguity in reflection calls.\n\u003c/p\u003e\n\u003cp\u003e\n    Since Kotlin 1.4 it\u0027s mandatory to either mark annotation as \u003ccode\u003e@Repeatable\u003c/code\u003e or not\n    repeat the annotation, otherwise it will lead to compilation error.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  annotation class Foo(val x: Int)\n\n  @get:\u003cb\u003eFoo\u003c/b\u003e(10)\n  val a: String\n      @\u003cb\u003eFoo\u003c/b\u003e(20) get() \u003d \"foo\" // annotation repeated twice but not marked as @Repeatable\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is 1.4 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "NoConstructorMigration",
          "displayName": "Forbidden constructor call",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a constructor calls on functional supertypes that will lead to compilation error since 1.9.\n\u003cp\u003eMotivation types:\u003c/p\u003e\n\u003cul\u003e\n    \u003cli\u003e\n        The implementation does not abide by a published spec or documentation\n    \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eMore details:\u003c/b\u003e \u003ca href\u003d\"https://youtrack.jetbrains.com/issue/KT-46344\"\u003eKT-46344: No error for a super class constructor call on a function interface in supertypes list\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe quick-fix removes a constructor call.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class A : () -\u003e Int()\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class A : () -\u003e Int\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is 1.7 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantLabelMigration",
          "displayName": "Redundant label",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant labels which cause compilation errors since Kotlin 1.4.\u003c/p\u003e\n\u003cp\u003eSince Kotlin 1.0, one can mark any statement with a label:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n    L1@ val x \u003d L2@bar()\n  }\n\u003c/code\u003e\u003c/pre\u003e\nHowever, these labels can be referenced only in a limited number of ways:\n\u003cul\u003e\n    \u003cli\u003ebreak / continue from a loop\u003c/li\u003e\n    \u003cli\u003enon-local return from an inline lambda or inline anonymous function\u003c/li\u003esssss\n\u003c/ul\u003e\n\u003cp\u003eSuch labels are prohibited since Kotlin 1.4.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is 1.4 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "DeclaringClassMigration",
          "displayName": "Deprecated \u0027Enum.declaringClass\u0027 property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u0027declaringClass\u0027 property calls on Enum that will lead to compilation error since 1.9.\n\u003cp\u003e\u0027Enum.getDeclaringClass\u0027 is among \"hidden\" Java functions which aren\u0027t normally visible by resolve. However, it\u0027s visible via synthetic\n    property that is a front-end bug.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eMore details:\u003c/b\u003e \u003ca href\u003d\"https://youtrack.jetbrains.com/issue/KT-49653\"\u003eKT-49653 Deprecate and remove Enum.declaringClass synthetic\n    property\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces a call with \u0027declaringJavaClass\u0027.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun \u0026lt;E: Enum\u0026lt;E\u0026gt;\u0026gt; foo(values: Array\u0026lt;E\u0026gt;) {\n    EnumSet.noneOf(values.first().declaringClass)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun \u0026lt;E: Enum\u0026lt;E\u0026gt;\u0026gt; foo(values: Array\u0026lt;E\u0026gt;) {\n    EnumSet.noneOf(values.first().declaringJavaClass)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the Kotlin language level of the project or module is 1.7 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "JSON and JSON5",
      "inspections": [
        {
          "shortName": "JsonPathUnknownFunction",
          "displayName": "Unknown JSONPath function",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "JSONPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unknown name in a JSONPath function call instead of known standard function names:\n\u003ccode\u003econcat\u003c/code\u003e, \u003ccode\u003ekeys\u003c/code\u003e, \u003ccode\u003elength\u003c/code\u003e, \u003ccode\u003emin\u003c/code\u003e, \u003ccode\u003emax\u003c/code\u003e, \u003ccode\u003eavg\u003c/code\u003e, \u003ccode\u003estddev\u003c/code\u003e, \u003ccode\u003esum\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JsonSchemaDeprecation",
          "displayName": "Deprecated JSON property",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a deprecated property in a JSON file.\u003cbr\u003e\nNote that deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard extension \u0027deprecationMessage\u0027.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JsonStandardCompliance",
          "displayName": "Compliance with JSON standard",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the following discrepancies of a JSON file with  \u003ca href\u003d\"https://tools.ietf.org/html/rfc7159\"\u003ethe language specification\u003c/a\u003e:\n\u003cul\u003e\n  \u003cli\u003eA line or  block comment (configurable).\u003c/li\u003e\n  \u003cli\u003eMultiple top-level values (expect for JSON Lines files, configurable for others).\u003c/li\u003e\n  \u003cli\u003eA trailing comma in an object or array (configurable).\u003c/li\u003e\n  \u003cli\u003eA single quoted string.\u003c/li\u003e\n  \u003cli\u003eA property key is a not a double quoted strings.\u003c/li\u003e\n  \u003cli\u003eA NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Json5StandardCompliance",
          "displayName": "Compliance with JSON5 standard",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "JSON5",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports inconsistency with \u003ca href\u003d\"http://json5.org\"\u003ethe language specification\u003c/a\u003e in a JSON5 file.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JsonDuplicatePropertyKeys",
          "displayName": "Duplicate keys in object literals",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a duplicate key in an object literal.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MongoDBJsonDuplicatePropertyKeys",
          "displayName": "Duplicate keys in object literals",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.persistence",
          "pluginVersion": "231.9011.34",
          "language": "MongoDB-JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a duplicate key in an object literal.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JsonSchemaCompliance",
          "displayName": "Compliance with JSON schema",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports inconsistence between a JSON file and the \u003ca href\u003d\"https://json-schema.org\"\u003eJSON schema\u003c/a\u003e that is assigned to it.\u003cbr\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JsonSchemaRefReference",
          "displayName": "Unresolved \u0027$ref\u0027 and \u0027$schema\u0027 references",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved \u003ccode\u003e$ref\u003c/code\u003e or \u003ccode\u003e$schema\u003c/code\u003e path in a JSON schema.\u003cbr\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JsonPathEvaluateUnknownKey",
          "displayName": "Unknown property key used for JSONPath evaluate expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "JSONPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a key in a JSONPath expression that is missing in the source JSON document to evaluate.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JsonPathUnknownOperator",
          "displayName": "Unknown JSONPath operator",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "JSONPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unknown operator on a JSONPath expression instead of one of the standard ones: \n\u003ccode\u003ein\u003c/code\u003e, \u003ccode\u003enin\u003c/code\u003e, \u003ccode\u003esubsetof\u003c/code\u003e, \u003ccode\u003eanyof\u003c/code\u003e, \u003ccode\u003enoneof\u003c/code\u003e, \u003ccode\u003esize\u003c/code\u003e, \u003ccode\u003eempty\u003c/code\u003e, \u003ccode\u003econtains\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "JPA",
      "inspections": [
        {
          "shortName": "JpaEntityGraphsInspection",
          "displayName": "Unresolved entity graph names",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the following unresolved attributes inside EntityGraph-related annotations:\u003cbr/\u003e\n\u003cul\u003e\n  \u003cli\u003e Value in \u003ccode\u003e@NamedAttributeNode\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e Named subgraph in \u003ccode\u003e@NamedAttributeNode\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e Name in \u003ccode\u003e@NamedEntityGraph\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\u003cbr/\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Entity\n  @NamedEntityGraph(name \u003d \"entity-graph\", ...)\n  public class JavaEntity {\n    public void foo() {\n      Persistence.createEntityManagerFactory(\"\")\n        .createEntityManager()\n        .getEntityGraph(\"unknown-entity-graph\"); // unresolved reference\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaMissingIdInspection",
          "displayName": "Persistent entity misses primary key",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports missing identification property persistence objects.\u003cbr/\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Entity\n  public class JavaEntity { // Error: entity class should have an @Id annotated property\n\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaEntityListenerInspection",
          "displayName": "Entity listener problems",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the following JPA specification errors:\u003cbr/\u003e\n\u003cul\u003e\n  \u003cli\u003eEntity listener classes without public no-argument constructors\u003c/li\u003e\n  \u003cli\u003eEntity listener methods with incorrect signatures\u003c/li\u003e\n\u003c/ul\u003e\u003cbr/\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Entity\n  @EntityListeners(value \u003d JavaEntityListener.class)\n  class JavaEntity { ... }\n\n  class JavaEntityListener {\n\n    @PostLoad\n    void postLoad(String parameter) { ... } // Error: method \u0027postLoad\u0027 should take parameter of type \u0027Object\u0027 here\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaEntityListenerWarningsInspection",
          "displayName": "Entity listener warnings",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports entity listener classes without any entity listener methods.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Entity\n  @EntityListeners(value \u003d JavaEntityListener.class)\n  public class JavaEntity { ... }\n\n  class JavaEntityListener { // Error: no entity listener-specific methods found\n\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaQlInspection",
          "displayName": "Query language checks",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "JPAQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the following errors inside Persistence QL queries:\n\u003cul\u003e\n  \u003cli\u003eMismatching expression types\u003c/li\u003e\n  \u003cli\u003eIncorrect parameters\u003c/li\u003e\n  \u003cli\u003eEmpty or constant conditions\u003c/li\u003e\n  \u003cli\u003eUnresolved symbols\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample queries:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nSELECT OBJECT(e) FROM JavaEntity e WHERE TRUE // Warning: constant condition\n\nSELECT OBJECT(e) FROM JavaEntity e WHERE e.id BETWEEN 0 AND \u00272\u0027 // Error: expected a numeric value but got a string\n\nSELECT e from JavaEntity e where e.id\u003d?1 and e.name\u003d?3 // Error: there are only 2 actual query parameters\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaDomInspection",
          "displayName": "persistence.xml problems",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\nReports the following problems inside XML configuration files:\n\u003cul\u003e\n  \u003cli\u003eReferences to non-instantiable classes\u003c/li\u003e\n  \u003cli\u003eReferences to classes that do not extend required class\u003c/li\u003e\n  \u003cli\u003eReferences to classes with inappropriate scope\u003c/li\u003e\n  \u003cli\u003eTag and attribute values that do not match required pattern (for example, Java Identifiers)\u003c/li\u003e\n  \u003cli\u003eTags that do not include required children tags or attributes\u003c/li\u003e\n  \u003cli\u003eTags that define objects with duplicate names\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;persistence\u0026gt;\n    \u0026lt;persistence-unit name\u003d\"example-persistence-unit\"\u0026gt;\n        \u0026lt;provider\u0026gt;org.example.SomeRandomClass\u0026lt;/provider\u0026gt; // Error: provider class should implement PersistenceProvider interface\n    \u0026lt;/persistence-unit\u0026gt;\n\u0026lt;/persistence\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JpaDataSourceORMDomInspection",
          "displayName": "Unresolved database references in XML",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Persistence ORM XML descriptors that cannot be resolved within the configured datasource\nand suggests refreshing the datasource or assigning a different one.\n\n\u003cp\u003e\u003cb\u003eExample database table:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  CREATE TABLE DATA_TABLE (\n    ID INTEGER,\n    DATA VARCHAR(100)\n  );\n\u003c/code\u003e\u003c/pre\u003e\u003cbr/\u003e\n\n\u003cp\u003e\u003cb\u003eExample JSP file:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u0026gt;\n  \u0026lt;entity-mappings xmlns\u003d\"http://java.sun.com/xml/ns/persistence/orm\" version\u003d\"1.0\"\u0026gt;\n    \u0026lt;entity name\u003d\"JavaEntity\" class\u003d\"JavaEntity\"\u0026gt;\n        \u0026lt;table name\u003d\"UNKNOWN_TABLE\"/\u0026gt; // Error: unresolved table\n        \u0026lt;attributes\u0026gt;\n          \u0026lt;id name\u003d\"id\"\u0026gt;\n            \u0026lt;column name\u003d\"ID\" nullable\u003d\"false\"/\u0026gt;\n          \u0026lt;/id\u0026gt;\n          \u0026lt;basic name\u003d\"UNKNOWN_COLUMN\"\u0026gt; // Error: unresolved column\n            \u0026lt;column name\u003d\"UNKNOWN_COLUMN\" length\u003d\"12\"/\u0026gt;\n          \u0026lt;/basic\u0026gt;\n        \u0026lt;/attributes\u0026gt;\n    \u0026lt;/entity\u0026gt;\n  \u0026lt;/entity-mappings\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cbr/\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003cb\u003eNOTE:\u003c/b\u003e Datasource can be configured via `Assign datasource` action\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaDataSourceORMInspection",
          "displayName": "Unresolved database references in annotations",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports references inside the following Persistence ORM annotations if they cannot be resolved within the configured datasource:\u003cbr/\u003e\n\u003cul\u003e\n  \u003cli\u003e Table\u003c/li\u003e\n  \u003cli\u003e Column\u003c/li\u003e\n  \u003cli\u003e [Any]To[Any]\u003c/li\u003e\n  \u003cli\u003e JoinColumn / JoinTable\u003c/li\u003e\n  \u003cli\u003e NamedQuery / NativeQuery\u003c/li\u003e\n  \u003cli\u003e Embeddable\u003c/li\u003e\n\u003c/ul\u003e\u003cbr/\u003e\n\nSuggests refreshing the datasource or assigning a different one.\u003cbr/\u003e\n\n\u003cp\u003e\u003cb\u003eExample database table:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  CREATE TABLE DATA_TABLE (\n    ID INTEGER,\n    DATA VARCHAR(100)\n);\n\u003c/code\u003e\u003c/pre\u003e\u003cbr/\u003e\n\n\u003cp\u003e\u003cb\u003eExample JPA entity class:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Entity\n  @Table(name \u003d \"UNKNOWN_TABLE\") // unresolved reference\n  public class JavaEntity {\n    @Column(name \u003d \"ID\") // cannot resolve columns in a table that\u0027s not defined\n    Integer id;\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cbr/\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003cb\u003eNOTE:\u003c/b\u003e Datasource can be configured via `Assign datasource` action or the corresponding gutter icon for entity class\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaConfigDomFacetInspection",
          "displayName": "Persistence.xml is not added to facet",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports missing persistence.xml configuration files and suggests adding the file to the persistence facet.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaModelReferenceInspection",
          "displayName": "Unresolved references in queries",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved symbols in the following JPA annotations and API methods:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eAttributeOverride\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eAssociationOverride\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eMapsId\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eMapKey\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eCriteria API methods\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Entity\n  @AssociationOverrides({\n    @AssociationOverride(name \u003d \"missingAttribute\", joinColumns \u003d { ... }), // Error: unresolved attribute\n    @AssociationOverride(name \u003d \"existingAttribute\", joinColumns \u003d { ... })\n  })\n  public class JavaEntity {\n    @OneToOne\n    AnotherEntity existingAttribute;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaAttributeTypeInspection",
          "displayName": "Persistent attribute type checks",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports property type mismatch for JPA attributes.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Entity\n  public class JavaEntity {\n\n    @OneToOne\n    Map\u003cInteger, AnotherEntity\u003e incorrectRelationship; // Error: \u0027One To One\u0027 attribute type should be an entity, not a map\n\n    @ManyToMany\n    Map\u003cInteger, AnotherEntity\u003e correctRelationship;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaAttributeMemberSignatureInspection",
          "displayName": "Persistent attribute signature checks",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the following JPA specification errors:\n\u003cul\u003e\n  \u003cli\u003eSeveral attributes are configured for a method or field\u003c/li\u003e\n  \u003cli\u003eIllegal attribute is used in Embeddable object (JPA 1.0)\u003c/li\u003e\n  \u003cli\u003ePersistent attribute metadata is specified not on a field or property getter\u003c/li\u003e\n  \u003cli\u003eNo setter or getter with property-based access\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Entity\n  @Table(name \u003d \"TABLE\")\n  public class JavaEntity {\n\n    private Integer id; // Error: both getter and setter should be present\n\n    public Integer getId() { ... }\n\n\n\n    private String data;\n\n    public String getData() { ... }\n\n    @Basic // Error: persistence annotation should be placed on field or getter method\n    public void setData(String data) { ... }\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003cbr/\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaQueryApiInspection",
          "displayName": "Unresolved queries and query parameters",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved symbols in named and native queries and related API methods:\n\u003cul\u003e\n  \u003cli\u003eUnknown named query\u003c/li\u003e\n  \u003cli\u003eUnknown query parameter\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Entity\n  @NamedQuery(name \u003d \"SelectByConditionQuery\", query \u003d \"...\")\n  public class JavaEntity { ... }\n\n  class Main {\n    public static void executeQuery() {\n      Persistence.createEntityManagerFactory(\"\")\n        .createEntityManager()\n        .createNamedQuery(\"SelectAllQuery\") // Error: unknown query name\n        ...\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaObjectClassSignatureInspection",
          "displayName": "Persistent object class signature checks",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports incorrectly defined persistent object classes in the following cases:\n\n\u003cul\u003e\n  \u003cli\u003eClass is not top-level\u003c/li\u003e\n  \u003cli\u003eClass is final\u003c/li\u003e\n  \u003cli\u003eClass is annotated several times\u003c/li\u003e\n  \u003cli\u003eClass is defined as both a persistent entity and an entity listener\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Entity\n  @EntityListeners(value \u003d JavaEntity.class) // Error: both @Entity and @EntityListener annotations are pointing to the same class\n  public final class JavaEntity { // Error: persistent entity should not be final\n    ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JpaORMDomInspection",
          "displayName": "Orm.xml problems",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.jpa",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references to any database objects inside `orm.xml` configuration files:\n\u003cul\u003e\n  \u003cli\u003eTables\u003c/li\u003e\n  \u003cli\u003eColumns\u003c/li\u003e\n  \u003cli\u003eSchemas\u003c/li\u003e\n  \u003cli\u003eCatalogs\u003c/li\u003e\n  \u003cli\u003eSequences\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample database table:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\nCREATE TABLE DATA_TABLE (\n  ID INTEGER,\n  DATA VARCHAR(100)\n);\n\u003c/code\u003e\u003c/pre\u003e\u003cbr/\u003e\n\n\u003cp\u003e\u003cb\u003eExample orm.xml file:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;entity-mappings xmlns\u003d\"http://java.sun.com/xml/ns/persistence/orm\" version\u003d\"1.0\"\u0026gt;\n    \u0026lt;package\u0026gt;example\u0026lt;/package\u0026gt;\n    \u0026lt;entity name\u003d\"JavaEntity\" class\u003d\"JavaEntity\"\u0026gt;\n        \u0026lt;table name\u003d\"DATA_TABLE\"/\u0026gt;\n        \u0026lt;attributes\u0026gt;\n          \u0026lt;id name\u003d\"id\"\u0026gt;\n            \u0026lt;column name\u003d\"UNKNOWN_ID\" nullable\u003d\"false\" length\u003d\"20\"/\u0026gt; // Error: unresolved column name\n          \u0026lt;/id\u0026gt;\n          \u0026lt;basic name\u003d\"data\"\u0026gt;\n            \u0026lt;column name\u003d\"DATA\" length\u003d\"12\"/\u0026gt; // Good\n          \u0026lt;/basic\u0026gt;\n        \u0026lt;/attributes\u0026gt;\n    \u0026lt;/entity\u0026gt;\n\u0026lt;/entity-mappings\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "FreeMarker",
      "inspections": [
        {
          "shortName": "FtlFileReferencesInspection",
          "displayName": "Unresolved file reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "231.9011.34",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved FreeMarker file references in \u003ccode\u003e#include\u003c/code\u003e and \u003ccode\u003e#import\u003c/code\u003e directives.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FtlWellformednessInspection",
          "displayName": "Directive is malformed",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "231.9011.34",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports malformed FreeMarker directives (for example, wrong nesting, missing closing tags, and so on).\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FtlTypesInspection",
          "displayName": "Incorrect expression type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "231.9011.34",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect FreeMarker expression types.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FtlCallsInspection",
          "displayName": "Invalid call directive",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "231.9011.34",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports FreeMarker calls that do not match the macro declaration (for example, missing parameters, wrong type, and so on).\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FtlImportCallInspection",
          "displayName": "Unresolved external call",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "231.9011.34",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved \u003ccode\u003e#macro\u003c/code\u003e and \u003ccode\u003e#function\u003c/code\u003e directives located in other files.\u003c/p\u003e\n\u003cp\u003eThe quick-fix suggests using \u003ccode\u003e#import\u003c/code\u003e or \u003ccode\u003e#include\u003c/code\u003e for the required files.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FtlReferencesInspection",
          "displayName": "Unresolved reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "231.9011.34",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved FreeMarker references.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FtlDeprecatedBuiltInsInspection",
          "displayName": "Built-in is deprecated",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "231.9011.34",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports deprecated built-ins (for example, \u003ccode\u003edefault\u003c/code\u003e, \u003ccode\u003eexists\u003c/code\u003e, \u003ccode\u003eif_exists\u003c/code\u003e, \u003ccode\u003eweb_safe\u003c/code\u003e).\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Cucumber",
      "inspections": [
        {
          "shortName": "CucumberUndefinedStep",
          "displayName": "Undefined step",
          "defaultSeverity": "WARNING",
          "pluginId": "gherkin",
          "pluginVersion": "231.9011.34",
          "language": "Gherkin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports steps in Cucumber (or some other Gherkin) .feature files that do not have matching step definitions.\n\u003cp\u003eUse the quick-fix to automatically create a new step definition.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "GherkinMisplacedBackground",
          "displayName": "Misplaced background section",
          "defaultSeverity": "ERROR",
          "pluginId": "gherkin",
          "pluginVersion": "231.9011.34",
          "language": "Gherkin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eBackground\u003c/code\u003e sections that are located incorrectly. The \u003ccode\u003eBackground\u003c/code\u003e section must be located before the\n\u003ccode\u003eScenario\u003c/code\u003e section.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CucumberJavaStepDefClassInDefaultPackage",
          "displayName": "Step definition class is in default package",
          "defaultSeverity": "WARNING",
          "pluginId": "cucumber-java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports step definition classes that are located in the default package. Cucumber-JVM uses step definition classes only in named packages.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GherkinBrokenTableInspection",
          "displayName": "Gherkin table is broken",
          "defaultSeverity": "ERROR",
          "pluginId": "gherkin",
          "pluginVersion": "231.9011.34",
          "language": "Gherkin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a table if there is at least one row with the number of cells different from the number of cells in the table header.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CucumberExamplesColon",
          "displayName": "Missing \u0027:\u0027 after examples keyword",
          "defaultSeverity": "ERROR",
          "pluginId": "gherkin",
          "pluginVersion": "231.9011.34",
          "language": "Gherkin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eExamples\u003c/code\u003e sections in Cucumber .feature files if they do not have \u0027:\u0027 after the \u003ccode\u003eExamples\u003c/code\u003e keyword.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CucumberMissedExamples",
          "displayName": "Missing examples section",
          "defaultSeverity": "ERROR",
          "pluginId": "gherkin",
          "pluginVersion": "231.9011.34",
          "language": "Gherkin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n    Reports scenario outlines in Cucumber .feature files that do not have the \u003ccode\u003eExamples\u003c/code\u003e section.\n    \u003cp\u003eUse the quick-fix to automatically create the \u003ccode\u003eExamples\u003c/code\u003e section with a pre-filled table header.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CucumberTableInspection",
          "displayName": "Unused or missing columns in Cucumber tables",
          "defaultSeverity": "WARNING",
          "pluginId": "gherkin",
          "pluginVersion": "231.9011.34",
          "language": "Gherkin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports tables in \u003ccode\u003eExamples\u003c/code\u003e sections in Cucumber .feature files with unused or missing columns.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CucumberJavaStepDefClassIsPublic",
          "displayName": "Step definition class is not public",
          "defaultSeverity": "WARNING",
          "pluginId": "cucumber-java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-public step definition classes. Cucumber-JVM uses step definitions only from public classes.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GherkinScenarioToScenarioOutline",
          "displayName": "Scenario with Examples section",
          "defaultSeverity": "ERROR",
          "pluginId": "gherkin",
          "pluginVersion": "231.9011.34",
          "language": "Gherkin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Gherkin scenarios that contain an \u003ccode\u003eExamples\u003c/code\u003e section.\n\u003cp\u003eUse the quick-fix to convert \u003ccode\u003eScenario\u003c/code\u003e to \u003ccode\u003eScenario Outline\u003c/code\u003e.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Kotlin",
      "inspections": [
        {
          "shortName": "DifferentKotlinGradleVersion",
          "displayName": "Kotlin Gradle and IDE plugins versions are different",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports that Gradle plugin version isn\u0027t properly supported in the current IDE plugin.\n\u003cp\u003eThis can cause inconsistencies between IDE and Gradle builds in error reporting or code behavior.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  dependencies {\n    classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:0.0.1\"\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the problem change the kotlin gradle plugin version to match the version of kotlin that is bundled into the IDE plugin.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinMavenPluginPhase",
          "displayName": "Kotlin Maven Plugin misconfigured",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "Reports kotlin-maven-plugin configuration issues"
        },
        {
          "shortName": "DifferentStdlibGradleVersion",
          "displayName": "Kotlin library and Gradle plugin versions are different",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports different Kotlin stdlib and compiler versions.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  dependencies {\n    classpath \"org.jetbrains.kotlin:kotlin-stdlib:0.0.1\"\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the problem change the kotlin stdlib version to match the kotlin compiler version.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DifferentKotlinMavenVersion",
          "displayName": "Maven and IDE plugins versions are different",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports that Maven plugin version isn\u0027t properly supported in the current IDE plugin.\n\u003cp\u003eThis inconsistency may lead to different error reporting behavior in the IDE and the compiler\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinTestJUnit",
          "displayName": "kotlin-test-junit could be used",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usage of \u003ccode\u003ekotlin-test\u003c/code\u003e and \u003ccode\u003ejunit\u003c/code\u003e dependency without \u003ccode\u003ekotlin-test-junit\u003c/code\u003e.\n\u003cp\u003eIt is recommended to use \u003ccode\u003ekotlin-test-junit\u003c/code\u003e dependency to work with Kotlin and JUnit.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DeprecatedMavenDependency",
          "displayName": "Deprecated library is used in Maven",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports deprecated maven dependency.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;dependencies\u003e\n    \u0026lt;dependency\u003e\n        \u0026lt;groupId\u003eorg.jetbrains.kotlin\u0026lt;/groupId\u003e\n        \u0026lt;artifactId\u003ekotlin-stdlib-jre7\u0026lt;/artifactId\u003e\n        \u0026lt;version\u003e${kotlin.version}\u0026lt;/version\u003e\n    \u0026lt;/dependency\u003e\n  \u0026lt;/dependencies\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick fix changes the deprecated dependency to a maintained one:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n   \u0026lt;dependencies\u003e\n    \u0026lt;dependency\u003e\n        \u0026lt;groupId\u003eorg.jetbrains.kotlin\u0026lt;/groupId\u003e\n        \u0026lt;artifactId\u003ekotlin-stdlib-jdk7\u0026lt;/artifactId\u003e\n        \u0026lt;version\u003e${kotlin.version}\u0026lt;/version\u003e\n    \u0026lt;/dependency\u003e\n  \u0026lt;/dependencies\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DifferentMavenStdlibVersion",
          "displayName": "Library and maven plugin versions are different",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports different Kotlin stdlib and compiler versions.\n\u003cp\u003eUsing different versions of the Kotlin compiler and the standard library can lead to unpredictable\n    runtime problems and should be avoided.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinInvalidBundleOrProperty",
          "displayName": "Invalid property key",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references to \u003ccode\u003e.properties\u003c/code\u003e file keys and resource bundles in Kotlin files.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "DeprecatedGradleDependency",
          "displayName": "Deprecated library is used in Gradle",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports deprecated dependencies in Gradle build scripts.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  dependencies {\n      compile \"org.jetbrains.kotlin:kotlin-stdlib-jre7:1.2.0\"\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  dependencies {\n      compile \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.2.0\"\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Security",
      "inspections": [
        {
          "shortName": "HttpUrlsUsage",
          "displayName": "Link with unencrypted protocol",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.restClient",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks\n  are dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS,\n  instead.\u003c/p\u003e\n\u003cp\u003eSee \u003ca href\u003d\"https://en.wikipedia.org/wiki/HTTPS#Difference_from_HTTP\"\u003eHTTPS: Difference from HTTP (wikipedia.org)\u003c/a\u003e.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VulnerableCodeUsages",
          "displayName": "Vulnerable API usage",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.security.package-checker",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports usages of Vulnerable APIs of imported dependencies.\u003c/p\u003e\n\u003cp\u003eFixing the reported problems helps prevent your software from being compromised by an attacker.\u003c/p\u003e\n\u003cp\u003eTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn\u0027t have the vulnerability.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eVulnerability data provided by \u003ca href\u003d\"https://checkmarx.com/\"\u003eCheckmarx\u003c/a\u003e (c).\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VulnerableLibrariesLocal",
          "displayName": "Vulnerable declared dependency",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.security.package-checker",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports vulnerabilities in Gradle, Maven, NPM and PyPI dependencies declared in your project.\n  A full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.\u003c/p\u003e\n\u003cp\u003eFixing the reported problems helps prevent your software from being compromised by an attacker.\u003c/p\u003e\n\u003cp\u003eTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn\u0027t have the vulnerability.\u003c/p\u003e\n\u003cp\u003eThe quick-fixes available may suggest updating to a safe version or visiting the Checkmarx website to learn more about a particular vulnerability.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eVulnerability data provided by \u003ca href\u003d\"https://checkmarx.com/\"\u003eCheckmarx\u003c/a\u003e (c).\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VulnerableLibrariesGlobal",
          "displayName": "Vulnerable imported dependency",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.security.package-checker",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports vulnerabilities in Gradle and Maven dependencies imported into your project.\n  A full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.\u003c/p\u003e\n\u003cp\u003eFixing the reported problems helps prevent your software from being compromised by an attacker.\u003c/p\u003e\n\u003cp\u003eTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn\u0027t have the vulnerability.\u003c/p\u003e\n\u003cp\u003eThe quick-fixes available may suggest updating to a safe version or visiting the Checkmarx website to learn more about a particular vulnerability.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eVulnerability data provided by \u003ca href\u003d\"https://checkmarx.com/\"\u003eCheckmarx\u003c/a\u003e (c).\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "UnnecessarilyQualifiedInnerClassAccess",
          "displayName": "Unnecessarily qualified inner class access",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any references to inner classes that are unnecessarily qualified with the name\nof the enclosing class.\n\u003cp\u003eSuch a qualification can be safely removed, which sometimes adds an import for the inner class.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X {\n     X.Y foo;\n     class Y{}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X {\n     Y foo;\n     class Y{}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore references for which an import is needed\u003c/b\u003e option to ignore references to inner classes, where\n  removing the qualification adds an import.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryConstantArrayCreationExpression",
          "displayName": "Redundant \u0027new\u0027 expression in constant array creation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports constant new array expressions that can be replaced with an array initializer. Array initializers can omit the type because\nit is already specified in the left side of the assignment.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int[] foo \u003d new int[] {42};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int[] foo \u003d {42};\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MoveFieldAssignmentToInitializer",
          "displayName": "Field assignment can be moved to initializer",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nSuggests replacing initialization of fields using assignment with initialization in the field declaration.\n\u003cp\u003eOnly reports if the field assignment is located in an instance or static initializer, and\n  joining it with the field declaration is likely to be safe.\n  In other cases, like assignment inside a constructor, the quick-fix is provided without highlighting,\n  as the fix may change the semantics.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyClass {\n    static final int intConstant;\n    \n    static {\n      intConstant \u003d 10;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\nThe quick fix moves the assigned value to the field initializer removing the class initializer if possible:\n\u003cpre\u003e\u003ccode\u003e\n  class MyClass {\n    static final int intConstant \u003d 10;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003csmall\u003eSince 2017.2\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LiteralAsArgToStringEquals",
          "displayName": "String literal may be \u0027equals()\u0027 qualifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eString.equals()\u003c/code\u003e or \u003ccode\u003eString.equalsIgnoreCase()\u003c/code\u003e calls\nwith a string literal argument.\n\u003cp\u003eSome coding standards specify that string literals should be the qualifier of \u003ccode\u003eequals()\u003c/code\u003e, rather than\n  argument, thus minimizing \u003ccode\u003eNullPointerException\u003c/code\u003e-s.\u003c/p\u003e\n\u003cp\u003eA quick-fix is available to exchange the literal and the expression.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean isFoo(String value) {\n    return value.equals(\"foo\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean isFoo(String value) {\n    return \"foo\".equals(value);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EscapedSpace",
          "displayName": "Non-terminal use of \u0027\\s\u0027 escape sequence",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports uses of \u003ccode\u003e\"\\s\"\u003c/code\u003e escape sequence anywhere except text-block line endings or within series of several spaces.\nThe \u003ccode\u003e\"\\s\"\u003c/code\u003e escape sequence is intended to encode a space at the end of text-block lines where normal spaces are trimmed.\nIn other locations, as well as in regular string literals, \u003ccode\u003e\"\\s\"\u003c/code\u003e is identical to an ordinary space character (\u003ccode\u003e\"\u0026nbsp;\"\u003c/code\u003e).\nUse of \u003ccode\u003e\"\\s\"\u003c/code\u003e is confusing and can be a mistake, especially if the string is interpreted as a regular expression.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (str.matches(\"\\s+\")) {...}\n\u003c/code\u003e\u003c/pre\u003e\nHere it\u0027s likely that \u003ccode\u003e\"\\\\s+\"\u003c/code\u003e was intended (to match any whitespace character). If not, using \u003ccode\u003estr.matches(\"\u0026nbsp;+\")\u003c/code\u003e\nwould be less confusing.\n\u003cp\u003e\n  The quick-fix is provided that simply replaces \u003ccode\u003e\\s\u003c/code\u003e with a space character.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection reports only if the language level of the project or module is 15 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessarilyQualifiedStaticUsage",
          "displayName": "Unnecessarily qualified static access",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of static members qualified with the class name.\n\u003cp\u003e\n  Such qualification is unnecessary and may be safely removed.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      Foo.foo();\n      System.out.println(Foo.x);\n    }\n\n    static void baz() { Foo.foo(); }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      foo();\n      System.out.println(x);\n    }\n\n    static void baz() { foo(); }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the inspection options to toggle the reporting for:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003eStatic fields access:\u003cbr\u003e\u003ccode\u003evoid bar() { System.out.println(Foo.x); }\u003c/code\u003e\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003eCalls to static methods:\u003cbr\u003e\u003ccode\u003evoid bar() { Foo.foo(); }\u003c/code\u003e\u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  Also, you can configure the inspection to only report static member usage\n  in a static context. In this case, only \u003ccode\u003estatic void baz() { Foo.foo(); }\u003c/code\u003e will be reported.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MultipleVariablesInDeclaration",
          "displayName": "Multiple variables in one declaration",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports multiple variables that are declared in a single declaration and suggest\ncreating a separate declaration for each variable.\n\u003cp\u003eSome coding standards prohibit such declarations.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int x \u003d 1, y \u003d 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int x \u003d 1;\n  int y \u003d 2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse the \u003cb\u003eIgnore \u0027for\u0027 loop declarations\u003c/b\u003e option to ignore multiple variables declared in the initialization of a \u0027for\u0027 loop statement, for example:\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003efor\u003c/b\u003e (int i \u003d 0, max \u003d list.size(); i \u0026gt; max; i++) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003eUse the \u003cb\u003eOnly warn on different array dimensions in a single declaration\u003c/b\u003e option to only warn when variables with different array dimensions are declared in a single declaration, for example:\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d \"\", array[];\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RecordCanBeClass",
          "displayName": "Record can be converted to class",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports record classes and suggests converting them to ordinary classes.\n\u003cp\u003eThis inspection makes it possible to move a Java record to a codebase using an earlier Java version\n  by applying the quick-fix to this record.\u003c/p\u003e\n\u003cp\u003e\n  Note that the resulting class is not completely equivalent to the original record:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eThe resulting class no longer extends \u003ccode\u003ejava.lang.Record\u003c/code\u003e,\n    so \u003ccode\u003einstanceof Record\u003c/code\u003e returns \u003ccode\u003efalse\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003eReflection methods like \u003ccode\u003eClass.isRecord()\u003c/code\u003e and\n    \u003ccode\u003eClass.getRecordComponents()\u003c/code\u003e produce different results.\u003c/li\u003e\n  \u003cli\u003eThe generated \u003ccode\u003ehashCode()\u003c/code\u003e implementation may produce a different result\n    because the formula to calculate record \u003ccode\u003ehashCode\u003c/code\u003e is deliberately not specified.\u003c/li\u003e\n  \u003cli\u003eRecord serialization mechanism differs from that of an ordinary class.\n    Refer to \u003ci\u003eJava Object Serialization Specification\u003c/i\u003e for details.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  record Point(int x, int y) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  final class Point {\n    private final int x;\n    private final int y;\n\n    Point(int x, int y) {\n      this.x \u003d x;\n      this.y \u003d y;\n    }\n\n    public int x() { return x; }\n\n    public int y() { return y; }\n\n    @Override\n    public boolean equals(Object obj) {\n      if (obj \u003d\u003d this) return true;\n      if (obj \u003d\u003d null || obj.getClass() !\u003d this.getClass()) return false;\n      var that \u003d (Point)obj;\n      return this.x \u003d\u003d that.x \u0026\u0026\n             this.y \u003d\u003d that.y;\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(x, y);\n    }\n\n    @Override\n    public String toString() {\n      return \"Point[\" +\n             \"x\u003d\" + x + \", \" +\n             \"y\u003d\" + y + \u0027]\u0027;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 16 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BoundedWildcard",
          "displayName": "Can use bounded wildcard",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports generic method parameters that can make use of \u003ca href\u003d\"https://en.wikipedia.org/wiki/Wildcard_(Java)\"\u003ebounded wildcards\u003c/a\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void process(Consumer\u0026lt;Number\u0026gt; consumer);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eshould be replaced with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void process(Consumer\u0026lt;? super Number\u0026gt; consumer);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  This method signature is more flexible because it accepts more types: not only\n  \u003ccode\u003eConsumer\u0026lt;Number\u0026gt;\u003c/code\u003e, but also \u003ccode\u003eConsumer\u0026lt;Object\u0026gt;\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003eLikewise, type parameters in covariant position:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  T produce(Producer\u0026lt;T\u0026gt; p);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eshould be replaced with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  T produce(Producer\u0026lt;? extends T\u0026gt; p);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  To quote \u003ca href\u003d\"https://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java\"\u003eJoshua Bloch\u003c/a\u003e in \u003cem\u003eEffective Java\u003c/em\u003e third Edition:\n\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003ch4\u003eItem 31: Use bounded wildcards to increase API flexibility\u003c/h4\u003e\n  Using wildcard types in your APIs, while tricky, makes the APIs far more flexible.\n  If you write a library that will be widely used, the proper use of wildcard types should be considered mandatory.\n  Remember the basic rule: producer-extends, consumer-super (PECS).\n  Also remember that all Comparables and Comparators are consumers.\n\u003c/blockquote\u003e\n\n\u003cp\u003e\n  Use the inspection options to toggle the reporting for:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\n      invariant classes. An example of an invariant class is \u003ccode\u003ejava.util.List\u0026lt;T\u0026gt;\u003c/code\u003e because it both accepts values\n      (via the \u003ccode\u003eList.add(T)\u003c/code\u003e method)\n      and produces values (via the \u003ccode\u003eT List.get()\u003c/code\u003e method).\n    \u003c/p\u003e\n    \u003cp\u003e\n      On the\n      other hand, \u003ccode\u003econtravariant\u003c/code\u003e classes only receive values, for example, \u003ccode\u003ejava.util.function.Consumer\u0026lt;T\u0026gt;\u003c/code\u003e\n      with the only method \u003ccode\u003eaccept(T)\u003c/code\u003e. Similarly, \u003ccode\u003ecovariant\u003c/code\u003e classes\n      only produce values, for example, \u003ccode\u003ejava.util.function.Supplier\u0026lt;T\u0026gt;\u003c/code\u003e\n      with the only method \u003ccode\u003eT get()\u003c/code\u003e.\n    \u003c/p\u003e\n    \u003cp\u003e\n      People often use bounded wildcards in covariant/contravariant\n      classes but avoid wildcards in invariant classes, for example, \u003ccode\u003evoid process(List\u0026lt;? extends T\u0026gt; l)\u003c/code\u003e.\n      Disable this option to ignore such invariant classes and leave them rigidly typed, for example, \u003ccode\u003evoid\n      process(List\u0026lt;T\u0026gt; l)\u003c/code\u003e.\n    \u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\n      \u003ccode\u003eprivate\u003c/code\u003e methods, which can be considered as not a part of the public API\n    \u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\n      instance methods\n    \u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ControlFlowStatementWithoutBraces",
          "displayName": "Control flow statement without braces",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003edo\u003c/code\u003e, or \u003ccode\u003efor\u003c/code\u003e statements without braces.\nSome code styles, e.g. the \u003ca href\u003d\"https://google.github.io/styleguide/javaguide.html\"\u003eGoogle Java Style guide\u003c/a\u003e,\nrequire braces for all control statements.\n\u003cp\u003e\n  When adding further statements to control statements without braces, it is important not to forget adding braces.\n  When commenting out a line of code, it is also necessary to be more careful when not using braces,\n  to not inadvertently make the next statement part of the control flow statement.\n  Always using braces makes inserting or commenting out a line of code safer.\n\u003cp\u003e\n  It\u0027s likely the \u003ca href\u003d\"https://www.imperialviolet.org/2014/02/22/applebug.html\"\u003egoto fail vulnerability\u003c/a\u003e would not have happened,\n  if an always use braces code style was used.\n  Control statements with braces make the control flow easier to see, without relying on, possibly incorrect, indentation.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Strange {\n    void x(boolean one, boolean two) {\n      if(one)\n        if(two)\n          foo();\n      else\n        bar();\n    }\n\n    void foo() {}\n    void bar() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix wraps the statement body with braces:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Strange {\n    void x(boolean one, boolean two) {\n      if(one) {\n        if(two) {\n          foo();\n        } else {\n          bar();\n        }\n      }\n    }\n\n    void foo() {}\n    void bar() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReturnThis",
          "displayName": "Return of \u0027this\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods returning \u003ccode\u003ethis\u003c/code\u003e.\n\u003cp\u003e\n  While such a return is valid, it is rarely necessary, and usually indicates that the method is intended to be used\n  as part of a chain of similar method calls (for example, \u003ccode\u003ebuffer.append(\"foo\").append(\"bar\").append(\"baz\")\u003c/code\u003e).\n  Such chains are frowned upon by many coding standards.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public Builder append(String str) {\n    // [...]\n    return this;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryConstructor",
          "displayName": "Redundant no-arg constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary constructors.\n\u003cp\u003e\n  A constructor is unnecessary if it is the only constructor of a class, has no parameters,\n  has the same access modifier as its containing class,\n  and does not perform any initialization except explicitly or implicitly calling the superclass constructor without arguments.\n  Such a constructor can be safely removed as it will be generated by the compiler even if not specified.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Foo {\n    public Foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Foo {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the inspection settings to ignore unnecessary constructors that have an annotation.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryToStringCall",
          "displayName": "Unnecessary call to \u0027toString()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003etoString()\u003c/code\u003e that are used in the following cases:\n\u003cul\u003e\n  \u003cli\u003eIn string concatenations\u003c/li\u003e\n  \u003cli\u003eIn the \u003ccode\u003ejava.lang.StringBuilder#append()\u003c/code\u003e or \u003ccode\u003ejava.lang.StringBuffer#append()\u003c/code\u003e methods\u003c/li\u003e\n  \u003cli\u003eIn the methods of \u003ccode\u003ejava.io.PrintWriter\u003c/code\u003e or \u003ccode\u003ejava.io.PrintStream\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ein the methods \u003ccode\u003eorg.slf4j.Logger\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn these cases, conversion to string will be handled by the underlying library methods, and the explicit call to \u003ccode\u003etoString()\u003c/code\u003e is not needed.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println(this.toString())\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println(this)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Note that without the \u003ccode\u003etoString()\u003c/code\u003e call, the code semantics might be different: if the expression is null,\n  then the \u003ccode\u003enull\u003c/code\u003e string will be used instead of throwing a \u003ccode\u003eNullPointerException\u003c/code\u003e.\u003c/p\u003e\n  \u003cp\u003eUse the \u003cb\u003eReport only when qualifier is known to be not-null\u003c/b\u003e option to avoid warnings for the values that could potentially be null.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any unnecessary semicolons, including semicolons that are used between class members, inside block statements, or after\nclass definitions.\n\u003cp\u003eEven though these semicolons are valid in Java, they are redundant and may be removed.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class C {\n    ;\n    void m() throws Exception {\n        try (AutoCloseable r1 \u003d createAutoCloseable();) {\n          ;\n        }\n    }\n    ;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class C {\n    void m() throws Exception {\n      try (AutoCloseable r1 \u003d createAutoCloseable()) {\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ArrayCreationWithoutNewKeyword",
          "displayName": "Array creation without \u0027new\u0027 expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports array initializers without \u003ccode\u003enew\u003c/code\u003e array expressions and suggests adding them.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int[] a \u003d {42}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int[] a \u003d new int[]{42}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ConfusingOctalEscape",
          "displayName": "Confusing octal escape sequence",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports string literals containing an octal escape sequence immediately followed by\na digit.\n\u003cp\u003eSuch strings may be confusing, and are often the result of errors in escape code creation.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println(\"\\1234\"); // Octal escape sequence \u0027\\123\u0027 immediately followed by a digit\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CharsetObjectCanBeUsed",
          "displayName": "Standard \u0027Charset\u0027 object can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods and constructors in which constant charset \u003ccode\u003eString\u003c/code\u003e literal (for example, \u003ccode\u003e\"UTF-8\"\u003c/code\u003e) can be replaced with\nthe predefined \u003ccode\u003eStandardCharsets.UTF_8\u003c/code\u003e code.\n\u003cp\u003eThe code after the fix may work faster, because the charset lookup becomes unnecessary.\n  Also, catching \u003ccode\u003eUnsupportedEncodingException\u003c/code\u003e may become unnecessary as well. In this case,\n  the catch block will be removed automatically.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    byte[] bytes \u003d \"str\".getBytes(\"UTF-8\");\n  } catch (UnsupportedEncodingException e) {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  byte[] bytes \u003d \"str\".getBytes(StandardCharsets.UTF_8);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThe inspection is available in Java 7 and later.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryCallToStringValueOf",
          "displayName": "Unnecessary conversion to \u0027String\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to static methods like \u003ccode\u003eString.valueOf()\u003c/code\u003e or \u003ccode\u003eInteger.toString()\u003c/code\u003e when they are used in\n a string concatenation or as an argument of a library method in which the explicit string conversion is not needed.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println(\"Number: \" + Integer.toString(count));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println(\"Number: \" + count);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eLibrary methods in which explicit string conversion is considered redundant:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Classes \u003ccode\u003ejava.io.PrintWriter\u003c/code\u003e, \u003ccode\u003ejava.io.PrintStream\u003c/code\u003e\n    \u003cul\u003e\u003cli\u003e\u003ccode\u003eprint()\u003c/code\u003e, \u003ccode\u003eprintln()\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    Classes \u003ccode\u003ejava.lang.StringBuilder\u003c/code\u003e, \u003ccode\u003ejava.lang.StringBuffer\u003c/code\u003e\n    \u003cul\u003e\u003cli\u003e\u003ccode\u003eappend()\u003c/code\u003e\u003c/li\u003e\u003c/ul\u003e\n  \u003c/li\u003e\n\n  \u003cli\u003e\n    Class \u003ccode\u003eorg.slf4j.Logger\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e\u003ccode\u003etrace()\u003c/code\u003e, \u003ccode\u003edebug()\u003c/code\u003e, \u003ccode\u003einfo()\u003c/code\u003e, \u003ccode\u003ewarn()\u003c/code\u003e, \u003ccode\u003eerror()\u003c/code\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryFullyQualifiedName",
          "displayName": "Unnecessary fully qualified name",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fully qualified class names that can be shortened.\n\u003cp\u003eThe quick-fix shortens fully qualified names and adds import statements if necessary.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class ListWrapper {\n    java.util.List\u0026lt;Integer\u0026gt; l;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import java.util.List;\n  class ListWrapper {\n    List\u0026lt;Integer\u0026gt; l;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore in Java 9 module statements\u003c/b\u003e option to ignore fully qualified names inside the Java 9\n  \u003ccode\u003eprovides\u003c/code\u003e and \u003ccode\u003euses\u003c/code\u003e module statements.\n\u003cp\u003e\n  In \u003ca href\u003d\"settings://preferences.sourceCode.Java?JavaDoc%20Inner\"\u003eSettings | Editor | Code Style | Java | Imports\u003c/a\u003e,\n  use the following options to configure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eInsert imports for inner classes\u003c/b\u003e option if references to inner classes should be qualified with the outer class.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eUse fully qualified class names in JavaDoc\u003c/b\u003e option to allow fully qualified names in Javadocs.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OptionalContainsCollection",
          "displayName": "\u0027Optional\u0027 contains array or collection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ejava.util.Optional\u003c/code\u003e or \u003ccode\u003ecom.google.common.base.Optional\u003c/code\u003e types with an array or collection type parameter.\n\u003cp\u003eIn such cases, it is more clear to just use an empty array or collection to indicate the absence of result.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Optional\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; foo() {\n    return Optional.empty();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code could look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;Integer\u0026gt; foo() {\n    return new List\u0026lt;\u0026gt;();\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnqualifiedInnerClassAccess",
          "displayName": "Unqualified inner class access",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports references to inner classes that are not qualified with the name\nof the enclosing class.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import foo.Foo.Bar;\n\n  class Foo {\n    class Bar {}\n  }\n\n  class Baz {\n    void f(Bar bar) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    class Bar {}\n  }\n\n  class Baz {\n    void f(Foo.Bar bar) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the inspection settings to ignore references to inner classes within the same class,\n  which therefore do not require an import.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObjectsEqualsCanBeSimplified",
          "displayName": "\u0027Objects.equals()\u0027 can be replaced with \u0027equals()\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eObjects.equals(a, b)\u003c/code\u003e in which the first argument is statically known to be non-null.\n\u003cp\u003eSuch a call can be safely replaced with \u003ccode\u003ea.equals(b)\u003c/code\u003e or \u003ccode\u003ea \u003d\u003d b\u003c/code\u003e if both arguments are primitives.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String defaultName \u003d \"default\";\n  boolean isDefault \u003d Objects.equals(defaultName, name);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String defaultName \u003d \"default\";\n  boolean isDefault \u003d defaultName.equals(name);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DiamondCanBeReplacedWithExplicitTypeArguments",
          "displayName": "Diamond can be replaced with explicit type arguments",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instantiation of generic classes in which the \u003cb\u003e\u0026lt;\u0026gt;\u003c/b\u003e symbol (diamond) is used instead of\n  type parameters.\n\n\u003cp\u003eThe quick-fix replaces \u003cb\u003e\u0026lt;\u0026gt;\u003c/b\u003e (diamond) with explicit type parameters.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eList \u0026lt;String\u0026gt; list \u003d new ArrayList\u0026lt;\u0026gt;()\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eList \u0026lt;String\u0026gt; list \u003d new ArrayList\u0026lt;String\u0026gt;()\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ci\u003eDiamond operation\u003c/i\u003e appeared in Java 7.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LocalCanBeFinal",
          "displayName": "Local variable or parameter can be \u0027final\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports parameters or local variables that may have the \u003ccode\u003efinal\u003c/code\u003e modifier added to their declaration.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ArrayList\u0026lt;Integer\u0026gt; list \u003d new ArrayList();\n  fill(list);\n  return list;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  final ArrayList\u0026lt;Integer\u0026gt; list \u003d new ArrayList();\n  fill(list);\n  return list;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the inspection\u0027s options to define whether parameters or local variables should be reported.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SimplifiableIfStatement",
          "displayName": "\u0027if\u0027 statement can be replaced with conditional or boolean expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements that can be replaced with conditions using the \u003ccode\u003e\u0026\u0026\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e,\n\u003ccode\u003e\u003d\u003d\u003c/code\u003e, \u003ccode\u003e!\u003d\u003c/code\u003e, or \u003ccode\u003e?:\u003c/code\u003e operator.\n\u003cp\u003eThe result is usually shorter, but not always clearer, so it\u0027s not advised to apply the fix  in every case.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (condition) return true; else return foo;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  return condition || foo;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n  Use the \u003cb\u003eDon\u0027t suggest \u0027?:\u0027 operator\u003c/b\u003e option to disable the warning when the \u003ccode\u003e?:\u003c/code\u003e operator is suggested. In this case, only\n  \u003ccode\u003e\u0026\u0026\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e, \u003ccode\u003e\u003d\u003d\u003c/code\u003e, and \u003ccode\u003e!\u003d\u003c/code\u003e suggestions will be highlighted. The\n  quick-fix will still be available in the editor.\n\u003c/li\u003e\n\u003cli\u003e\n  Use the \u003cb\u003eIgnore chained \u0027if\u0027 statements\u003c/b\u003e option to disable the warning for \u003ccode\u003eif-else\u003c/code\u003e chains. The quick-fix will\n  still be available in the editor.\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessarilyQualifiedStaticallyImportedElement",
          "displayName": "Unnecessarily qualified statically imported element",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usage of statically imported members qualified with\ntheir containing class name.\n\u003cp\u003eSuch qualification is unnecessary and can be removed\n  because statically imported members can be accessed directly by member name.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import static foo.Test.WIDTH;\n\n  class Bar {\n    void bar() {\n      System.out.println(Test.WIDTH);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import static foo.Test.WIDTH;\n\n  class Bar {\n    void bar() {\n      System.out.println(WIDTH);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FuseStreamOperations",
          "displayName": "Subsequent steps can be fused into Stream API chain",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nDetects transformations outside a Stream API chain that could be incorporated into it.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;String\u0026gt; list \u003d stream.collect(Collectors.toList());\n  list.sort(null);\n  return list.toArray(new String[list.size()]);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the conversion:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  return stream.sorted().toArray(String[]::new);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Note that sometimes the converted stream chain may replace explicit \u003ccode\u003eArrayList\u003c/code\u003e with \u003ccode\u003eCollectors.toList()\u003c/code\u003e or explicit\n  \u003ccode\u003eHashSet\u003c/code\u003e with \u003ccode\u003eCollectors.toSet()\u003c/code\u003e. The current library implementation uses these collections internally. However,\n  this approach is not very reliable and might change in the future altering the semantics of your code.\u003c/p\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eIf you are concerned about it, use the \u003cb\u003eDo not suggest \u0027toList()\u0027 or \u0027toSet()\u0027 collectors\u003c/b\u003e option to suggest\n  \u003ccode\u003eCollectors.toCollection()\u003c/code\u003e instead of \u003ccode\u003etoList\u003c/code\u003e and \u003ccode\u003etoSet\u003c/code\u003e collectors.\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c!--\u003cp\u003e\u003csmall\u003eNew in 2017.3\u003c/small\u003e\u003c/p\u003e--\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifiableAnnotation",
          "displayName": "Simplifiable annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports annotations that can be simplified to their \u0027single element\u0027\nor \u0027marker\u0027 shorthand form.\n\u003cp\u003eAnnotations that contain whitespace between the @-sign and the name\n  of the annotation are also reported.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @interface Foo { String[] value(); }\n\n  @ Foo({\"foo\"})\n  public String name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @interface Foo { String[] value(); }\n\n  @Foo(\"foo\")\n  public String name;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeParameterExtendsObject",
          "displayName": "Type parameter explicitly extends \u0027Object\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports type parameters and wildcard type arguments that are explicitly declared to extend \u003ccode\u003ejava.lang.Object\u003c/code\u003e.\n\u003cp\u003eSuch \u0027extends\u0027 clauses are redundant as \u003ccode\u003ejava.lang.Object\u003c/code\u003e is a supertype for all classes.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  class ClassA\u0026lt;T extends Object\u0026gt; {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  If you need to preserve the \u0027extends Object\u0027 clause because of annotations, disable the\n  \u003cb\u003eIgnore when java.lang.Object is annotated\u003c/b\u003e option.\n  This might be useful, for example, when you use a nullness analyzer, and the \u0027extends Object\u0027 clause\n  holds a \u003ccode\u003e@Nullable\u003c/code\u003e/\u003ccode\u003e@NotNull\u003c/code\u003e annotation.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  class MyClass\u0026lt;T extends @NotNull Object\u0026gt; {}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MissortedModifiers",
          "displayName": "Missorted modifiers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declarations whose modifiers are not in the canonical\npreferred order (as stated in the Java Language Specification).\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    native public final void foo();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    public final native void foo();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the inspection settings to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\n      toggle the reporting of misplaced annotations:\n      (annotations with \u003ccode\u003eElementType.TYPE_USE\u003c/code\u003e \u003cem\u003enot\u003c/em\u003e directly\n      before the type and after the modifier keywords, or\n      other annotations \u003cem\u003enot\u003c/em\u003e before the modifier keywords).\n      When this option is disabled, any annotation can be positioned before or after the modifier keywords.\n      Modifier lists with annotations in between the modifier keywords will always be reported.\n    \u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\n      specify whether the \u003ccode\u003eElementType.TYPE_USE\u003c/code\u003e annotation should be positioned directly before\n      a type, even when the annotation has other targets specified.\n    \u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ListIndexOfReplaceableByContains",
          "displayName": "\u0027List.indexOf()\u0027 expression can be replaced with \u0027contains()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any \u003ccode\u003eList.indexOf()\u003c/code\u003e\nexpressions that can be replaced with the \n  \u003ccode\u003eList.contains()\u003c/code\u003e method.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean hasEmptyString(List\u0026lt;String\u0026gt; list) {\n    // Warning: can be simplified\n    return list.indexOf(\"\") \u0026gt;\u003d 0;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe provided quick-fix replaces the \u003ccode\u003eindexOf\u003c/code\u003e call with the \u003ccode\u003econtains\u003c/code\u003e call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean hasEmptyString(List\u0026lt;String\u0026gt; list) {\n    // Quick-fix is applied\n    return list.contains(\"\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnqualifiedFieldAccess",
          "displayName": "Instance field access not qualified with \u0027this\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports field access operations that are not qualified with \u003ccode\u003ethis\u003c/code\u003e or some other qualifier.\n\u003cp\u003e\n  Some coding styles mandate that all field access operations are qualified to prevent confusion with local\n  variable or parameter access.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    int foo;\n\n    void bar() {\n      foo +\u003d 1;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    int foo;\n\n    void bar() {\n      this.foo +\u003d 1;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessarySuperQualifier",
          "displayName": "Unnecessary \u0027super\u0027 qualifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary \u003ccode\u003esuper\u003c/code\u003e\nqualifiers in method calls and field references.\n\u003cp\u003e\n  A \u003ccode\u003esuper\u003c/code\u003e qualifier is unnecessary\n  when the field or method of the superclass is not hidden/overridden in the calling class.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      super.foo();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      foo();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the inspection settings to ignore qualifiers that help to distinguish superclass members access\n  from the identically named members of the outer class.\n\u003cp\u003e\n\u003cp\u003e\n  See also the following inspections:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ci\u003eJava | Visibility | Access to inherited field looks like access to element from surrounding code\u003c/i\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ci\u003eJava | Visibility | Call to inherited method looks like call to local method\u003c/i\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EqualsCalledOnEnumConstant",
          "displayName": "\u0027equals()\u0027 called on enum value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eequals()\u003c/code\u003e calls on enum constants.\n\u003cp\u003eSuch calls can be replaced by an identity comparison (\u003ccode\u003e\u003d\u003d\u003c/code\u003e) because two\n  enum constants are equal only when they have the same identity.\u003c/p\u003e\n\u003cp\u003eA quick-fix is available to change the call to a comparison.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean foo(MyEnum value) {\n    return value.equals(MyEnum.FOO);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean foo(MyEnum value) {\n    return value \u003d\u003d MyEnum.FOO;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnqualifiedMethodAccess",
          "displayName": "Instance method call not qualified with \u0027this\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to non-\u003ccode\u003estatic\u003c/code\u003e methods on the same instance that are not qualified with \u003ccode\u003ethis\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    void bar() {}\n\n    void foo() {\n      bar();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    void bar() {}\n\n    void foo() {\n      this.bar();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BlockMarkerComments",
          "displayName": "Block marker comment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comments which are used as code block markers.\nThe quick-fix removes such comments.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  while (i \u0026lt; 10) {\n    i++;\n  } // end while\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  while (i \u0026lt; 10) {\n    i++;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JoinDeclarationAndAssignmentJava",
          "displayName": "Assignment can be joined with declaration",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports variable assignments that can be joined with a variable declaration.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int x;\n  x \u003d 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix converts the assignment into an initializer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int x \u003d 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MultiCatchCanBeSplit",
          "displayName": "Multi-catch can be split into separate catch blocks",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports multi-\u003ccode\u003ecatch\u003c/code\u003e sections and suggests splitting them into separate \u003ccode\u003ecatch\u003c/code\u003e blocks.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    int i \u003d getIndex();\n  } catch (NullPointerException|IndexOutOfBoundsException e) {\n    e.printStackTrace();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try {\n    int i \u003d getIndex();\n  } catch (NullPointerException e) {\n    e.printStackTrace();\n  } catch (IndexOutOfBoundsException e) {\n    e.printStackTrace();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ci\u003eMulti-\u003c/i\u003e\u003ccode\u003ecatch\u003c/code\u003e appeared in Java 7.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "LambdaBodyCanBeCodeBlock",
          "displayName": "Lambda body can be code block",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambdas whose body is an expression and suggests converting expression bodies to code blocks.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  n\u0026nbsp;-\u0026gt;\u0026nbsp;n\u0026nbsp;+\u0026nbsp;1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003en -\u0026gt; {\n  return n + 1;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryQualifierForThis",
          "displayName": "Unnecessary qualifier for \u0027this\u0027 or \u0027super\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary qualification of \u003ccode\u003ethis\u003c/code\u003e or \u003ccode\u003esuper\u003c/code\u003e.\n\u003cp\u003e\n  Using a qualifier on \u003ccode\u003ethis\u003c/code\u003e or \u003ccode\u003esuper\u003c/code\u003e to\n  disambiguate a code reference may easily become unnecessary via automatic refactorings and should be deleted for clarity.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      Bar.super.foo();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      super.foo();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ChainedEquality",
          "displayName": "Chained equality comparisons",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports chained equality comparisons.\n\u003cp\u003eSuch comparisons may be confusing: \u003ccode\u003ea \u003d\u003d b \u003d\u003d c\u003c/code\u003e means \u003ccode\u003e(a \u003d\u003d b) \u003d\u003d c\u003c/code\u003e,\n  but possibly \u003ccode\u003ea \u003d\u003d b \u0026\u0026 a \u003d\u003d c\u003c/code\u003e is intended.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean chainedEquality(boolean a, boolean b, boolean c) {\n    return a \u003d\u003d b \u003d\u003d c;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can use parentheses to make the comparison less confusing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean chainedEquality(boolean a, boolean b, boolean c) {\n    return (a \u003d\u003d b) \u003d\u003d c;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SwitchLabeledRuleCanBeCodeBlock",
          "displayName": "Labeled switch rule can have code block",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports rules of \u003ccode\u003eswitch\u003c/code\u003e expressions or enhanced \u003ccode\u003eswitch\u003c/code\u003e statements with an expression body.\nThese can be converted to code blocks.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String message \u003d switch (errorCode) {\n    case 404 -\u003e \"Not found!\";\n    ...\n  };\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String message \u003d switch (errorCode) {\n    case 404 -\u003e {\n                yield \"Not found!\";\n            }\n    ...\n  };\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThe inspection only reports if the language level of the project or module is 14 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryFinalOnLocalVariableOrParameter",
          "displayName": "Unnecessary \u0027final\u0027 on local variable or parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables or parameters unnecessarily declared \u003ccode\u003efinal\u003c/code\u003e.\n\u003cp\u003eSome coding standards frown upon variables declared \u003ccode\u003efinal\u003c/code\u003e for reasons of terseness.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    Foo(Object o) {}\n\n    void bar(final Object o) {\n      new Foo(o);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    Foo(Object o) {}\n\n    void bar(Object o) {\n      new Foo(o);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the inspection options to toggle the reporting for:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    local variables\n  \u003c/li\u003e\n  \u003cli\u003e\n    parameters (including\n    parameters of \u003ccode\u003ecatch\u003c/code\u003e blocks and enhanced \u003ccode\u003efor\u003c/code\u003e statements)\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  Also, you can configure the inspection to only report \u003ccode\u003efinal\u003c/code\u003e parameters of \u003ccode\u003eabstract\u003c/code\u003e or interface\n  methods, which may be considered extra unnecessary as such markings don\u0027t\n  affect the implementation of these methods.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CallToStringConcatCanBeReplacedByOperator",
          "displayName": "Call to \u0027String.concat()\u0027 can be replaced with \u0027+\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.lang.String.concat()\u003c/code\u003e.\n\u003cp\u003e\n  Such calls can be replaced with the \u003ccode\u003e+\u003c/code\u003e operator for clarity and possible increased\n  performance if the method was invoked on a constant with a constant argument.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String foo(String name) {\n    return name.concat(\"foo\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String foo(String name) {\n    return name + \"foo\";\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FillPermitsList",
          "displayName": "Same file subclasses are missing from permits clause of a sealed class",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports sealed classes whose permits clauses do not contain some of the subclasses from the same file.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  sealed class A {}\n  final class B extends A {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  sealed class A permits B {}\n  final class B extends A {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodRefCanBeReplacedWithLambda",
          "displayName": "Method reference can be replaced with lambda",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method references, like \u003ccode\u003eMyClass::myMethod\u003c/code\u003e and \u003ccode\u003emyObject::myMethod\u003c/code\u003e,\n  and suggests replacing them with an equivalent lambda expression.\n\u003cp\u003eLambda expressions can be easier to modify than method references.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out::println\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  s -\u0026gt; System.out.println(s)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eBy default, this inspection does not highlight the code in the editor, but only provides a quick-fix.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ChainedMethodCall",
          "displayName": "Chained method calls",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method calls whose target is another method call.\nThe quick-fix suggests to introduce a local variable.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X {\n    int foo(File f) {\n      return f.getName().length();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X {\n    int foo(File f) {\n      final String name \u003d f.getName();\n      return name.length();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the inspection options to toggle warnings for the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\n      chained method calls in field initializers,\n      for instance, \u003ccode\u003eprivate final int i \u003d new Random().nextInt();\u003c/code\u003e\n    \u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\n      chained method calls operating on the same type,\n      for instance, \u003ccode\u003enew StringBuilder().append(\"x: \").append(new X()).append(\"y: \").append(new Y()).toString();\u003c/code\u003e.\n    \u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConditionalCanBeOptional",
          "displayName": "Conditional can be replaced with Optional",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports null-check conditions and suggests replacing them with \u003ccode\u003eOptional\u003c/code\u003e chains.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  return str \u003d\u003d null ? \"\" : str.trim();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter applying the quick-fix:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  return Optional.ofNullable(str).map(String::trim).orElse(\"\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhile the replacement is not always shorter, it could be helpful for further refactoring\n  (for example, for changing the method return value to \u003ccode\u003eOptional\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eNote that when a not-null branch of the condition returns null, the corresponding mapping step will\n  produce an empty \u003ccode\u003eOptional\u003c/code\u003e possibly changing the semantics. If it cannot be statically\n  proven that semantics will be preserved, the quick-fix action name will contain the \"(may change semantics)\"\n  notice, and the inspection highlighting will be turned off.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReassignedVariable",
          "displayName": "Reassigned variable",
          "defaultSeverity": "TEXT ATTRIBUTES",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports reassigned variables, which complicate reading and understanding the code.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int value \u003d 2 * (height + width);\n  System.out.println(\"perimeter: \" + value);\n\n  value \u003d height * width;\n  System.out.println(\"area: \" + value);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CStyleArrayDeclaration",
          "displayName": "C-style array declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports array declarations written in C-style syntax in which the array indicator brackets\n  are placed after the variable name or after the method parameter list.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic\u003c/b\u003e String process(String value[])[] {\n    return value;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMost code styles prefer Java-style array declarations in which the array indicator brackets are attached to the type name, for example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic\u003c/b\u003e String[] process(String[] value) {\n    return value;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore C-style declarations in variables\u003c/b\u003e option to report C-style array declaration of method return types only.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryModifier",
          "displayName": "Unnecessary modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant modifiers and suggests to remove them.\nThe resulting code will be shorter, but the behaviour and meaning will remain the same.\n\u003cp\u003e\u003cb\u003eExample 1:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // all code is implicitly strictfp under Java 17 and higher\n  strictfp class X {\n\n    // inner enums are implicitly static\n    static enum Inner {\n        A, B, C\n    }\n\n    // inner records are implicitly static\n    static record R() {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cb\u003eExample 2:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  final record R() {\n    // all records are implicitly final\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cb\u003eExample 3:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // all interfaces are implicitly abstract\n  abstract interface Printer {\n\n    // all interface members are implicitly public\n    public int size();\n\n    // all inner classes of interfaces are implicitly static\n    static class Inner {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssertMessageNotString",
          "displayName": "\u0027assert\u0027 message is not a string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eassert\u003c/code\u003e messages that are not of the \u003ccode\u003ejava.lang.String\u003c/code\u003e type.\n\u003cp\u003eUsing a string provides more information to help diagnose the failure\n  or the assertion reason.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(List\u0026lt;Integer\u0026gt; myList) {\n    assert myList.isEmpty() : false;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eOnly warn when the \u003ccode\u003eassert\u003c/code\u003e message type is \u0027boolean\u0027 or \u0027java.lang.Boolean\u0027\u003c/b\u003e option to only warn when the \u003ccode\u003eassert\u003c/code\u003e message type is \u003ccode\u003eboolean\u003c/code\u003e or \u003ccode\u003ejava.lang.Boolean\u003c/code\u003e.\nA \u003ccode\u003eboolean\u003c/code\u003e detail message is unlikely to provide additional information about an assertion failure\n  and could result from a mistakenly entered \u003ccode\u003e:\u003c/code\u003e instead of \u003ccode\u003e\u0026\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "LambdaCanBeReplacedWithAnonymous",
          "displayName": "Lambda can be replaced with anonymous class",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambda expressions that can be replaced with anonymous classes.\n\u003cp\u003e\n  Expanding lambda expressions to anonymous classes may be useful if you need to implement other\n  methods inside an anonymous class.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  s -\u003e System.out.println(s)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew Consumer\u0026lt;String\u0026gt;() {\n  @Override\n  public void accept(String s) {\n    System.out.println(s);\n  }\n}\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ci\u003eLambda expression\u003c/i\u003e appeared in Java 8.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryBlockStatement",
          "displayName": "Unnecessary code block",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code blocks that are redundant to the semantics of the program and can\nbe replaced with their contents.\n\u003cp\u003eThe code blocks that are the bodies of \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003edo\u003c/code\u003e,\n\u003ccode\u003ewhile\u003c/code\u003e, or \u003ccode\u003efor\u003c/code\u003e statements will not be reported by this\n  inspection.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo() {\n    { // unnecessary\n      int result \u003d call();\n      analyze(result);\n    } // unnecessary\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore branches of \u0027switch\u0027 statements\u003c/b\u003e option to ignore the code blocks that are used as branches of switch statements.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ImplicitCallToSuper",
          "displayName": "Implicit call to \u0027super()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports constructors that do not begin with a call to \"super\" constructor or\nanother constructor of the same class.\n\u003cp\u003eSuch constructors can be thought of as implicitly beginning with a\n  call to \u003ccode\u003esuper()\u003c/code\u003e. Some coding standards prefer that such calls to\n  \u003ccode\u003esuper()\u003c/code\u003e be made explicitly.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    Foo() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    Foo() {\n      super();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the inspection settings to ignore classes extending directly from \u003ccode\u003eObject\u003c/code\u003e.\n  For instance:\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    Foo() {} // Not reported\n  }\n\n  class Bar extends Foo {\n    Bar() {} // Implicit call to \u0027super()\u0027\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FieldMayBeFinal",
          "displayName": "Field may be \u0027final\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields that can be safely made \u003ccode\u003efinal\u003c/code\u003e.\nAll \u003ccode\u003efinal\u003c/code\u003e fields have a value and this value does not change, which can make the code easier to reason about.\n\u003cp\u003eTo avoid too expensive analysis, this inspection only reports if the field has a \u003ccode\u003eprivate\u003c/code\u003e modifier\n  or it is defined in a local or anonymous class.\n  A field can be \u003ccode\u003efinal\u003c/code\u003e if:\n\u003cul\u003e\n  \u003cli\u003eIt is \u003ccode\u003estatic\u003c/code\u003e and initialized once in its declaration or in one \u003ccode\u003estatic\u003c/code\u003e initializer.\u003c/li\u003e\n  \u003cli\u003eIt is non-\u003ccode\u003estatic\u003c/code\u003e and initialized once in its declaration, in one instance initializer or in every constructor\u003c/li\u003e\n\u003c/ul\u003e\nAnd it is not modified anywhere else.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Person {\n    private String name; // can be final\n\n    Person(String name) {\n      this.name \u003d name;\n    }\n\n    public String getName() {\n      return name;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Person {\n    private final String name;\n\n    Person(String name) {\n      this.name \u003d name;\n    }\n\n    public String getName() {\n      return name;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantLabeledSwitchRuleCodeBlock",
          "displayName": "Labeled switch rule has redundant code block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports labeled rules of \u003ccode\u003eswitch\u003c/code\u003e statements or \u003ccode\u003eswitch\u003c/code\u003e expressions that have a redundant code block.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d switch (n) {\n    case 1 -\u003e { yield Integer.toString(n); }\n    default -\u003e \"default\";\n  };\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String s \u003d switch (n) {\n    case 1 -\u003e Integer.toString(n);\n    default -\u003e \"default\";\n  };\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 14 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryParentheses",
          "displayName": "Unnecessary parentheses",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any instance of unnecessary parentheses.\n\u003cp\u003eParentheses are considered unnecessary if the evaluation order of an expression remains\n  unchanged after you remove the parentheses.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int n \u003d 3 + (9 * 8);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int n \u003d 3 + 9 * 8;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore clarifying parentheses\u003c/b\u003e option to ignore parentheses that help clarify a binary\n    expression. Parentheses are clarifying if the parenthesized expression is an\n    \u003ccode\u003einstanceof\u003c/code\u003e expression that is a part of a larger expression or has a different operator than the parent expression.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore parentheses around the condition of conditional expressions\u003c/b\u003e option to ignore any\n    parentheses around the condition of conditional expressions. Some coding standards specify that all such\n    conditions must be surrounded by parentheses.\u003c/li\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eIgnore parentheses around single no formal type lambda parameter\u003c/b\u003e option to ignore parentheses\n    around a single lambda parameter within a lambda expression.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SingleStatementInBlock",
          "displayName": "Code block contains single statement",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports control flow statements with a single statement in their code block and\nsuggests removing the braces from the control flow statement body.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (x \u003e 0) {\n    System.out.println(\"x is positive\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (x \u003e 0) System.out.println(\"x is positive\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantFieldInitialization",
          "displayName": "Redundant field initialization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields explicitly initialized to their default values.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    int foo \u003d 0;\n    List bar \u003d null;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    int foo;\n    List bar;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the inspection settings to only report explicit \u003ccode\u003enull\u003c/code\u003e initialization, for example:\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    int foo \u003d 0;     // no warning\n    List bar \u003d null; // redundant field initialization warning\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OptionalToIf",
          "displayName": "\u0027Optional\u0027 can be replaced with sequence of \u0027if\u0027 statements",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eOptional\u003c/code\u003e call chains that can be replaced with a sequence of \u003ccode\u003eif\u003c/code\u003e statements.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  return Optional.ofNullable(name)\n    .map(this::extractInitials)\n    .map(initials -\u003e initials.toUpperCase(Locale.ENGLISH))\n    .orElseGet(this::getDefault);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (name !\u003d null) {\n    String initials \u003d extractInitials(name);\n    if (initials !\u003d null) return initials.toUpperCase(Locale.ENGLISH);\n  }\n  return getDefault();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ccode\u003ejava.util.Optional\u003c/code\u003e appeared in Java 8.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryThis",
          "displayName": "Unnecessary \u0027this\u0027 qualifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary \u003ccode\u003ethis\u003c/code\u003e qualifier.\n\u003cp\u003e\n  Using \u003ccode\u003ethis\u003c/code\u003e to disambiguate a code reference is discouraged by many coding styles\n  and may easily become unnecessary\n  via automatic refactorings.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    int x;\n    void foo() {\n      this.x \u003d 2;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    int x;\n    void foo() {\n      x \u003d 2;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the inspection settings to ignore assignments to fields.\n  For instance, \u003ccode\u003ethis.x \u003d 2;\u003c/code\u003e won\u0027t be reported, but \u003ccode\u003eint y \u003d this.x;\u003c/code\u003e will be.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReturnSeparatedFromComputation",
          "displayName": "\u0027return\u0027 separated from the result computation",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ereturn\u003c/code\u003e statements that return a local variable where the value of the variable is computed\nsomewhere else within the same method.\n\u003cp\u003eThe quick-fix inlines the returned variable by moving the return statement to the location in which the value\n  of the variable is computed.\n  When the returned value can\u0027t be inlined into the \u003ccode\u003ereturn\u003c/code\u003e statement, \n  the quick-fix attempts to move the return statement as close to the computation of the returned value as possible.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int n \u003d -1;\n  for (int i \u003d 0; i \u0026lt; a.length; i++) {\n    if (a[i] \u003d\u003d b) {\n      n \u003d i;\n      break;\n    }\n  }\n  return n;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int n \u003d -1;\n  for (int i \u003d 0; i \u0026lt; a.length; i++) {\n    if (a[i] \u003d\u003d b) {\n      return i;\n    }\n  }\n  return n;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessarySuperConstructor",
          "displayName": "Unnecessary call to \u0027super()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to no-arg superclass constructors during object construction.\n\u003cp\u003eSuch calls are unnecessary and may be removed.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    Foo() {\n      super();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    Foo() {\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SingleElementAnnotation",
          "displayName": "Non-normalized annotation",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports annotations in a shorthand form and suggests rewriting them in a normal form with an attribute name.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @SuppressWarnings(\"foo\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @SuppressWarnings(value \u003d \"foo\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ArrayCanBeReplacedWithEnumValues",
          "displayName": "Array can be replaced with enum values",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports arrays of enum constants that can be replaced with a call to \u003ccode\u003eEnumType.values()\u003c/code\u003e.\n\u003cp\u003eUsually, when updating such an enum, you have to update the array as well. However, if you use \u003ccode\u003eEnumType.values()\u003c/code\u003e\n instead, no modifications are required.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum States {\n     NOT_RUN, IN_PROGRESS, FINISHED;\n  }\n  \n  handleStates(new States[] {NOT_RUN, IN_PROGRESS, FINISHED});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  handleStates(States.values());\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PatternVariablesCanBeReplacedWithCast",
          "displayName": "Using \u0027instanceof\u0027 with patterns",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003einstanceof\u003c/code\u003e with patterns and suggests converting them to ordinary \u003ccode\u003einstanceof\u003c/code\u003e with casts.\n\u003cp\u003eThis inspection makes it possible to move \u003ccode\u003einstanceof\u003c/code\u003e with patterns to a codebase using an earlier Java version\n  by applying the quick-fix.\u003c/p\u003e\n\u003cp\u003e\n  Note that the result can be not completely equivalent to the original \u003ccode\u003einstanceof\u003c/code\u003e with patterns when\n  a complex expression before \u003ccode\u003einstanceof\u003c/code\u003e is used. In this case this expression will be reevaluated.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (object instanceof String txt \u0026\u0026 txt.length() \u003d\u003d 1) {\n      System.out.println(txt);\n  } else {\n      return;\n  }\n  System.out.println(txt);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (object instanceof String \u0026\u0026 ((String) object).length() \u003d\u003d1) {\n      String txt \u003d (String) object;\n      System.out.println(txt);\n  } else {\n      return;\n  }\n  String txt \u003d (String) object;\n  System.out.println(txt);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2023.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantOnWrongSideOfComparison",
          "displayName": "Constant on wrong side of comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comparison operations where the constant value is on the wrong side.\n\u003cp\u003eSome coding conventions specify that constants should be on a specific side of a comparison, either left or right.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean compare(int x) {\n    return 1 \u0026gt; x; // Constant \u00271\u0027 on the left side of the comparison\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean compare(int x) {\n    return x \u0026lt; 1;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the inspection settings to choose the side of constants in comparisons\n  and whether to warn if \u003ccode\u003enull\u003c/code\u003e literals are on the wrong side.\n\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantExpression",
          "displayName": "Constant expression can be evaluated",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports compile-time constant expressions and suggests replacing them with their\n  actual values. For example, you will be prompted to replace \"2 + 2\" with \"4\".\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifiableEqualsExpression",
          "displayName": "Unnecessary \u0027null\u0027 check before \u0027equals()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comparisons to \u003ccode\u003enull\u003c/code\u003e that are followed by a call to \u003ccode\u003eequals()\u003c/code\u003e with a constant argument.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (s !\u003d null \u0026\u0026 s.equals(\"literal\")) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (\"literal\".equals(s)) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n    Use the inspection settings to report \u003ccode\u003eequals()\u003c/code\u003e calls with a non-constant argument\n    when the argument to \u003ccode\u003eequals()\u003c/code\u003e is proven not to be \u003ccode\u003enull\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ExtendsObject",
          "displayName": "Class explicitly extends \u0027Object\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any classes that are explicitly declared to extend \u003ccode\u003ejava.lang.Object\u003c/code\u003e.\n\u003cp\u003eSuch declaration is redundant and can be safely removed.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyClass extends Object {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix removes the redundant \u003ccode\u003eextends Object\u003c/code\u003e clause:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyClass {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnqualifiedStaticUsage",
          "displayName": "Unqualified static access",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usage of static members that is not qualified\nwith the class name.\n\u003cp\u003e\nThis is legal if the static member is in\nthe same class, but may be confusing.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      foo();\n      System.out.println(x);\n    }\n\n    static void baz() { foo(); }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      Foo.foo();\n      System.out.println(Foo.x);\n    }\n\n    static void baz() { Foo.foo(); }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the inspection settings to toggle the reporting for the following items:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    \u003cp\u003e\n      static fields access\u003cbr\u003e\n      \u003ccode\u003evoid bar() { System.out.println(x); }\u003c/code\u003e\n    \u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cp\u003e\n      calls to static methods\u003cbr\u003e\n      \u003ccode\u003evoid bar() { foo(); }\u003c/code\u003e\u003cbr\u003e\n      \u003ccode\u003estatic void baz() { foo(); }\u003c/code\u003e\n    \u003c/p\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  You can also configure the inspection to only report static member usage from a non-static context.\n  In the above example, \u003ccode\u003estatic void baz() { foo(); }\u003c/code\u003e will not be reported.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StreamToLoop",
          "displayName": "Stream API call chain can be replaced with loop",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports Stream API chains, \u003ccode\u003eIterable.forEach()\u003c/code\u003e, and \u003ccode\u003eMap.forEach()\u003c/code\u003e calls that can be automatically converted into classical loops.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String joinNonEmpty(List\u0026lt;String\u0026gt; list) {\n    return list.stream() // Stream can be converted to loop\n      .filter(s -\u003e !s.isEmpty())\n      .map(String::trim)\n      .collect(Collectors.joining(\", \"));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String joinNonEmpty(List\u0026lt;String\u0026gt; list) {\n    StringJoiner joiner \u003d new StringJoiner(\", \");\n    for (String s : list) {\n      if (!s.isEmpty()) {\n        String trim \u003d s.trim();\n        joiner.add(trim);\n      }\n    }\n    return joiner.toString();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Note that sometimes this inspection might cause slight semantic changes.\n  Special care should be taken when it comes to short-circuiting, as it\u0027s not specified how many elements will be actually read when\n  the stream short-circuits.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ci\u003eStream API\u003c/i\u003e appeared in Java 8.\n  This inspection can help to downgrade for backward compatibility with earlier Java versions.\n\u003c/p\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eIterate unknown Stream sources via Stream.iterator()\u003c/b\u003e option to suggest conversions for streams with unrecognized source.\n  In this case, iterator will be created from the stream.\n  For example, when checkbox is selected, the conversion will be suggested here:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;ProcessHandle\u0026gt; handles \u003d ProcessHandle.allProcesses().collect(Collectors.toList());\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this case, the result will be as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;ProcessHandle\u0026gt; handles \u003d new ArrayList\u0026lt;\u0026gt;();\n  for (Iterator\u0026lt;ProcessHandle\u0026gt; it \u003d ProcessHandle.allProcesses().iterator(); it.hasNext(); ) {\n    ProcessHandle allProcess \u003d it.next();\n    handles.add(allProcess);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SizeReplaceableByIsEmpty",
          "displayName": "\u0027size() \u003d\u003d 0\u0027 can be replaced with \u0027isEmpty()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003e.size()\u003c/code\u003e or \u003ccode\u003e.length()\u003c/code\u003e\ncomparisons with a \u003ccode\u003e0\u003c/code\u003e literal that can be replaced with a call to \u003ccode\u003e.isEmpty()\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean emptyList \u003d list.size() \u003d\u003d 0;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean emptyList \u003d list.isEmpty();\n  \u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnored classes\u003c/b\u003e table to add classes for which any \u003ccode\u003e.size()\u003c/code\u003e or \u003ccode\u003e.length()\u003c/code\u003e comparisons should not be replaced.\n\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore expressions which would be replaced with \u003ccode\u003e!isEmpty()\u003c/code\u003e\u003c/b\u003e option to ignore any expressions which would be replaced with \u003ccode\u003e!isEmpty()\u003c/code\u003e.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OptionalIsPresent",
          "displayName": "Non functional style \u0027Optional.isPresent()\u0027 usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eOptional\u003c/code\u003e expressions used as \u003ccode\u003eif\u003c/code\u003e or conditional expression conditions,\nthat can be rewritten in a functional style.\nThe result is often shorter and easier to read.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (str.isPresent()) str.get().trim();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  str.ifPresent(String::trim);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LambdaParameterTypeCanBeSpecified",
          "displayName": "Lambda parameter type can be specified",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambda parameters that do not have their type specified and suggests\nadding the missing type declarations.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Function\u0026lt;String, Integer\u0026gt; length \u003d a -\u0026gt; a.length();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Function\u0026lt;String, Integer\u0026gt; length \u003d (String a) -\u0026gt; a.length();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 8 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnclearBinaryExpression",
          "displayName": "Multiple operators with different precedence",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports binary, conditional, or \u003ccode\u003einstanceof\u003c/code\u003e expressions that consist of different operators\nwithout parentheses. Such expressions can be less readable due to different precedence rules of operators.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int n \u003d 3 + 9 * 8 + 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int n \u003d 3 + (9 * 8) + 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TryStatementWithMultipleResources",
          "displayName": "\u0027try\u0027 statement with multiple resources can be split",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003etry\u003c/code\u003e statements with multiple resources that can be automatically split into\n  multiple try-with-resources statements.\n\u003cp\u003eThis conversion can be useful for further refactoring\n(for example, for extracting the nested \u003ccode\u003etry\u003c/code\u003e statement into a separate method). \u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try (FileInputStream in \u003d new FileInputStream(\"in.txt\");\n     FileOutputStream out \u003d new FileOutputStream(\"out.txt\")) {\n     /*read and write*/\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  try (FileInputStream in \u003d new FileInputStream(\"in.txt\")) {\n    try (FileOutputStream out \u003d new FileOutputStream(\"out.txt\")) {\n      /*read and write*/\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "NestedMethodCall",
          "displayName": "Nested method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method calls used as parameters to another method call.\n\u003cp\u003eThe quick-fix introduces a variable to make the code simpler and easier to debug.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public int y() { return 1; }\n  public int f(int x) { return 2 * x; }\n\n  public void foo() {\n      int x \u003d f(y());\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public int y() { return 1; }\n  public int f(int x) { return 2 * x; }\n\n  public void foo() {\n      int y \u003d y();\n      int x \u003d f(y);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the inspection options to toggle the reporting of:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003emethod calls in field initializers\u003c/li\u003e\n  \u003cli\u003ecalls to static methods\u003c/li\u003e\n  \u003cli\u003ecalls to simple getters\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Logging",
      "inspections": [
        {
          "shortName": "LoggingStringTemplateAsArgument",
          "displayName": "String template as argument to logging call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports string templates that are used as arguments to \u003cb\u003eSLF4J\u003c/b\u003e and \u003cb\u003eLog4j 2\u003c/b\u003e logging methods.\nThe method \u003ccode\u003eorg.apache.logging.log4j.Logger.log()\u003c/code\u003e and its overloads are supported only for \u003cb\u003eall log levels\u003c/b\u003e option.\nString templates are evaluated at runtime even when the logging message is not logged; this can negatively impact performance.\nIt is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled.\n\u003cp\u003e\u003cb\u003eExample (for Kotlin):\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n      val variable1 \u003d getVariable()\n      logger.info(\"variable1: $variable1\")\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cb\u003eAfter the quick-fix is applied (for Kotlin):\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n      val variable1 \u003d getVariable()\n      logger.info(\"variable1: {}\", variable1)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Note that the suggested replacement might not be equivalent to the original code, for example,\n  when string templates contain method calls or assignment expressions.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eWarn on\u003c/b\u003e list to ignore certain higher logging levels. Higher logging levels may be always enabled, and the arguments will always be evaluated.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eDo not warn when only expressions with primitive types, their wrappers or String are included\u003c/b\u003e option to ignore\n    string templates, which contain only expressions with primitive types, their wrappers or String.\n    For example, it could be useful to prevent loading lazy collections.\n    Note that, creating string even only with expressions with primitive types,\n    their wrappers or String at runtime can negatively impact performance.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003csmall\u003eNew in 2023.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "JavaBeans issues",
      "inspections": [
        {
          "shortName": "PropertyValueSetToItself",
          "displayName": "Property value set to itself",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls of setter methods with the same object getter as a value.\nUsually, this code does nothing and probably was not intended.\n\u003cp\u003e\u003cb\u003eFor example:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebean.setPayerId(bean.getPayerId());\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FieldHasSetterButNoGetter",
          "displayName": "Field has setter but no getter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields that have setter methods but no getter methods.\n\u003cp\u003e\n  In certain bean containers, when used within the Java beans specification, such fields might be difficult\n  to work with.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassWithoutConstructor",
          "displayName": "Class without constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes without constructors.\n\u003cp\u003eSome coding standards prohibit such classes.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassWithoutNoArgConstructor",
          "displayName": "Class without no-arg constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes without a constructor that takes no arguments (i.e. has no parameters).\nNo-arg constructors are necessary in some contexts. For example, if a class needs to be created using reflection.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Bean {\n    private String name;\n\n    public Bean(String name) {\n      this.name \u003d name;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the checkbox below to ignore classes without explicit constructors.\n  The compiler provides a default no-arg constructor to such classes.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousGetterSetter",
          "displayName": "Suspicious getter/setter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports getter or setter methods that access a field that is not expected by its name.\nFor example, when \u003ccode\u003egetY()\u003c/code\u003e returns the \u003ccode\u003ex\u003c/code\u003e field. Usually, it might be a copy-paste error.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Point {\n    private int x;\n    private int y;\n\n    public void setX(int x) { // Warning: setter \u0027setX()\u0027 assigns field \u0027y\u0027\n      this.y \u003d x;\n    }\n\n    public int getY() { // Warning: getter \u0027getY()\u0027 returns field \u0027x\u0027\n      return x;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the checkbox below to report situations when a field in the class has a name that matches a name of a getter or a setter.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Bean Validation",
      "inspections": [
        {
          "shortName": "BvConstraintMappingsInspection",
          "displayName": "Incorrect elements in Bean Validation \u003cconstraint-mappings\u003e files",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.beanValidation",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect elements in Bean Validation \u003ccode\u003e\u0026lt;constraint-mappings\u0026gt;\u003c/code\u003e files:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eReferences to non-instantiable classes\u003c/li\u003e\n  \u003cli\u003eReferences to classes that do not extend required class\u003c/li\u003e\n  \u003cli\u003eReferences to classes with inappropriate scope\u003c/li\u003e\n  \u003cli\u003eEmpty tag and attribute values\u003c/li\u003e\n  \u003cli\u003eTag and attribute values that do not match the required pattern (for example, Java Identifiers)\u003c/li\u003e\n  \u003cli\u003eTags that do not include required children tags or attributes\u003c/li\u003e\n  \u003cli\u003eTags that define objects with duplicate names\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;constraint-mappings version\u003d\"1.1\"\u0026gt;\n    \u0026lt;bean class\u003d\"my.UserClass\" ignore-annotations\u003d\"false\"\u0026gt;\n        \u0026lt;field name\u003d\"name\"\u0026gt;\n            \u0026lt;constraint annotation\u003d\"\u003cstrong\u003ejava.lang.String\u003c/strong\u003e\"/\u0026gt;  \u0026lt;!--\u0027java.lang.String\u0027 is not a Java Annotation --\u0026gt;\n        \u0026lt;/field\u0026gt;\n\n        \u0026lt;field name\u003d\"name\"\u0026gt;\n            \u0026lt;constraint annotation\u003d\"javax.validation.constraints.Size\"\u0026gt;\n                \u0026lt;element name\u003d\"min\"\u0026gt;\u003cstrong\u003enon-number\u003c/strong\u003e\u0026lt;/element\u0026gt;    \u0026lt;!--Should be a number from \u0027-2,147,483,648\u0027 to \u00272,147,483,647\u0027 --\u0026gt;\n            \u0026lt;/constraint\u0026gt;\n        \u0026lt;/field\u0026gt;\n\n        \u0026lt;getter name\u003d\"\u003cstrong\u003ezzz\u003c/strong\u003e\"\u0026gt; Cannot resolve symbol \u0027zzz\u0027\n            \u0026lt;valid/\u0026gt;\n        \u0026lt;/getter\u0026gt;\n\n    \u0026lt;/bean\u0026gt;\n\u0026lt;/constraint-mappings\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MinMaxValuesInspection",
          "displayName": "Incorrect \u0027min\u0027 and \u0027max\u0027 values in Bean Validation annotations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.beanValidation",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect values of \u003ccode\u003emax\u003c/code\u003e and \u003ccode\u003emin\u003c/code\u003e values in Bean Validation constraint annotations.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\npublic class Car {\n  @NotNull\n  @Size(min \u003d 14, max \u003d \u003cstrong\u003e2\u003c/strong\u003e) // \u0027max\u0027 value is less than \u0027min\u0027 value\n  private String licensePlate;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BvConfigDomInspection",
          "displayName": "Incorrect elements in Bean Validation \u003cvalidation-config\u003e files",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.beanValidation",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect elements in Bean Validation \u003ccode\u003e\u0026lt;validation-config\u0026gt;\u003c/code\u003e files:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eReferences to non-instantiable classes\u003c/li\u003e\n  \u003cli\u003eReferences to classes that do not extend required class\u003c/li\u003e\n  \u003cli\u003eReferences to classes with inappropriate scope\u003c/li\u003e\n  \u003cli\u003eEmpty tag and attribute values\u003c/li\u003e\n  \u003cli\u003eTag and attribute values that do not match the required pattern (for example, Java Identifiers)\u003c/li\u003e\n  \u003cli\u003eTags that do not include required children tags or attributes\u003c/li\u003e\n  \u003cli\u003eTags that define objects with duplicate names\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;validation-config\u0026gt;\n  \u0026lt;default-provider\u0026gt;\u003cstrong\u003efoo.UnknownProvider\u003c/strong\u003e\u0026lt;/default-provider\u0026gt;  \u0026lt;!-- Cannot resolve class or package \u0027UnknownProvider\u0027  --\u0026gt;\n  \u0026lt;message-interpolator\u0026gt;my.Interpolator\u0026lt;/message-interpolator\u0026gt;\n  \u0026lt;constraint-mapping\u0026gt;META-INF/ConstraintMappings.xml\u0026lt;/constraint-mapping\u0026gt;\n  \u0026lt;constraint-mapping\u0026gt;META-INF/\u003cstrong\u003eunknown.xml\u003c/strong\u003e\u0026lt;/constraint-mapping\u0026gt;\n\u0026lt;/validation-config\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "NonExternalClassifierExtendingStateOrProps",
          "displayName": "Non-external classifier extending State or Props",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports non-external classifier extending State or Props. Read more in the \u003ca href\u003d\"https://kotlinlang.org/docs/js-ir-migration.html#convert-js-and-react-related-classes-and-interfaces-to-external-interfaces\"\u003emigration guide\u003c/a\u003e.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "TypeScript",
      "inspections": [
        {
          "shortName": "TypeScriptValidateGenericTypes",
          "displayName": "Incorrect generic type argument",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an invalid type argument in a function, interface, or class declaration.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
          "displayName": "Abstract class constructor can be made protected",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public).\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptSuspiciousConstructorParameterAssignment",
          "displayName": "Assigned constructor field parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.\u003cbr/\u003e\nIn this case, the corresponding field \u003ci\u003ewon\u0027t\u003c/i\u003e be assigned, only the local parameter value is modified.\n\u003cpre\u003e\nclass Foo {\n  constructor(private p: number) {\n    p \u003d 1; //must be this.p \u003d 1;\n  }\n}\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptRedundantGenericType",
          "displayName": "Redundant type arguments",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a type argument that is equal to the default one and can be removed.\n\u003cp\u003e\nExample:\n\u003cpre\u003e\ntype Foo\u0026#60;T\u003dnumber\u003e \u003d T;\nlet z: Foo\u0026#60;number\u003e;\n\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptMissingAugmentationImport",
          "displayName": "Missing augmentation import",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage from \n\u003ca href\u003d\"https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation\"\u003eaugmentation module\u003c/a\u003e without an explicit import.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptLibrary",
          "displayName": "Missing global library",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a TypeScript library file that is required for a symbol but is not listed under the \u003ccode\u003elib\u003c/code\u003e compiler option in \u003ccode\u003etsconfig.json\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptFieldCanBeMadeReadonly",
          "displayName": "Field can be readonly",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a private field that can be made readonly (for example, if the field is assigned only in the constructor).\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptUnresolvedReference",
          "displayName": "Unresolved TypeScript reference",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved reference in TypeScript code.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptExplicitMemberType",
          "displayName": "Explicit types",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a type annotation that doesn\u0027t match the current code style for explicit types.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Type declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:\n\u003c/p\u003e\n\u003cp\u003e\n  \u003ccode\u003e\n    var pi: number \u003d 3.14\n  \u003c/code\u003e\n\u003c/p\u003e\n\u003cp\u003eIn some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptValidateTypes",
          "displayName": "Type mismatch",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a parameter, return value, or assigned expression of incorrect type.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptUMDGlobal",
          "displayName": "Referenced UMD global variable",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS).\nReferencing UMD variables without explicit imports can lead to a runtime error if the library isn\u0027t included implicitly.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptJSXUnresolvedComponent",
          "displayName": "Unresolved JSX component",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved reference to a JSX component.\nSuggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.\n\u003cp\u003eThe template for a new component can be modified in Editor | File and Code Templates.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptCheckImport",
          "displayName": "Unresolved imported name",
          "defaultSeverity": "ERROR",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved name or binding in an \u003ccode\u003eimport\u003c/code\u003e declaration in TypeScript code.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptSmartCast",
          "displayName": "Narrowed type",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of a variable where the variable type is narrowed by a type guard.\nNote that severity level doesn\u0027t affect this inspection.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptConfig",
          "displayName": "Inconsistent tsconfig.json properties",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports inconsistency  of a \u003ccode\u003epaths\u003c/code\u003e, \u003ccode\u003echeckJs\u003c/code\u003e, or \u003ccode\u003eextends\u003c/code\u003e property in a tsconfig.json file.\n\u003cbr\u003e\nThe \u003ccode\u003echeckJs\u003c/code\u003e property requires \u003ccode\u003eallowJs\u003c/code\u003e.\n\u003cbr\u003e\nThe \u003ccode\u003eextends\u003c/code\u003e property should be a valid file reference.\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptDuplicateUnionOrIntersectionType",
          "displayName": "Duplicate union or intersection type component",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a duplicate type inside a union or intersection.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSEqualityComparisonWithCoercion.TS",
          "displayName": "Equality operator may cause type coercion",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage of equality operators  may cause unexpected type coercions.\nSuggests replacing \u003ccode\u003e\u003d\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e equality operators with type-safe \u003ccode\u003e\u003d\u003d\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003d\u003c/code\u003e operators.\n\n\u003cp\u003eDepending on the option selected, one of the following cases will be reported:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\n    All usages of \u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e operators.\n  \u003c/li\u003e\n  \u003cli\u003e\n    All usages except comparison with null. Some code styles allow using \u003ccode\u003ex \u003d\u003d null\u003c/code\u003e as a replacement for\n    \u003ccode\u003ex \u003d\u003d\u003d null || x \u003d\u003d\u003d undefined\u003c/code\u003e.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Only suspicious expressions, such as: \u003ccode\u003e\u003d\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e comparisons\n    with \u003ccode\u003e0\u003c/code\u003e, \u003ccode\u003e\u0027\u0027\u003c/code\u003e,\n    \u003ccode\u003enull\u003c/code\u003e, \u003ccode\u003etrue\u003c/code\u003e,\n    \u003ccode\u003efalse\u003c/code\u003e, or \u003ccode\u003eundefined\u003c/code\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptValidateJSTypes",
          "displayName": "Type mismatch in \u0027any\u0027 type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function call with a parameter, return value, or assigned expression or incorrect type, \nif the context symbol can be implicitly resolved to the \u003ccode\u003eany\u003c/code\u003e type.\n\u003cpre\u003e\ndeclare var test: any;\ntest.hasOwnProperty(true); //reports \u0027true\u0027\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeScriptMissingConfigOption",
          "displayName": "Missing tsconfig.json option ",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a usage that requires an explicit option in \u003ccode\u003etsconfig.json\u003c/code\u003e.\nFor example, to use JSX in \u003ccode\u003e.tsx\u003c/code\u003e files, \u003ccode\u003etsconfig.json\u003c/code\u003e must contain \u003ccode\u003e\"jsx\"\u003c/code\u003e property.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java EE",
      "inspections": [
        {
          "shortName": "SecurityRoles",
          "displayName": "Security role name correctness",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports invalid security role names.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;web-app\u0026gt;\n    \u0026lt;security-role\u0026gt;\n      \u0026lt;role-name\u0026gt;custom#role\u0026lt;/role-name\u0026gt; // Error: invalid name\n    \u0026lt;/security-role\u0026gt;\n    \u0026lt;security-role\u0026gt;\n      \u0026lt;role-name\u0026gt;customRole\u0026lt;/role-name\u0026gt; // Good name\n    \u0026lt;/security-role\u0026gt;\n  \u0026lt;/web-app\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JavaeeApplicationDomInspection",
          "displayName": "Java EE application descriptor correctness",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the following problems inside `application.xml` configuration files:\n\u003cul\u003e\n  \u003cli\u003eReferences to non-instantiable classes\u003c/li\u003e\n  \u003cli\u003eReferences to classes that do not extend required class\u003c/li\u003e\n  \u003cli\u003eReferences to classes with inappropriate scope\u003c/li\u003e\n  \u003cli\u003eTag and attribute values that do not match required pattern (for example, Java Identifiers)\u003c/li\u003e\n  \u003cli\u003eTags that do not include required children tags or attributes\u003c/li\u003e\n  \u003cli\u003eTags that define objects with duplicate names\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;application\u0026gt;\n    \u0026lt;module id\u003d\"ExampleWebModule\"\u0026gt;\n      \u0026lt;web\u0026gt; // Error: \u0027web-uri\u0027 child tag should be defined\n        \u0026lt;context-root\u0026gt;ExampleWebApp\u0026lt;/context-root\u0026gt;\n      \u0026lt;/web\u0026gt;\n    \u0026lt;/module\u0026gt;\n\u0026lt;/application\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WebWarnings",
          "displayName": "Web.xml warnings",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.javaee.web",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicated welcome-files listed in the descriptor for deploying a Web Module to a server.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u0026gt;\n  \u0026lt;!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\"\u0026gt;\n  \u0026lt;web-app\u0026gt;\n    \u0026lt;welcome-file-list\u0026gt;\n      \u0026lt;welcome-file\u0026gt;\n        Welcome1.jsp\n      \u0026lt;/welcome-file\u0026gt;\n      \u0026lt;welcome-file\u0026gt;\n        /Welcome1.jsp // Error: duplicated welcome-file\n      \u0026lt;/welcome-file\u0026gt;\n      \u0026lt;welcome-file\u0026gt;\n        Welcome3.jsp\n      \u0026lt;/welcome-file\u0026gt;\n    \u0026lt;/welcome-file-list\u0026gt;\n  \u0026lt;/web-app\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "MimeType",
          "displayName": "MIME type",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.web",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\nLets you control MIME type name validity.\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ServletWithoutMappingInspection",
          "displayName": "Servlet mapping",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.web",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports servlets without associated mappings.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;web-app\u0026gt;\n    \u0026lt;servlet\u0026gt;\n      \u0026lt;servlet-name\u0026gt;foo\u0026lt;/servlet-name\u0026gt; // Error: servlet should have a mapping\n      \u0026lt;servlet-class\u0026gt;javax.servlet.Servlet\u0026lt;/servlet-class\u0026gt;\n    \u0026lt;/servlet\u0026gt;\n  \n    \u0026lt;filter\u0026gt;\n      \u0026lt;filter-name\u0026gt;bar\u0026lt;/filter-name\u0026gt; // Error: filter should have a mapping\n      \u0026lt;filter-class\u0026gt;java.lang.String\u0026lt;/filter-class\u0026gt;\n    \u0026lt;/filter\u0026gt;\n  \u0026lt;/web-app\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "WebProperties",
          "displayName": "Web.xml errors",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.javaee.web",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the following problems in descriptors that are used to deploy your Web Module to a server:\n\u003cul\u003e\n  \u003cli\u003eReferences to non-instantiable classes\u003c/li\u003e\n  \u003cli\u003eReferences to classes that do not extend required class\u003c/li\u003e\n  \u003cli\u003eReferences to classes with inappropriate scope\u003c/li\u003e\n  \u003cli\u003eEmpty tag and attribute values\u003c/li\u003e\n  \u003cli\u003eTag and attribute values that do not match required pattern (for example, Java Identifiers)\u003c/li\u003e\n  \u003cli\u003eTags that do not include required children tags or attributes\u003c/li\u003e\n  \u003cli\u003eTags that define objects with duplicate names\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\u003cbr/\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;web-app\u0026gt;\n  \u0026lt;filter-mapping\u0026gt;\n    \u0026lt;filter-name\u0026gt;CustomFilter\u0026lt;/filter-name\u0026gt; // Error: either servlet-name or url-pattern child tag should be defined\n  \u0026lt;/filter-mapping\u0026gt;\n  \u0026lt;servlet-mapping\u0026gt;\n    \u0026lt;servlet-name\u0026gt;CustomServletName\u0026lt;/servlet-name\u0026gt;\n    \u0026lt;url-pattern\u0026gt;/ baseUrl\u0026lt;/url-pattern\u0026gt; // Error: URI-pattern must not contain white spaces\n  \u0026lt;/servlet-mapping\u0026gt;\n\u0026lt;/web-app\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "TrailingWhitespacesInTextBlock",
          "displayName": "Trailing whitespace in text block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports text blocks with trailing whitespace characters.\nTrailing whitespace is considered incidental and will be stripped away by the Java compiler.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 15 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2021.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "DOM issues",
      "inspections": [
        {
          "shortName": "DocumentWriteJS",
          "displayName": "Call to \u0027document.write()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a method call to \u003ccode\u003edocument.write()\u003c/code\u003e or \u003ccode\u003edocument.writeln()\u003c/code\u003e.\nMost usages of such calls are performed better with explicit\nDOM calls, such as \u003ccode\u003egetElementByID()\u003c/code\u003e and\n\u003ccode\u003ecreateElement()\u003c/code\u003e.  Additionally, the \u003ccode\u003ewrite()\u003c/code\u003e and\n\u003ccode\u003ewriteln()\u003c/code\u003e calls will not work with XML\nDOMs, including DOMs for XHTML if viewed as XML.  This can result in difficulty to point out bugs.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XHTMLIncompatabilitiesJS",
          "displayName": "Incompatible XHTML usages",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports common JavaScript DOM patterns which may present problems\nwith XHTML documents. In particular, the patterns detected will behave completely\ndifferently depending on whether the document is loaded as XML or HTML.\nThis can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content.\nPatterns detected include\n\u003cb\u003edocument.body\u003c/b\u003e,\n\u003cb\u003edocument.images\u003c/b\u003e,\n\u003cb\u003edocument.applets\u003c/b\u003e,\n\u003cb\u003edocument.links\u003c/b\u003e,\n\u003cb\u003edocument.forms\u003c/b\u003e, and\n\u003cb\u003edocument.anchors\u003c/b\u003e.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "PlatformDetectionJS",
          "displayName": "Inaccurate platform detection",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a common JavaScript pattern for detecting\nthe browser or operating system in which the script is run. In addition\nto pointing out non-portable constructs, these platform detection patterns\nare often incomplete and easily fooled. For most cases, detection of individual\nenvironment features is preferable to attempting to detect the entire platform.\n\u003cp\u003ePatterns detected include: \u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003edocument.all\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003edocument.layers\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003enavigator.userAgent\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003enavigator.oscpu\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003enavigator.appName\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003enavigator.appCodeName\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003enavigator.platform\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InnerHTMLJS",
          "displayName": "Use of \u0027innerHTML\u0027 property",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports  a JavaScript access to DOM nodes as text using the \u003ccode\u003einnerHTML\u003c/code\u003e property.\nMost usages of \u003ccode\u003einnerHTML\u003c/code\u003e are performed better with explicit\nDOM calls, such as \u003ccode\u003egetElementByID()\u003c/code\u003e and\n\u003ccode\u003ecreateElement()\u003c/code\u003e.  Additionally,\n\u003ccode\u003einnerHTML\u003c/code\u003e will not work with XML\nDOMs, including DOMs for XHTML if viewed as XML.  This can lead to difficulties in\ndiagnosing bugs.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Potentially confusing code constructs",
      "inspections": [
        {
          "shortName": "GrPackage",
          "displayName": "Package mismatch",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports files with a declared package that does not match the package expected. Also, reports files without \u003ccode\u003epackage\u003c/code\u003e statements if the class is not located directly in\nthe source root directory.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyNestedConditional",
          "displayName": "Nested conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports ternary conditional expressions that are nested inside other conditional expressions.\nSuch nested conditionals may be very confusing. \"Elvis\" expressions are counted as conditionals\nfor purpose of this inspection.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nreturn (condition ? \"result\" : null) ?: \"fail\"\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "GrDeprecatedAPIUsage",
          "displayName": "Deprecated API usage",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports references to deprecated classes, fields, and methods.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyEmptyStatementBody",
          "displayName": "Statement with empty body",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003edo\u003c/code\u003e or \u003ccode\u003efor\u003c/code\u003e statements\nwith empty bodies. While occasionally intended, this construction is confusing, and often the result of a typo.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nif (condition) {}\nwhile(true){}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyResultOfIncrementOrDecrementUsed",
          "displayName": "Result of increment or decrement used",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports increment or decrement expressions nested inside other expressions.\n\u003cp\u003e\n  Such expressions may be confusing, and violate the general design principle that a\n  given construct should do precisely one thing.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ClashingGetters",
          "displayName": "Clashing getters",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports boolean methods which can be accessed via the same property name.\n\u003cp\u003eThe result of accessing such property might be unexpected.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X {\n      boolean isFoo() { true }\n      boolean getFoo() { false }\n  }\n\n  // getFoo() will be called\n  new X().foo\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyOctalInteger",
          "displayName": "Octal integer",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports octal integer literals.\n\u003cp\u003e\n  Some coding standards prohibit the\n  use of octal literals, as they may be easily confused with decimal literals.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyPointlessBoolean",
          "displayName": "Pointless boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports pointless or pointlessly complicated boolean expressions.\n\u003cp\u003e\n  Such expressions include conjunction with true,\n  disjunction with false,\n  equality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be\n  the result of automated refactorings\n  not completely followed through to completion, and in any case are unlikely to be what the developer\n  intended to do.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (someBool \u0026\u0026 true) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (someBool) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyNestedSwitch",
          "displayName": "Nested switch statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eswitch\u003c/code\u003e statements that are nested inside other \u003ccode\u003eswitch\u003c/code\u003e statements.\nSuch nested switch statements are confusing, and may result in unexpected behaviour.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nswitch (outer) {\n  case 1:\n    switch (inner) {\n      case 1:\n        print \"inner 1\"\n        break\n      default:\n        print \"inner default\"\n    }\n    break\n  default:\n    print \"default\"\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "GroovyOverlyComplexBooleanExpression",
          "displayName": "Overly complex boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports boolean expressions with too many terms.\n\u003cp\u003e\n  Such expressions may be confusing and bug-prone.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n Use the \u003cb\u003eMaximum number of terms\u003c/b\u003e field to specify the maximum number of terms allowed in a boolean expression.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrReassignedInClosureLocalVar",
          "displayName": "Local variable is reassigned in closure or anonymous class",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables assigned to expression with different type inside of closure or anonymous class.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int sum \u003d 0\n  [1, 2, 3].each { sum +\u003d \u0027as\u0027 }\n  println(sum)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAs a result, the \u003ccode\u003einteger\u003c/code\u003e variable \u003cb\u003esum\u003c/b\u003e is reassigned to a \u003ccode\u003eString\u003c/code\u003e expression.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyPointlessArithmetic",
          "displayName": "Pointless arithmetic expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports pointless arithmetic expressions.\n\u003cp\u003e\n  Such expressions include adding or subtracting zero, multiplying by zero or one,\n  division by one, and shift by zero. Such expressions may be the result of automated refactorings\n  not completely followed through to completion, and in any case are unlikely to be what the developer\n  intended to do.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a + 0\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyNegatedIf",
          "displayName": "Negated if condition expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e statements\nwhich contain \u003ccode\u003eelse\u003c/code\u003e branches and whose conditions are negated.\nFlipping the order of the \u003ccode\u003eif\u003c/code\u003e and \u003ccode\u003eelse\u003c/code\u003e\nbranches will usually increase the clarity of such statements.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nif (!condition) {\n  return \"1\"\n} else {\n  return \"2\"\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyDoubleNegation",
          "displayName": "Double negation",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports double negation that can be simplified.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nif (!!functionCall()) {} // double negation\nif (!(a !\u003d b)) {} // double negation\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nif (functionCall()) {}\nif (a \u003d\u003d b) {}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "GroovyNegatedConditional",
          "displayName": "Negated conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports conditional expressions whose conditions are negated.\nFlipping the order of the conditional expression branches will usually increase the clarity of such\nstatements.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\n~condition ? \"1\" : \"2\"\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "NewInstanceOfSingleton",
          "displayName": "New instance of class annotated with @groovy.lang.Singleton",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports new instance creation of classes annotated with \u003ccode\u003e@groovy.lang.Singleton\u003c/code\u003e.\n  Such constructions can lead to runtime exception \u003cb\u003eCan\u0027t instantiate singleton\u003c/b\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Singleton\n  class Foo{\n  }\n  \n  Foo foo \u003d \u003cb\u003enew Foo()\u003c/b\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Singleton\n  class Foo{\n  }\n  \n  Foo foo \u003d \u003cb\u003eFoo.instance\u003c/b\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyOverlyComplexArithmeticExpression",
          "displayName": "Overly complex arithmetic expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports arithmetic expressions with too many terms.\n\u003cp\u003e\n  Such expressions may be confusing and bug-prone.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n Use the \u003cb\u003eMaximum number of terms\u003c/b\u003e field to specify the maximum number of terms allowed in an arithmetic expression.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyImplicitNullArgumentCall",
          "displayName": "Implicit null argument",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls with no arguments to method that has exactly one parameter.\nThis is equivalent to call with \u003ccode\u003enull\u003c/code\u003e, and that behavior is often confusing and unintended.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef foo(String s){}\nfoo() // this call is actually \u0027foo(null)\u0027 call\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnnecessaryQualifiedReference",
          "displayName": "Unnecessary qualified reference",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports fully qualified references, which can be replaced with import.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  def swingBuilder \u003d new groovy.swing.SwingBuilder()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import groovy.swing.SwingBuilder\n \n  def swingBuilder \u003d new SwingBuilder()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyGStringKey",
          "displayName": "GString map key",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports statements which use a \u003ccode\u003egroovy.lang.GString\u003c/code\u003e object as a key to map.\nIn general \u003ccode\u003eGString\u003c/code\u003e objects are mutable and probably should not be used as keys.\nAlso, a \u003ccode\u003eGString\u003c/code\u003e entry cannot be accessed with a \u003ccode\u003ejava.lang.String\u003c/code\u003e object with same value.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef map \u003d [:]\ndef key \u003d \u0027foo\u0027\nmap \u0026lt\u0026lt [\"${key}\": \u0027bar\u0027]\nassert map[key] \u003d\u003d null // confusing \u0027true\u0027 result of comparison\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClashingTraitMethods",
          "displayName": "Clashing trait methods",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes which implement two or more traits that contain methods with same signatures.\n\u003cp\u003eThe result of calling such methods might be unexpected.\u003c/p\u003e\n\u003cp\u003eThe quick-fix adds an explicit overriding method.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  trait T1 {\n      def foo() {}\n  }\n\n  trait T2 {\n      def foo() {}\n  }\n\n  class X implements T1, T2 {}\n\n  // T2.foo() will be called\n  new X().foo()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class X implements T1, T2 {\n      @Override\n      Object foo() {\n          return T2.super.foo()\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Velocity",
      "inspections": [
        {
          "shortName": "VtlFileReferencesInspection",
          "displayName": "File references inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.velocity",
          "pluginVersion": "231.9011.34",
          "language": "VTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports if Velocity file references in \u003ccode\u003e#include\u003c/code\u003e and \u003ccode\u003e#parse\u003c/code\u003e directives are resolved incorrectly.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VtlTypesInspection",
          "displayName": "Types inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.velocity",
          "pluginVersion": "231.9011.34",
          "language": "VTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports if binary and unary expressions have operands with incorrect types.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VtlInterpolationsInspection",
          "displayName": "Well-formedness inspection",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.velocity",
          "pluginVersion": "231.9011.34",
          "language": "VTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports illegal usages of formal notation within \u003ccode\u003e#macro\u003c/code\u003e and \u003ccode\u003e#set\u003c/code\u003e directives.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VtlReferencesInspection",
          "displayName": "References inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.velocity",
          "pluginVersion": "231.9011.34",
          "language": "VTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports if Velocity references are resolved incorrectly.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "VtlDirectiveArgsInspection",
          "displayName": "Directive arguments inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.velocity",
          "pluginVersion": "231.9011.34",
          "language": "VTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports illegal values or argument types of Velocity directives.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Validity issues",
      "inspections": [
        {
          "shortName": "GroovyDuplicateSwitchBranch",
          "displayName": "Duplicate switch case",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicated expressions in \u003ccode\u003ecase\u003c/code\u003e labels for \u003ccode\u003eswitch\u003c/code\u003e\nstatements.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\nswitch (n) {\n  case 1: //duplicate\n    break\n  case 1: //duplicate\n    System.out.println(\"2\")\n    break\n  default:\n    System.out.println(\"default\");\n}\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "GroovyUnreachableStatement",
          "displayName": "Unreachable statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports statements that are unreachable. This can occur if the statement is after an infinite loop,\n  \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e, or \u003ccode\u003econtinue\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003evoid\u003c/b\u003e foo (int n) {\n      if (n \u003c 1) {\n          return\n          \u003cb\u003eprint(\u0027This statement is unreachable\u0027)\u003c/b\u003e\n      }\n      while (true){\n          print (\u0027Hello, world!\u0027)\n      }\n      \u003cb\u003eprint(\u0027This statement is unreachable too\u0027)\u003c/b\u003e\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Java 20",
      "inspections": [
        {
          "shortName": "ForEachWithRecordPatternCanBeUsed",
          "displayName": "Enhanced \u0027for\u0027 with a record pattern can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variable declarations and accessors to record components that can be replaced with pattern variables in enhanced `for` statements, which are usually more compact.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nrecord Record(Integer x, String y) {\n}\n\npublic static void test(List\u0026lt;Record\u0026gt; records) {\n    for (Record record : records) {\n        System.out.println(record.y());\n        Integer x \u003d record.x;\n        System.out.println(x);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCan be replaced with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nrecord Record(Integer x, String y) {\n}\n\npublic static void test(List\u0026lt;Record\u0026gt; records) {\n    for (Record(Integer x, String y) : records) {\n        System.out.println(y);\n        System.out.println(x);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 20 or higher\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eEnable the \u003cb\u003eUse \u0027var\u0027 instead of explicit types\u003c/b\u003e option to use \u003ccode\u003evar\u003c/code\u003e in deconstruction patterns\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eNesting depth limit\u003c/b\u003e option to specify the maximum number of nested deconstruction patterns to report\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eMaximum number of record components to deconstruct\u003c/b\u003e option to specify the maximum number of components, which a record can contain to be used in deconstruction patterns\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eMaximum number of not-used record components\u003c/b\u003e option to specify the maximum number of components, which are not used in \u003ccode\u003efor\u003c/code\u003e statement\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003csmall\u003eNew in 2023.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "HTML",
      "inspections": [
        {
          "shortName": "HtmlNonExistentInternetResource",
          "displayName": "Unresolved web link",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved web link. Works by making network requests in the background.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlUnknownBooleanAttribute",
          "displayName": "Incorrect boolean attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlMissingClosingTag",
          "displayName": "Missing closing tag",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an HTML element without a closing tag.\nSome coding styles require that HTML elements have closing tags even where this is optional.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;html\u003e\n    \u0026lt;body\u003e\n      \u0026lt;p\u003eBehold!\n    \u0026lt;/body\u003e\n  \u0026lt;/html\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;html\u003e\n    \u0026lt;body\u003e\n      \u0026lt;p\u003eBehold!\u0026lt;/p\u003e\n    \u0026lt;/body\u003e\n  \u0026lt;/html\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlUnknownAnchorTarget",
          "displayName": "Unresolved fragment in a link",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved last part of an URL after the \u003ccode\u003e#\u003c/code\u003e sign.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlDeprecatedTag",
          "displayName": "Obsolete tag",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlUnknownTarget",
          "displayName": "Unresolved file in a link",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved file in a link.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlUnknownTag",
          "displayName": "Unknown tag",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unknown HTML tag. Suggests configuring tags that should not be reported.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlPresentationalElement",
          "displayName": "Presentational tag",
          "defaultSeverity": "INFORMATION",
          "pluginId": "HtmlTools",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlExtraClosingTag",
          "displayName": "Redundant closing tag",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant closing tags on empty elements, for example, \u003ccode\u003eimg\u003c/code\u003e or \u003ccode\u003ebr\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;html\u003e\n    \u0026lt;body\u003e\n      \u0026lt;br\u003e\u0026lt;/br\u003e\n    \u0026lt;/body\u003e\n  \u0026lt;/html\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;html\u003e\n    \u0026lt;body\u003e\n      \u0026lt;br\u003e\n    \u0026lt;/body\u003e\n  \u0026lt;/html\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RequiredAttributes",
          "displayName": "Missing required attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlDeprecatedAttribute",
          "displayName": "Obsolete attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an obsolete HTML5 attribute.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CheckEmptyScriptTag",
          "displayName": "Empty tag",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty tags that do not work in some browsers.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;html\u003e\n    \u0026lt;script/\u003e\n  \u0026lt;/html\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;html\u003e\n    \u0026lt;script\u003e\u0026lt;/script\u003e\n  \u0026lt;/html\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CheckImageSize",
          "displayName": "Mismatched image size",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e attribute value of a \u003ccode\u003eimg\u003c/code\u003e tag\nthat is different from the actual width and height of the referenced image.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CheckValidXmlInScriptTagBody",
          "displayName": "Malformed content of \u0027script\u0027 tag",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports contents of \u003ccode\u003escript\u003c/code\u003e tags that are invalid XML.\u003cbr\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;script type\u003d\"text/javascript\"\u003e\n    console.log(\u0027\u0026lt;\u0027);\n  \u0026lt;/script\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;script type\u003d\"text/javascript\"\u003e\n    console.log(\u0027\u0026amp;lt;\u0027);\n  \u0026lt;/script\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlUnknownAttribute",
          "displayName": "Unknown attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unknown HTML attribute. Suggests configuring attributes that should not be reported.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HtmlWrongAttributeValue",
          "displayName": "Wrong attribute value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an incorrect HTML attribute value.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Android",
      "inspections": [
        {
          "shortName": "AndroidUnknownAttribute",
          "displayName": "Unknown Android XML attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nThis inspection highlights unknown XML attributes in Android resource files and AndroidManifest.xml\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AndroidNonConstantResIdsInSwitch",
          "displayName": "Non-constant resource ID in a switch statement",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\nValidates using resource IDs in a switch statement in Android library module.\u003cbr\u003e\nResource IDs are non final in the library projects since SDK tools r14,\nmeans that the library code cannot treat these IDs as constants.\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidUnresolvableTag",
          "displayName": "Unresolvable tag",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!--\n  ~ Copyright (C) 2019 The Android Open Source Project\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~      http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nThis inspection highlights unresolvable XML tag references in Android resource files\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AndroidDomInspection",
          "displayName": "Android Resources Validation",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e\n  Validates resource references inside Android XML files.\n\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidElementNotAllowed",
          "displayName": "Android XML element is not allowed",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nThis inspection highlights unallowed XML tags in Android resource files and AndroidManifest.xml\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "XmlWrongFileType",
          "displayName": "Android XML root tag validation",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nThis inspections checks whether XML resources are stored in resource folder\nwhich type is recommended by documentation\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AndroidMissingOnClickHandler",
          "displayName": "onClick handler is missing in the related activity",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks if the method specified in onClick XML attribute is declared in related activity\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Method metrics",
      "inspections": [
        {
          "shortName": "NonCommentSourceStatements",
          "displayName": "Overly long method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods whose number of statements exceeds the specified maximum.\n\u003cp\u003eMethods with too many statements may be confusing and are a good sign that refactoring is necessary.\u003c/p\u003e\n\u003cp\u003eThe following statements are not counted:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eempty statements (semicolons)\u003c/li\u003e\n  \u003cli\u003eblock statements\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003efor\u003c/code\u003e loop initialization statements, that is, \u003ccode\u003eint i \u003d ...\u003c/code\u003e within a \u003ccode\u003efor(int i \u003d ...;...)\u003c/code\u003e\n    statement\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003efor\u003c/code\u003e loop update statements, that is, \u003ccode\u003ei +\u003d 2\u003c/code\u003e within a \u003ccode\u003efor(int i \u003d ...;...; i +\u003d 2)\u003c/code\u003e\n    statement\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eMaximum statements per method\u003c/b\u003e field to specify the maximum allowed number of statements in a method.\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MultipleReturnPointsPerMethod",
          "displayName": "Method with multiple return points",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods whose number of \u003ccode\u003ereturn\u003c/code\u003e points exceeds the specified maximum.\nMethods with too many \u003ccode\u003ereturn\u003c/code\u003e points may be confusing\nand hard to refactor.\n\u003cp\u003eA \u003ccode\u003ereturn\u003c/code\u003e point is either a \u003ccode\u003ereturn\u003c/code\u003e statement or a falling through the bottom of a\n  \u003ccode\u003evoid\u003c/code\u003e method or constructor.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003eThe method below is reported if only two \u003ccode\u003ereturn\u003c/code\u003e statements are allowed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void doSmth(User[] users) {\n    for (User user : users) {\n      if (cond1(user)) {\n        user.setId(getId());\n        return;\n      } else if (cond2(user)) {\n        if (cond3(user)) {\n          user.setId(getId());\n          return;\n        }\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eConsider rewriting the method so it becomes easier to understand:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void doSmth(User[] users) {\n    for (User user : users) {\n      if (cond1(user) || cond2(user) \u0026\u0026 cond3(user)) {\n        user.setId(getId());\n        return;\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eReturn point limit\u003c/b\u003e field to specify the maximum allowed number of \u003ccode\u003ereturn\u003c/code\u003e points for a method.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore guard clauses\u003c/b\u003e option to ignore guard clauses.\n    A guard clause is an \u003ccode\u003eif\u003c/code\u003e statement that contains only a \u003ccode\u003ereturn\u003c/code\u003e statement\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore for \u0027equals()\u0027 methods\u003c/b\u003e option to ignore \u003ccode\u003ereturn\u003c/code\u003e points inside \u003ccode\u003eequals()\u003c/code\u003e methods.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestingDepth",
          "displayName": "Overly nested method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods whose body contain too deeply nested statements.\n\u003cp\u003eMethods with too deep statement\n  nesting may be confusing and are a good sign that refactoring may be necessary.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eNesting depth limit\u003c/b\u003e field to specify the maximum allowed nesting depth for a method.\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OverlyLongLambda",
          "displayName": "Overly long lambda expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambda expressions whose number of statements exceeds the specified maximum.\n\u003cp\u003eLambda expressions that are too long may be confusing, and it is often better to extract the statements into a separate method.\u003cp\u003e\n\u003cp\u003eThe following statements are not counted:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eempty statements (semicolons)\u003c/li\u003e\n  \u003cli\u003eblock statements\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003efor\u003c/code\u003e loop initialization statements, that is, \u003ccode\u003eint i \u003d ...\u003c/code\u003e within a \u003ccode\u003efor(int i \u003d ...;...)\u003c/code\u003e\n    statement\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003efor\u003c/code\u003e loop update statements, that is, \u003ccode\u003ei +\u003d 2\u003c/code\u003e within a \u003ccode\u003efor(int i \u003d ...;...; i +\u003d 2)\u003c/code\u003e\n    statement\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the  \u003cb\u003eNon-comment source statements limit\u003c/b\u003e field to specify the maximum allowed number of statements in a lambda expression.\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ParametersPerConstructor",
          "displayName": "Constructor with too many parameters",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports constructors whose number of parameters exceeds the specified maximum.\nSuch objects are hard to instantiate, especially if some parameters are optional.\nConstructors with too many parameters may indicate that refactoring is necessary.\nConsider applying the builder pattern, for example.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public BankAccount(long accountNumber,\n                     String owner,\n                     double balance,\n                     double interestRate) {\n    // fields initialization\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eParameter limit\u003c/b\u003e field to specify the maximum allowed number of parameters in a constructor.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore constructors with visibility\u003c/b\u003e list to specify whether the inspection should ignore constructors with specific visibility.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodWithMultipleLoops",
          "displayName": "Method with multiple loops",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that contain more than one loop statement.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003eThe method below will be reported because it contains two loops:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void methodWithTwoLoops(int n1, int n2) {\n    for (int i \u003d 0; i \u0026lt; n1; i++) {\n      System.out.println(i);\n    }\n\n    int j \u003d 0;\n    while (j \u0026lt; n2) {\n      System.out.println(j);\n      j++;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe following method will also be reported because it contains a nested loop:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void methodWithNestedLoop(int n1, int n2) {\n    for (int i \u003d 0; i \u0026lt; n1; i++) {\n      for (int j \u003d 0; j \u0026lt; n2; j++) {\n        System.out.println(i + j);\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodCoupling",
          "displayName": "Overly coupled method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that reference too many other classes.\nMethods with too high coupling can be very fragile and should be probably split into smaller methods.\n\u003cp\u003eEach referenced class is counted only once no matter how many times it is referenced.\u003c/p\u003e\n  \u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eMethod coupling limit\u003c/b\u003e field to specify the maximum allowed coupling for a method.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eInclude couplings to java system classes\u003c/b\u003e option to count references to classes from \u003ccode\u003ejava\u003c/code\u003eor \u003ccode\u003ejavax\u003c/code\u003e packages.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eInclude couplings to library classes\u003c/b\u003e option to count references to third-party library classes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThreeNegationsPerMethod",
          "displayName": "Method with more than three negations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods with three or more negations.\nSuch methods may be confusing.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void doSmth(int a, int b, boolean flag1, boolean flag2) {\n    if (!flag \u0026\u0026 !flag2) {\n      if (a !\u003d b) {\n        doOther();\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWithout negations, the method becomes easier to understand:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void doSmth(int a, int b, boolean flag1, boolean flag2) {\n    if (flag1 || flag2 || a \u003d\u003d b) return;\n    doOther();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore negations in \u0027equals()\u0027 methods\u003c/b\u003e option to disable the inspection within \u003ccode\u003eequals()\u003c/code\u003e methods.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore negations in \u0027assert\u0027 statements\u003c/b\u003e to disable the inspection within \u003ccode\u003eassert\u003c/code\u003e statements.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CyclomaticComplexity",
          "displayName": "Overly complex method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that have too many branch points.\n\u003cp\u003eA branch point is one of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eloop statement\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eif\u003c/code\u003e statement\u003c/li\u003e\n  \u003cli\u003eternary expression\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecatch\u003c/code\u003e section\u003c/li\u003e\n  \u003cli\u003eexpression with one or more \u003ccode\u003e\u0026\u0026\u003c/code\u003e or \u003ccode\u003e||\u003c/code\u003e operators inside\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eswitch\u003c/code\u003e block with non-default branches\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMethods with too high cyclomatic complexity may be confusing and hard to test.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eMethod complexity limit\u003c/b\u003e field to specify the maximum allowed cyclomatic complexity for a method.\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThrownExceptionsPerMethod",
          "displayName": "Method with too many exceptions declared",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that have too many types of exceptions in its \u003ccode\u003ethrows\u003c/code\u003e list.\n\u003cp\u003eMethods with too many exceptions declared are a good sign that your error handling code is getting overly complex.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eExceptions thrown limit\u003c/b\u003e field to specify the maximum number of exception types a method is allowed to have in its \u003ccode\u003ethrows\u003c/code\u003e list.\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ParametersPerMethod",
          "displayName": "Method with too many parameters",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods whose number of parameters exceeds the specified maximum.\nMethods with too many parameters can be a good sign that a refactoring is necessary.\n\u003cp\u003eMethods that have super methods are not reported.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eParameter limit\u003c/b\u003e field to specify the maximum allowed number of parameters for a method.\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Protocol Buffers",
      "inspections": [
        {
          "shortName": "PbDuplicatedImports",
          "displayName": "Duplicated import statements",
          "defaultSeverity": "WARNING",
          "pluginId": "idea.plugin.protoeditor",
          "pluginVersion": "231.9011.34",
          "language": "protobuf",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports effectively equivalent import statements.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Method",
      "inspections": [
        {
          "shortName": "OverloadedMethodsWithSameNumberOfParameters",
          "displayName": "Overloaded methods with same number of parameters",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that are declared in the same class, have the same name, and the same number of parameters.\nSuch overloads cam be very confusing because it can be unclear which overload gets called.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    public static void execute(Runnable r) {}\n    public static \u0026lt;T\u0026gt; void execute(RunnableFuture\u0026lt;T\u0026gt; c) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to ignore overloaded methods whose parameter types are definitely incompatible.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodNameSameAsClassName",
          "displayName": "Method name same as class name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that are named identically to their class.\nWhile such naming is allowed by the Java language, by convention it is reserved for defining constructors.\nUsing it for methods is probably a mistake or bad practice.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyClass {\n    int val;\n\n    // Method MyClass named identically to its containing class.\n    // Likely, \u0027void\u0027 was added by mistake.\n    void MyClass(int val) {\n      this.val \u003d val;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen appropriate, a quick-fix converts the method to a constructor:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyClass {\n    int val;\n\n    MyClass(int val) {\n      this.val \u003d val;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnother quick-fix renames the method.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonBooleanMethodNameMayNotStartWithQuestion",
          "displayName": "Non-boolean method name must not start with question word",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-boolean methods whose names start with a question\nword. Such method names may be confusing.\n\u003cp\u003eNon-boolean methods that override library methods are ignored by this inspection.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public void hasName(String name) {\n    assert names.contains(name);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix that renames such methods is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eBoolean method name prefixes\u003c/b\u003e list to specify the question words that should be used only for boolean methods.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore methods with \u0027java.lang.Boolean\u0027 return type\u003c/b\u003e option to ignore methods with \u003ccode\u003ejava.lang.Boolean\u003c/code\u003e return type.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore methods overriding/implementing a super method\u003c/b\u003e option to ignore methods which have supers. \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodNameSameAsParentName",
          "displayName": "Method name same as parent class name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that have the same name as the superclass of the method\u0027s class, as\nsuch a method name may be confusing.\n\u003cp\u003eThis inspection doesn\u0027t check interfaces or superclasses deep in the hierarchy.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Parent {}\n  class Child extends Parent {\n     public Parent Parent() {\n       return null;\n     }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix that renames such methods is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BooleanMethodNameMustStartWithQuestion",
          "displayName": "Boolean method name must start with question word",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports boolean methods whose names do not start with a question\nword.\n\u003cp\u003eBoolean methods that override library methods are ignored by this inspection.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eboolean empty(List\u0026lt;String\u0026gt; list) {\n  return list.isEmpty();\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix that renames such methods is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eBoolean method name prefixes\u003c/b\u003e list to specify acceptable question words to start boolean method names with.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore methods with \u0027java.lang.Boolean\u0027 return type\u003c/b\u003e option to ignore methods with the \u003ccode\u003ejava.lang.Boolean\u003c/code\u003e return type. \u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore boolean methods in an @interface\u003c/b\u003e option to ignore boolean methods in annotation types (\u003ccode\u003e@interface\u003c/code\u003e).\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore methods overriding/implementing a super method\u003c/b\u003e to ignore methods the have supers.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NewMethodNamingConvention",
          "displayName": "Method naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n\u003cp\u003eInstance methods that override library\n  methods and constructors are ignored by this inspection.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e if the inspection is enabled for static methods, and the minimum specified method name length is 4 (the default),\n  the following static method produces a warning, because the length of its name is 3, which is less\n  than 4: \u003ccode\u003epublic static int max(int a, int b)\u003c/code\u003e.\n\u003cp\u003eA quick-fix that renames such methods is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003eUse the list in the \u003cb\u003eOptions\u003c/b\u003e section to specify which methods should be checked. Deselect the checkboxes for the method types for which\n  you want to skip the check. Specify \u003cb\u003e0\u003c/b\u003e in the length fields to skip the corresponding checks.\u003c/p\u003e\n\u003cp\u003eRegular expressions should be specified in the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OverloadedVarargsMethod",
          "displayName": "Overloaded varargs method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports varargs methods with the same name as other methods in the class or in a superclass.\nOverloaded methods that take a variable number of arguments can be very confusing\nbecause it is often unclear which overload gets called.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    public void execute(Runnable... r) {} // warning\n    public void execute(Runnable r1, Runnable r2) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to ignore overloaded methods whose parameter types are definitely incompatible.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LambdaUnfriendlyMethodOverload",
          "displayName": "Lambda-unfriendly method overload",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports overloaded methods that take functional interfaces with conflicting abstract method signatures.\n\u003cp\u003eSuch overloads introduce ambiguity and require callers to cast lambdas to a specific type or specify lambda parameter types explicitly.\n  It is preferable to give the overloaded methods different names to eliminate ambiguity.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface MyExecutor {\n    void execute(Supplier\u0026lt;?\u0026gt; supplier);\n    void execute(Callable\u0026lt;?\u0026gt; callable);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nHere, \u003ccode\u003eSupplier\u003c/code\u003e and \u003ccode\u003eCallable\u003c/code\u003e are functional interfaces\nwhose single abstract methods do not take any parameters and return a non-void value.\nAs a result, the type of the lambda cannot be inferred at the call site unless an explicit cast is used.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MisspelledMethodName",
          "displayName": "Method names differing only by case",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports cases in which multiple methods of a class have the names that differ only by\ncase. Such names may be very confusing.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public int hashcode() { // reported, should be hashCode probably?\n    return 0;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix that renames such methods is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore methods overriding/implementing a super method\u003c/b\u003e option to ignore methods overriding or implementing a method from\n  the superclass.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Portability",
      "inspections": [
        {
          "shortName": "NativeMethods",
          "displayName": "Native method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods declared \u003ccode\u003enative\u003c/code\u003e. Native methods are inherently unportable.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UseOfAWTPeerClass",
          "displayName": "Use of AWT peer class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports uses of AWT peer classes. Such classes represent\nnative windowing system widgets, and will be non-portable between different windowing\nsystems.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import java.awt.peer.ButtonPeer;\n\n  abstract class Sample implements ButtonPeer {\n    public void foo() {\n        Sample sample;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HardcodedLineSeparators",
          "displayName": "Hardcoded line separator",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports linefeed (\u003ccode\u003e\\n\u003c/code\u003e) and carriage return (\u003ccode\u003e\\r\u003c/code\u003e) character escape sequences used in string literals,\ncharacter literals or text blocks. These characters are commonly used as line separators, and portability may suffer if they are hardcoded.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String count \u003d \"first\\nsecond\\rthird\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HardcodedFileSeparators",
          "displayName": "Hardcoded file separator",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the forward (\u003ccode\u003e/\u003c/code\u003e) or backward (\u003ccode\u003e\\\u003c/code\u003e) slash in a string or\ncharacter literal. These characters are commonly used as file separators, and portability may suffer if they are hardcoded.\n\u003cp\u003e\n  The inspection will not report backward slashes inside escape sequences and forward slashes immediately following the \u0027\u0026lt;\u0027 character\n  or immediately preceding the \u0027\u0026gt;\u0027 character, as those often indicate XML or HTML tags rather than file names.\n  Strings representing a \u003ccode\u003ejava.util.TimeZone\u003c/code\u003e ID, strings that are valid regular expressions,\n  or strings that equal IANA-registered MIME media types will not be reported either.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  new File(\"C:\\\\Users\\\\Name\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to include \u003ccode\u003eexample/*\u003c/code\u003e in the set of recognized media types.\n  Normally, usage of the \u003ccode\u003eexample/*\u003c/code\u003e MIME media type outside of an example (e.g. in a \u003ccode\u003eContent-Type\u003c/code\u003e\n  header) is an error.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UseOfSunClasses",
          "displayName": "Use of \u0027sun.*\u0027 classes",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports uses of classes from the \u003ccode\u003esun.*\u003c/code\u003e hierarchy.\nSuch classes are non-portable between different JVMs.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SystemExit",
          "displayName": "Call to \u0027System.exit()\u0027 or related methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eSystem.exit()\u003c/code\u003e, \u003ccode\u003eRuntime.exit()\u003c/code\u003e,\nand \u003ccode\u003eRuntime.halt()\u003c/code\u003e.\n\u003cp\u003e\n  Invoking \u003ccode\u003eSystem.exit()\u003c/code\u003e or \u003ccode\u003eRuntime.exit()\u003c/code\u003e\n  calls the shutdown hooks and terminates the currently running Java\n  virtual machine. Invoking \u003ccode\u003eRuntime.halt()\u003c/code\u003e forcibly\n  terminates the JVM without causing shutdown hooks to be started.\n  Each of these methods should be used with extreme caution. Calls\n  to these methods make the calling code unportable to most\n  application servers.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to ignore calls in main methods.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RuntimeExec",
          "displayName": "Call to \u0027Runtime.exec()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eRuntime.exec()\u003c/code\u003e or any of its variants.\nCalls to \u003ccode\u003eRuntime.exec()\u003c/code\u003e are inherently unportable.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UseOfJDBCDriverClass",
          "displayName": "Use of concrete JDBC driver class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports uses of specific JDBC driver classes. Use of such classes will\nbind your project to a specific database and driver, defeating the purpose of JDBC and\nresulting in loss of portability.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import java.sql.Driver;\n\n  abstract class Sample implements Driver {\n    public void foo() {\n        Sample sample;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UseOfProcessBuilder",
          "displayName": "Use of \u0027java.lang.ProcessBuilder\u0027 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports uses of \u003ccode\u003ejava.lang.ProcessBuilder\u003c/code\u003e,\nwhich might be unportable between operating systems because\npaths to executables, environment variables, command-line arguments and\ntheir escaping might vary depending on the OS.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SystemGetenv",
          "displayName": "Call to \u0027System.getenv()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eSystem.getenv()\u003c/code\u003e.\nCalls to \u003ccode\u003eSystem.getenv()\u003c/code\u003e are inherently unportable.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Security",
      "inspections": [
        {
          "shortName": "JDBCExecuteWithNonConstantString",
          "displayName": "Call to \u0027Statement.execute()\u0027 with non-constant string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.sql.Statement.execute()\u003c/code\u003e or any\nof its variants which take a dynamically-constructed string as the query to execute.\n\u003cp\u003eConstructed SQL statements are a common source of security breaches.\n  By default, this inspection ignores compile-time constants.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ResultSet execute(Statement statement, String name) throws SQLException {\n    return statement.executeQuery(\"select * from \" + name); // reports warning\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the inspection options to consider any \u003ccode\u003estatic\u003c/code\u003e \u003ccode\u003efinal\u003c/code\u003e fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n\u003cpre\u003e\u003ccode\u003e\n  private static final String SQL \u003d \"SELECT * FROM user WHERE name\u003d\u0027\" + getUserInput() + \"\u0027\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CustomClassloader",
          "displayName": "Custom \u0027ClassLoader\u0027 is declared",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports user-defined subclasses of \u003ccode\u003ejava.lang.ClassLoader\u003c/code\u003e.\n\u003cp\u003e\n  While not necessarily representing a security hole, such classes should be thoroughly\n  inspected for possible security issues.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SerializableDeserializableClassInSecureContext",
          "displayName": "Serializable class in secure context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that may be serialized or deserialized.\n\u003cp\u003e\n  A class may be serialized if it supports the \u003ccode\u003eSerializable\u003c/code\u003e interface,\n  and its \u003ccode\u003ereadObject()\u003c/code\u003e and \u003ccode\u003ewriteObject()\u003c/code\u003e methods are not defined to always\n  throw an exception. Serializable classes may be dangerous in code intended for secure use.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class DeserializableClass implements Serializable { // the class doesn\u0027t contain \u0027writeObject()\u0027 method throwing an exception\n    private int sensitive \u003d 736326;\n\n    private void readObject(ObjectInputStream in) {\n        throw new Error();\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class DeserializableClass implements Serializable {\n    private int sensitive \u003d 736326;\n\n    private void readObject(ObjectInputStream in) {\n        throw new Error();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n        throw new java.io.NotSerializableException(\"DeserializableClass\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    \u003ccode\u003eSerializable\u003c/code\u003e from a superclass but are not intended for serialization.\n    Note that it still may be more secure to add \u003ccode\u003ereadObject()\u003c/code\u003e and \u003ccode\u003ewriteObject()\u003c/code\u003e methods\n    which always throw an exception, instead of ignoring those classes.\n  \u003c/li\u003e\n  \u003cli\u003e\n    Whether to ignore serializable anonymous classes.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnsecureRandomNumberGeneration",
          "displayName": "Insecure random number generation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any uses of \u003ccode\u003ejava.lang.Random\u003c/code\u003e or\n\u003ccode\u003ejava.lang.Math.random()\u003c/code\u003e.\n\u003cp\u003e\n  In secure environments,\n  \u003ccode\u003ejava.secure.SecureRandom\u003c/code\u003e is a better choice, since is offers cryptographically secure\n  random number generation.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  long token \u003d new Random().nextLong();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LoadLibraryWithNonConstantString",
          "displayName": "Call to \u0027System.loadLibrary()\u0027 with non-constant string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.lang.System.loadLibrary()\u003c/code\u003e, \u003ccode\u003ejava.lang.System.load()\u003c/code\u003e, \u003ccode\u003ejava.lang.Runtime.loadLibrary()\u003c/code\u003e\nand \u003ccode\u003ejava.lang.Runtime.load()\u003c/code\u003e\nwhich take a dynamically-constructed string as the name of the library.\n\u003cp\u003e\n  Constructed library name strings are a common source of security breaches.\n  By default, this inspection ignores compile-time constants.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(int i) {\n    System.loadLibrary(\"foo\" + i);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the inspection settings to consider any \u003ccode\u003estatic final\u003c/code\u003e fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  private static final String LIBRARY \u003d getUserInput();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CustomSecurityManager",
          "displayName": "Custom \u0027SecurityManager\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports user-defined subclasses of \u003ccode\u003ejava.lang.SecurityManager\u003c/code\u003e.\n\u003cp\u003e\n  While not necessarily representing a security hole, such classes should be thoroughly\n  and professionally inspected for possible security issues.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class CustomSecurityManager extends SecurityManager {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SystemSetSecurityManager",
          "displayName": "Call to \u0027System.setSecurityManager()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eSystem.setSecurityManager()\u003c/code\u003e.\n\u003cp\u003eWhile often benign, any call to \u003ccode\u003eSystem.setSecurityManager()\u003c/code\u003e should be closely examined in any security audit.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RuntimeExecWithNonConstantString",
          "displayName": "Call to \u0027Runtime.exec()\u0027 with non-constant string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.lang.Runtime.exec()\u003c/code\u003e which take a dynamically-constructed string as the command to execute.\n\u003cp\u003e\n  Constructed execution strings are a common source of security breaches.\n  By default, this inspection ignores compile-time constants.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String i \u003d getUserInput();\n  Runtime runtime \u003d Runtime.getRuntime();\n  runtime.exec(\"foo\" + i); // reports warning\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the inspection settings to consider any \u003ccode\u003estatic\u003c/code\u003e \u003ccode\u003efinal\u003c/code\u003e fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n\u003cpre\u003e\u003ccode\u003e\n  static final String COMMAND \u003d \"ping \" + getDomainFromUserInput() + \"\u0027\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JDBCPrepareStatementWithNonConstantString",
          "displayName": "Call to \u0027Connection.prepare*()\u0027 with non-constant string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.sql.Connection.prepareStatement()\u003c/code\u003e, \u003ccode\u003ejava.sql.Connection.prepareCall()\u003c/code\u003e, or any of their\nvariants which take a dynamically-constructed string as the statement to prepare.\n\u003cp\u003e\n  Constructed SQL statements are a common source of\n  security breaches. By default, this inspection ignores compile-time constants.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String bar() { return \"bar\"; }\n\n  Connection connection \u003d DriverManager.getConnection(\"\", \"\", \"\");\n  connection.(\"SELECT * FROM user WHERE name\u003d\u0027\" + bar() + \"\u0027\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\nUse the inspection settings to consider any \u003ccode\u003estatic\u003c/code\u003e \u003ccode\u003efinal\u003c/code\u003e fields as constants. Be careful, because strings like the\nfollowing will be ignored when the option is enabled:\n\u003cpre\u003e\u003ccode\u003e\n  static final String SQL \u003d \"SELECT * FROM user WHERE name\u003d\u0027\" + getUserInput() + \"\u0027\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PublicStaticArrayField",
          "displayName": "\u0027public static\u0027 array field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003epublic\u003c/code\u003e \u003ccode\u003estatic\u003c/code\u003e array fields.\n\u003cp\u003e\n  Such fields are often used to store arrays of constant values. Still, they represent a security\n  hazard, as their contents may be modified, even if the field is declared \u003ccode\u003efinal\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public static String[] allowedPasswords \u003d {\"foo\", \"bar\"};\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DesignForExtension",
          "displayName": "Design for extension",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods which are not \u003ccode\u003estatic\u003c/code\u003e, \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003efinal\u003c/code\u003e or \u003ccode\u003eabstract\u003c/code\u003e, and whose bodies\nare not empty.\n\u003cp\u003e\n  Coding in a style that avoids such methods protects the contracts of classes from being broken by their subclasses. The\n  benefit of this style is that subclasses cannot corrupt the state of the superclass by forgetting to call the super method. The cost is\n  that\n  subclasses are limited in their flexibility, in particular they cannot prevent execution of code in the superclass. Use the quick-fix to\n  add\n  the missing modifiers.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    public boolean equals(Object o) { return true; }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    public final boolean equals(Object o) { return true; }\n  }\n\u003c/code\u003e\u003c/pre\u003e\nThis inspection is intended for code that is going to be used in secure environments, and is probably not appropriate for less restrictive environments.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonFinalClone",
          "displayName": "Non-final \u0027clone()\u0027 in secure context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eclone()\u003c/code\u003e methods without the \u003ccode\u003efinal\u003c/code\u003e modifier.\n\u003cp\u003e\n  Since \u003ccode\u003eclone()\u003c/code\u003e can be used to instantiate objects without using a constructor, allowing the \u003ccode\u003eclone()\u003c/code\u003e\n  method to be overridden may result in corrupted objects, and even in security exploits. This may be prevented by making the\n  \u003ccode\u003eclone()\u003c/code\u003e method or the enclosing class itself \u003ccode\u003efinal\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main implements Cloneable {\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n      return super.clone();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SystemProperties",
          "displayName": "Access of system properties",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code that accesses system properties using one of the following methods:\n\u003cul\u003e\n  \u003cli\u003e\n    \u003ccode\u003eSystem.getProperties()\u003c/code\u003e, \u003ccode\u003eSystem.setProperty()\u003c/code\u003e,\n    \u003ccode\u003eSystem.setProperties()\u003c/code\u003e, \u003ccode\u003eSystem.clearProperties()\u003c/code\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003ccode\u003eInteger.getInteger()\u003c/code\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003ccode\u003eBoolean.getBoolean()\u003c/code\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nWhile accessing the system properties is not a security risk in itself, it is often found in malicious code.\nCode that accesses system properties should be closely examined in any security audit.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassLoaderInstantiation",
          "displayName": "\u0027ClassLoader\u0027 instantiation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instantiations of the \u003ccode\u003ejava.lang.ClassLoader\u003c/code\u003e class.\n\u003cp\u003eWhile often benign, any instantiations of \u003ccode\u003eClassLoader\u003c/code\u003e should be closely examined in any security audit.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    Class\u0026lt;?\u0026gt; loadExtraClass(String name) throws Exception {\n      try(URLClassLoader loader \u003d\n          new URLClassLoader(new URL[]{new URL(\"extraClasses/\")})) {\n        return loader.loadClass(name);\n      }\n    }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PublicStaticCollectionField",
          "displayName": "\u0027public static\u0027 collection field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports modifiable \u003ccode\u003epublic\u003c/code\u003e \u003ccode\u003estatic\u003c/code\u003e Collection fields.\n\u003cp\u003eEven though they are often used to store collections of constant values, these fields nonetheless represent a security\n  hazard, as their contents may be modified even if the field is declared as \u003ccode\u003efinal\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public static final List\u0026lt;String\u0026gt; EVENTS \u003d new ArrayList\u0026lt;\u0026gt;();\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the table in the \u003cb\u003eOptions\u003c/b\u003e section to specify methods returning unmodifiable collections.\n  \u003ccode\u003epublic\u003c/code\u003e \u003ccode\u003estatic\u003c/code\u003e collection fields initialized with these methods will not be reported.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CloneableClassInSecureContext",
          "displayName": "Cloneable class in secure context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes which may be cloned.\n\u003cp\u003e\n  A class\n  may be cloned if it supports the \u003ccode\u003eCloneable\u003c/code\u003e interface,\n  and its \u003ccode\u003eclone()\u003c/code\u003e method is not defined to immediately\n  throw an error. Cloneable classes may be dangerous in code intended for secure use.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003ccode\u003eclass SecureBean implements Cloneable {}\u003c/code\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\u003ccode\u003eclass SecureBean {}\u003c/code\u003e\n\u003cp\u003e\nWhen the class extends an existing cloneable class or implements a cloneable interface,\n  then after the quick-fix is applied, the code may look like: \n\u003cpre\u003e\u003ccode\u003eclass SecureBean extends ParentBean {\n    @Override\n    protected SecureBean clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException();\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Java 5",
      "inspections": [
        {
          "shortName": "WhileCanBeForeach",
          "displayName": "\u0027while\u0027 loop can be replaced with enhanced \u0027for\u0027 loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ewhile\u003c/code\u003e loops that iterate\nover collections and can be replaced with enhanced \u003ccode\u003efor\u003c/code\u003e loops (foreach iteration syntax).\n\u003c!--  \u0027foreach\u0027 still used in this description so that the inspection continues to be found using this keyword --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Iterator it \u003d c.iterator();\n  while(it.hasNext()) {\n    Object obj \u003d it.next();\n    System.out.println(obj);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCan be replaced with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (Object obj : c) {\n    System.out.println(obj);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 5 or higher.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BigDecimalLegacyMethod",
          "displayName": "\u0027BigDecimal\u0027 legacy method called",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eBigDecimal.divide()\u003c/code\u003e or \u003ccode\u003eBigDecimal.setScale()\u003c/code\u003e that use integer constants to specify the rounding mode.\nSince JDK 1.5, consider using methods that take the \u003ccode\u003eRoundingMode\u003c/code\u003e \u003ccode\u003eenum\u003c/code\u003e parameter instead.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew BigDecimal(\"42\").setScale(2, BigDecimal.ROUND_FLOOR);\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enew BigDecimal(\"42\").setScale(2, RoundingMode.FLOOR);\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ForCanBeForeach",
          "displayName": "\u0027for\u0027 loop can be replaced with enhanced for loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efor\u003c/code\u003e loops that iterate over collections or arrays, \nand can be automatically replaced with an enhanced \u003ccode\u003efor\u003c/code\u003e loop (foreach iteration syntax).\n\u003c!--  \u0027foreach\u0027 still used in this description so that the inspection continues to be found using this keyword --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (Iterator\u0026lt;String\u0026gt; iterator \u003d list.iterator(); iterator.hasNext(); ) {\n    String item \u003d iterator.next();\n    System.out.println(item);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  for (String item : list) {\n    System.out.println(item);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eReport indexed \u0027java.util.List\u0027 loops\u003c/b\u003e option to find loops involving \u003ccode\u003elist.get(index)\u003c/code\u003e calls.\n  Generally, these loops can be replaced with enhanced \u003ccode\u003efor\u003c/code\u003e loops,\n  unless they modify an underlying list in the process, for example, by calling \u003ccode\u003elist.remove(index)\u003c/code\u003e.\n  If the latter is the case, the enhanced \u003ccode\u003efor\u003c/code\u003e loop may throw \u003ccode\u003eConcurrentModificationException\u003c/code\u003e.\n  Also, in some cases, \u003ccode\u003elist.get(index)\u003c/code\u003e loops may work a little bit faster.\u003c/p\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eDo not report iterations over untyped collections\u003c/b\u003e option to ignore collections without type parameters.\n  This prevents the creation of enhanced \u003ccode\u003efor\u003c/code\u003e loop variables of the \u003ccode\u003ejava.lang.Object\u003c/code\u003e type and the insertion of casts\n  where the loop variable is used.\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 5 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryBoxing",
          "displayName": "Unnecessary boxing",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports explicit boxing, that is wrapping of primitive values in objects.\n\u003cp\u003eExplicit manual boxing is unnecessary as of Java 5 and later, and can safely be removed.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eInteger i \u003d new Integer(1);\u003c/code\u003e \u0026rarr; \u003ccode\u003eInteger i \u003d Integer.valueOf(1);\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eint i \u003d Integer.valueOf(1);\u003c/code\u003e \u0026rarr; \u003ccode\u003eint i \u003d 1;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eOnly report truly superfluously boxed expressions\u003c/b\u003e option to report only truly superfluous boxing,\n  where a boxed value is immediately unboxed either implicitly or explicitly.\nIn this case, the entire boxing-unboxing step can be removed. The inspection doesn\u0027t report simple explicit boxing.\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 5 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryUnboxing",
          "displayName": "Unnecessary unboxing",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unboxing, that is explicit unwrapping of wrapped primitive values.\n\u003cp\u003eUnboxing is unnecessary as of Java 5 and later, and can safely be removed.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eInteger i \u003d Integer.valueOf(42).intValue();\u003c/code\u003e \u0026rarr; \u003ccode\u003eInteger i \u003d Integer.valueOf(42);\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eint k \u003d Integer.valueOf(42).intValue();\u003c/code\u003e \u0026rarr; \u003ccode\u003eint k \u003d Integer.valueOf(42);\u003c/code\u003e\n    \u003cp\u003e(reports only when the \u003cb\u003eOnly report truly superfluously unboxed expressions\u003c/b\u003e option is not checked)\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eOnly report truly superfluously unboxed expressions\u003c/b\u003e option to only report truly superfluous unboxing,\n  where an unboxed value is immediately boxed either implicitly or explicitly.\n  In this case, the entire unboxing-boxing step can be removed. The inspection doesn\u0027t report simple explicit unboxing.\u003c/p\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 5 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RawUseOfParameterizedType",
          "displayName": "Raw use of parameterized class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports generic classes with omitted type parameters. Such \u003ci\u003eraw\u003c/i\u003e use of generic types is valid\nin Java, but it defeats the purpose of type parameters and may mask bugs. This inspection mirrors the\n\u003ccode\u003erawtypes\u003c/code\u003e warning of \u003ccode\u003ejavac\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n//warning: Raw use of parameterized class \u0027List\u0027\nList list \u003d new ArrayList\u0026lt;String\u0026gt;();\n//list of strings was created but integer is accepted as well\nlist.add(1);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003e\n//no warning as it\u0027s impossible to provide type arguments during array creation\nIntFunction\u0026lt;List\u0026lt;?\u0026gt;[]\u003e fun \u003d List[]::new;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore construction of new objects\u003c/b\u003e option to ignore raw types used in object construction.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore type casts\u003c/b\u003e option to ignore raw types used in type casts.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore where a type parameter would not compile\u003c/b\u003e option to ignore the cases when a type parameter fails to compile\n    (for example, when creating an array or overriding a library method).\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore parameter types of overriding methods\u003c/b\u003e option to ignore type parameters used in parameters of overridden methods.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore when automatic quick-fix is not available\u003c/b\u003e option to ignore the cases when a quick-fix is not available.\u003c/li\u003e\n\u003c/ul\u003e\nThis inspection only reports if the language level of the project or module is 5 or higher.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodCanBeVariableArityMethod",
          "displayName": "Method can have varargs parameter",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that can be converted to variable arity methods.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void process(String name, Object[] objects);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void process(String name, Object... objects);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  This inspection only reports if the language level of the project or module is 5 or higher.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IndexOfReplaceableByContains",
          "displayName": "\u0027String.indexOf()\u0027 expression can be replaced with \u0027contains()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comparisons with \u003ccode\u003eString.indexOf()\u003c/code\u003e calls\nthat can be replaced with a call to the \u003ccode\u003eString.contains()\u003c/code\u003e method.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eboolean\u003c/b\u003e b \u003d \"abcd\".indexOf(\u0027e\u0027) \u003e\u003d 0;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eboolean\u003c/b\u003e b \u003d \"abcd\".contains(\u0027e\u0027);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 5 or higher.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringBufferReplaceableByStringBuilder",
          "displayName": "\u0027StringBuffer\u0027 may be \u0027StringBuilder\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports variables declared as \u003ccode\u003eStringBuffer\u003c/code\u003e and suggests replacing them with \u003ccode\u003eStringBuilder\u003c/code\u003e.\n\u003ccode\u003eStringBuilder\u003c/code\u003e is a non-thread-safe replacement for \u003ccode\u003eStringBuffer\u003c/code\u003e.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 5 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CollectionsFieldAccessReplaceableByMethodCall",
          "displayName": "Reference to empty collection field can be replaced with method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003ejava.util.Collections\u003c/code\u003e fields: \u003ccode\u003eEMPTY_LIST\u003c/code\u003e, \u003ccode\u003eEMPTY_MAP\u003c/code\u003e\nor \u003ccode\u003eEMPTY_SET\u003c/code\u003e. These field usages may be replaced with the following method\ncalls: \u003ccode\u003eemptyList()\u003c/code\u003e, \u003ccode\u003eemptyMap()\u003c/code\u003e, or \u003ccode\u003eemptySet()\u003c/code\u003e.\nSuch method calls prevent unchecked warnings by the compiler because the type parameters can be inferred.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;Integer\u0026gt; emptyList \u003d Collections.EMPTY_LIST;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;Integer\u0026gt; emptyList \u003d Collections.emptyList();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 5 or higher.\u003c/p\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Test frameworks",
      "inspections": [
        {
          "shortName": "TestFailedLine",
          "displayName": "Failed line in test",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports failed method calls or assertions in tests. It helps detect the failed line in code faster and start debugging it immediately.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test\n  fun foo() {\n    assertEquals(1, 0) // highlighted\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JUnitMixedFramework",
          "displayName": "JUnit API usage from multiple versions in a single TestCase",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JVM",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JUnit annotated methods when used in a test case from a different JUnit version. To determine the framework version for a test case\nthe inspection checks the framework version of the super class when available. When a super class is not available it will use the most used\nframework in the test case.\n\u003cp\u003eExample (JUnit 4 annotation in JUnit 3 test case):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class MyTest extends TestCase {\n      @Test\n      public void foo() { }\n\n      @Test\n      @Ignore\n      public void testBar() { }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class MyTest extends TestCase {\n      public void testFoo() {}\n\n      public void _testBar() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eExample (JUnit 5 annotation in JUnit 4 test case):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class MyTest {\n      @BeforeAll // JUnit 5 lifecycle method\n      public void initialize() { }\n\n      @org.junit.Test  // JUnit 4 test annotation\n      public void test() {}\n\n      @org.junit.Test  // JUnit 4 test annotation\n      public void testWouldBeExecuted() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class MyTest {\n      @BeforeClass // JUnit 4 lifecycle method\n      public void initialize() { }\n\n      @org.junit.Test  // JUnit 4 test annotation\n      public void test() {}\n\n      @org.junit.Test  // JUnit 4 test annotation\n      public void testWouldBeExecuted() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Junit4Converter",
          "displayName": "JUnit 3 test can be JUnit 4",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JUnit 3 test classes that can be converted to JUnit 4 test classes.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class MainTestCase extends junit.framework.TestCase {\n    public void test() {\n      Assert.assertTrue(true);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class MainTestCase {\n    @org.junit.Test\n    public void test() {\n      Assert.assertTrue(true);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 5 or higher, and JUnit 4 is available on the classpath.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TestInProductSource",
          "displayName": "Test in product source",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports test classes and test methods that are located in production source trees.\nThis most likely a mistake and can result in test code being shipped into production.\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JUnit5AssertionsConverter",
          "displayName": "JUnit 5 obsolete assertions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports any calls to methods from the \u003ccode\u003ejunit.framework.Assert\u003c/code\u003e, \u003ccode\u003eorg.junit.Assert\u003c/code\u003e, or \u003ccode\u003eorg.junit.Assume\u003c/code\u003e\n  classes inside JUnit 5 tests.\u003c/p\u003e\n\u003cp\u003eAlthough the tests work properly, migration to \u003ccode\u003eorg.junit.jupiter.api.Assertions\u003c/code\u003e/\u003ccode\u003eorg.junit.jupiter.api.Assumptions\u003c/code\u003e\n  will help you avoid dependencies on old JUnit version.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import org.junit.Assert;\n  import org.junit.jupiter.api.Test;\n\n  public class MyTest {\n    @Test\n    public void simpleTest() {\n      Assert.assertEquals(4, 2 + 2);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import org.junit.jupiter.api.Assertions;\n  import org.junit.jupiter.api.Test;\n\n  public class MyTest {\n    @Test\n    public void simpleTest() {\n      Assertions.assertEquals(4, 2 + 2);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TestCaseWithConstructor",
          "displayName": "TestCase with non-trivial constructors",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports test cases with initialization logic in their constructors.\nIf a constructor fails, the \u003ccode\u003e@After\u003c/code\u003e annotated or \u003ccode\u003etearDown()\u003c/code\u003e method won\u0027t be called.\nThis can leave the test environment partially initialized, which can adversely affect other tests.\nInstead, initialization of test cases should be done in a \u003ccode\u003esetUp()\u003c/code\u003e or \u003ccode\u003e@Before\u003c/code\u003e annotated method.\n\u003cp\u003eBad example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class ImportantTest {\n    private File file;\n\n    public ImportantTest() throws IOException {\n      file \u003d File.createTempFile(\"xyz\", \".tmp\");\n    }\n\n    // ... tests go here\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuperTearDownInFinally",
          "displayName": "JUnit 3 \u0027super.tearDown()\u0027 is not called from \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls of the JUnit 3\u0027s \u003ccode\u003esuper.tearDown()\u003c/code\u003e method that are not performed inside a \u003ccode\u003efinally\u003c/code\u003e block.\nIf an exception is thrown before \u003ccode\u003esuper.tearDown()\u003c/code\u003e is called it could lead to inconsistencies and leaks.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class AnotherTest extends CompanyTestCase {\n    private Path path;\n\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      path \u003d Files.createTempFile(\"File\", \".tmp\");\n    }\n\n    @Override\n    protected void tearDown() throws Exception {\n      Files.delete(path);\n      super.tearDown();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eImproved code:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class AnotherTest extends CompanyTestCase {\n    private Path path;\n\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      path \u003d Files.createTempFile(\"File\", \".tmp\");\n    }\n\n    @Override\n    protected void tearDown() throws Exception {\n      try {\n        Files.delete(path);\n      } finally {\n        super.tearDown();\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n  \u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JUnit5Converter",
          "displayName": "JUnit 4 test can be JUnit 5",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JUnit 4 tests that can be automatically migrated to JUnit 5.\nWhile default runners are automatically convertible, custom runners, method- and field- rules are not and require manual changes.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import org.junit.Assert;\n  import org.junit.Test;\n\n  public class RelevantTest {\n    @Test\n    public void testIt() {\n      Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import org.junit.jupiter.api.Assertions;\n  import org.junit.jupiter.api.Test;\n\n  public class RelevantTest {\n    @Test\n    public void testIt() {\n      Assertions.assertEquals(\"expected\", \"actual\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection requires that the JUnit 5 library is available in the classpath, and JDK 1.8 or later is configured for the project.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MigrateAssertToMatcherAssert",
          "displayName": "JUnit assertion can be \u0027assertThat()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eAssert.assertEquals()\u003c/code\u003e, \u003ccode\u003eAssert.assertTrue()\u003c/code\u003e, etc. methods\nwhich can be migrated to Hamcrest declarative style \u003ccode\u003eAssert.assertThat()\u003c/code\u003e calls.\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e SubstantialTest {\n    @Test\n    \u003cb\u003epublic void\u003c/b\u003e testContents(Collection\u0026lt;String\u003e c, String s) {\n      Assert.assertTrue(c.contains(s));\n      Assert.assertEquals(c, s);\n      Assert.assertNotNull(c);\n      Assert.assertNull(c);\n      Assert.assertFalse(c.contains(s));\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix is provided to perform the migration:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e SubstantialTest {\n    @Test\n    \u003cb\u003epublic void\u003c/b\u003e testContents(Collection\u0026lt;String\u003e c, String s) {\n      assertThat(c, hasItem(o));\n      assertThat(o, is(c));\n      assertThat(c, notNullValue());\n      assertThat(c, nullValue());\n      assertThat(c, not(hasItem(o)));\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection requires that the Hamcrest library is available on the classpath.\n\u003cp\u003eUse the \u003cb\u003eStatically import matcher\u0027s methods\u003c/b\u003e option to specify if you want the quick-fix to statically import the Hamcrest matcher methods.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IgnoredJUnitTest",
          "displayName": "JUnit test annotated with \u0027@Ignore\u0027/\u0027@Disabled\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of JUnit 4\u0027s \u003ccode\u003e@Ignore\u003c/code\u003e or JUnit 5\u0027s \u003ccode\u003e@Disabled\u003c/code\u003e annotations.\nIt is considered a code smell to have tests annotated with these annotations for a long time, especially when no reason is specified.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Ignore\n  \u003cb\u003epublic class\u003c/b\u003e UrgentTest {\n\n    @Test\n    \u003cb\u003epublic void\u003c/b\u003e testIt() {\n      Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    Use the \u003cb\u003eOnly report annotations without reason\u003c/b\u003e option to only report the cases when no reason is specified as the annotation\u0027s\n    \u003ccode\u003evalue\u003c/code\u003e attribute.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssertBetweenInconvertibleTypes",
          "displayName": "\u0027assertEquals()\u0027 between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to assertion methods where the \"expected\" and \"actual\" arguments are of incompatible types.\n\u003cp\u003eSuch calls often indicate that there is a bug in the test.\n  This inspection checks the relevant JUnit, TestNG, and AssertJ methods.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  assertEquals(\"1\", 1);\n  assertNotSame(new int[0], 0);\n\n  // weak warning, may just test the equals() contract\n  assertThat(foo).as(\"user type\").isNotEqualTo(bar);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JUnitMalformedDeclaration",
          "displayName": "JUnit malformed declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JUnit test member declarations that are malformed and are likely not recognized by the JUnit test framework.\nThe following problems are reported by this inspection:\n\u003cul\u003er\n  \u003cli\u003eTest classes that can\u0027t be constructed\u003c/li\u003e\n  \u003cli\u003eFields annotated by \u003ccode\u003e@RegisterExtension\u003c/code\u003e that have the wrong type or are not declared as static when it is required\u003c/li\u003e\n  \u003cli\u003eStatic or private inner classes annotated with \u003ccode\u003e@Nested\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eParameterized tests that are defined without a source\u003c/li\u003e\n  \u003cli\u003eParameterized tests with a \u003ccode\u003e@MethodSource\u003c/code\u003e that has an unknown, non-static or no-arg target\u003c/li\u003e\n  \u003cli\u003eMismatched types between parameterized test method parameter and the specified \u003ccode\u003e@ValueSource\u003c/code\u003e or \u003ccode\u003e@EnumSource\u003c/code\u003e values\u003c/li\u003e\n  \u003cli\u003eTests that are annotated by more than one of \u003ccode\u003e@Test\u003c/code\u003e, \u003ccode\u003e@ParameterizedTest\u003c/code\u003e or \u003ccode\u003e@RepeatedTest\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003esetup()\u003c/code\u003e or \u003ccode\u003etearDown()\u003c/code\u003e methods that are not public, whose return type is not void or take arguments\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003esuite()\u003c/code\u003e methods that are private, take arguments or are not static\u003c/li\u003e\n  \u003cli\u003e\n    Methods annotated by \u003ccode\u003e@BeforeClass\u003c/code\u003e, \u003ccode\u003e@AfterClass\u003c/code\u003e, \u003ccode\u003e@BeforeAll\u003c/code\u003e or \u003ccode\u003e@AfterAll\u003c/code\u003e that are\n    not public, not static, whose return type is not void or do not have a valid parameter list\n  \u003c/li\u003e\n  \u003cli\u003e\n    Methods annotated by \u003ccode\u003e@Before\u003c/code\u003e, \u003ccode\u003e@After\u003c/code\u003e, \u003ccode\u003e@BeforeEach\u003c/code\u003e or \u003ccode\u003e@AfterEach\u003c/code\u003e that are\n    not public, whose return type is not void or take arguments\n  \u003c/li\u003e\n  \u003cli\u003eInjected \u003ccode\u003eRepetitionInfo\u003c/code\u003e in \u003ccode\u003e@BeforeAll\u003c/code\u003e or \u003ccode\u003e@AfterAll\u003c/code\u003e methods\u003c/li\u003e\n  \u003cli\u003e\n    Injected \u003ccode\u003eRepetitionInfo\u003c/code\u003e in \u003ccode\u003e@BeforeEach\u003c/code\u003e or \u003ccode\u003e@AfterEach\u003c/code\u003e methods that are used by \u003ccode\u003e@Test\u003c/code\u003e\n    annotated tests\n  \u003c/li\u003e\n  \u003cli\u003eFields and methods annotated by \u003ccode\u003e@DataPoint\u003c/code\u003e or \u003ccode\u003e@DataPoints\u003c/code\u003e that are not public or not static\u003c/li\u003e\n  \u003cli\u003e\n    Fields and methods annotated by \u003ccode\u003e@Rule\u003c/code\u003e that are not public or not a subtype of \u003ccode\u003eTestRule\u003c/code\u003e or\n    \u003ccode\u003eMethodRule\u003c/code\u003e\n  \u003c/li\u003e\n  \u003cli\u003eFields and methods annotated by \u003ccode\u003e@ClassRule\u003c/code\u003e that are not public, not static or not a subtype of \u003ccode\u003eTestRule\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\n    Methods inside a subclass of \u003ccode\u003eTestCase\u003c/code\u003e with a \u003ccode\u003etest\u003c/code\u003e prefix that are not public, whose return type is not void, take\n    arguments or are static\n  \u003c/li\u003e\n  \u003cli\u003e\n    Methods annotated by \u003ccode\u003e@Test\u003c/code\u003e that are not public, whose return type is not void, take arguments or are static\n  \u003c/li\u003e\n\u003c/ul\u003e\n\nNote that in Kotlin, suspending functions do have arguments and a non-void return type. Therefore, they also will not be executed by the\nJUnit test runner. This inspection will also report about this problem.\n\n\u003cp\u003e\u003cb\u003eMalformed \u003ccode\u003e@Before\u003c/code\u003e method example (Java):\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e@Before private int foo(int arg) { ... } \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e@Before public void foo() { ... } \u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cb\u003eMissing method source example (Kotlin):\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Example {\n    @MethodSource(\"parameters\")\n    @ParameterizedTest\n    fun foo(param: String) { ... }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Example {\n    @MethodSource(\"parameters\")\n    @ParameterizedTest\n    fun foo(param: String) { ... }\n\n    companion object {\n      @JvmStatic\n      fun parameters(): Stream\u0026lt;Arguments\u0026gt; {\n        TODO(\"Not yet implemented\")\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the inspection options to specify annotations. Any parameter annotated with one of these annotations will not be reported.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TestOnlyProblems",
          "displayName": "Test-only usage in production code",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003e@TestOnly\u003c/code\u003e- and \u003ccode\u003e@VisibleForTesting\u003c/code\u003e-annotated methods and classes that are used in production code. Also reports\nusage of applying \u003ccode\u003e@TestOnly\u003c/code\u003e \u003ccode\u003e@VisibleForTesting\u003c/code\u003e to the same element.\n\n\u003cp\u003eThe problems are not reported if such method or class is referenced from:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eCode under the \u003cb\u003eTest Sources\u003c/b\u003e folder\n  \u003cli\u003eA test class (JUnit/TestNG)\n  \u003cli\u003eAnother \u003ccode\u003e@TestOnly\u003c/code\u003e-annotated method\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eExample (in production code):\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @TestOnly\n  fun foo() { ... }\n\n  fun main () {\n    foo()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "AssertEqualsCalledOnArray",
          "displayName": "\u0027assertEquals()\u0027 called on array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JUnit \u003ccode\u003eassertEquals()\u003c/code\u003e calls with arguments of an array type.\nSuch methods compare the arrays\u0027 identities instead of the arrays\u0027 contents.\nArray contents should be checked with the \u003ccode\u003eassertArrayEquals()\u003c/code\u003e method.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test\n  public void testSort() {\n    int[] actual \u003d {248, 496, 0, 56};\n    Arrays.sort(actual);\n    Assert.assertEquals(new int[] {0, 56, 248, 496}, actual);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test\n  public void testSort() {\n    int[] actual \u003d {248, 496, 0, 56};\n    Arrays.sort(actual);\n    Assert.assertArrayEquals(new int[] {0, 56, 248, 496}, actual);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssertEqualsMayBeAssertSame",
          "displayName": "\u0027assertEquals()\u0027 may be \u0027assertSame()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports JUnit \u003ccode\u003eassertEquals()\u003c/code\u003e calls that can be replaced with an equivalent \u003ccode\u003eassertSame()\u003c/code\u003e call.\nThis is possible when the arguments are instances of a \u003ccode\u003efinal\u003c/code\u003e class that does not override the \u003ccode\u003eObject.equals()\u003c/code\u003e\nmethod and makes it explicit that the object identity is compared.\n\u003cp\u003eSuggests replacing \u003ccode\u003eassertEquals()\u003c/code\u003e with \u003ccode\u003eassertSame()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test\n  public void testObjectType() {\n    Object o \u003d getObject();\n    Assert.assertEquals(String.class, o.getClass());\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Test\n  public void testSort() {\n    Object o \u003d getObject();\n    Assert.assertSame(String.class, o.getClass());\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TestMethodWithoutAssertion",
          "displayName": "Test method without assertions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports test methods that do not contain any assertions. Such methods may indicate either incomplete or weak test cases.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003epublic class\u003c/b\u003e ExtensiveTest {\n\n    @Test\n    \u003cb\u003epublic void\u003c/b\u003e testAlive() {\n      System.out.println(\"nothing\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n      Use the table to specify the combinations of fully qualified class name and method name regular expression\n      that should qualify as assertions. Class names also match subclasses.\n  \u003c/li\u003e\n  \u003cli\u003e\n      Use the \u003cb\u003e\u0027assert\u0027 keyword is considered an assertion\u003c/b\u003e option to specify if the Java \u003ccode\u003eassert\u003c/code\u003e statements using the \u003ccode\u003eassert\u003c/code\u003e keyword should be considered an assertion.\n  \u003c/li\u003e\n  \u003cli\u003e\n      Use the \u003cb\u003eIgnore test methods which declare exceptions\u003c/b\u003e option to ignore the test methods that declare exceptions.\n      This can be useful when you have tests that will throw an exception on failure and thus don\u0027t need any assertions.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Workspace model",
      "inspections": [
        {
          "shortName": "WorkspaceImplObsolete",
          "displayName": "Obsolete version of entity implementation",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports existence of the obsolete implementation for the entity.\n\u003cp\u003e\n  Verifies that existing implementation for entities has the same API version as described at \u003ccode\u003ecom.intellij.workspaceModel.storage.CodeGeneratorVersions\u003c/code\u003e from dependencies.\n\u003c/p\u003e\n\u003cp\u003e\n  Suggests regenerating implementation for the whole entities in the current module.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WorkspaceImplAbsent",
          "displayName": "Absent entity implementation",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "231.9011.34",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports absent of implementation for the entity.\n\u003cp\u003e\n  Verifies that each entity in the project has the implementation.\n\u003c/p\u003e\n\u003cp\u003e\n  Suggests generation implementation for the whole entities in the current module.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "XPath",
      "inspections": [
        {
          "shortName": "RedundantTypeConversion",
          "displayName": "Redundant type conversion",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "231.9011.34",
          "language": "XPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary type conversions.\nType conversions are unnecessary when the argument type of a \u003ccode\u003estring()\u003c/code\u003e, \u003ccode\u003enumber()\u003c/code\u003e, or\n\u003ccode\u003eboolean()\u003c/code\u003e function is already the same as the function\u0027s return type or if\nthe expected expression type is \u003ccode\u003eany\u003c/code\u003e. Suggests removing the unnecessary conversion.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HardwiredNamespacePrefix",
          "displayName": "Hardcoded namespace prefix",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "231.9011.34",
          "language": "XPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comparisons of the \u003ccode\u003ename()\u003c/code\u003e function with a string that contains a colon (\u003ccode\u003e:\u003c/code\u003e).  Such usages\nusually indicate a hardcoded namespace prefix in the comparison. As a result,  the code will break when run against XML that\nuses another prefix for the same namespace.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;xsl:if test\u003d\"name() \u003d \u0027xlink:href\u0027\"\u003e...\u0026lt;xsl:if\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ImplicitTypeConversion",
          "displayName": "Implicit type conversion",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "231.9011.34",
          "language": "XPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports implicit conversions between the predefined XPath-types \u003ccode\u003eSTRING\u003c/code\u003e, \u003ccode\u003eNUMBER\u003c/code\u003e, \u003ccode\u003eBOOLEAN\u003c/code\u003e,\nand \u003ccode\u003eNODESET\u003c/code\u003e. Helps to write XSLT scripts that are more expressive about types and prevents subtle bugs:\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;xsl:if test\u003d\"\u003cb\u003efoo\u003c/b\u003e\" /\u003e\n\u003c/code\u003e\u003c/pre\u003e\nis not the same as\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;xsl:if test\u003d\"\u003cb\u003estring(foo)\u003c/b\u003e\" /\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\nThe first test checks whether the element \"foo\" exists (\u003ccode\u003ecount(foo) \u003e 0)\u003c/code\u003e; the latter one however is only\n true if the element actually contains any text (\u003ccode\u003estring-length(foo) \u003e 0\u003c/code\u003e). Suggests making \nthe type conversion more explicit.\n\u003c/p\u003e\n\n\u003cp\u003e\n  Use the following options to configure the inspection:\n\u003c/p\u003e\n\u003cul\u003e\u003cli\u003eEnable or disable implicit conversions between certain types\u003c/li\u003e\n\u003cli\u003eAlways report explicit conversions that do not result in the actually expected type, for example,\n \u003ccode\u003e\u0026lt;xsl:if test\u003d\"number(foo)\" /\u003e\u003c/code\u003e\u003c/li\u003e \n\u003cli\u003eIgnore conversion from \u003ccode\u003eNODESET\u003c/code\u003e\n  to \u003ccode\u003eBOOLEAN\u003c/code\u003e by using the \u003ccode\u003estring()\u003c/code\u003e function as a shortcut for writing \u003ccode\u003estring-length() \u003e 0\u003c/code\u003e.\u003c/li\u003e\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IndexZeroUsage",
          "displayName": "XPath predicate with index 0",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "231.9011.34",
          "language": "XPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003e0\u003c/code\u003e in a predicate index or in a comparison with the function\n\u003ccode\u003eposition()\u003c/code\u003e. Such usage is almost always a bug because in XPath, the index starts at \u003ccode\u003e1\u003c/code\u003e, \u003cem\u003enot\u003c/em\u003e at \u003ccode\u003e0\u003c/code\u003e.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  //someelement[\u003cb\u003eposition() \u003d 0\u003c/b\u003e]\u003c/code\u003e or \u003ccode\u003e//something[\u003cb\u003e0\u003c/b\u003e]\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CheckNodeTest",
          "displayName": "Unknown element or attribute name",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "231.9011.34",
          "language": "XPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports names of elements or attributes that are used in an XPath-expression but are missing in the associated XML files and are not\ndefined in the referenced schemas.\nSuch names are often the result of typos and would otherwise probably only be discovered at runtime.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;xsl:template match\u003d\"\u003cb\u003eh:txtarea\u003c/b\u003e\" /\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\n  If the \u003ccode\u003eh\u003c/code\u003e is bound to the XHTML namespace, the inspection will report this part of the \u003ccode\u003ematch\u003c/code\u003e expression as an\n  unknown element name because the correct name of the element is \"textarea\".\n\u003c/p\u003e\n\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Data flow",
      "inspections": [
        {
          "shortName": "LawOfDemeter",
          "displayName": "Law of Demeter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ca href\u003d\"https://en.wikipedia.org/wiki/Law_of_Demeter\"\u003eLaw of Demeter\u003c/a\u003e violations.\n\u003cp\u003e\nThe Law of Demeter is not really a law, but specifies a style guideline: never call a method on an object received from another call.\nThe code that follows this guideline is easier to maintain, adapt, and refactor, has less coupling between methods, less duplication,\nand better information hiding. On the other hand, you may need to write many wrapper methods to meet this guideline.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean pay(Customer c, Invoice invoice) {\n    int dollars \u003d c.getWallet().contents; // violation\n    if (dollars \u003e\u003d invoice.getAmount()) {\n      Wallet w \u003d c.getWallet();\n      w.subtract(invoice.getAmount()); // violation\n      return true;\n    }\n    return false;\n  }\n\u003c/code\u003e\u003c/pre\u003e\nThe above example might be better implemented as a method \u003ccode\u003epayInvoice(Invoice invoice)\u003c/code\u003e in \u003ccode\u003eCustomer\u003c/code\u003e.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eIgnore calls to library method and access of library fields\u003c/b\u003e option to ignore Law of Demeter violations\nthat can\u0027t be fixed without changing a library.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantValueVariableUse",
          "displayName": "Use of variable whose value is known to be constant",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any usages of variables which are known to be constant.\n\u003cp\u003eThis is the case if the (read) use of the variable is surrounded by an\n\u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, or \u003ccode\u003efor\u003c/code\u003e\nstatement with an \u003ccode\u003e\u003d\u003d\u003c/code\u003e condition which compares the variable with a constant.\n  In this case, the use of a variable which is known to be constant can be replaced with\n  an actual constant.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    private static void foo(double number) {\n        if (number \u003d\u003d 1.0) {\n            f(number);\n        }\n    }\n    private static void f(double number) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    private static void foo(double number) {\n        if (number \u003d\u003d 1.0) {\n            f(1.0);\n        }\n    }\n    private static void f(double number) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BooleanMethodIsAlwaysInverted",
          "displayName": "Boolean method is always inverted",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods with a \u003ccode\u003eboolean\u003c/code\u003e return type that are always negated when called.\n\u003cp\u003eA quick-fix is provided to invert and optionally rename the method.\n  For performance reasons, not all problematic methods may be highlighted in the editor.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class C {\n    boolean alwaysTrue() {\n      return true;\n    }\n\n    void f() {\n      if (!alwaysTrue()) {\n        return;\n      }\n    }\n    boolean member \u003d !alwaysTrue();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class C {\n    boolean alwaysFalse() {\n      return false;\n    }\n\n    void f() {\n      if (alwaysFalse()) {\n        return;\n      }\n    }\n    boolean member \u003d alwaysFalse();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnnecessaryLocalVariable",
          "displayName": "Redundant local variable",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary local variables that add nothing to the comprehensibility of a method, including:\n\u003cul\u003e\n  \u003cli\u003eLocal variables that are immediately returned.\u003c/li\u003e\n  \u003cli\u003eLocal variables that are immediately assigned to another variable and then not used.\u003c/li\u003e\n  \u003cli\u003eLocal variables that always have the same value as another local variable or parameter.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean yes() {\n    boolean b \u003d true;\n    return b;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean yes() {\n    return true;\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore immediately returned or thrown variables\u003c/b\u003e option to ignore immediately returned or thrown variables.\n    Some coding styles suggest using such variables for clarity and ease of debugging.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore variables which have an annotation\u003c/b\u003e option to ignore annotated variables.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReuseOfLocalVariable",
          "displayName": "Reuse of local variable",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables that are \"reused\" overwriting their\nvalues with new values unrelated to their original use.\n\u003cp\u003eSuch a local variable reuse may be confusing,\nas the intended semantics of the local variable may vary with each use. It may also be\nprone to bugs if due to the code changes, the values that have been considered overwritten actually\nappear to be alive. It is a good practice to keep variable lifetimes as short as possible, and not\n  to reuse local variables for the sake of brevity.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    void x() {\n        String s \u003d \"one\";\n        System.out.println(\"s \u003d \" + s);\n        s \u003d \"two\"; //reuse of local variable \u0027s\u0027\n        System.out.println(\"s \u003d \" + s);\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TooBroadScope",
          "displayName": "Scope of variable is too broad",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any variable declarations that can be moved to a smaller scope.\n\u003cp\u003eThis inspection is especially\nuseful for \u003ci\u003ePascal style\u003c/i\u003e declarations at the beginning of a method. Additionally variables with too broad a\n  scope are also often left behind after refactorings.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  StringBuilder sb \u003d new StringBuilder();\n  System.out.println();\n  sb.append(1);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  System.out.println();\n  StringBuilder sb \u003d new StringBuilder();\n  sb.append(1);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eOnly report variables that can be moved into inner blocks\u003c/b\u003e option to report only those variables that can be moved inside deeper code blocks.\n    For example, when the option is enabled, the movement will not be suggested for the \u003ccode\u003esb\u003c/code\u003e variable above.\n    However, it will be suggested for the following code:\n\u003cpre\u003e\u003ccode\u003e\n  StringBuilder sb \u003d new StringBuilder(a);\n  if (flag) {\n    sb.append(1);\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eReport variables with a new expression as initializer\n    (potentially unsafe)\u003c/b\u003e option to report variables that are initialized with a new expression. This makes the inspection potentially\n    unsafe when the constructor has non-local side effects. For example, when the option is enabled, the movement will be\n    suggested for the \u003ccode\u003efoo\u003c/code\u003e variable:\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    static List\u0026lt;Foo\u0026gt; fooList \u003d new ArrayList\u0026lt;\u0026gt;();\n    String bar;\n\n    Foo(String bar) {\n        this.bar \u003d bar;\n        fooList.add(this);\n    }\n\n    public static void main(String[] args) {\n      // movement is possible even though is unsafe\n      Foo foo \u003d new Foo(\"bar\");\n      System.out.println(fooList.size());\n      System.out.println(foo.bar);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NegativelyNamedBooleanVariable",
          "displayName": "Negatively named boolean variable",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports negatively named variables, for example: \u003ccode\u003edisabled\u003c/code\u003e, \u003ccode\u003ehidden\u003c/code\u003e, or \u003ccode\u003eisNotChanged\u003c/code\u003e.\n\u003cp\u003eUsually, inverting the \u003ccode\u003eboolean\u003c/code\u003e value and removing the negation from the name makes the code easier to understand.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    boolean disabled \u003d false;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BooleanVariableAlwaysNegated",
          "displayName": "Boolean variable is always inverted",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports boolean variables or fields which are always negated\nwhen their value is used.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n      void m() {\n        boolean b \u003d true; //boolean variable \u0027b\u0027 is always inverted\n        System.out.println(!b);\n      }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Properties files",
      "inspections": [
        {
          "shortName": "UnresolvedPropertyKey",
          "displayName": "Invalid property key",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports invalid arguments that are passed to methods with parameters annotated as \u003ccode\u003e@PropertyKey\u003c/code\u003e.\n\u003cp\u003eThese arguments should be valid property keys in corresponding properties files.\nAlso, the inspection verifies that the \u003ccode\u003eresourceBundle\u003c/code\u003e\n  argument of the \u003ccode\u003e@PropertyKey\u003c/code\u003e annotation is an existing resource bundle.\u003c/p\u003e\n\u003cp\u003e\n  Use the quick-fix to create a new property or to select an existing one.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @PropertyKey(resourceBundle \u003d \"myBundle\") String value \u003d \"invalid.key\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Annotations",
      "inspections": [
        {
          "shortName": "GrNamedVariantLabels",
          "displayName": "@NamedVariant/@NamedParam/@NamedDelegate unresolved label",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved argument labels in calls of methods annotated\nby \u003ccode\u003e@NamedVariant\u003c/code\u003e/\u003ccode\u003e@NamedParam\u003c/code\u003e/\u003ccode\u003e@NamedDelegate\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @groovy.transform.NamedVariant\n  def foo(a, b) {}\n\n  // unresolved label \u0027c\u0027\n  foo(a: 1, b: 2, c: 3)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrAnnotationReferencingUnknownIdentifiers",
          "displayName": "@TupleConstructor and @MapConstructor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved identifiers in \u003ccode\u003e@TupleConstructor\u003c/code\u003e and \u003ccode\u003e@MapConstructor\u003c/code\u003e\n\u003ccode\u003eincludes\u003c/code\u003e and \u003ccode\u003eexcludes\u003c/code\u003e annotation attribute values.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // unresolved \u0027c\u0027\n  @TupleConstructor(includes \u003d [\u0027a\u0027, \u0027b\u0027, \u0027c\u0027])\n  class X {\n      def a\n      def b\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "DelegatesTo",
          "displayName": "@DelegatesTo",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unused \u003ccode\u003e@DelegatesTo.Target\u003c/code\u003e annotations and unresolved \u003ccode\u003e@DelegatedTo.target\u003c/code\u003e annotation attribute values.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // unused target \u0027t1\u0027 and unresolved target \u0027t2\u0027\n  def m(\n      @DelegatesTo.Target(\u0027t1\u0027) target,\n      @DelegatesTo(target \u003d \u0027t2\u0027) Closure c\n  ) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SingletonConstructor",
          "displayName": "@Singleton constructors",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports constructors of classes annotated by \u003ccode\u003e@Singleton\u003c/code\u003e unless it is declared non-strict.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Singleton\n  class Foo{\n      Foo(){\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThere are two possible quick-fixes: either to remove the constructor or to declare \u003ccode\u003e@Singleton\u003c/code\u003e non-strict.\u003c/p\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Singleton\n  class Foo{\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eor:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Singleton(\u003cb\u003estrict \u003d false\u003c/b\u003e)\n  class Foo{\n      Foo(){\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GrPOJO",
          "displayName": "@POJO without @CompileStatic",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports annotation \u003ccode\u003e@groovy.transform.stc.POJO\u003c/code\u003e applied without \u003ccode\u003e@groovy.transform.CompileStatic\u003c/code\u003e.\u003cp\u003e\n\u003cp\u003eAnnotation \u003ccode\u003e@POJO\u003c/code\u003e changes compilation process of Groovy classes to bytecode. It has no effect without explicitly enabled static compilation (which is done via \u003ccode\u003e@CompileStatic\u003c/code\u003e annotation).\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @POJO // reports @POJO\n  class A {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Spring Core",
      "inspections": [
        {
          "shortName": "SpringHandlersSchemasHighlighting",
          "displayName": "Unresolved file or class reference in a spring.handlers or spring.schemas file",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved class and file references in \u003ccode\u003espring.handlers\u003c/code\u003e and \u003ccode\u003espring.schemas\u003c/code\u003e files.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample \u003ccode\u003espring.handlers\u003c/code\u003e file:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n   a\u003dmy.company.MyHandler\n   b\u003dmy.company.UnknownHandler // reports \"Cannot resolve class \u0027my.company.UnknownHandler\u0027\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringElInspection",
          "displayName": "Incorrect Spring Expression Language (SpEl) syntax ",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "SpEL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports syntax errors in the Spring Expression Language (SpEL) code, such as unresolved references and invalid locations.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n@Controller\npublic class MyController {\n    @Value(\"#{T(java.lang.Math).\u003cstrong\u003eunknown\u003c/strong\u003e()}\") // Cannot resolve property or method \u0027unknown\u0027\n    public void setValue(String s) {}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringElStaticFieldInjectionInspection",
          "displayName": "Incorrect injecting of SpEL in a static field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports attempts to inject Spring Expression Language (SpEL) into static fields (\u0027null\u0027 value is injected).\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n@Controller\npublic class MyController {\n    \u003cstrong\u003e@Value\u003c/strong\u003e(\"#{systemProperties[\u0027some.key\u0027]}\")  //  Injection to static fields is not allowed\n    static String spelWithDefaultValue;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "PostCSS",
      "inspections": [
        {
          "shortName": "PostCssNesting",
          "displayName": "Invalid nested rule",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.plugins.postcss",
          "pluginVersion": "231.9011.34",
          "language": "PostCSS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a nested style rule whose syntax doesn\u0027t comply with the \u003ca href\u003d\"https://github.com/postcss/postcss-nested\"\u003ePostCSS Nested\u003c/a\u003e\nor the \u003ca href\u003d\"https://github.com/csstools/postcss-nesting\"\u003ePostCSS Nesting\u003c/a\u003e specification.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n.phone {\n  \u0026_title {}\n}\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PostCssUnresolvedModuleValueReference",
          "displayName": "Unresolved CSS module value",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.plugins.postcss",
          "pluginVersion": "231.9011.34",
          "language": "PostCSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved reference to a \u003ca href\u003d\"https://github.com/css-modules/postcss-modules-values\"\u003eCSS Module Value\u003c/a\u003e (\u003ccode\u003e@value\u003c/code\u003e declaration).\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n@value foo from unknown;\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PostCssCustomMedia",
          "displayName": "Invalid custom media",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.plugins.postcss",
          "pluginVersion": "231.9011.34",
          "language": "PostCSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a syntax error in a \u003ca href\u003d\"https://github.com/postcss/postcss-custom-media\"\u003ePostCSS Custom Media\u003c/a\u003e query.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n@custom-media --small-viewport (max-width: 30em);\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PostCssMediaRange",
          "displayName": "Invalid media query range",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.plugins.postcss",
          "pluginVersion": "231.9011.34",
          "language": "PostCSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks \u003ca href\u003d\"https://github.com/postcss/postcss-media-minmax\"\u003erange context\u003c/a\u003e syntax, which may alternatively be used for\nmedia features with a \u0027range\u0027 type.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n@media screen and (500px \u0026lt;\u003d width \u0026lt;\u003d 1200px) {}\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "PostCssCustomSelector",
          "displayName": "Invalid custom selector",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.plugins.postcss",
          "pluginVersion": "231.9011.34",
          "language": "PostCSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a syntax error in \u003ca href\u003d\"https://github.com/postcss/postcss-custom-selectors\"\u003ePostCSS Custom Selector\u003c/a\u003e.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n@custom-selector :--heading h1, h2, h3;\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "StandardVariableNames",
          "displayName": "Standard variable names",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports variables with \u0027standard\u0027 names that do not correspond to their types.\nSuch names may be confusing. There are the following standard names for specific types:\n\u003cul\u003e\n  \u003cli\u003ei, j, k, m, n - \u003ccode\u003eint\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ef - \u003ccode\u003efloat\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ed - \u003ccode\u003edouble\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eb - \u003ccode\u003ebyte\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ec, ch - \u003ccode\u003echar\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003el - \u003ccode\u003elong\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003es, str - \u003ccode\u003eString\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRename quick-fix is suggested only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to ignore parameter names which are identical to the parameter name from a direct super method.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PackageNamingConvention",
          "displayName": "Package naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports packages whose names are either too short, too long, or do not follow the specified regular expression pattern.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  package io;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the options to specify the minimum and maximum length of the package name\n  as well as a regular expression that matches valid package names\n  (regular expressions are in standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format).\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LocalVariableNamingConvention",
          "displayName": "Local variable naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e \u003ccode\u003eint X \u003d 42;\u003c/code\u003e\n  should be reported if the inspection is enabled with the default settings in which a variable name should start with a lowercase letter.\u003c/p\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003e\nUse the fields in the \u003cb\u003eOptions\u003c/b\u003e section to specify the minimum length, maximum length, and a regular expression expected for local variable names.\nSpecify \u003cb\u003e0\u003c/b\u003e in order not to check the length of names. Regular expressions should be specified in the standard \u003cb\u003ejava.util.regex\u003c/b\u003e format.\n\u003cp\u003eUse checkboxes to ignore \u003ccode\u003efor\u003c/code\u003e-loop and \u003ccode\u003ecatch\u003c/code\u003e section parameters.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ParameterNameDiffersFromOverriddenParameter",
          "displayName": "Parameter name differs from parameter in overridden or overloaded method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports parameters whose names differ from the corresponding\nparameters of the methods they override or overload. While legal in Java, such inconsistent names may be confusing\nand decrease the documentation benefits of good naming practices.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Person {\n    Person(String fullName) {}\n  }\n  class Child extends Person {\n    Child(String name) { super(name); }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Person {\n    Person(String fullName) {}\n  }\n  class Child extends Person {\n    Child(String fullName) { super(fullName); }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the options to indicate whether to ignore overridden parameter names that are only\n  a single character long or come from a library method. Both can be useful if\n  you do not wish to be bound by dubious naming conventions used in libraries.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FieldNamingConvention",
          "displayName": "Field naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e if the inspection is enabled for constants, and the minimum specified length for a field name is 5 (the default), the following constant\n  produces a warning because the length of its name is 3, which is less than 5:  \u003ccode\u003epublic static final int MAX \u003d 42;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eA quick-fix that renames such fields is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003eUse the list in the \u003cb\u003eOptions\u003c/b\u003e section to specify which fields should be checked. Deselect the checkboxes for the fields for which\nyou want to skip the check.\u003c/p\u003e\n\u003cp\u003eFor each field type, specify the minimum length, maximum length, and the regular expression expected for field names using the\n  provided input fields.\n  Specify \u003cb\u003e0\u003c/b\u003e in the length fields to skip the corresponding checks.\u003c/p\u003e\n\u003cp\u003eRegular expressions should be specified in the standard\n  \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LambdaParameterNamingConvention",
          "displayName": "Lambda parameter naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambda parameters whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e \u003ccode\u003eFunction\u0026lt;String, String\u0026gt; id \u003d X -\u0026gt; X;\u003c/code\u003e \n  should be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003e\nUse the fields in the \u003cb\u003eOptions\u003c/b\u003e section to specify the minimum length, maximum length, and a regular expression expected for lambda parameter names.\n  Specify \u003cb\u003e0\u003c/b\u003e in order not to check the length of names.\u003c/p\u003e\n\u003cp\u003eRegular expressions should be specified in the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "QuestionableName",
          "displayName": "Questionable name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports variables, methods, or classes with questionable, not really descriptive names.\nSuch names do not help to understand the code, and most probably were created as a temporary thing but were forgotten afterwards.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int aa \u003d 42;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRename quick-fix is suggested only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to list names that should be reported.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaModuleNaming",
          "displayName": "Java module name contradicts the convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports cases when a module name contradicts Java Platform Module System recommendations.\n\u003cp\u003eOne of the \u003ca href\u003d\"http://mail.openjdk.org/pipermail/jpms-spec-experts/2017-March/000659.html\"\u003erecommendations\u003c/a\u003e\n  is to avoid using digits at the end of module names.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nmodule foo1.bar2 {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "DollarSignInName",
          "displayName": "Use of \u0027$\u0027 in identifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports variables, methods, and classes with dollar signs (\u003ccode\u003e$\u003c/code\u003e) in their names. While\nsuch names are legal Java, their use outside of generated java code is strongly discouraged.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class SalaryIn${}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRename quick-fix is suggested only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UpperCaseFieldNameNotConstant",
          "displayName": "Non-constant field with upper-case name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-\u003ccode\u003estatic\u003c/code\u003e non-\u003ccode\u003efinal\u003c/code\u003e\nfields whose names are all in upper case.\n\u003cp\u003eSuch fields may cause confusion by breaking a common naming convention and\n  are often used by mistake.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e \u003cpre\u003e\u003ccode\u003e\n  public static int THE_ANSWER \u003d 42; //a warning here: final modifier is missing\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix that renames such fields is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ParameterNamingConvention",
          "displayName": "Method parameter naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method parameters whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e \u003ccode\u003evoid fooBar(int X)\u003c/code\u003e\n  should be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter.\u003c/p\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003e\n  Use the fields in the \u003cb\u003eOptions\u003c/b\u003e section to specify the minimum length, maximum length, and a regular expression expected for\n  method parameter names. Specify \u003cb\u003e0\u003c/b\u003e in order not to check the length of names.\u003c/p\u003e\n\u003cp\u003eRegular expressions should be specified in the standard \u003ccode\u003ejava.util.regex\u003c/code\u003e format.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Spring Integration",
      "inspections": [
        {
          "shortName": "SpringIntegrationDeprecations21",
          "displayName": "Spring Integration 2.1 deprecations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.integration",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports XML elements deprecated in the current version of the \u003ca href\u003d\"https://spring.io/projects/spring-integration\"\u003eSpring Integration\u003c/a\u003e XML-based application context.\u003c/p\u003e\n\n\u003cp\u003eFor more information, see \u003ca href\u003d\"https://github.com/SpringSource/spring-integration/wiki/Spring-Integration-2.0-to-2.1-Migration-Guide\"\u003eMigration Guide\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;beans ... \u0026gt;\n   \u0026lt;int:channel id\u003d\"failChannel\"\n                dispatcher\u003d\"\u003cstrong\u003efailover\u003c/strong\u003e\"/\u0026gt; \u0026lt;!-- this attribute is deprecated, use dispatcher sub-element instead --\u0026gt;\n   \u0026lt;int:poller default\u003d\"true\"\u0026gt;\n     \u0026lt;\u003cstrong\u003eint:cron-trigger\u003c/strong\u003e  expression\u003d\"5\"/\u0026gt;  \u0026lt;!-- This element is removed in Spring Integration 2.1, use \u0027cron\u0027 attribute instead --\u0026gt;\n     \u0026lt;\u003cstrong\u003eint:interval-trigger\u003c/strong\u003e interval\u003d\"3\"/\u0026gt; \u0026lt;!--  This element is removed in Spring Integration 2.1, use interval trigger attributes instead --\u0026gt;\n  \u0026lt;/int:poller\u0026gt;\n  \u0026lt;ftp:inbound-channel-adapter session-factory\u003d\"ftpSessionFactory\"\n                               cache-sessions\u003d\"\u003cstrong\u003efalse\u003c/strong\u003e\" \u0026lt;!--  This attribute is deprecated, use CachingSessionFactory instead --\u0026gt;\n                               channel\u003d\"channel\"/\u0026gt;\n\u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnresolvedMessageChannel",
          "displayName": "Incorrect \u0027channel\u0027 attribute in an endpoint method annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.integration",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect channel attributes in endpoint method annotations:\n\u003ca href\u003d\"https://docs.spring.io/spring-integration/api/org/springframework/integration/annotation/Gateway.html\"\u003e@Gateway\u003c/a\u003e,\n\u003ca href\u003d\"https://docs.spring.io/spring-integration/api/org/springframework/integration/annotation/ServiceActivator.html\"\u003e@ServiceActivator,\u003c/a\u003e\n\u003ca href\u003d\"https://docs.spring.io/spring-integration/api/org/springframework/integration/annotation/Filter.html\"\u003e@Filter\u003c/a\u003e, and so on.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  @Component\n  public class MyComponent {}\n     @Gateway(requestChannel \u003d \"requestChannel\", replyChannel \u003d \"replyChannel\")\n     public void gateway() {...}\n\n     @Gateway(\n        requestChannel \u003d\"\u003cstrong\u003esimpleBean\u003c/strong\u003e\",   // Bean must be one of these types: org.springframework.integration.MessageChannel,org.springframework.messaging.MessageChannel\n        replyChannel \u003d \"\u003cstrong\u003eunknownChannel\u003c/strong\u003e\")   // Cannot find channel\n     public void errors() {...}\n\n     @Bean\n     public MyBean simpleBean() {...}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n\n"
        },
        {
          "shortName": "SpringIntegrationMethodEndpointInconsistency",
          "displayName": "Incorrect Spring Integration endpoint method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring.integration",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports incorrect \u003ca href\u003d\"https://spring.io/projects/spring-integration\"\u003eSpring Integration\u003c/a\u003e endpoint method declarations.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass MyEndpoints {\n  @InboundChannelAdapter(\"channel\")\n  public void \u003cstrong\u003ecannotBeVoid\u003c/strong\u003e() {...} // A method annotated with @InboundChannelAdapter must have a return type\n\n  @InboundChannelAdapter(\"channel\")\n  public String \u003cstrong\u003ecannotHaveParams\u003c/strong\u003e(String s) {..} // A method annotated with @InboundChannelAdapter can\u0027t have arguments\n\n  @\u003cstrong\u003eFilter\u003c/strong\u003e(inputChannel \u003d \"channel\", // Endpoint can have only one poller\n    outputChannel \u003d \"channel2\",\n    poller \u003d {@Poller(fixedDelay \u003d \"100\"), @Poller(fixedRate \u003d \"100\")})\n  public void testMultiplePollers() {\n  }\n\n  @Filter(inputChannel \u003d \"channel\",\n  outputChannel \u003d \"channel2\",\n  poller \u003d @\u003cstrong\u003ePoller\u003c/strong\u003e(value \u003d \"poller\", maxMessagesPerPoll \u003d \"100\"))\n  public void testValue() {\n  }\n\n  @Filter(inputChannel \u003d \"channel\",\n    outputChannel \u003d \"channel2\",\n    poller \u003d @\u003cstrong\u003ePoller\u003c/strong\u003e(trigger \u003d \"trigger\", cron \u003d \"0 */10 * * * *\")) // \u0027trigger\u0027 attribute is mutually exclusive with other attributes\n  public void testTrigger() {\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringIntegrationModel",
          "displayName": "Incorrect Spring Integration XML-based application context",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring.integration",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports issues with the \u003ca href\u003d\"https://spring.io/projects/spring-integration\"\u003eSpring Integration\u003c/a\u003e XML-based application context:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUnresolved bean references\u003c/li\u003e\n  \u003cli\u003eMissing required tags or attributes\u003c/li\u003e\n  \u003cli\u003eIncorrect property types\u003c/li\u003e\n  \u003cli\u003eInconsistent \u003ccode\u003eenum\u003c/code\u003e properties\u003c/li\u003e\n  \u003cli\u003eIncorrect types of referenced beans\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans ... \u0026gt;\n  \u0026lt;int:channel id\u003d\"channel\"\u0026gt; \u0026lt;!-- \u0027dispatcher\u0027 and \u0027queue\u0027 can\u0027t be used together  --\u0026gt;\n    \u0026lt;int:dispatcher failover\u003d\"true\"/\u0026gt;\n    \u0026lt;int:priority-queue capacity\u003d\"4\"/\u0026gt;\n  \u0026lt;/int:channel\u0026gt;\n  \n  \u0026lt;int:channel id\u003d\"another\" \u0026gt;\n    \u0026lt;int:queue \u0026lt;!--Exactly one of \u0027message-store\u0027 or \u0027ref\u0027 is required  --\u0026gt;\n              capacity\u003d\"4\" message-store\u003d\"myMessageStore\" ref\u003d\"myQueue\"/\u0026gt;\n  \u0026lt;/int:channel\u0026gt;\n  \n   \u0026lt;int:gateway id\u003d\"asyncGatewayError\"\n                async-executor\u003d\"dummyBean\"/\u0026gt; \u0026lt;!--Bean must be of \u0027java.util.concurrent.Executor\u0027 type  --\u0026gt;\n\n   \u0026lt;int:delayer default-delay\u003d\"3\"\n              message-store\u003d\"myMessageStore\"\n              scheduler\u003d\"scheduler\"\n              wait-for-tasks-to-complete-on-shutdown\u003d\"false\"/\u0026gt;\n  \u0026lt;!--Bean must be of \u0027java.util.concurrent.Executor\u0027 type  --\u0026gt;\n  \u0026lt;int:delayer\n    default-delay\u003d\"INVALID_VALUE\"  \u0026lt;!--Cannot convert string \u0027INVALID_VALUE\u0027 to target class \u0027java.lang.Integer\u0027 --\u0026gt;\n               message-store\u003d\"dummyBean\" \u0026lt;!-- Bean must be of \u0027org.springframework.integration.store.MessageStore\u0027 type--\u0026gt;\n               scheduler\u003d\"dummyBean\" \u0026lt;!-- Bean must be one of these types: java.util.concurrent.ScheduledExecutorService,org.springframework.scheduling.TaskScheduler--\u0026gt;\n               wait-for-tasks-to-complete-on-shutdown\u003d\"INVALID_VALUE\"/\u0026gt; \u0026lt;!-- Cannot resolve symbol \u0027INVALID_VALUE\u0027 --\u0026gt;\n\n  \u0026lt;bean id\u003d\"dummyBean\" class\u003d\"java.lang.String\"/\u0026gt;\n  \u0026lt;bean id\u003d\"myMessageStore\" class\u003d\"org.springframework.integration.store.SimpleMessageStore\"/\u0026gt;\n  \u0026lt;task:scheduler id\u003d\"scheduler\"/\u0026gt;\n\u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n\n"
        }
      ]
    },
    {
      "name": "Try statement issues",
      "inspections": [
        {
          "shortName": "EmptyCatchBlockJS",
          "displayName": "Empty \u0027catch\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an empty \u003ccode\u003ecatch\u003c/code\u003e block. This indicates that errors are simply ignored instead of handling them.\n\u003cbr/\u003e\u003cbr/\u003e\nAny comment in a \u003ccode\u003ecatch\u003c/code\u003e block mutes the inspection.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EmptyTryBlockJS",
          "displayName": "Empty \u0027try\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an empty \u003ccode\u003etry\u003c/code\u003e block, which usually indicates an error.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReturnFromFinallyBlockJS",
          "displayName": "\u0027return\u0027 inside \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003ereturn\u003c/code\u003e statement inside a \u003ccode\u003efinally\u003c/code\u003e\nblock. Such \u003ccode\u003ereturn\u003c/code\u003e statements may mask\nexceptions thrown, and complicate debugging.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ContinueOrBreakFromFinallyBlockJS",
          "displayName": "\u0027continue\u0027 or \u0027break\u0027 inside \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports  a \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e statement inside a \u003ccode\u003efinally\u003c/code\u003e\nblock. Such statements are very confusing, may hide exceptions, and\ncomplicate debugging.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnusedCatchParameterJS",
          "displayName": "Unused \u0027catch\u0027 parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003ecatch\u003c/code\u003e parameter that is not used in the\ncorresponding block.  The \u003ccode\u003ecatch\u003c/code\u003e parameters named\n\u003ccode\u003eignore\u003c/code\u003e or \u003ccode\u003eignored\u003c/code\u003e are ignored.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n    Use the checkbox below to disable this inspection for \u003ccode\u003ecatch\u003c/code\u003e\n    blocks with comments.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EmptyFinallyBlockJS",
          "displayName": "Empty \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an empty \u003ccode\u003efinally\u003c/code\u003e block, which usually indicates an error.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ExceptionCaughtLocallyJS",
          "displayName": "Exception used for local control-flow",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003ethrow\u003c/code\u003e statement whose exceptions are always\ncaught by the containing \u003ccode\u003etry\u003c/code\u003e statement. Using \u003ccode\u003ethrow\u003c/code\u003e\nstatements as a \u003ccode\u003egoto\u003c/code\u003e to change the local flow of control is confusing.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThrowFromFinallyBlockJS",
          "displayName": "\u0027throw\u0027 inside \u0027finally\u0027 block",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports s \u003ccode\u003ethrow\u003c/code\u003e statement inside a \u003ccode\u003efinally\u003c/code\u003e\nblock. Such \u003ccode\u003ethrow\u003c/code\u003e statements may mask\nexceptions thrown, and complicate debugging.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "XML",
      "inspections": [
        {
          "shortName": "SpringPublicFactoryMethodInspection",
          "displayName": "Incorrect non-public method referenced in \"factory-method\" attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports non-public methods referenced in the \u003ccode\u003efactory-method\u003c/code\u003e attributes of \u003cstrong\u003e\u0026lt;bean\u0026gt;\u003c/strong\u003e elements.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\npublic class MyFactory {\n  private static FooBean createBean() {...}\n  }\n}\n\n\u003chr/\u003e\n\n\u0026lt;beans\u0026gt;\n  \u0026lt;bean class\u003d\"MyFactory\" factory-method\u003d\"createBean\"/\u0026gt;\n  // reports \"Factory method \u0027createBean\u0027 should be public\"\n\u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ContextComponentScanInconsistencyInspection",
          "displayName": "Invalid filter definition in XML-based component scans",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports inconsistent \u003cstrong\u003e\u0026lt;filter\u0026gt;\u003c/strong\u003e definitions in \u003cstrong\u003e\u0026lt;component-scan\u0026gt;\u003c/strong\u003e of XML application contexts.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  public class NonAnnotationTypeClass {}\n  \u0026lt;beans\u0026gt;\n    \u0026lt;ctx:component-scan base-package\u003d\"com.my.company\"\u0026gt;\n      \u0026lt;ctx:exclude-filter expression\u003d\"com.my.company.anno.NonAnnotationTypeClass\" type\u003d\"annotation\"/\u0026gt;\n    \u0026lt;/ctx:component-scan\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn this example, \u003ccode\u003eNonAnnotationTypeClass\u003c/code\u003e is expected to be an annotation type.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringScopesInspection",
          "displayName": "Unknown \u003cbean\u003e scope",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unknown values of the \u003ccode\u003escope\u003c/code\u003e attribute in \u003cstrong\u003e\u0026lt;bean\u0026gt;\u003c/strong\u003e elements.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans\u0026gt;\n    \u0026lt;bean class\u003d\"beans.FooComponent\" id\u003d\"foo\" scope\u003d\"unknown\"/\u0026gt;\n    // reports \"Cannot resolve symbol \u0027unknown\u0027\"\n    \u0026lt;bean class\u003d\"beans.BarComponent\" id\u003d\"bar\" scope\u003d\"prototype\"/\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringBeanNameConventionInspection",
          "displayName": "Spring bean name violates conventions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003cstrong\u003e\u0026lt;bean\u0026gt;\u003c/strong\u003e names that don\u0027t follow the bean naming conventions.\u003c/p\u003e\n\n\u003cp\u003e\n  The convention is to use the standard Java convention for instance field names when naming beans.\n  That is, bean names start with a lowercase letter and are camel-cased from there.\n  Examples of such names include \u003ccode\u003eaccountManager\u003c/code\u003e, \u003ccode\u003eaccountService\u003c/code\u003e, \u003ccode\u003euserDao\u003c/code\u003e, \u003ccode\u003eloginController\u003c/code\u003e, and so on.\n  Naming beans consistently makes your configuration easier to read and understand.\n  Also, if you are using Spring AOP, it helps a lot when applying an advice to a set of beans related by name.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringXmlAutowiringInspection",
          "displayName": "Incorrect XML Spring bean autowiring",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect autowiring of Spring beans configured in XML application contexts.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\npublic interface FooInterface {...}\n@Component public class FooBean implements FooInterface {...}\n@Component public class OtherBean implements FooInterface {...}\n\n@Component\npublic class MyComponent {\n\t public void setFooInterface(FooInterface foo) {...}\n}\n\n\u003chr/\u003e\n\n\u0026lt;beans\u0026gt;\n\t\u0026lt;bean class\u003d\"beans.OtherBean\" id\u003d\"otherBean\"/\u0026gt;\n\t\u0026lt;bean class\u003d\"beans.FooBean\" id\u003d\"fooBean\"/\u0026gt;\n\n\t\u0026lt;bean autowire\u003d\"byType\" class\u003d\"beans.MyComponent\" id\u003d\"foo\"/\u0026gt; // reports \"Could not autowire. There is more than one bean of \u0027FooInterface\u0027 type.\n                                                               //          Beans: otherBean,fooBean. Properties: \u0027fooInterface\u0027 \"\n\u0026lt;/beans\u0026gt;\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringInjectionValueConsistencyInspection",
          "displayName": "Inconsistent injection value in XML application context",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports inconsistent tags and attributes on injection points in XML application contexts.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;property\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;constructor-arg\u0026gt;\u003c/code\u003e must specify a \u003ccode\u003eref\u003c/code\u003e, \u003ccode\u003evalue\u003c/code\u003e, or a sub-element\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;property\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;constructor-arg\u0026gt;\u003c/code\u003e cannot contain more than one sub-element\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;ref\u0026gt;\u003c/code\u003e can contain either a \u003ccode\u003ebean\u003c/code\u003e attribute, a \u003ccode\u003elocal\u003c/code\u003e attribute, or a \u003ccode\u003eparent\u003c/code\u003e attribute\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;ref\u0026gt;\u003c/code\u003e must specify a bean\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;idref\u0026gt;\u003c/code\u003e can contain either a \u003ccode\u003ebean\u003c/code\u003e attribute or a \u003ccode\u003elocal\u003c/code\u003e attribute\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;idref\u0026gt;\u003c/code\u003e must specify a bean\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;map\u0026gt;\u003c/code\u003e must specify a key\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e\u0026lt;idref\u0026gt;\u003c/code\u003e can contain either a \u003ccode\u003ekey\u003c/code\u003e attribute, a \u003ccode\u003ekey-ref\u003c/code\u003e attribute, or a \u003ccode\u003e\u0026lt;key\u0026gt;\u003c/code\u003e sub-element\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans\u0026gt;\n\n  \u003cem\u003e\u0026lt;!-- 1.  Property is only allowed to contain either \"ref\" attribute OR \"value\" attribute OR sub-element --\u0026gt;\u003c/em\u003e\n  \u0026lt;bean class\u003d\"MyClass\"\u0026gt;\n    \u0026lt;property name\u003d\"bean\" ref\u003d\"myBean\" value\u003d\"foo\"/\u0026gt;\n    // Property is only allowed to contain either \"ref\" attribute OR \"value\" attribute OR sub-element\n  \u0026lt;/bean\u0026gt;\n\n  \u003cem\u003e\u0026lt;!--  2.  Property must not contain more than one sub-element --\u0026gt;\u003c/em\u003e\n  \u0026lt;bean class\u003d\"MyFactory\"\u0026gt;\n    \u0026lt;property name\u003d\"bean\"\u0026gt;\n    \u0026lt;ref\u0026gt;bean\u0026lt;/ref\u0026gt; // Property must not contain more than one sub-element\n     \u0026lt;value\u0026gt;foo\u0026lt;/value\u0026gt; // Property must not contain more than one sub-element\n     \u0026lt;/property\u0026gt;\n  \u0026lt;/bean\u0026gt;\n\n  \u003cem\u003e\u0026lt;!-- 3. Map entry must specify a key  --\u0026gt;\u003c/em\u003e\n  \u0026lt;bean class\u003d\"MyBean\"\u0026gt;\n     \u0026lt;property name\u003d\"map\"\u0026gt;\n        \u0026lt;map\u0026gt;\n           \u0026lt;entry value\u003d\"foo\"/\u0026gt;  // Map entry must specify a key\n        \u0026lt;/map\u0026gt;\n     \u0026lt;/property\u0026gt;\n  \u0026lt;/bean\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DuplicatedBeanNamesInspection",
          "displayName": "Duplicated bean names in XML-based application context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports duplicate bean names defined in the application context.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans profile\u003d\"PROD\"\u0026gt;\n    \u0026lt;bean class\u003d\"...\" id\u003d\"duplicatedName\"/\u0026gt;  // error\n    \u0026lt;bean class\u003d\"...\" name\u003d\"foo_name, duplicatedName\"/\u0026gt; // \u0027duplicatedName\u0027 error\n    \u0026lt;bean class\u003d\"...\" id\u003d\"toBeAliased\"/\u0026gt;\n\n    \u0026lt;alias alias\u003d\"duplicatedName\" name\u003d\"toBeAliased\"/\u0026gt; // \u0027duplicatedName\u0027 error\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "InjectionValueTypeInspection",
          "displayName": "Unassignable injection point type in XML application context",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports invalid injection point types (properties and constructor arguments).\u003c/p\u003e\n\n\u003cp\u003eThe following injection point types are allowed: \u003ccode\u003eref\u003c/code\u003e, \u003ccode\u003eidref\u003c/code\u003e, any collection type, inner beans, and so on.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  public class InjectionValueTypes{\n  public List\u0026lt;MyBean\u0026gt; setListBeans() {...}\n    public MyBean setMyBean() {...}\n    }\n  }\n  \u0026lt;beans\u0026gt;\n    \u0026lt;bean class\u003d\"MyBean\" id\u003d\"myBean\"/\u0026gt;\n    \u0026lt;bean class\u003d\"ErrTypeBean\" id\u003d\"errTypeBean\"/\u0026gt;\n    \u0026lt;bean class\u003d\"InjectionValueTypes\" id\u003d\"kt\"\u0026gt;\n      \u0026lt;property name\u003d\"myBean\" ref\u003d\"errTypeBean\"/\u0026gt;\n      // reports \"Property of \u0027MyBean\u0027 type cannot be injected by \u0027ErrTypeBean\u0027\n      \u0026lt;property name\u003d\"listBeans\"\u0026gt;\n        \u0026lt;list\u0026gt;\n          \u0026lt;idref local\u003d\"myBean\"/\u0026gt;\n          \u0026lt;ref bean\u003d\"myBean\"/\u0026gt;\n          \u0026lt;ref bean\u003d\"errTypeBean\"/\u0026gt; // reports \"Cannot be added in collection of \u0027MyBean\u0027 type\"\n          \u0026lt;bean class\u003d\"ErrTypeBean\"/\u0026gt; // reports \"Bean must be of \u0027MyBean\u0027 type\"\n        \u0026lt;/list\u0026gt;\n      \u0026lt;/property\u0026gt;\n    \u0026lt;/bean\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringRequiredPropertyInspection",
          "displayName": "Missing @Required property injections in the spring xml bean declaration ",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003e@Required\u003c/code\u003e setter bean properties that are not injected or autowired.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u0026lt;beans\u0026gt;\n  \u0026lt;bean class\u003d\"beans.MyComponent\" id\u003d\"foo\"/\u0026gt;\n  // reports \"Required properties missing: \u0027port\u0027\"\n\u0026lt;/beans\u0026gt;\n\n\u003chr/\u003e\n\npublic class MyComponent {\n   @Required\n   public void setPort(int port) // reports \"Required property \u0027port\u0027 is not injected\"\n   {...}\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AbstractBeanReferencesInspection",
          "displayName": "Incorrect reference to abstract bean",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports referenced abstract beans.\u003c/p\u003e\n\n\u003cp\u003eAbstract beans can be used only as template bean definitions, that is, parents for child definitions.\n  Trying to use such an abstract parent bean on its own by referring to it as a ref property of another bean,\n  or by calling \u003ccode\u003egetBean()\u003c/code\u003e with the parent bean id, will result in an error.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;bean abstract\u003d\"true\" id\u003d\"parentBeanWithoutClass\"/\u0026gt;\n  \u0026lt;bean class\u003d\"com.my.company.FooBean\" id\u003d\"childBean\" parent\u003d\"parentBeanWithoutClass\"\u0026gt;\n  \u0026lt;!--  properties --\u0026gt;\n  \u0026lt;/bean\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn this example, the parent bean can\u0027t be instantiated on its own since it is incomplete and explicitly marked as abstract.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n\n"
        },
        {
          "shortName": "SpringIncorrectResourceTypeInspection",
          "displayName": "Incorrect resource type",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect files referenced in the XML application context.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans\u0026gt;\n    \u0026lt;import resource\u003d\"imported-app-context.xml\"/\u0026gt;\n    \u0026lt;import resource\u003d\"banner.txt\"/\u0026gt;// reports \u0027Incorrect resource type\u0027 as Spring XML application context is expected here\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringBeanLookupMethodInspection",
          "displayName": "Incorrectly configured XML bean lookup-method",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect \u003cstrong\u003e\u0026lt;lookup-method\u0026gt;\u003c/strong\u003e for a bean in XML application contexts.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public abstract class FooLookupBean {\n    protected abstract FooBean createCommand();\n    private FooBean createCommand() {...}\n    protected static FooBean createCommandStatic() {...}\n    protected abstract FooBean createWithArgs(String foo);\n    protected abstract OtherBean createOtherBean();\n  }\n\n  \u0026lt;beans\u0026gt;\n    \u0026lt;bean class\u003d\"FooLookupBean\" id\u003d\"lookupTest\"\u0026gt;\n      \u0026lt;lookup-method bean\u003d\"fooBean\" name\u003d\"createCommand\"/\u0026gt;\n      \u0026lt;!-- private --\u0026gt;\n      \u0026lt;lookup-method bean\u003d\"fooBean\" name\u003d\"createCommand\"/\u0026gt;// \"Method must be public or protected\"\n      \u0026lt;!-- static --\u0026gt;\n      \u0026lt;lookup-method bean\u003d\"fooBean\" name\u003d\"createCommandStatic\"/\u0026gt; // Static method not allowed here\n      \u0026lt;!-- with arguments --\u0026gt;\n      \u0026lt;lookup-method bean\u003d\"fooBean\" name\u003d\"createWithArgs\"/\u0026gt;// Method must have no parameters\n      \u0026lt;!-- not exist --\u0026gt;\n      \u0026lt;lookup-method bean\u003d\"fooBean\" name\u003d\"unknown\"/\u0026gt;  // unknown method\n      \u0026lt;!-- mismatch --\u0026gt;\n      \u0026lt;lookup-method bean\u003d\"fooBean\" name\u003d\"createOtherBean\"/\u0026gt; // Lookup method return type does not match the \u0027FooBean\u0027 bean class\n    \u0026lt;/bean\u0026gt;\n\n    \u0026lt;bean class\u003d\"FooBean\" id\u003d\"fooBean\"/\u0026gt;\n    \u0026lt;bean class\u003d\"OtherBean\" id\u003d\"otherBean\"/\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringBeanInstantiationInspection",
          "displayName": "Invalid non-abstract bean instantiation",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports instantiation errors on interface/abstract class \u003cstrong\u003e\u0026lt;bean\u0026gt;\u003c/strong\u003e declarations.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans\u0026gt;\n    \u0026lt;bean class\u003d\"java.util.List\"/\u0026gt;\n    // reports \u0027Interface not allowed for non-abstract beans\u0027\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n\n"
        },
        {
          "shortName": "RequiredBeanTypeInspection",
          "displayName": "Incorrect injected bean type ",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect types of custom schema bean injections defined in the XML application context.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class SimpleBean{}\n\n  \u0026lt;beans ...\u003e\n    \u0026lt;bean class\u003d\"SimpleBean\" id\u003d\"simpleBean\"/\u0026gt;\n       \u0026lt;mvc:annotation-driven\n         conversion-service\u003d\"simpleBean\"      \u0026lt;!-- reports \"Bean must be of \u0027org.springframework.core.convert.ConversionService\u0027 type\" --\u0026gt;\n         message-codes-resolver\u003d\"simpleBean\"  \u0026lt;!-- reports \u0027Bean must be of org.springframework.validation.MessageCodesResolver\u0027 type\" --\u0026gt;\n         validator\u003d\"simpleBean\"               \u0026lt;!-- reports \"Bean must be of \u0027org.springframework.validation.Validator\u0027 type\" --\u0026gt;\n    /\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringPlaceholdersInspection",
          "displayName": "Unresolved placeholders configured in the Spring XML application context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unresolved placeholders configured in Spring XML contexts.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans\u0026gt;\n    \u0026lt;ctx:property-placeholder location\u003d\"application.properties\"/\u0026gt;\n\n    \u0026lt;bean class\u003d\"beans.ServerComponent\"\u0026gt;\n      \u0026lt;property name\u003d\"serverName\" value\u003d\"${server.name}}\"/\u0026gt;\n      \u0026lt;property name\u003d\"port\" value\u003d\"${unknown.property}}\"/\u0026gt; // reports \"Cannot resolve property key\"\n    \u0026lt;/bean\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringInactiveProfileHighlightingInspection",
          "displayName": "Inactive profile highlighting",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports inactive profiles in the Spring XML application contexts.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;!-- active profile \u003cstrong\u003e\u0027DEV\u0027\u003c/strong\u003e is chosen for this application context --\u0026gt;\n  \u0026lt;beans profile\u003d\"\u003cstrong\u003eDEV\u003c/strong\u003e\"\u0026gt;\n    \u0026lt;bean class\u003d\"MyFactory\" factory-method\u003d\"createBean\"/\u0026gt;\n  \u0026lt;/beans\u0026gt;\n  \u0026lt;!--  content of this tag is highlighted as \u0027unused\u0027 --\u0026gt;\n  \u003cem\u003e\u0026lt;beans profile\u003d\"\u003cstrong\u003eTESTS\u003c/strong\u003e\"\u0026gt;\n    \u0026lt;bean class\u003d\"MyTestFactory\" factory-method\u003d\"createBean\"/\u0026gt;\n  \u0026lt;/beans\u0026gt;\u003c/em\u003e\n  \u0026lt;!--  end of \u0027unused\u0027 section --\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnparsedCustomBeanInspection",
          "displayName": "Unparsed custom Spring beans",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unknown Spring bean types that have not yet been parsed or if a bean uses an unsupported tag for the custom namespace.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringInjectionValueStyleInspection",
          "displayName": "Injection value in XML application context violates conventions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports properties configured via \u003ccode\u003e\u0026lt;value\u0026gt;\u003c/code\u003e or \u003ccode\u003e\u0026lt;ref\u0026gt;\u003c/code\u003e sub-elements and offers to replace them with the corresponding attributes.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans\u0026gt;\n    \u0026lt;bean class\u003d\"MyBean\" id\u003d\"myBean\"/\u0026gt;\n\n    \u0026lt;bean class\u003d\"MyFactory\"\u0026gt;\n      \u0026lt;property name\u003d\"bean\"\u0026gt;\n        \u0026lt;ref bean\u003d\"myBean\"/\u0026gt; // reports \u0027Usage of explicit \u0026lt;ref\u0026gt; element\u0027\n      \u0026lt;/property\u0026gt;\n    \u0026lt;/bean\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter applying the quick-fix:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans\u0026gt;\n    \u0026lt;bean class\u003d\"MyBean\" id\u003d\"myBean\"/\u0026gt;\n    \u0026lt;bean class\u003d\"MyFactory\"\u0026gt;\n      \u0026lt;property name\u003d\"bean\" ref\u003d\"myBean\"/\u0026gt;\n    \u0026lt;/bean\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringXmlAutowireExplicitlyInspection",
          "displayName": "Unnecessary autowired dependency in XML application context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003eautowire\u003c/code\u003e attributes in \u003ccode\u003e\u0026lt;bean\u0026gt;\u003c/code\u003e elements and suggests to explicitly inject bean properties if possible.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class MyComponent {\n    public void setOtherBean(OtherBean bean){...}\n  }\n\n\u003chr/\u003e\n\n  \u0026lt;beans\u0026gt;\n    \u0026lt;bean class\u003d\"beans.OtherBean\" id\u003d\"bar\"/\u0026gt;\n    \u0026lt;bean autowire\u003d\"byType\" class\u003d\"beans.MyComponent\"/\u0026gt;\n    // \"Unnecessary autowired dependency\"\n    // suggests \"Make autowired dependency explicit\"\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter applying the quick-fix:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans\u0026gt;\n    \u0026lt;bean class\u003d\"beans.OtherBean\" id\u003d\"bar\"/\u0026gt;\n    \u0026lt;bean class\u003d\"beans.MyComponent\" id\u003d\"foo\"\u0026gt;\n      \u0026lt;property name\u003d\"otherBean\" ref\u003d\"otherBean\"/\u0026gt;\n    \u0026lt;/bean\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringBeanAttributesInspection",
          "displayName": "Conflicting Spring bean attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports configuration conflicts on \u003ccode\u003e\u0026lt;bean\u0026gt;\u003c/code\u003e attributes.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans\u0026gt;\n    \u0026lt;bean class\u003d\"java.lang.String\" factory-bean\u003d\"factoryBean\"/\u0026gt;\n    \u0026lt;!-- Exactly one of \u0027class\u0027 or \u0027factory-bean\u0027 is required --\u0026gt;\n    \u0026lt;bean factory-bean\u003d\"factoryBean\" id\u003d\"missingFactoryMethod\"/\u0026gt; //When factory-bean exists, factory-method is required\n\n    \u0026lt;bean abstract\u003d\"false\" id\u003d\"superfluousDefaultAttributeAbstract\"/\u0026gt;\n\n    \u0026lt;!-- Attribute abstract with default value \u0027false\u0027 is superfluous --\u0026gt;/\n    \u0026lt;bean id\u003d\"superfluousDefaultAttributeScope\" scope\u003d\"singleton\"/\u0026gt;\n\n    \u0026lt;!-- Attribute scope with default value \u0027singleton\u0027 is superfluous --\u0026gt;/\n    \u0026lt;bean class\u003d\"java.lang.StringBuilder\"\u0026gt;\n      \u0026lt;property name\u003d\"length\"\u0026gt;\n         \u0026lt;bean id\u003d\"beanId\" // Attribute id is superfluous\n              name\u003d\"beanName\"   // Attribute name is superfluous\n              scope\u003d\"prototype\" // Attribute scope is superfluous\n         /\u003e\n      \u0026lt;/property\u0026gt;\n    \u0026lt;/bean\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UtilSchemaInspection",
          "displayName": "Incorrectly configured \u0027util\u0027 schema beans defined in XML application context",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect \u003ca href\u003d\"https://www.springframework.org/schema/util\"\u003eschema beans\u003c/a\u003e defined in XML application contexts.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;beans ... xmlns:util\u003d\"https://www.springframework.org/schema/util\"\u0026gt;\n    \u0026lt;bean class\u003d\"MyBean\" id\u003d\"myBean\"/\u0026gt;\n    \u0026lt;bean class\u003d\"ErrTypeBean\" id\u003d\"errTypeBean\"/\u0026gt;\n    \u0026lt;util:list list-class\u003d\"java.lang.String\"/\u0026gt; // reports \"Class must be inheritor of \u0027java.util.List\u0027\"\n    \u0026lt;util:set value-type\u003d\"MyBean\"\u0026gt;\n      \u0026lt;ref bean\u003d\"fooBean\"/\u0026gt;\n      \u0026lt;ref bean\u003d\"errTypeBean\"/\u0026gt; // reports \"Cannot be added in collection of \u0027MyBean\u0027 type\"\n    \u0026lt;/util:set\u0026gt;\n  \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SpringFactoryMethodInspection",
          "displayName": "Incorrectly defined method referenced in \"factory-method\" attribute",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect method references in the \u003ccode\u003efactory-method\u003c/code\u003e attribute of the  \u003ccode\u003e\u0026lt;bean\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\npublic class MyFactory {\npublic static FooBean createBean() {}\n}\n\u0026lt;beans\u0026gt;\n  \u0026lt;bean class\u003d\"MyFactory\" id\u003d\"factory\"/\u0026gt;\n  \u0026lt;bean factory-bean\u003d\"factory\" factory-method\u003d\"createBean\"/\u0026gt; // Factory method \u0027createBean\u0027 must not be static\n\u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringBeanConstructorArgInspection",
          "displayName": "Incorrect constructor injection in XML Spring bean",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports Spring \u003ccode\u003e\u0026lt;bean\u0026gt;\u003c/code\u003e using constructor-based dependency injection.\u003c/p\u003e\n\n\u003cp\u003eThe inspection triggers when it can\u0027t find an appropriate constructor or factory method for \u003ccode\u003e\u0026lt;bean\u0026gt;\u003c/code\u003e with the configured\n\u003ccode\u003e\u0026lt;constructor-arg\u0026gt;\u003c/code\u003e tags and defined \u003ccode\u003eautowire\u003c/code\u003e policy.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    public class MyComponent {\n    // constructor\n    public MyComponent(MyBean bean) {}\n    // factory method\n    public static MyComponent getInstance(String name, int port) {\n    }\n    \u0026lt;beans\u0026gt;\n      \u0026lt;bean class\u003d\"beans.MyComponent\" id\u003d\"foo\"\u0026gt; // reports \"No matching constructor found in class \u0027MyComponent\"\n         \u0026lt;constructor-arg ref\u003d\"myBean\"/\u0026gt;\n         \u0026lt;constructor-arg value\u003d\"123\"/\u0026gt;\n      \u0026lt;/bean\u0026gt;\n\n      \u0026lt;bean class\u003d\"beans.MyComponent\" factory-method\u003d\"getInstance\"\u0026gt; // reports \"No matching factory method found in class\"\n         \u0026lt;constructor-arg value\u003d\"123\"/\u0026gt;\n      \u0026lt;/bean\u0026gt;\n    \u0026lt;/beans\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SpringXmlModelInspection",
          "displayName": "Incorrect Spring Core XML-based application context",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.spring",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports issues with the \u003ca href\u003d\"https://spring.io/projects/spring-framework\"\u003eSpring Framework\u003c/a\u003e XML-based application context:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eUnresolved bean references\u003c/li\u003e\n  \u003cli\u003eMissing required tags or attributes\u003c/li\u003e\n  \u003cli\u003eIncorrect property types\u003c/li\u003e\n  \u003cli\u003eInconsistent \u003ccode\u003eenum\u003c/code\u003e properties\u003c/li\u003e\n  \u003cli\u003eIncorrect types of referenced beans\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Ktor inspections",
      "inspections": [
        {
          "shortName": "KtorYamlConfig",
          "displayName": "Ktor application.yaml",
          "defaultSeverity": "WARNING",
          "pluginId": "intellij.ktor",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports deprecated configuration keys and invalid values in Ktor application \u003ccode\u003e.yaml\u003c/code\u003e configuration files.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Abstraction issues",
      "inspections": [
        {
          "shortName": "InstanceofChain",
          "displayName": "Chain of \u0027instanceof\u0027 checks",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any chains of \u003ccode\u003eif\u003c/code\u003e-\u003ccode\u003eelse\u003c/code\u003e statements all of whose conditions are \u003ccode\u003einstanceof\u003c/code\u003e expressions\nor class equality expressions (e.g. comparison with \u003ccode\u003eString.class\u003c/code\u003e).\nSuch constructions usually indicate a failure in object-oriented design which\ndictates that such type-based dispatch should be done via polymorphic method calls rather than explicit chains\nof type tests.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  double getArea(Shape shape) {\n    // Warning: abstraction failure.\n    // It would be better to declare a getArea()\n    // abstract method in the shape interface\n    // and implement it in every inheritor.\n    if (shape instanceof Point) {\n      return 0;\n    }\n    if (shape instanceof Circle) {\n      return Math.PI *\n        Math.pow(((Circle) shape).radius(), 2);\n    }\n    if (shape instanceof Rectangle) {\n      return ((Rectangle) shape).width() *\n        ((Rectangle) shape).height();\n    }\n    throw new IllegalArgumentException();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the checkbox below to ignore \u003ccode\u003einstanceof\u003c/code\u003e expressions on library classes.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MagicNumber",
          "displayName": "Magic number",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \"magic numbers\": numeric literals that are not named by a constant declaration.\n\u003cp\u003eUsing magic numbers can lead to unclear code, as well as errors if a magic\nnumber is changed in one location but remains unchanged not another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0L, 1L, 2L,\n  0.0, 1.0, 0.0F and 1.0F are not reported by this inspection.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void checkFileSize(long bytes) {\n    if (bytes \u003e 1_048_576) {\n      throw new IllegalArgumentException(\"too big\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix introduces a new constant:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  static final int MAX_SUPPORTED_FILE_SIZE \u003d 1_048_576;\n\n  void checkFileSize(long bytes) {\n    if (bytes \u003e MAX_SUPPORTED_FILE_SIZE) {\n      throw new IllegalArgumentException(\"too big\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore constants in \u0027hashCode()\u0027 methods\u003c/b\u003e option to disable this inspection within \u003ccode\u003ehashCode()\u003c/code\u003e methods.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore in annotations\u003c/b\u003e option to ignore magic numbers in annotations.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore initial capacity for StringBuilders and Collections\u003c/b\u003e option to ignore magic numbers used as initial capacity when constructing\n    \u003ccode\u003eCollection\u003c/code\u003e, \u003ccode\u003eMap\u003c/code\u003e,\n    \u003ccode\u003eStringBuilder\u003c/code\u003e or \u003ccode\u003eStringBuffer\u003c/code\u003e objects.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodOnlyUsedFromInnerClass",
          "displayName": "Private method only used from inner class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eprivate\u003c/code\u003e methods which\nare only called from an inner class of the class containing the method. Such\nmethods can be safely moved into that inner class.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\npublic class Outer {\n  public static void main(String[] args) {\n    new Inner().run(args[0]);\n  }\n\n  static class Inner {\n    void run(String arg) {\n      // Method isEmpty() is used from Inner class only\n      // consider moving it to the Inner class\n      if (!isEmpty(arg)) {\n        System.out.println(\"Argument is supplied\");\n      }\n    }\n  }\n\n  private static boolean isEmpty(String s) {\n    return s !\u003d null \u0026\u0026 s.trim().isEmpty();\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the first checkbox below to ignore \u003ccode\u003eprivate\u003c/code\u003e\nmethods which are called from an anonymous or local class.\n\u003cp\u003e\nUse the third checkbox to only report \u003ccode\u003estatic\u003c/code\u003e methods.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DeclareCollectionAsInterface",
          "displayName": "Collection declared by class, not interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declarations of \u003ccode\u003eCollection\u003c/code\u003e variables made by using the collection class as a type,\nrather than an appropriate interface. The warning is not issued if weakening the variable type \nwill cause a compilation error.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Warning: concrete collection class ArrayList used.\n  int getTotalLength(ArrayList\u0026lt;String\u0026gt; list) {\n    return list.stream().mapToInt(String::length).sum();\n  }\n\n  // No warning, as trimToSize() method is not\n  // available in the List interface\n  void addData(ArrayList\u0026lt;String\u0026gt; data) {\n    data.add(\"Hello\");\n    data.add(\"World\");\n    data.trimToSize();\n  }\n\u003c/code\u003e\u003c/pre\u003e\nA quick-fix is suggested to use the appropriate collection interface (e.g. \u003ccode\u003eCollection\u003c/code\u003e, \u003ccode\u003eSet\u003c/code\u003e, or \u003ccode\u003eList\u003c/code\u003e).\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StaticMethodOnlyUsedInOneClass",
          "displayName": "Static member only used from one other class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003estatic\u003c/code\u003e methods and fields that\nare only used from a class other than the containing class. Such members could be moved into the using class.\nFactory methods and members accessed from an anonymous class inside the member\u0027s class are ignored by this inspection.\nConvenience overloads, which call a method with the same name in the same class but have fewer parameters, are also ignored.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the first checkbox to supress this inspection when the static member is only used from a test class.\n\u003cp\u003e\nUse the second checkbox below to ignore member usages from inside anonymous, local, or non-static inner classes.\n\u003cp\u003e\nUse the third checkbox below to not warn on members that cannot be moved without problems,\n  for example, because a method with an identical signature is already present in the target class,\n  or because a field or a method used inside the method will not be accessible when this method is moved.\n\u003cp\u003e\nUse the fourth checkbox to ignore members located in utility classes.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassReferencesSubclass",
          "displayName": "Class references one of its subclasses",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes which contain references to one of their subclasses.\nSuch references may be confusing and violate several rules of object-oriented design.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Entity {\n    // Warning: the class references its subclass\n    void compare(SimpleEntity entity) {\n      ...\n    }\n  }\n  class SimpleEntity extends Entity {\n    ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnresolvedClassReferenceRepair",
          "displayName": "Unresolved class reference",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unresolved class reference.\n\u003cp\u003eThe quick-fix suggests trying to resolve reference.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "BooleanParameter",
          "displayName": "\u0027public\u0027 method with \u0027boolean\u0027 parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports public methods that accept a \u003ccode\u003eboolean\u003c/code\u003e parameter.\n\u003cp\u003eIt\u0027s almost always bad practice to add a \u003ccode\u003eboolean\u003c/code\u003e parameter to a public method (part of an API) if that method is not a setter.\nWhen reading code using such a method, it can be difficult to decipher what the \u003ccode\u003eboolean\u003c/code\u003e stands for without looking at\nthe source or documentation.\u003c/p\u003e\n\u003cp\u003eThis problem is also known as \u003ca href\u003d\"https://ariya.io/2011/08/hall-of-api-shame-boolean-trap\"\u003ethe boolean trap\u003c/a\u003e.\n  The \u003ccode\u003eboolean\u003c/code\u003e parameter can often be replaced with an \u003ccode\u003eenum\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Warning: it\u0027s hard to understand what the\n  // boolean parameters mean when looking at\n  // a call to this method\n  public boolean setPermission(File f,\n                               int access,\n                               boolean enable,\n                               boolean ownerOnly) {\n    // ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nUse the \u003cb\u003eOnly report methods with multiple boolean parameters\u003c/b\u003e option to warn only when a method contains more than one boolean parameter.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UseOfConcreteClass",
          "displayName": "Use of concrete class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of concrete classes, rather than interfaces.\nSuch declarations may represent a failure of abstraction and may make testing more difficult.\n\u003cp\u003e\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\nCasts, instanceofs, and local variables are not reported in \u003ccode\u003eequals()\u003c/code\u003e method implementations.\nAlso, casts are not reported in \u003ccode\u003eclone()\u003c/code\u003e method implementations.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface Entity {}\n  class EntityImpl implements Entity {}\n\n  void processObject(Object obj) {\n    // warning: instanceof of the concrete class\n    if (obj instanceof EntityImpl) {\n      // warning: cast to the concrete class,\n      // rather than the interface\n      processEntity((EntityImpl)obj);\n    }\n  }\n  // warning: parameter of concrete class\n  void processEntity(EntityImpl obj) {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore abstract class type\u003c/b\u003e option to ignore casts to abstract classes.\u003c/p\u003e\n\u003cp\u003eUse the subsequent options to control contexts where the problem is reported.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeMayBeWeakened",
          "displayName": "Type may be weakened",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports variable and method return types that can be changed to a more abstract (weaker) type.\nThis allows making the code more abstract, hence more reusable.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Type of parameter can be weakened to java.util.List\n  void processList(ArrayList\u0026lt;String\u0026gt; list) {\n    if (list.isEmpty()) return;\n    System.out.println(\"Processing\");\n    for (String s : list) {\n      System.out.println(\"String: \" + s);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Enable the \u003cb\u003eUse righthand type\u003c/b\u003e checkbox below\n  to prevent weakening the left side of assignments when the right side is not\n  a type cast or a new expression. When storing the result of a method call in a variable, it is\n  useful to retain the type of the method call result instead of unnecessarily weakening it.\n\u003c/p\u003e\n\u003cp\u003e\n  Enable the \u003cb\u003eUse parameterized type\u003c/b\u003e checkbox below\n  to use the parameterized type of the collection as the weakest type when\n  the object evaluated is used as an argument to a collection method with a parameter type of\n  \u003ccode\u003ejava.lang.Object\u003c/code\u003e.\n  Use this option to prevent weakening to \u003ccode\u003eObject\u003c/code\u003e when passing an object to the  following collection methods:\n  \u003ccode\u003eget()\u003c/code\u003e, \u003ccode\u003eremove()\u003c/code\u003e,\n  \u003ccode\u003econtains()\u003c/code\u003e, \u003ccode\u003eindexOf()\u003c/code\u003e,\n  \u003ccode\u003elastIndexOf()\u003c/code\u003e, \u003ccode\u003econtainsKey()\u003c/code\u003e and \u003ccode\u003econtainsValue()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Enable the \u003cb\u003eDo not weaken to Object\u003c/b\u003e checkbox below\n  to specify whether a type should be weakened to \u003ccode\u003ejava.lang.Object\u003c/code\u003e.\n  Weakening to \u003ccode\u003ejava.lang.Object\u003c/code\u003e is rarely very useful.\n\u003c/p\u003e\n\u003cp\u003e\n  Enable the \u003cb\u003eOnly weaken to an interface\u003c/b\u003e checkbox below\n  to only report a problem when the type can be weakened to an interface type.\n\u003c/p\u003e\n\u003cp\u003e\n  Enable the \u003cb\u003eDo not weaken return type\u003c/b\u003e checkbox below\n  to prevent reporting a problem when the return type may be weakened.\n  Only variables will be analyzed.\n\u003c/p\u003e\n\u003cp\u003e\n  Enable the \u003cb\u003eDo not suggest weakening variable declared as \u0027var\u0027\u003c/b\u003e checkbox below\n  to prevent reporting on local variables declared using the \u0027var\u0027 keyword (Java 10+)\n\u003c/p\u003e\n\u003cp\u003e\n\u003cb\u003eStop classes\u003c/b\u003e are intended to prevent weakening to classes\nlower than stop classes, even if it is possible.\nIn some cases, this may improve readability.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "PublicMethodNotExposedInInterface",
          "displayName": "\u0027public\u0027 method not exposed in interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003epublic\u003c/code\u003e methods in classes\nwhich are not exposed in an interface.\n\u003cp\u003eExposing all \u003ccode\u003epublic\u003c/code\u003e methods via an interface is important for\n  maintaining loose coupling, and may be necessary for certain component-based programming styles.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\ninterface Person {\n  String getName();\n}\n\nclass PersonImpl implements Person {\n  private String name;\n\n  // ok: method is exposed in interface\n  @Override\n  public String getName() {\n    return name;\n  }\n\n  // warning: method is public\n  // but not exposed in interface\n  public void setName() {\n    this.name \u003d name;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore if annotated by\u003c/b\u003e list to specify special annotations. Methods annotated with one of\nthese annotations will be ignored by this inspection.\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore if the containing class does not implement a non-library interface\u003c/b\u003e option to ignore methods from classes which do not\nimplement any interface from the project.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OverlyStrongTypeCast",
          "displayName": "Overly strong type cast",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports type casts that are overly strong. For instance,\ncasting an object to \u003ccode\u003eArrayList\u003c/code\u003e when casting it to\n\u003ccode\u003eList\u003c/code\u003e would do just as well.\n\u003cp\u003e\n  \u003cb\u003eNote:\u003c/b\u003e much like the \u003ci\u003eRedundant type cast\u003c/i\u003e\n  inspection, applying the fix for this inspection may change the semantics of your program if you are\n  intentionally using an overly strong cast to cause a \u003ccode\u003eClassCastException\u003c/code\u003e to be generated.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface Super {\n    void doSmth();\n  }\n  interface Sub extends Super { }\n\n  void use(Object obj) {\n    // Warning: ((Super)obj).doSmth() could be used\n    ((Sub)obj).doSmth();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the checkbox below to ignore casts when there\u0027s a matching \u003ccode\u003einstanceof\u003c/code\u003e check in the code.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OptionalUsedAsFieldOrParameterType",
          "displayName": "\u0027Optional\u0027 used as field or parameter type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any cases in which \u003ccode\u003ejava.util.Optional\u0026lt;T\u0026gt;\u003c/code\u003e, \u003ccode\u003ejava.util.OptionalDouble\u003c/code\u003e, \u003ccode\u003ejava.util.OptionalInt\u003c/code\u003e,\n\u003ccode\u003ejava.util.OptionalLong\u003c/code\u003e, or \u003ccode\u003ecom.google.common.base.Optional\u003c/code\u003e are used as types for fields or parameters.\n\u003cp\u003e\u003ccode\u003eOptional\u003c/code\u003e was designed to provide a limited mechanism for library method return types in which a clear way to represent \"no result\"\n  was needed.\u003c/p\u003e\n\u003cp\u003eUsing a field with the \u003ccode\u003ejava.util.Optional\u003c/code\u003e type is also problematic if the class needs to be\n  \u003ccode\u003eSerializable\u003c/code\u003e, as \u003ccode\u003ejava.util.Optional\u003c/code\u003e is not serializable.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyClass {\n    Optional\u0026lt;String\u0026gt; name; // Optional field\n\n    // Optional parameter\n    void setName(Optional\u0026lt;String\u0026gt; name) {\n      this.name \u003d name;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InstanceofThis",
          "displayName": "\u0027instanceof\u0027 check for \u0027this\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003einstanceof\u003c/code\u003e or \u003ccode\u003egetClass() \u003d\u003d SomeClass.class\u003c/code\u003e in which a\n\u003ccode\u003ethis\u003c/code\u003e expression is checked.\n\u003cp\u003eSuch expressions indicate a failure of the object-oriented design, and should be replaced by\n  polymorphic constructions.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass Super {\n  void process() {\n    if (this instanceof Sub) { // warning\n      doSomething();\n    } else {\n      doSomethingElse();\n    }\n  }\n}\n  \nclass Sub extends Super {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo fix the problem, use an overriding method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass Super {\n  void process() {\n    doSomethingElse();\n  }\n}\n  \nclass Sub extends Super {\n  @Override\n  void process() {\n    doSomething();\n  }\n}  \n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FeatureEnvy",
          "displayName": "Feature envy",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the \u003cem\u003eFeature Envy\u003c/em\u003e code smell. The warning is thrown when a method calls methods on another class three\nor more times. Calls to library classes, parent classes, contained or containing\nclasses are not counted by this inspection. Feature\nenvy is often an indication of the fact that this functionality is located in a wrong class.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class JobManager {\n    // Warning: this method calls three methods\n    // of the Job class\n    // It would be better to move this chain of\n    // calls to the Job class itself.\n    void performJob(Job job) {\n      job.beforeStart();\n      job.process();\n      job.afterProcessing();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InterfaceMethodClashesWithObject",
          "displayName": "Interface method clashes with method in \u0027Object\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports interface methods that clash with the \u003cb\u003eprotected\u003c/b\u003e methods \u003ccode\u003eclone()\u003c/code\u003e and \u003ccode\u003efinalize()\u003c/code\u003e from the \u003ccode\u003ejava.lang.Object\u003c/code\u003e class.\n\u003cp\u003eIn an interface, it is possible to declare these methods with a return type that is incompatible with the \u003ccode\u003ejava.lang.Object\u003c/code\u003e methods.\n  A class that implements such an interface will not be compilable.\n  When the interface is functional, it remains possible to create a lambda from it, but this is not recommended.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Warning: this interface cannot be implemented\n  // by any class, only by a lambda or method reference\n  interface MyInterface {\n    double clone();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "PostgreSQL",
      "inspections": [
        {
          "shortName": "PgSelectFromProcedureInspection",
          "displayName": "Postgres: Select from procedure call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example,\n  \u003ccode\u003eAS t1(s VARCHAR)\u003c/code\u003e).\n  \u003cp\u003eThis requirement does not apply to scalar functions.\u003c/p\u003e\n\u003cp\u003eExample (PostgreSQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\nSELECT 1;\n$$ LANGUAGE sql;\nSELECT * FROM produce_a_table() AS s (c1 INT);\nSELECT * FROM produce_a_table() AS s (c1);\nSELECT * FROM DBLINK(\u0027dbname\u003dmydb\u0027, \u0027SELECT proname, prosrc FROM pg_proc\u0027) AS t1;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eAS s (c1 INT)\u003c/code\u003e has a typed alias, while \u003ccode\u003eAS s (c1)\u003c/code\u003e and \u003ccode\u003eAS t1\u003c/code\u003e do not.\n  In this case, the second call of \u003ccode\u003eproduce_a_table()\u003c/code\u003e and \u003ccode\u003eDBLINK()\u003c/code\u003e will be highlighted.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Declaration redundancy",
      "inspections": [
        {
          "shortName": "GroovyUnusedDeclaration",
          "displayName": "Unused declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports unused classes, methods and fields.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Department {\n      private Organization myOrganization;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere \u003ccode\u003eDepartment\u003c/code\u003e explicitly references \u003ccode\u003eOrganization\u003c/code\u003e but if \u003ccode\u003eDepartment\u003c/code\u003e class itself is unused,\nthen inspection would report both classes. \n\n\u003cp\u003e\nThe inspection also reports parameters, which are not used by their methods and all method implementations/overriders, as well as local\nvariables, which are declared but not used.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eFor more information, see the same inspection in Java.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "UnterminatedStatementJS",
          "displayName": "Unterminated statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a statement without a semicolon or a newline at the end.\n\u003cp\u003eSelect the \u0027Terminate statements with semicolons\u0027 option in \u003ci\u003eEditor | Code Style | JavaScript or TypeScript - Punctuation\u003c/i\u003e to report any statement that doesn\u0027t end with a semicolon, even if a newline is used.\nAccording to  some coding styles, semicolons are preferred to line-breaks for consistency with the other languages.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ChainedEqualityJS",
          "displayName": "Chained equality",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a chained equality comparison (i.e. \u003ccode\u003ea\u003d\u003db\u003d\u003dc\u003c/code\u003e).  Such comparisons are confusing.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestedFunctionCallJS",
          "displayName": "Nested function call",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function call that is used as an argument in another function call, for example, \u003ccode\u003efoo(bar())\u003c/code\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonBlockStatementBodyJS",
          "displayName": "Statement body without braces",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, or \u003ccode\u003ewith\u003c/code\u003e statements whose body is not a block statement.  Using code block in statement bodies is usually safer for downstream maintenance.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSUndefinedPropertyAssignment",
          "displayName": "Undefined property assignment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an assignment to a property that is not defined in the type of a variable. \u003cp\u003eExample: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n/**\n * @type {{ property1: string, property2: number }}\n */\nlet myVariable \u003d create();\n\nmyVariable.newProperty \u003d 3; // bad\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSArrowFunctionBracesCanBeRemoved",
          "displayName": "Redundant braces around arrow function body",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an arrow function whose body only consists of braces and exactly one statement.\nSuggests  converting to concise syntax without braces.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003ccode\u003e\n    let incrementer \u003d (x) \u003d\u003e {return x + 1};\n  \u003c/code\u003e\n\u003c/p\u003e\n\u003cp\u003eAfter the quick-fix is applied, the code fragment looks as follows:\u003c/p\u003e\n\u003cp\u003e\n  \u003ccode\u003e\n    let incrementer \u003d (x) \u003d\u003e x + 1;\n  \u003c/code\u003e\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantOnLHSOfComparisonJS",
          "displayName": "Constant on left side of comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConstantOnWrongSideOfComparison.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports a comparison operation with a constant value in the left-hand side. According to\ncoding conventions, constants should be in the right-hand side of comparisons.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSDeclarationsAtScopeStart",
          "displayName": "\u0027var\u0027 declared not at the beginning of a function",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nChecks that declarations of local variables declared with \u003cb\u003evar\u003c/b\u003e are at the top of a function scope.\n\u003cbr/\u003e\u003cbr/\u003e\nBy default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed.\nTherefore, declaring them at the top of the scope helps represent this behavior in the code.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ChainedFunctionCallJS",
          "displayName": "Chained function call",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a function call whose target is another function call, for example, \u003ccode\u003efoo().bar()\u003c/code\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantOnRHSOfComparisonJS",
          "displayName": "Constant on right side of comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003c!-- Copied from community/plugins/InspectionGadgets/src/inspectionDescriptions/ConstantOnWrongSideOfComparison.html --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports a comparison operation with a constant in the right-hand side. According to \ncoding conventions, constants should only be in the left-hand side of comparisons.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSRemoveUnnecessaryParentheses",
          "displayName": "Unnecessary parentheses",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant parentheses.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eIn expressions:\u003c/p\u003e\n\u003ccode\u003evar x \u003d ((1) + 2) + 3\u003c/code\u003e\n\u003cp\u003eIn arrow function argument lists:\u003c/p\u003e\n\u003ccode\u003evar incrementer \u003d (x) \u003d\u003e x + 1\u003c/code\u003e\n\n\u003cp\u003eIn TypeScript and Flow type declarations:\u003c/p\u003e\n\u003ccode\u003etype Card \u003d (Suit \u0026 Rank) | (Suit \u0026 Number)\u003c/code\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Structural search",
      "inspections": [
        {
          "shortName": "SSBasedInspection",
          "displayName": "Structural search inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eAllows configuring \u003cb\u003eStructural Search/Structural Replace\u003c/b\u003e templates that you can apply to the file you are editing.\n\u003c/p\u003e\n\u003cp\u003eAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the \u003cb\u003eStructural Replace\u003c/b\u003e pattern as well, the corresponding replace option will be available as a quick-fix.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Android Lint: Testing",
      "inspections": [
        {
          "shortName": "AndroidLintIgnoreWithoutReason",
          "displayName": "@Ignore without Reason",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003e@Ignore without Reason\u003cbr\u003e\u003cbr\u003eIgnoring a test without a reason makes it difficult to figure out the problem later. Please define an explicit reason why it is ignored, and when it can be resolved.\u003cbr\u003e\u003cbr\u003eIssue id: IgnoreWithoutReason\u003cbr\u003e\u003cbr\u003eAvailable options:\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cb\u003eallow-comments\u003c/b\u003e (default is true):\u003cbr/\u003e\nWhether to allow a comment next to the @Ignore tag to be considered providing a reason.\u003cbr/\u003e\n\u003cbr/\u003e\nNormally you have to specify an annotation argument to the \u003ccode\u003e@Ignore\u003c/code\u003e annotation, but with this option you can configure whether it should also allow ignore reasons to specified by a comment adjacent to the ignore tag.\u003cbr/\u003e\n\u003cbr/\u003e\nTo configure this option, use a \u003ccode\u003elint.xml\u003c/code\u003e file with an \u0026lt;option\u003e like this:\u003cbr/\u003e\n\n\u003cpre\u003e\n\u0026lt;lint\u003e\n    \u0026lt;issue id\u003d\"IgnoreWithoutReason\"\u003e\n        \u0026lt;option name\u003d\"allow-comments\" value\u003d\"true\" /\u003e\n    \u0026lt;/issue\u003e\n\u0026lt;/lint\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Language injection",
      "inspections": [
        {
          "shortName": "UnknownLanguage",
          "displayName": "Unknown Language ID",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports when the ID of the language used in a \u003ccode\u003e@Language\u003c/code\u003e annotation is unknown.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Language(\"HMTL\") String html;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "InjectionNotApplicable",
          "displayName": "Injection Annotation not applicable",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports when a \u003ccode\u003e@Language\u003c/code\u003e annotation is applied to an element with a type other than \u003ccode\u003eString\u003c/code\u003e or \u003ccode\u003eString[]\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Language(\"HTML\") \u003cb\u003eint\u003c/b\u003e i;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eint\u003c/b\u003e i;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "LanguageMismatch",
          "displayName": "Language mismatch",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports when the language of a reference does not match the expected language of the usage context.\n\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @Language(\"JavaScript\")\n  String JS_CODE \u003d \"var x;\";\n\n  @Language(\"XPath\")\n  String XPATH_CODE \u003d JS_CODE; // warning here\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Application servers",
      "inspections": [
        {
          "shortName": "Glassfish",
          "displayName": "GlassFish",
          "defaultSeverity": "ERROR",
          "pluginId": "GlassFish",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright (c) 2004 - 2009 by Fuhrer Engineering AG, CH-2504 Biel/Bienne, Switzerland --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect GlassFish-specific XML deployment descriptors:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/cd/E26576_01/doc.312/e24929/dd-files.htm#GSDPG00078\"\u003eglassfish-web.xml\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/cd/E26576_01/doc.312/e24929/dd-files.htm#GSDPG00077\"\u003eglassfish-application.xml\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/cd/E26576_01/doc.312/e24929/dd-files.htm#GSDPG00079\"\u003eglassfish-ejb-jar.xml\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSome of the reported issues are:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eReferences to non-instantiable classes\u003c/li\u003e\n  \u003cli\u003eReferences to classes that do not extend a required class\u003c/li\u003e\n  \u003cli\u003eEmpty tag and attribute values\u003c/li\u003e\n  \u003cli\u003eTags that do not include required children tags or attributes\u003c/li\u003e\n  \u003cli\u003eTags that define objects with duplicate names\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "JBoss",
          "displayName": "JBoss/WildFly",
          "defaultSeverity": "ERROR",
          "pluginId": "JBoss",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright (c) 2004 - 2009 by Fuhrer Engineering AG, CH-2504 Biel/Bienne, Switzerland --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect JBoss-specific XML deployment descriptors:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ejboss-web.xml\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejboss-app.xml\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejboss.xml\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSome of the reported issues are:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eReferences to non-instantiable classes\u003c/li\u003e\n  \u003cli\u003eReferences to classes that do not extend a required class\u003c/li\u003e\n  \u003cli\u003eEmpty tag and attribute values\u003c/li\u003e\n  \u003cli\u003eTags that do not include required children tags or attributes\u003c/li\u003e\n  \u003cli\u003eTags that define objects with duplicate names\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "MySQL",
      "inspections": [
        {
          "shortName": "MysqlLoadDataPathInspection",
          "displayName": "LOAD statement path",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "MySQL based",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports paths that start with the tilde character in LOAD statements.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCREATE TABLE table_name (id int);\nLOAD DATA LOCAL INFILE \u0027~/Documents/some_file.txt\u0027\nINTO TABLE table_name FIELDS TERMINATED BY \u0027,\u0027 LINES TERMINATED BY \u0027\\n\u0027\nIGNORE 1 LINES;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstead of the tilde character, use a full path to the file.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MysqlSpaceAfterFunctionNameInspection",
          "displayName": "Whitespace between the function name and the open parenthesis",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "MySQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default.\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eSELECT MAX (qty) FROM orders;\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MysqlParsingInspection",
          "displayName": "Unsupported syntax in pre-8.0 versions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "231.9011.34",
          "language": "MySQL based",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports invalid usages of UNION in queries.\n\u003cp\u003eThe inspection works in MySQL versions that are earlier than 8.0.\u003c/p\u003e\n\u003cp\u003eExample (MySQL):\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nSELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "RegExp",
      "inspections": [
        {
          "shortName": "CustomRegExpInspection",
          "displayName": "Custom RegExp inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nCustom Regex Inspection\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpDuplicateCharacterInClass",
          "displayName": "Duplicate character in character class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicate characters inside a RegExp character class.\nDuplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  [aabc]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  [abc]\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpRedundantClassElement",
          "displayName": "Redundant \u0027\\d\u0027, \u0027[:digit:]\u0027, or \u0027\\D\u0027 class elements",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant \u003ccode\u003e\\d\u003c/code\u003e or \u003ccode\u003e[:digit:]\u003c/code\u003e that are used in one class with \u003ccode\u003e\\w\u003c/code\u003e or \u003ccode\u003e[:word:]\u003c/code\u003e\n(\u003ccode\u003e\\D\u003c/code\u003e with \u003ccode\u003e\\W\u003c/code\u003e) and can be removed.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  [\\w\\d]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  [\\w]\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.2\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpSimplifiable",
          "displayName": "Regular expression can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports regular expressions that can be simplified.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  [a] xx* [ah-hz]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a x+ [ahz]\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpRedundantNestedCharacterClass",
          "displayName": "Redundant nested character class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary nested character classes.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  [a-c[x-z]]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  [a-cx-z]\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.2\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpRedundantEscape",
          "displayName": "Redundant character escape",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning.\nMany escape sequences that are necessary outside of a character class are redundant inside square brackets \u003ccode\u003e[]\u003c/code\u003e of a character class.\n\u003cp\u003e\n  Although unescaped opening curly braces \u003ccode\u003e{\u003c/code\u003e outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\n  it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\n  For this reason the inspection does not report escaped opening curly braces.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \\-\\;[\\.]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  -;[.]\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\nThe \u003cb\u003eIgnore escaped closing brackets \u0027}\u0027 and \u0027]\u0027\u003c/b\u003e option specifies whether to report \u003ccode\u003e\\}\u003c/code\u003e and \u003ccode\u003e\\]\u003c/code\u003e outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\u003cp\u003e\u003csmall\u003eNew in 2017.3\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpUnnecessaryNonCapturingGroup",
          "displayName": "Unnecessary non-capturing group",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary non-capturing groups, which have no influence on the match result.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Everybody be cool, (?:this) is a robbery!\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Everybody be cool, this is a robbery!\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2021.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpEmptyAlternationBranch",
          "displayName": "Empty branch in alternation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty branches in a RegExp alternation.\nAn empty branch will only match the empty string, and in most cases that is not what is desired.\nThis inspection will not report a single empty branch at the start or the end of an alternation.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  (alpha||bravo)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  (alpha|bravo)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpRepeatedSpace",
          "displayName": "Consecutive spaces",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports multiple consecutive spaces in a RegExp.\nBecause spaces are not visible by default, it can be hard to see how many spaces are required.\nThe RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  (     )\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ( {5})\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003csmall\u003eNew in 2017.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpSuspiciousBackref",
          "displayName": "Suspicious back reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports back references that will not be resolvable at runtime.\nThis means that the back reference can never match anything.\nA back reference will not be resolvable when the group is defined after the back reference,\nor if the group is defined in a different branch of an alternation.\n\u003cp\u003e\u003cb\u003eExample of a group defined after its back reference:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \\1(abc)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cb\u003eExample of a group and a back reference in different branches:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a(b)c|(xy)\\1z\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpDuplicateAlternationBranch",
          "displayName": "Duplicate branch in alternation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports duplicate branches in a RegExp alternation.\nDuplicate branches slow down matching and obscure the intent of the expression.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  (alpha|bravo|charlie|alpha)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  (alpha|bravo|charlie)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpOctalEscape",
          "displayName": "Octal escape",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports octal escapes, which are easily confused with back references.\nUse hexadecimal escapes to avoid confusion.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \\07\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \\x07\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpAnonymousGroup",
          "displayName": "Anonymous capturing group or numeric back reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports anonymous capturing groups and numeric back references in a RegExp.\nThese are only reported when the RegExp dialect supports named group and named group references.\nNamed groups and named back references improve code readability and are recommended to use instead.\nWhen a capture is not needed, matching can be more performant and use less memory by using a non-capturing group,\ni.e. \u003ccode\u003e(?:xxx)\u003c/code\u003e instead of \u003ccode\u003e(xxx)\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  (\\d\\d\\d\\d)\\1\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA better regex pattern could look like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  (?\u0026lt;quad\u003e\\d\\d\\d\\d)\\k\u0026lt;quad\u003e\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpEscapedMetaCharacter",
          "displayName": "Escaped meta character",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports escaped meta characters.\nSome RegExp coding styles specify that meta characters should be placed inside a character class,\nto make the regular expression easier to understand.\nThis inspection does not warn about the meta character \u003ccode\u003e[\u003c/code\u003e, \u003ccode\u003e]\u003c/code\u003e and \u003ccode\u003e^\u003c/code\u003e,\nbecause those would need additional escaping inside a character class.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \\d+\\.\\d+\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \\d+[.]\\d+\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpUnexpectedAnchor",
          "displayName": "Begin or end anchor in unexpected position",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003e^\u003c/code\u003e or \u003ccode\u003e\\A\u003c/code\u003e anchors not at the beginning of the pattern and\n\u003ccode\u003e$\u003c/code\u003e, \u003ccode\u003e\\Z\u003c/code\u003e or \u003ccode\u003e\\z\u003c/code\u003e anchors not at the end of the pattern.\nIn the wrong position these RegExp anchors prevent the pattern from matching anything.\nIn case of the \u003ccode\u003e^\u003c/code\u003e and \u003ccode\u003e$\u003c/code\u003e anchors, most likely the literal character was meant and the escape forgotten.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  (Price $10)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003csmall\u003eNew in 2018.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RegExpSingleCharAlternation",
          "displayName": "Single character alternation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports single char alternation in a RegExp.\nIt is simpler to use a character class instead.\nThis may also provide better matching performance.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  a|b|c|d\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  [abcd]\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003csmall\u003eNew in 2017.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Visibility",
      "inspections": [
        {
          "shortName": "Java9ModuleExportsPackageToItself",
          "displayName": "Module exports/opens package to itself",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports packages that are exported to, or opened in the same Java 9 module in which they are defined.\nThe quick-fix removes such directives from \u003ccode\u003emodule-info.java\u003c/code\u003e.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  module com.mycomp {\n    exports com.mycomp.main to com.mycomp;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  module main {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 9 or higher.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PublicConstructorInNonPublicClass",
          "displayName": "\u0027public\u0027 constructor in non-public class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003epublic\u003c/code\u003e constructors in non-\u003ccode\u003epublic\u003c/code\u003e classes.\n\u003cp\u003eUsually, there is no reason for creating a \u003ccode\u003epublic\u003c/code\u003e constructor in a class with a lower access level.\n  Please note, however, that this inspection changes the behavior of some reflection calls. In particular,\n  \u003ccode\u003eClass.getConstructor()\u003c/code\u003e won\u0027t be able to find the updated constructor\n  (\u003ccode\u003eClass.getDeclaredConstructor()\u003c/code\u003e should be used instead). Do not use the inspection if your code\n  or code of some used frameworks relies on constructor accessibility via \u003ccode\u003egetConstructor()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class House {\n    public House() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class House {\n    House() {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodOverridesInaccessibleMethodOfSuper",
          "displayName": "Method overrides inaccessible method of superclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods with the same signature as an inaccessible method of a superclass,\nfor example, a private method, or a package-private method of a superclass in another package.\n\u003cp\u003e\n  Such method names may be confusing because the method in the subclass may look like an override when in fact\n  it hides the inaccessible method of the superclass.\n  Moreover, if the visibility of the method in the superclass changes later,\n  it may either silently change the semantics of the subclass or cause a compilation error.\n\u003c/p\u003e\n\u003cp\u003eA quick-fix is suggested to rename the method.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Super {\n    private void test() {\n    }\n  }\n\n  public class Sub extends Super {\n    void test() { // making \u0027Super.test()\u0027 public causes a compilation error\n                  // making \u0027Super.test()\u0027 package-private makes \u0027Sub.test()\u0027 an override\n    }\n  }\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LocalVariableHidingMemberVariable",
          "displayName": "Local variable hides field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables named identically to a field of a surrounding class.\nAs a result of such naming, you may accidentally use the variable where the identically named field is intended.\n\u003cp\u003eA quick-fix is suggested to rename the variable.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Foo {\n    public Object foo;\n\n    void bar() {\n      Object o \u003d new Object() {\n        void baz() {\n          Object foo; // Local variable \u0027foo\u0027 hides field in class \u0027Foo\u0027\n        }\n      };\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  You can configure the following options for this inspection:\n\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003eIgnore non-accessible fields\u003c/strong\u003e - ignore local variables named identically to superclass fields\n    that are not visible (for example, because they are private).\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003eIgnore local variables in a static context hiding non-static fields\u003c/strong\u003e -\n    for example when the local variable is inside a static method or inside a method which is inside a static inner class.\n  \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AmbiguousFieldAccess",
          "displayName": "Access to inherited field looks like access to element from surrounding code",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports access to a superclass field from an anonymous, inner or local class,\nif a local variable, parameter, or field with the same name is available in the code surrounding the class.\nIn this case it may seem that an element from the surrounding code is accessed,\nwhen in fact it is an access to a field from the superclass.\n\u003cp\u003e\n  To clarify the intent of the code, it is recommended to add an explicit\n  \u003ccode\u003esuper\u003c/code\u003e qualifier to the field access.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    class First {\n      protected String ambiguous;\n    }\n    class Second {\n      void foo(String ambiguous) {\n        new First() {\n          {\n            System.out.println(ambiguous); // the field is accessed, not the parameter\n          }\n        };\n      }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    class First {\n      protected String ambiguous;\n    }\n    class Second {\n      void foo(String ambiguous) {\n        new First() {\n          {\n            System.out.println(super.ambiguous);\n          }\n        };\n      }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ParameterHidingMemberVariable",
          "displayName": "Parameter hides field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method parameters named identically to a field of a surrounding class.\nAs a result of such naming, you may accidentally use the parameter when using the identically named field is intended.\n\u003cp\u003eA quick-fix is suggested to rename the parameter.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    private String value;\n\n    public Main(String value) {\n      value \u003d value.toUpperCase();\n    }\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  You can configure the following options for this inspection:\n\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\n    \u003cstrong\u003eIgnore for property setters\u003c/strong\u003e - ignore parameters of simple setters.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cstrong\u003eIgnore superclass fields not visible from subclass\u003c/strong\u003e - ignore \u003ccode\u003eprivate\u003c/code\u003e\n    fields in a superclass, which are not visible from the method.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cstrong\u003eIgnore for constructors\u003c/strong\u003e - ignore parameters of constructors.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cstrong\u003eIgnore for abstract methods\u003c/strong\u003e - ignore parameters of abstract methods.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cstrong\u003eIgnore for static method parameters hiding instance fields\u003c/strong\u003e - ignore parameters\n    of \u003ccode\u003estatic\u003c/code\u003e methods hiding an instance field and to ignore parameters of instance methods in static inner\n    classes hiding an instance field of an outer class. While not strictly hiding, such parameters can still be confusing.\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodOverridesStaticMethod",
          "displayName": "Method tries to override \u0027static\u0027 method of superclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003estatic\u003c/code\u003e methods with a signature identical to a \u003ccode\u003estatic\u003c/code\u003e method of a superclass.\nSuch a method may look like an override when in fact it hides the method from the superclass because\n\u003ccode\u003estatic\u003c/code\u003e methods in Java cannot be overridden.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Parent {\n    static void method(){}\n  }\n\n  class Example extends Parent {\n    static void method(){} //warning\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AnonymousClassVariableHidesContainingMethodVariable",
          "displayName": "Anonymous class variable hides variable in containing method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields in an anonymous class that are named identically to local variables or parameters of\nthe containing method or lambda expression.\n\u003cp\u003e\n  As a result of such naming, you may accidentally use the anonymous class field where\n  the identically named variable or parameter from the containing method is intended.\n\u003c/p\u003e\n\u003cp\u003eA quick-fix is suggested to rename the field.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Test {\n    public Test(String value) {\n      Object foo \u003d new Object() {\n        private String value \u003d \"TEST\";\n        public void foo() {\n          System.out.println(value); //the field is accessed, not the parameter\n        }\n      };\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassEscapesItsScope",
          "displayName": "Non-accessible class is exposed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of classes in a field or method signature when a class in a signature is less visible than the member itself.\nWhile legal Java, such members are useless outside of the visibility scope.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003epublic\u003c/code\u003e method which returns a \u003ccode\u003eprivate\u003c/code\u003e inner \u003ccode\u003eclass\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eprotected\u003c/code\u003e field whose type is a package-local \u003ccode\u003eclass\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\nIn Java 9, a module may hide some of its classes by excluding their packages from export.\nSo, if the signature of exported API contains a non-exported class, such an API is useless outside of the module.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eModule\u0027s API exposes not exported classes (Java 9+)\u003c/b\u003e option to report about the module API\n    that exposes unexported classes.\u003cbr\u003eNote that the option works if the language level of the project or module is 9 or higher.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003ePublic API exposes non-accessible classes\u003c/b\u003e option to report about a public API\n    that exposes non-accessible classes.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003ePackage-local API exposes private classes\u003c/b\u003e option to report about package-local API\n    that exposes \u003ccode\u003eprivate\u003c/code\u003e classes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InnerClassVariableHidesOuterClassVariable",
          "displayName": "Inner class field hides outer class field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports inner class fields named identically to a field of a surrounding class.\nAs a result of such naming, you may accidentally use the field from the inner class\nwhen using the identically named field of a surrounding class is intended.\n\u003cp\u003eA quick-fix is suggested to rename the inner class field.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Outer {\n    private String name;\n\n    class Inner {\n      private String name;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to choose whether this inspection should report all name clashes,\n  or only clashes with fields that are visible from the inner class.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "LambdaParameterHidingMemberVariable",
          "displayName": "Lambda parameter hides field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lambda parameters named identically to a field of a surrounding class.\nAs a result of such naming, you may accidentally use the lambda parameter when using the identically named field is intended.\n\u003cp\u003eA quick-fix is suggested to rename the lambda parameter.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class MyClass {\n    public Object foo;\n\n    void sort(List\u0026lt;Integer\u0026gt; list) {\n      list.sort((foo, bar) -\u003e foo - bar);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to choose whether to ignore fields that are not visible from the lambda expression.\n  For example, private fields of a superclass.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MethodOverloadsParentMethod",
          "displayName": "Possibly unintended overload of method from superclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instance methods with the same name and the same number of parameters as a method in a superclass,\nbut where at least one of the parameters is of a different incompatible type.\n\u003cp\u003e\n  In this case, the method in a subclass will be overloading the method from the superclass\n  instead of overriding it. If it is unintended, it may result in latent bugs.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Foo {\n    void foo(int x) {}\n  }\n\n  public class Bar extends Foo {\n    void foo(Number x) {} // Method \u0027foo()\u0027 overloads a compatible method of a superclass,\n                          // when overriding might have been intended\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to choose whether the inspection should also report cases where parameter types are not compatible.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FieldHidesSuperclassField",
          "displayName": "Subclass field hides superclass field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields in a derived class that are named identically a field of a superclass.\nJava fields cannot be overridden in derived classes,\nso the field in the derived class will hide the field from the superclass.\n\u003cp\u003e\n  As a result of such naming, you may accidentally use the field of the derived class\n  where the identically named field of a base class is intended.\n\u003c/p\u003e\n\u003cp\u003eA quick-fix is suggested to rename the field in the derived class.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass Parent {\n  Parent parent;\n}\nclass Child extends Parent {\n  Child parent;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  You can configure the following options for this inspection:\n\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e\n    \u003cstrong\u003eIgnore non-accessible fields\u003c/strong\u003e - indicates whether this inspection should report all name clashes,\n    or only clashes with fields which are visible from the subclass.\n  \u003c/li\u003e\n  \u003cli\u003e\n    \u003cstrong\u003eIgnore static fields hiding static fields\u003c/strong\u003e - ignore \u003ccode\u003estatic\u003c/code\u003e fields\n    which hide \u003ccode\u003estatic\u003c/code\u003e fields in base classes.\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PatternVariableHidesField",
          "displayName": "Pattern variable hides field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports pattern variables named identically to a field of a surrounding class.\nAs a result of such naming, you may accidentally use the pattern variable when using the identically named field is intended.\n\u003cp\u003e\n  A quick-fix is suggested to rename the variable.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Pointless {\n    Point p \u003d new Point();\n\n    public void test(Object a) {\n      if (a instanceof Point p) {\n        System.out.print(\"a is a point (\" + p.x + \", \" + p.y + \u0027)\u0027);\n      } else {\n        System.out.print(\"p is a point (\" + p.x + \", \" + p.y + \u0027)\u0027);\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TypeParameterHidesVisibleType",
          "displayName": "Type parameter hides visible type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports type parameters that have the same names as the visible types in the current scope. Such parameter names may be confusing.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  abstract class MyList\u0026lt;T\u0026gt; extends AbstractList\u0026lt;T\u0026gt; {\n    private List\u0026lt;T\u0026gt; elements;\n    // type parameter \u0027T\u0027 hides type parameter \u0027T\u0027\n    public \u0026lt;T\u0026gt; T[] toArray(T[] array) {\n        return elements.toArray(array);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Java9UndeclaredServiceUsage",
          "displayName": "Usage of service not declared in \u0027module-info\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports situations in which a service is loaded with \u003ccode\u003ejava.util.ServiceLoader\u003c/code\u003e but it isn\u0027t declared with the\n\u003ccode\u003euses\u003c/code\u003e clause in the \u003ccode\u003emodule-info.java\u003c/code\u003e file and suggests inserting it.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AmbiguousMethodCall",
          "displayName": "Call to inherited method looks like call to local method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to a superclass method from an anonymous, inner or local class,\nif a method with the same signature exists in the code surrounding the class.\nIn this case it may seem that a method from the surrounding code is called,\nwhen in fact it is a call to a method from the superclass.\n\u003cp\u003e\n  To clarify the intent of the code, it is recommended to add an explicit\n  \u003ccode\u003esuper\u003c/code\u003e qualifier to the method call.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Parent {\n    void ambiguous(){}\n  }\n\n  class Example {\n    void ambiguous(){}\n\n    class Inner extends Parent {\n      void example(){\n        ambiguous(); //warning\n      }\n    }\n  }\n  \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Parent {\n    void ambiguous(){}\n  }\n\n  class Example {\n    void ambiguous(){}\n\n    class Inner extends Parent {\n      void example(){\n        super.ambiguous();\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "InconsistentTextBlockIndent",
          "displayName": "Inconsistent whitespace indentation in text block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports text blocks that are indented using both spaces and tabs.\nSuch cases produce unexpected results since spaces and tabs are treated equally by the text block processing.\n\u003cp\u003eIn the following example, spaces and tabs are visualized as \u003ccode\u003e·\u003c/code\u003e and \u003ccode\u003e␉\u003c/code\u003e respectively,\nand a tab is equal to 4 spaces in the editor.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nString colors \u003d \"\"\"\n········red\n␉   ␉   green\n········blue\"\"\";\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter printing such a string, the result will be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n······red\ngreen\n······blue\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the compiler removes an equal amount of spaces or tabs from the beginning of each line,\nsome lines remain with leading spaces.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection only reports if the configured language level is 15 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2021.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Switch statement issues",
      "inspections": [
        {
          "shortName": "TextLabelInSwitchStatementJS",
          "displayName": "Text label in \u0027switch\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a labeled statement inside a \u003ccode\u003eswitch\u003c/code\u003e statement, which \noften results from a typo.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    \u003cb\u003eswitch\u003c/b\u003e(x)\n    {\n        \u003cb\u003ecase\u003c/b\u003e 1:\n        case2:   //typo!\n        \u003cb\u003ecase\u003c/b\u003e 3:\n            \u003cb\u003ebreak\u003c/b\u003e;\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSDuplicateCaseLabel",
          "displayName": "Duplicate \u0027case\u0027 label",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a duplicated \u003ccode\u003ecase\u003c/code\u003e label on a \u003ccode\u003eswitch\u003c/code\u003e statement, which normally indicates an error.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DefaultNotLastCaseInSwitchJS",
          "displayName": "\u0027default\u0027 not last case in \u0027switch\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003eswitch\u003c/code\u003e statement where the \u003ccode\u003edefault\u003c/code\u003e case\ncomes before another case instead of being the very last case, which may cause confusion.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSRedundantSwitchStatement",
          "displayName": "\u0027switch\u0027 statement is redundant and can be replaced",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003eswitch\u003c/code\u003e statement with an empty body, or with only one \u003ccode\u003ecase\u003c/code\u003e branch, or with a \u003ccode\u003edefault\u003c/code\u003e branch only.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSSwitchVariableDeclarationIssue",
          "displayName": "Variable is declared and being used in different \u0027case\u0027 clauses",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a variable that is declared in one \u003ccode\u003ecase\u003c/code\u003e clause of a \u003ccode\u003eswitch\u003c/code\u003e statement but is used in another \u003ccode\u003ecase\u003c/code\u003e\nclause of the same statement.\nFor block-scoped variables, this results in throwing a \u003ccode\u003eReferenceError\u003c/code\u003e.\nFor \u003ccode\u003evar\u003c/code\u003e variables, it indicates a potential error. \u003cp\u003eDisable the inspection for \u003ccode\u003evar\u003c/code\u003e variables if this pattern is used intentionally.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NestedSwitchStatementJS",
          "displayName": "Nested \u0027switch\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003eswitch\u003c/code\u003e statement that is\nnested in another \u003ccode\u003eswitch\u003c/code\u003e statement.  Nested \u003ccode\u003eswitch\u003c/code\u003e statements may be\nvery confusing, particularly if indenting is inconsistent.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSMissingSwitchDefault",
          "displayName": "\u0027switch\u0027 statement has no \u0027default\u0027 branch",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003eswitch\u003c/code\u003e statement without a \u003ccode\u003edefault\u003c/code\u003e clause when some possible values are not enumerated.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSMissingSwitchBranches",
          "displayName": "\u0027switch\u0027 statement has missing branches",
          "defaultSeverity": "INFORMATION",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003eswitch\u003c/code\u003e statement on a variable of the type \u003ccode\u003eenum\u003c/code\u003e or \u003ccode\u003eunion\u003c/code\u003e when the statement doesn\u0027t cover some value options from the type.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JSUnreachableSwitchBranches",
          "displayName": "Unreachable \u0027case\u0027 branch of a \u0027switch\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an unreachable \u003ccode\u003ecase\u003c/code\u003e branch of a \u003ccode\u003eswitch\u003c/code\u003e statement. \u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n/**\n * @param {(\u0027foo\u0027 | \u0027bar\u0027)} p\n */\nfunction foo(p) {\n    switch (p) {\n        case \u0027foo\u0027: break;\n        case \u0027bar\u0027: break;\n        case \u0027baz\u0027: break; // unreachable\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "FallThroughInSwitchStatementJS",
          "displayName": "Fallthrough in \u0027switch\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "JavaScript",
          "pluginVersion": "231.9011.34",
          "language": "JavaScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a \u003ccode\u003eswitch\u003c/code\u003e statement where control can proceed from a branch to the next one.  Such \"fall-through\" often\nindicates an error, for example, a missing \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003ereturn\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "OpenAPI specifications",
      "inspections": [
        {
          "shortName": "SwJsonMaybeSpecificationInspection",
          "displayName": "Possible OpenAPI/Swagger specification candidate",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.swagger",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nDetects JSON files that can be interpreted as a part of OpenAPI/Swagger specification.\n\u003cp\u003e\n  Such files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003cp\u003e\n  The following example contains two files located in the same directory. First one is a plain primary specification file.\n  Second is referenced from the first one and thus is suggested to be considered a specification too.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003ePrimary specification file `openapi.yaml`:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nopenapi: 3.1.0\ncomponents:\n  schemas:\n    CustomSchema:\n      description: Custom schema object\n      properties:\n        foo:\n          $ref: \u0027common.components.json#/components/schemas/CommonSchema\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cb\u003eSpecification file candidate `common.components.json`:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n{\n  \"components\": { # \u0027Mark file as OpenAPI specification\u0027 highlighting\n    \"schemas\": {\n      \"CommonSchema\": {\n        \"description\": \"Common schema object reused in several specifications\"\n      }\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SwJsonUnresolvedReferencesInspection",
          "displayName": "Unresolved reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.swagger",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nDetects unresolved references in JSON specification files.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SwYamlUnresolvedReferencesInspection",
          "displayName": "Unresolved reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.swagger",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nDetects unresolved references in Yaml specification files.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SwYamlMaybeSpecificationInspection",
          "displayName": "Possible OpenAPI/Swagger specification candidate",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.swagger",
          "pluginVersion": "231.9011.34",
          "language": "yaml",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nDetects YAML files that can be interpreted as a part of OpenAPI/Swagger specification.\n\u003cp\u003e\n  Such files do not contain explicit specification attributes, but they are referenced from primary specification files located nearby.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003cp\u003e\n  The following example contains two files located in the same directory. First one is a plain primary specification file.\n  Second is referenced from the first one and thus is suggested to be considered a specification too.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003ePrimary specification file `openapi.yaml`:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nopenapi: 3.1.0\ncomponents:\n  schemas:\n    CustomSchema:\n      description: Custom schema object\n      properties:\n        foo:\n          $ref: \u0027common.components.yaml#/components/schemas/CommonSchema\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cb\u003eSpecification file candidate `common.components.yaml`:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\ncomponents: # \u0027Mark file as OpenAPI specification\u0027 highlighting\n  schemas:\n    CommonSchema:\n      description: Common schema object reused in several specifications\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Reactor",
      "inspections": [
        {
          "shortName": "UnfinishedStepVerifier",
          "displayName": "Unfinished StepVerifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports missing \u003ccode\u003eStepVerifier\u003c/code\u003e terminal calls.\u003c/p\u003e\n\u003cp\u003e\n  Initiating \u003ccode\u003ePublisher\u003c/code\u003e subscriptions and assertions requires calling a terminal verification method,\n  such as \u003ccode\u003everify()\u003c/code\u003e, \u003ccode\u003everifyComplete()\u003c/code\u003e, and so on.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nStepVerifier.create(Flux.just(1,2,3)).expectNext(1);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nStepVerifier.create(Flux.just(1,2,3)).expectNext(1).verifyComplete();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CallingSubscribeInNonBlockingScope",
          "displayName": "Calling \u0027subscribe\u0027 in \"reactive\" methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003esubscribe()\u003c/code\u003e calls in \"reactive\" methods.\u003c/p\u003e\n\u003cp\u003eMethods returning a \u003ccode\u003ePublisher\u003c/code\u003e type (including \u003ccode\u003eFlux\u003c/code\u003e and \u003ccode\u003eMono\u003c/code\u003e)\n  should not call the \u003ccode\u003esubscribe()\u003c/code\u003e method directly because it can break the reactive call chain.\u003c/p\u003e\n\u003cp\u003eInstead of using \u003ccode\u003esubscribe()\u003c/code\u003e, consider using composition operators like \u003ccode\u003eflatMap()\u003c/code\u003e,\n  \u003ccode\u003ezip()\u003c/code\u003e, \u003ccode\u003ethen()\u003c/code\u003e, and so on.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Flux\u0026lt;String\u0026gt; stringFlux(){\n    Flux\u0026lt;String\u0026gt; flux \u003d Flux.just(\"abc\");\n    flux.subscribe(); // \u0026lt;- blocking \u0027subscribe\u0027 call in non-blocking context\n    return flux;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReactorAutomaticDebugger",
          "displayName": "Unnecessary debug initialization",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.reactivestreams",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant \u003ccode\u003eReactorDebugAgent.init()\u003c/code\u003e calls.\u003c/p\u003e\n\u003cp\u003e\n  IDE can automatically initialize the Reactor Debug mode, so users don\u0027t need to call \u003ccode\u003eReactorDebugAgent.init()\u003c/code\u003e or\n  \u003ccode\u003eHooks.onOperatorDebug()\u003c/code\u003e explicitly.\n  \u003c/p\u003e\n\n  \u003cp\u003eAlso, calling both \u003ccode\u003eReactorDebugAgent.init()\u003c/code\u003e and \u003ccode\u003eHooks.onOperatorDebug()\u003c/code\u003e causes doubled debugging stack frames\n  generated by Reactor.\n  \u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "DuplicatedCode",
          "displayName": "Duplicated code fragment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "Reports duplicated blocks of code from the selected scope: the same file, same module, dependent modules, or the entire project.\u003c!-- tooltip end --\u003e The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. When possible, the inspection provides a quick-fix to extract a method from the duplicated code.\n\nThe inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.\n\nYou can also configure the constructs that you want to anonymize in \u003ca href\u003d\"settings://duplicates.index\"\u003e Settings | Editor | Duplicates\u003c/a\u003e."
        },
        {
          "shortName": "LongLine",
          "displayName": "Line is longer than allowed by code style",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports lines that are longer than the \u003cb\u003eHard wrap at\u003c/b\u003e parameter specified in\n\u003ca href\u003d\"settings://preferences.sourceCode?Hard%20wrap%20at\"\u003eSettings | Editor | Code Style | General\u003c/a\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InconsistentLineSeparators",
          "displayName": "Inconsistent line separators",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports files with line separators different from the ones that are specified in the project\u0027s settings.\n\u003cp\u003eFor example, the inspection will be triggered if you set the line separator to \u003ccode\u003e\\n\u003c/code\u003e in\n  \u003ca href\u003d\"settings://preferences.sourceCode?Line%20separator\"\u003eSettings | Editor | Code Style | Line separator\u003c/a\u003e,\n  while the file you are editing uses \u003ccode\u003e\\r\\n\u003c/code\u003e as a line separator.\u003c/p\u003e\n\n\u003cp\u003eThe inspection also warns you about mixed line separators within a file.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "JavaAnnotator",
          "displayName": "Java annotator",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.qodana",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nAllows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReassignedToPlainText",
          "displayName": "Reassigned to plain text",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports files that were explicitly re-assigned to Plain Text File Type.\nThis association is unnecessary because the platform auto-detects text files by content automatically.\n\n\u003cp\u003eYou can dismiss this warning by removing the file type association\nin \u003cb\u003eSettings | Editor | File Types | Text\u003c/b\u003e.\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InjectedReferences",
          "displayName": "Injected references",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unresolved references injected by\n\u003ca href\u003d\"https://www.jetbrains.com/help/idea/using-language-injections.html\"\u003eLanguage Injections\u003c/a\u003e.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\n    @Language(\"file-reference\")\n    String fileName \u003d \"/home/user/nonexistent.file\"; // highlighted if file doesn\u0027t exist\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Annotator",
          "displayName": "Annotator",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run.\nThese kinds of issues are usually always highlighted when you open the file in the editor and can\u0027t be configured (unlike inspections).\nThe options below are controlling the analysis level of this inspection:\n\u003cul\u003e\n  \u003cli\u003eOption \"\u003cb\u003eHighlight syntax errors\u003c/b\u003e\" allows to report parser-related issues.\u003c/li\u003e\n  \u003cli\u003eOption \"\u003cb\u003eRun language annotators\u003c/b\u003e\" allows to report issues found by annotators configured for this language.\n    See \u003ca href\u003d\"https://plugins.jetbrains.com/docs/intellij/annotator.html\"\u003eCustom Language Support: Annotators\u003c/a\u003e for details.\u003c/li\u003e\n  \u003cli\u003eOption \"\u003cb\u003eRun language-specific highlight visitors\u003c/b\u003e\" allows to report issues inherent to this file language (e.g., type mismatches or unreported exceptions etc.).\n    See \u003ca href\u003d\"https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting\"\u003eCustom Language Support: Highlighting\u003c/a\u003e for details.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IncorrectFormatting",
          "displayName": "Incorrect formatting",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports formatting issues that appear if your code doesn\u0027t\n  follow your project\u0027s code style settings.\n\u003c/p\u003e\n\u003cp\u003e\n  This inspection is not compatible with languages that require\n  third-party formatters for code formatting, for example, Go or\n  C with CLangFormat enabled.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "TodoComment",
          "displayName": "TODO comment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003cb\u003eTODO\u003c/b\u003e comments in your code.\n\u003cp\u003eYou can configure the format for \u003cb\u003eTODO\u003c/b\u003e comments in \u003ca href\u003d\"settings://preferences.toDoOptions\"\u003eSettings | Editor | TODO\u003c/a\u003e.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eEnable the \u003cb\u003eOnly warn on TODO comments without any details\u003c/b\u003e option to only warn on empty TODO comments, that\n  don\u0027t provide any description on the task that should be done. Disable to report all TODO comments.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "QodanaServiceMessage",
          "displayName": "Qodana service message",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.qodana",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantSuppression",
          "displayName": "Redundant suppression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e@SuppressWarning\u003c/code\u003e annotation, or\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e// noinspection\u003c/code\u003e line comment, or\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e/** noinspection */\u003c/code\u003e JavaDoc comment\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n\u003cb\u003e\u003cfont color\u003d\"#000080\"\u003epublic class\u003c/font\u003e\u003c/b\u003e C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n \u003cb\u003e\u003cfont color\u003d\"#000080\"\u003eprivate boolean\u003c/font\u003e\u003c/b\u003e CONST \u003d \u003cb\u003e\u003cfont color\u003d\"#000080\"\u003etrue\u003c/font\u003e\u003c/b\u003e;\n \u003cb\u003e\u003cfont color\u003d\"#000080\"\u003evoid\u003c/font\u003e\u003c/b\u003e f() {\n    CONST \u003d \u003cb\u003e\u003cfont color\u003d\"#000080\"\u003efalse\u003c/font\u003e\u003c/b\u003e;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ProblematicWhitespace",
          "displayName": "Problematic whitespace",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the following problems:\n\u003cul\u003e\n  \u003cli\u003eTabs used for indentation when the code style is configured to use only spaces.\u003c/li\u003e\n  \u003cli\u003eSpaces used for indentation when the code style is configured to use only tabs.\u003c/li\u003e\n  \u003cli\u003eSpaces used for indentation and tabs used for alignment when the code\n    style is configured to use smart tabs.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinAnnotator",
          "displayName": "Kotlin annotator",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.qodana",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nAllows viewing the problems reported by the Kotlin annotator: compilation problems, references unresolved by the IDE, and so on.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EmptyDirectory",
          "displayName": "Empty directory",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty directories.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eAvailable only from \u003cb\u003eCode | Inspect Code\u003c/b\u003e or\n  \u003cb\u003eCode | Analyze Code | Run Inspection by Name\u003c/b\u003e and isn\u0027t reported in the editor.\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eOnly report empty directories located under a source folder\u003c/b\u003e option to have only directories under source\n  roots reported.\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Encapsulation",
      "inspections": [
        {
          "shortName": "UseOfAnotherObjectsPrivateField",
          "displayName": "Accessing a non-public field of another object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports accesses to \u003ccode\u003eprivate\u003c/code\u003e or \u003ccode\u003eprotected\u003c/code\u003e fields of another object.\nJava allows access to such fields for objects of the same class as the current object but\n  some coding styles discourage this use. Additionally, such direct access to \u003ccode\u003eprivate\u003c/code\u003e fields\n  may fail in component-oriented architectures, such as Spring or Hibernate, that expect all access\n  to other objects to be through method calls so the framework can mediate access\n  using proxies.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Base {\n    protected int bar;\n\n    void increment(Base base) {\n      bar++;\n      base.bar++; // warning: direct access to another object\u0027s non-public field\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\nA quick-fix to encapsulate the field is available.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore accesses from the same class\u003c/b\u003e option to ignore access from the same class and only report access\n    from inner or outer classes.\n    \u003cp\u003eTo ignore access from inner classes as well, use the nested \u003cb\u003eIgnore accesses from inner classes\u003c/b\u003e.\u003c/p\u003e\n  \u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore accesses from \u0027equals()\u0027 method\u003c/b\u003e to ignore access from an \u003ccode\u003eequals()\u003c/code\u003e method.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ProtectedInnerClass",
          "displayName": "Protected nested class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eprotected\u003c/code\u003e nested classes.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Outer {\n    protected static class Nested {} // warning\n    protected class Inner {}         // warning\n    protected enum Mode {}           // warning depends on the setting\n    protected interface I {}         // warning depends on the setting\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore \u0027protected\u0027 inner enums\u003c/b\u003e option to ignore \u003ccode\u003eprotected\u003c/code\u003e inner enums.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore \u0027protected\u0027 inner interfaces\u003c/b\u003e option to ignore \u003ccode\u003eprotected\u003c/code\u003e inner interfaces.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PackageVisibleInnerClass",
          "displayName": "Package-visible nested class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports nested classes that are declared without any access modifier (also known as package-private).\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Outer {\n    static class Nested {}  // warning\n    class Inner {}          // warning\n    enum Mode {}            // warning depends on the setting\n    interface I {}          // warning depends on the setting\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore package-visible inner enums\u003c/b\u003e option to ignore package-private inner enums.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore package-visible inner interfaces\u003c/b\u003e option to ignore package-private inner interfaces.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ProtectedField",
          "displayName": "Protected field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eprotected\u003c/code\u003e fields.\n\u003cp\u003eConstants (that is, variables marked \u003ccode\u003estatic\u003c/code\u003e or \u003ccode\u003efinal\u003c/code\u003e) are not reported.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class A {\n    protected Object object;              // warning\n    protected final static int MODE \u003d 0;  // constant, no warning\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PublicField",
          "displayName": "\u0027public\u0027 field",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003epublic\u003c/code\u003e fields.\nConstants (fields marked with \u003ccode\u003estatic\u003c/code\u003e and \u003ccode\u003efinal\u003c/code\u003e) are not reported.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    public String name;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name \u003d name;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore If Annotated By\u003c/b\u003e list to specify annotations to ignore. The inspection will ignore fields with\n    any of these annotations.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore \u0027public final\u0027 fields of an enum\u003c/b\u003e option to ignore \u003ccode\u003epublic final\u003c/code\u003e fields\n    of the \u003ccode\u003eenum\u003c/code\u003e type.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PublicInnerClass",
          "displayName": "\u0027public\u0027 nested class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003epublic\u003c/code\u003e nested classes.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Outer {\n    public static class Nested {} // warning\n    public class Inner {}         // warning\n    public enum Mode {}           // warning depends on the setting\n    public interface I {}         // warning depends on the setting\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore \u0027public\u0027 inner enums\u003c/b\u003e option to ignore \u003ccode\u003epublic\u003c/code\u003e inner enums.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore \u0027public\u0027 inner interfaces\u003c/b\u003e option to ignore \u003ccode\u003epublic\u003c/code\u003e inner interfaces.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PackageVisibleField",
          "displayName": "Package-visible field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports fields that are declared without any access modifier (also known as package-private).\n\u003cp\u003eConstants (that is, fields marked \u003ccode\u003estatic\u003c/code\u003e and \u003ccode\u003efinal\u003c/code\u003e) are not reported.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class A {\n    Object object;             // warning\n    final static int MODE \u003d 0; // constant, no warning\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AssignmentOrReturnOfFieldWithMutableType",
          "displayName": "Assignment or return of field with mutable type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports return of, or assignment from a method parameter to an array or a mutable type like\n\u003ccode\u003eCollection\u003c/code\u003e, \u003ccode\u003eDate\u003c/code\u003e, \u003ccode\u003eMap\u003c/code\u003e, \u003ccode\u003eCalendar\u003c/code\u003e, etc.\n\u003cp\u003eBecause such types are mutable, this construct may\n  result in unexpected modifications of an object\u0027s state from outside the owning class. Although this construct may be useful for\n  performance reasons, it is inherently prone to bugs.\u003c/p\u003e\n\u003cp\u003eThe following mutable types are reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.Date\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.Calendar\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.Collection\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ejava.util.Map\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.google.common.collect.Multimap\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecom.google.common.collect.Table\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe quick-fix adds a call to the field\u0027s \u003ccode\u003e.clone()\u003c/code\u003e method.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Log {\n    String[] messages;\n    ...\n\n    String[] getMessages() {\n      return messages; // warning: Return of String[] field \u0027messages\u0027\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Log {\n    String[] messages;\n    ...\n\n    String[] getMessages() {\n      return messages.clone();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the \u003cb\u003eIgnore assignments in and returns from private methods\u003c/b\u003e option to ignore assignments and returns in \u003ccode\u003eprivate\u003c/code\u003e methods.\n\n  \u003c!--\u003cp\u003e\u003csmall\u003eNew in 2017.3\u003c/small\u003e--\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "GPath",
      "inspections": [
        {
          "shortName": "GroovyListSetCanBeKeyedAccess",
          "displayName": "Call to List.set can be keyed access",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.util.List.set()\u003c/code\u003e methods. Such calls could be replaced\nby the shorter and clearer keyed access form.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef list \u003d [\"foo\"]\nlist.set(0, \"bar\") // list.set(0, \"bar\") could be replaced with list[0] \u003d \"bar\"\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef list \u003d [\"foo\"]\nlist[0] \u003d \"bar\"\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyMapPutCanBeKeyedAccess",
          "displayName": "Call to Map.put can be keyed access",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.util.Map.put()\u003c/code\u003e methods. Such calls could be replaced\nby the shorter and clearer keyed access form.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef map \u003d [\"foo\": \"bar\"]\nmap.put(\"foo\", \"baz\") // map.put(\"foo\", \"baz\") could be replaced with map[\"foo\"] \u003d \"baz\"\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef map \u003d [\"foo\": \"bar\"]\nmap[\"foo\"] \u003d \"baz\"\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyListGetCanBeKeyedAccess",
          "displayName": "Call to List.get can be keyed access",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.util.List.get()\u003c/code\u003e methods. Such calls could be replaced\nby the shorter and clearer keyed access form.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef list \u003d [\"foo\"]\ndef str \u003d list.get(0) // list.get(0) could be replaced with list[0]\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef list \u003d [\"foo\"]\ndef str \u003d list[0]\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "GroovyMapGetCanBeKeyedAccess",
          "displayName": "Call to Map.get can be keyed access",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "231.9011.34",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.util.Map.get()\u003c/code\u003e methods. Such calls could be replaced\nby the shorter and clearer keyed access form.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef map \u003d [\"foo\": \"bar\"]\ndef str \u003d map.get(\"foo\") // map.get(\"foo\") could be replaced with map[\"foo\"]\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\n\u003ccode\u003e\ndef map \u003d [\"foo\": \"bar\"]\ndef str \u003d map[\"foo\"]\n\u003c/code\u003e\n\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "VariableNotUsedInsideIf",
          "displayName": "Reference checked for \u0027null\u0027 is not used inside \u0027if\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports references to variables that are checked for nullability\nin the condition of an \u003ccode\u003eif\u003c/code\u003e statement or\nconditional expression but not used inside that\n\u003ccode\u003eif\u003c/code\u003e statement.\n\u003cp\u003e\n  Usually this either means that\n  the check is unnecessary or that the variable is not referenced inside the\n  \u003ccode\u003eif\u003c/code\u003e statement by mistake.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(Integer i) {\n    if (i !\u003d null) { // here \u0027i\u0027 is not used inside \u0027if\u0027 statement\n      System.out.println();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringEqualsCharSequence",
          "displayName": "\u0027String.equals()\u0027 called with \u0027CharSequence\u0027 argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eString.equals()\u003c/code\u003e with a \u003ccode\u003eCharSequence\u003c/code\u003e as the argument.\n\u003cp\u003e\n  \u003ccode\u003eString.equals()\u003c/code\u003e can only return \u003ccode\u003etrue\u003c/code\u003e for \u003ccode\u003eString\u003c/code\u003e arguments.\n  To compare the contents of a \u003ccode\u003eString\u003c/code\u003e with a non-\u003ccode\u003eString\u003c/code\u003e \u003ccode\u003eCharSequence\u003c/code\u003e argument,\n  use the \u003ccode\u003econtentEquals()\u003c/code\u003e method.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean equals(String s, CharSequence ch) {\n    return s.equals(ch);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  boolean equals(String s, CharSequence ch) {\n    return s.contentEquals(ch);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003csmall\u003eNew in 2017.3\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EndlessStream",
          "displayName": "Non-short-circuit operation consumes infinite stream",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-short-circuit operations consuming an infinite stream. Such operations can be completed only by throwing an exception.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Stream.iterate(0, i -\u003e i + 1).collect(Collectors.toList())\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MismatchedStringCase",
          "displayName": "Mismatched case in \u0027String\u0027 operation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eString\u003c/code\u003e method calls that always return the same value (\u003ccode\u003e-1\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e)\nbecause a lowercase character is searched in an uppercase-only string or vice versa.\n\u003cp\u003eReported methods include \u003ccode\u003eequals\u003c/code\u003e, \u003ccode\u003estartsWith\u003c/code\u003e, \u003ccode\u003eendsWith\u003c/code\u003e, \u003ccode\u003econtains\u003c/code\u003e,\n  \u003ccode\u003eindexOf\u003c/code\u003e, and \u003ccode\u003elastIndexOf\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\n  if (columnName.toLowerCase().equals(\"ID\")) {...}\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringTokenizerDelimiter",
          "displayName": "Duplicated delimiters in \u0027StringTokenizer\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eStringTokenizer()\u003c/code\u003e constructor calls or  \u003ccode\u003enextToken()\u003c/code\u003e method calls that\ncontain duplicate characters in the delimiter argument.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void printTokens(String text) {\n    StringTokenizer tokenizer \u003d new StringTokenizer(text, \"\\n\\n\");\n    while (tokenizer.hasMoreTokens()) {\n      System.out.println(tokenizer.nextToken());\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void printTokens(String text) {\n    StringTokenizer tokenizer \u003d new StringTokenizer(text, \"\\n\");\n    while (tokenizer.hasMoreTokens()) {\n      System.out.println(tokenizer.nextToken());\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OverflowingLoopIndex",
          "displayName": "Loop executes zero or billions of times",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports loops that cannot be completed without an index overflow or loops that don\u0027t loop at all.\nIt usually happens because of a mistake in the update operation.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(int s) {\n    for (int i \u003d s; i \u003e 12; i++) { // i-- should be here\n      System.out.println(i);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UseOfPropertiesAsHashtable",
          "displayName": "Use of \u0027Properties\u0027 object as a \u0027Hashtable\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to the following methods on \u003ccode\u003ejava.util.Properties\u003c/code\u003e objects:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eput()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eputIfAbsent()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eputAll()\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eget()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  For historical reasons, \u003ccode\u003ejava.util.Properties\u003c/code\u003e inherits from \u003ccode\u003ejava.util.Hashtable\u003c/code\u003e,\n  but using these methods is discouraged to prevent pollution of properties with values of types other than \u003ccode\u003eString\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Calls to \u003ccode\u003ejava.util.Properties.putAll()\u003c/code\u003e won\u0027t get reported when\n  both the key and the value parameters in the map are of the \u003ccode\u003eString\u003c/code\u003e type.\n  Such a call is safe and no better alternative exists.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Object f(Properties props) {\n    props.put(\"hello\", \"world\");\n    props.putIfAbsent(\"hello\", \"world\");\n    props.putAll(new HashMap\u0026lt;\u0026gt;());\n    return props.get(\"Hello\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Object f(Properties props) {\n    props.setProperty(\"hello\", \"world\");\n    props.putIfAbsent(\"hello\", \"world\");\n    props.putAll(new HashMap\u0026lt;\u0026gt;());\n    return props.getProperty(\"hello\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MathRandomCastToInt",
          "displayName": "\u0027Math.random()\u0027 cast to \u0027int\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eMath.random()\u003c/code\u003e which are immediately\ncast to \u003ccode\u003eint\u003c/code\u003e. \n\u003cp\u003eCasting a \u003ccode\u003edouble\u003c/code\u003e between \u003ccode\u003e0.0\u003c/code\u003e (inclusive) and\n  \u003ccode\u003e1.0\u003c/code\u003e (exclusive) to \u003ccode\u003eint\u003c/code\u003e will always round down to zero. The value\n  should first be multiplied by some factor before casting it to an \u003ccode\u003eint\u003c/code\u003e to\n  get a value between zero (inclusive) and the multiplication factor (exclusive).\n  Another possible solution is to use the \u003ccode\u003enextInt()\u003c/code\u003e method of\n  \u003ccode\u003ejava.util.Random\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  \u003cb\u003eint\u003c/b\u003e r \u003d (\u003cb\u003eint\u003c/b\u003e)Math.random() * 10;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  \u003cb\u003eint\u003c/b\u003e r \u003d (\u003cb\u003eint\u003c/b\u003e)(Math.random() * 10);\n\u003c/code\u003e\u003c/pre\u003e\n  \u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SuspiciousIntegerDivAssignment",
          "displayName": "Suspicious integer division assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignments whose right side is a division that shouldn\u0027t be truncated to integer.\n\u003cp\u003eWhile occasionally intended, this construction is often buggy.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int x \u003d 18;\n  x *\u003d 3/2; // doesn\u0027t change x because of the integer division result\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nThis code should be replaced with:\n\u003cpre\u003e\u003ccode\u003e\n  int x \u003d 18;\n  x *\u003d 3.0/2;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  In the inspection options, you can disable warnings for suspicious but possibly correct divisions,\n  for example, when the dividend can\u0027t be calculated statically.\n\u003cpre\u003e\u003ccode\u003e\n  void calc(int d) {\n     int x \u003d 18;\n     x *\u003d d/2;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\n  \u003csmall\u003eNew in 2019.2\u003c/small\u003e\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ResultOfObjectAllocationIgnored",
          "displayName": "Result of object allocation ignored",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports object allocations where the allocated object is ignored and neither assigned to a variable nor used in another way.\n\u003cp\u003e\n  Such allocation expressions are legal in Java, but are usually either unintended, or\n  evidence of a very odd object initialization strategy.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the options to list classes whose allocations should be ignored by this inspection.\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InstantiationOfUtilityClass",
          "displayName": "Instantiation of utility class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instantiation of utility classes using the \u003ccode\u003enew\u003c/code\u003e keyword.\n\u003cp\u003e\n  In utility classes, all fields and methods are \u003ccode\u003estatic\u003c/code\u003e.\n  Instantiation of such classes is most likely unnecessary and indicates a mistake.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyUtils {\n    public static double cube(double x) {\n      return x * x * x;\n    }\n  }\n  class Main {\n    public static void main(String[] args) {\n      // Instantiation of utility class\n      MyUtils utils \u003d new MyUtils();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  To prevent utility classes from being instantiated,\n  it\u0027s recommended to use a \u003ccode\u003eprivate\u003c/code\u003e constructor.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ArrayObjectsEquals",
          "displayName": "Use of shallow or \u0027Objects\u0027 methods with arrays",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions that seem to use an inappropriate method for determining array equality or calculating their hashcode.\n\u003cp\u003eThe following method calls are reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eObject.equals()\u003c/code\u003e for any arrays\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eArrays.equals()\u003c/code\u003e for multidimensional arrays\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eArrays.hashCode()\u003c/code\u003e for multidimensional arrays\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "AssertWithSideEffects",
          "displayName": "\u0027assert\u0027 statement with side effects",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "  \u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eassert\u003c/code\u003e statements that cause side effects.\n\u003cp\u003e\n  Since assertions can be switched off,\n  these side effects are not guaranteed, which can cause subtle bugs. Common unwanted side effects detected by this inspection are\n  modifications of variables and fields. When methods calls are involved, they are analyzed one level deep.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  assert i++ \u0026lt; 10;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "InnerClassReferencedViaSubclass",
          "displayName": "Inner class referenced via subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports accesses of inner and nested classes where the call is qualified\nby a subclass of the declaring class, rather than the declaring class itself.\n\u003cp\u003e\n  Java allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Super {\n    static class Inner {}\n  }\n\n  class Sub extends Super {\n    void test() {\n      Sub.Inner s \u003d new Sub.Inner(); // \u0027Inner\u0027 class is declared in \u0027Super\u0027 class, but referenced via \u0027Sub\u0027 class\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Super {\n    static class Inner {}\n  }\n\n  class Sub extends Super {\n    void test() {\n      Super.Inner s \u003d new Super.Inner();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ResultSetIndexZero",
          "displayName": "Use of index 0 in JDBC ResultSet",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports attempts to access column 0 of \u003ccode\u003ejava.sql.ResultSet\u003c/code\u003e or \u003ccode\u003ejava.sql.PreparedStatement\u003c/code\u003e.\nFor historical reasons, columns of \u003ccode\u003ejava.sql.ResultSet\u003c/code\u003e and \u003ccode\u003ejava.sql.PreparedStatement\u003c/code\u003e\nare numbered starting with \u003cb\u003e1\u003c/b\u003e, rather than with \u003cb\u003e0\u003c/b\u003e, and accessing column 0 is a common error in JDBC programming.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String getName(ResultSet rs) {\n    \u003cb\u003ereturn\u003c/b\u003e rs.getString(0);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IteratorNextDoesNotThrowNoSuchElementException",
          "displayName": "\u0027Iterator.next()\u0027 which can\u0027t throw \u0027NoSuchElementException\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports implementations of \u003ccode\u003eIterator.next()\u003c/code\u003e\nthat cannot throw \u003ccode\u003ejava.util.NoSuchElementException\u003c/code\u003e.\n\u003cp\u003e\n  Such implementations violate the contract of \u003ccode\u003ejava.util.Iterator\u003c/code\u003e,\n  and may result in subtle bugs if the iterator is used in a non-standard way.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Numbers implements Iterator\u0026lt;Integer\u0026gt; {\n    @Override\n    public Integer next() { //warning\n        if (hasNext()) {\n            return generateNext();\n        } else {\n            return null; //throw NoSuchElementException instead\n        }\n    }\n\n    ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InfiniteRecursion",
          "displayName": "Infinite recursion",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that call themselves infinitely unless an exception is thrown.\n\u003cp\u003e\n  Methods reported by this inspection cannot return normally.\n  While such behavior may be intended, in many cases this is just an oversight.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  int baz() {\n      return baz();\n  }\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantOperationOnEmptyContainer",
          "displayName": "Redundant operation on empty container",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant operations on empty collections, maps or arrays.\n\u003cp\u003e\n  Iterating, removing elements, sorting,\n  and some other operations on empty collections have no effect and can be removed. Also, they may be a signal of a bug.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if (numbers.isEmpty()){\n    //error due to the missed negation\n    int max \u003d numbers.stream().max(Comparator.naturalOrder()).get();\n    ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ComparatorResultComparison",
          "displayName": "Suspicious usage of compare method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports comparisons of the result of \u003ccode\u003eComparator.compare()\u003c/code\u003e or \u003ccode\u003eComparable.compareTo()\u003c/code\u003e calls with non-zero constants.\nBy contract, these methods can return any integer (not just -1, 0 or 1),\n  so comparing against particular numbers is bad practice. Some widely used comparison methods (e.g. \u003ccode\u003eString.compareTo()\u003c/code\u003e)\n  actually return values outside the [-1..1] range, and such a comparison may cause incorrect program behavior.\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void validate(String s1, String s2) {\n    // Comparing to 1 is incorrect\n    if (s1.compareTo(s2) \u003d\u003d 1) {\n      throw new IllegalArgumentException(\"Incorrect order\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void validate(String s1, String s2) {\n    if (s1.compareTo(s2) \u003e 0) {\n      throw new IllegalArgumentException(\"Incorrect order\");\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "TextLabelInSwitchStatement",
          "displayName": "Text label in \u0027switch\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports labeled statements inside of \u003ccode\u003eswitch\u003c/code\u003e statements.\nWhile occasionally intended, this construction is often the result of a typo.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  switch (x) {\n      case 1:\n      case2:   //warning: Text label \u0027case2:\u0027 in \u0027switch\u0027 statement\n      case 3:\n          break;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousNameCombination",
          "displayName": "Suspicious variable/parameter name combination",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignments and function calls in which the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eint\u003c/b\u003e x \u003d 0;\n  \u003cb\u003eint\u003c/b\u003e y \u003d x; // x is used as a y-coordinate\n  \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eint\u003c/b\u003e x \u003d 0, y \u003d 0;\n  // x is used as a y-coordinate and y as an x-coordinate\n  Rectangle rc \u003d \u003cb\u003enew\u003c/b\u003e Rectangle(y, x, 20, 20);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003eUse the \u003cb\u003eGroup of names\u003c/b\u003e area to specify the names which should not be used together: an error is reported\nif the parameter name or assignment target name contains words from one group and the name of the assigned or passed\nvariable contains words from a different group.\n\u003cp\u003eUse the \u003cb\u003eIgnore methods\u003c/b\u003e area to specify the methods that should not be checked but have a potentially suspicious name.\nFor example, the \u003ccode\u003eInteger.compare()\u003c/code\u003e parameters are named \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003ey\u003c/code\u003e but are unrelated to coordinates.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ArrayHashCode",
          "displayName": "\u0027hashCode()\u0027 called on array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports incorrect hash code calculation for arrays.\n\u003cp\u003eIn order to\n  correctly calculate the hash code for an array, use:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eArrays.hashcode()\u003c/code\u003e for linear arrays\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eArrays.deepHashcode()\u003c/code\u003e for multidimensional arrays\u003c/li\u003e\n\u003c/ul\u003e\nThese methods should also be used with \u003ccode\u003eObjects.hash()\u003c/code\u003e when\nthe sequence of input values includes arrays, for example:\n\u003ccode\u003eObjects.hash(string, Arrays.hashcode(array))\u003c/code\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SubtractionInCompareTo",
          "displayName": "Subtraction in \u0027compareTo()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports subtraction in\n\u003ccode\u003ecompareTo()\u003c/code\u003e methods and methods implementing \u003ccode\u003ejava.util.Comparator.compare()\u003c/code\u003e.\n\u003cp\u003e\n  While it is a common idiom to\n  use the results of integer subtraction as the result of a \u003ccode\u003ecompareTo()\u003c/code\u003e\n  method, this construct may cause subtle and difficult bugs in cases of integer overflow.\n  Comparing the integer values directly and returning \u003ccode\u003e-1\u003c/code\u003e, \u003ccode\u003e0\u003c/code\u003e, or \u003ccode\u003e1\u003c/code\u003e is a better practice in most cases.\n\u003c/p\u003e\n\u003cp\u003e\n  Subtraction on floating point values that is immediately cast to integral type is also reported because precision loss is possible due to\n  rounding.\n\u003c/p\u003e\n\u003cp\u003e\n  The inspection doesn\u0027t report when it\u0027s statically determined that value ranges are limited, and overflow never occurs.\n  Additionally, subtraction on \u003ccode\u003eint\u003c/code\u003e numbers greater than or equal to \u003ccode\u003e0\u003c/code\u003e will never overflow.\n  Therefore, this inspection tries not to warn in those cases.\n\u003c/p\u003e\n\u003cp\u003e\n  Methods that always return zero or greater can be marked with the\n  \u003ccode\u003ejavax.annotation.Nonnegative\u003c/code\u003e annotation or specified in this inspection\u0027s options.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class DoubleHolder implements Comparable\u0026lt;DoubleHolder\u0026gt; {\n    double d;\n    public int compareTo(DoubleHolder that) {\n        return (int)(this.d - that.d);\n    }\n }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA no-warning example because \u003ccode\u003eString.length()\u003c/code\u003e is known to be non-negative:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A implements Comparable\u0026lt;A\u0026gt; {\n    final String s \u003d \"\";\n    public int compareTo(A a) {\n        return s.length() - a.s.length();\n    }\n }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the options to list methods that are safe to use inside a subtraction.\n  Methods are safe when they return an \u003ccode\u003eint\u003c/code\u003e value that is always greater than or equal to \u003ccode\u003e0\u003c/code\u003e.\n\u003c/p\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConfusingMainMethod",
          "displayName": "Confusing \u0027main()\u0027 method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports methods that are named \"main\", but do not have the\n\u003ccode\u003epublic static void main(String[])\u003c/code\u003e signature.\nAdditionally main methods located in anonymous or local classes are reported.\nAnonymous and local classes do not have a fully qualified name and thus can\u0027t be run.\n\u003cp\u003eSuch methods may be confusing, as methods named \"main\"\n  are expected to be application entry points.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    void main(String[] args) {} // warning here because there are no \"public static\" modifiers\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix that renames such methods is available only in the editor.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ArrayEquals",
          "displayName": "\u0027equals()\u0027 called on array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eequals()\u003c/code\u003e calls that compare two arrays.\n\u003cp\u003eCalling \u003ccode\u003eequals()\u003c/code\u003e on an array compares identity and is equivalent to using \u003ccode\u003e\u003d\u003d\u003c/code\u003e.\n  Use \u003ccode\u003eArrays.equals()\u003c/code\u003e to compare the contents of two arrays, or \u003ccode\u003eArrays.deepEquals()\u003c/code\u003e for\n  multi-dimensional arrays.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void sample(int[] first, int[] second){\n    if (first.equals(second)) return;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void sample(int[] first, int[] second){\n    if (Arrays.equals(first, second)) return;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CollectionAddedToSelf",
          "displayName": "Collection added to itself",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports cases where the argument of a method call on a \u003ccode\u003ejava.util.Collection\u003c/code\u003e\nor \u003ccode\u003ejava.util.Map\u003c/code\u003e is the collection or map itself.\nSuch situations may occur as a result of copy-paste in code with raw types.\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ArrayList list \u003d new ArrayList\u0026lt;\u0026gt;();\n  list.add(list); // warning here\n  return list.hashCode(); // throws StackOverflowError\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "DataFlowIssue",
          "displayName": "Nullability and data flow problems",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code constructs that always violate nullability contracts, may throw exceptions, or are just redundant, based on data flow analysis.\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (array.length \u0026lt; index) {\n  System.out.println(array[index]);\n} // Array index is always out of bounds\n\nif (str \u003d\u003d null) System.out.println(\"str is null\");\nSystem.out.println(str.trim());\n// the last statement may throw an NPE\n\n@NotNull\nInteger square(@Nullable Integer input) {\n    // the method contract is violated\n    return input \u003d\u003d null ? null : input * input;\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  The inspection behavior may be controlled by a number of annotations, such as\n  \u003ca href\u003d\"https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html\"\u003enullability\u003c/a\u003e annotations,\n  \u003ccode\u003e\u003ca href\u003d\"https://www.jetbrains.com/help/idea/contract-annotations.html\"\u003e@Contract\u003c/a\u003e\u003c/code\u003e annotation,\n  \u003ccode\u003e@Range\u003c/code\u003e annotation and so on.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eSuggest @Nullable annotation for methods/fields/parameters where nullable values are used\u003c/b\u003e option to warn when a\n    nullable value is passed as an argument to a method with a non-annotated parameter,\n    stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating\n    the \u003ccode\u003e@Nullable\u003c/code\u003e annotation. You can also configure nullability annotations using the \u003cb\u003eConfigure Annotations\u003c/b\u003e button.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eTreat non-annotated members and parameters as @Nullable\u003c/b\u003e option to assume that non-annotated members can be null,\n    so they must not be used in non-null context.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eReport not-null required parameter with null-literal argument usages\u003c/b\u003e option to report method parameters that cannot be\n    null (e.g. immediately dereferenced in the method body), but there are call sites where a \u003ccode\u003enull\u003c/code\u003e literal is passed.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eReport nullable methods that always return a non-null value\u003c/b\u003e option to report methods that are annotated as\n  \u003ccode\u003e@Nullable\u003c/code\u003e, but always return non-null value. In this case, it\u0027s suggested that you change the annotation to \u003ccode\u003e@NotNull\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore assert statements\u003c/b\u003e option to control how the inspection treats \u003ccode\u003eassert\u003c/code\u003e statements. By default, the option\n    is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored\n    (-da mode).\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eReport problems that happen only on some code paths\u003c/b\u003e option to control whether to report problems that may happen only\n    on some code path. If this option is disabled, warnings like \u003ci\u003eexception is possible\u003c/i\u003e will not be reported. The inspection will report\n    only warnings like \u003ci\u003eexception will definitely occur\u003c/i\u003e. This mode may greatly reduce the number of false-positives, especially if the code\n    is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most\n    important problems in legacy code bases.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  Before IntelliJ IDEA 2022.3, this inspection was part of the \"Constant Conditions \u0026 Exceptions\" inspection.\n  Now, it is split into two inspections:\n  \"Constant Values\" and \"Nullability and data flow problems\".\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "WrongPackageStatement",
          "displayName": "Wrong package statement",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nDetects \u003ccode\u003epackage\u003c/code\u003e statements that do not correspond to the project directory structure.\nAlso, reports classes without \u003ccode\u003epackage\u003c/code\u003e statements if the class is not located directly in\nsource root directory.\n\u003cp\u003eWhile it\u0027s not strictly mandated by Java language, it\u0027s good to keep classes \nfrom package \u003ccode\u003ecom.example.myapp\u003c/code\u003e inside the \u003ccode\u003ecom/example/myapp\u003c/code\u003e directory under \n  the source root. Failure to do this may confuse code readers and make some tools working incorrectly.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MismatchedCollectionQueryUpdate",
          "displayName": "Mismatched query and update of collection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports collections whose contents are either queried and\nnot updated, or updated and not queried.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Such inconsistent queries and updates are pointless and may indicate\n  either dead code or a typo.\n\u003c/p\u003e\n\u003cp\u003e\n  Use the inspection settings to specify name patterns that correspond to update/query methods.\n  Query methods that return an element are automatically detected, and only\n  those that write data to an output parameter (for example, an \u003ccode\u003eOutputStream\u003c/code\u003e) need to be specified.\n\u003cp\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cp\u003eSuppose you have your custom \u003ccode\u003eFixedStack\u003c/code\u003e class with method \u003ccode\u003estore()\u003c/code\u003e:\n\u003cpre\u003e\u003ccode\u003e\n  public class FixedStack\u0026lt;T\u0026gt; extends Collection\u0026lt;T\u0026gt; {\n    public T store(T t) {\n      // implementation\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can add \u003ccode\u003estore\u003c/code\u003e to the update methods table in order to report mismatched queries like:\n\u003cpre\u003e\u003ccode\u003e\n  void test(int i) {\n    FixedStack\u0026lt;Integer\u0026gt; stack \u003d new FixedStack\u0026lt;\u0026gt;();\n    stack.store(i);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MagicConstant",
          "displayName": "Magic Constant",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions that can be replaced with \"magic\" constants.\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Bare literal \"2\" is used, warning:\n  Font font \u003d new Font(\"Arial\", 2)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // Predefined constant is used, good:\n  Font font \u003d new Font(\"Arial\", Font.ITALIC)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  When possible, the quick-fix inserts an appropriate predefined constant.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  The behavior of this inspection is controlled by \u003ccode\u003eorg.intellij.lang.annotations.MagicConstant\u003c/code\u003e annotation.\n  Some standard Java library methods are pre-annotated, but you can use this annotation in your code as well.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SuspiciousMethodCalls",
          "displayName": "Suspicious collection method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method calls on parameterized collections, where the actual argument type does not\ncorrespond to the collection\u0027s elements type.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  List\u0026lt;Integer\u0026gt; list \u003d getListOfElements();\n  list.remove(\"\"); // remove is highlighted\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  In the inspection settings, you can disable warnings for potentially correct code like the following:\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public boolean accept(Map\u0026lt;Integer, String\u0026gt; map, Object key) {\n    return map.containsKey(key);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "NewStringBufferWithCharArgument",
          "displayName": "StringBuilder constructor call with \u0027char\u0027 argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eStringBuffer\u003c/code\u003e and \u003ccode\u003eStringBuilder\u003c/code\u003e constructors with \u003ccode\u003echar\u003c/code\u003e as the argument.\nIn this case, \u003ccode\u003echar\u003c/code\u003e is silently cast to an integer and interpreted as the initial capacity of the buffer.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  new StringBuilder(\u0027(\u0027).append(\"1\").append(\u0027)\u0027);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  new StringBuilder(\"(\").append(\"1\").append(\u0027)\u0027);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ThrowableNotThrown",
          "displayName": "\u0027Throwable\u0027 not thrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports instantiations of \u003ccode\u003eThrowable\u003c/code\u003e or its subclasses, where the created \u003ccode\u003eThrowable\u003c/code\u003e\nis never actually thrown.\nAdditionally, this inspection reports method calls that return instances of \u003ccode\u003eThrowable\u003c/code\u003e or its subclasses,\nwhen the result of the method call is not thrown.\n\u003cp\u003eCalls to methods annotated with the Error Prone\u0027s or AssertJ\u0027s \u003ccode\u003e@CanIgnoreReturnValue\u003c/code\u003e annotation will not be reported.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    void check(String s) {\n        if (s \u003d\u003d null) {\n            new NullPointerException(\"s\");\n        }\n        // ...\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObjectToString",
          "displayName": "Call to default \u0027toString()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003etoString()\u003c/code\u003e that use the default implementation\nfrom \u003ccode\u003ejava.lang.Object\u003c/code\u003e.\n\u003cp\u003eThe default implementation is rarely intended but may be used by accident.\u003c/p\u003e\n\u003cp\u003e\n  Calls to \u003ccode\u003etoString()\u003c/code\u003e on objects with \u003ccode\u003ejava.lang.Object\u003c/code\u003e,\n  interface or abstract class type are ignored by this inspection.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Bar {\n      void foo1(Bar bar) {\n          String s \u003d bar.toString(); // warning\n          /* ... */\n      }\n\n      void foo2(Object obj) {\n          String s \u003d obj.toString(); // no warning here\n          /* ... */\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StaticCallOnSubclass",
          "displayName": "Static method referenced via subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports static method calls where the call is qualified\nby a subclass of the declaring class, rather than by the declaring class itself.\n\u003cp\u003e\n  Java allows such qualification for classes, but such calls\n  may indicate a subtle confusion of inheritance and overriding.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Parent {\n    public static void print(String str) {}\n  }\n  class Child extends Parent {}\n\n  Child.print(\"Hello, world!\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Parent.print(\"Hello, world!\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnusedAssignment",
          "displayName": "Unused assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports assignment values that are not used after the assignment.\nIf the assignment value is unused, it\u0027s better to remove the assignment to shorten the code and avoid redundant allocations.\n\u003cp\u003eThe following cases are reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eThe variable never gets read after the assignment.\u003c/li\u003e\n  \u003cli\u003eThe variable is always overwritten with a new value before it is read.\u003c/li\u003e\n  \u003cli\u003eThe variable initializer is redundant (for one of the two reasons above).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cp\u003e\nUse the \u003cb\u003eReport redundant initializers\u003c/b\u003e option to report redundant initializers:\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int getI() {\n    int i \u003d 0; // redundant initialization\n    i \u003d 2;\n    return i;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nUse the \u003cb\u003eReport ++i when may be replaced with (i + 1)\u003c/b\u003e option to report the cases when \u003ccode\u003e++i\u003c/code\u003e expression\nmay be replaced with \u003ccode\u003ei + 1\u003c/code\u003e:\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int preInc(int i) {\n    int res \u003d i;\n    return ++res;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\nUse the \u003cb\u003eReport i++ when changed value is not used afterwards\u003c/b\u003e option to report the cases when the result of \u003ccode\u003ei++\u003c/code\u003e expression\nis not used later:\n\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int postInc(int i) {\n    int res \u003d i;\n    return res++;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SuspiciousTernaryOperatorInVarargsCall",
          "displayName": "Suspicious ternary operator in varargs method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports vararg method calls that use a ternary operator with mixed array and non-array branches.\n\u003cp\u003e\nWhen compiled, both branches are wrapped in arrays. As a result, the array branch is turned into\na two-dimensional array, which may indicate a problem.\n\u003c/p\u003e\n\u003cp\u003e\nThe quick-fix wraps the non-array branch in an array to prevent the compiler from doing the conversion.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    static void bar(boolean flag) {\n        Object[] a \u003d {1, 2};\n        Object b \u003d \"hello\";\n        foo(flag ? a : b);\n    }\n    static void foo(Object... obj) {\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    static void bar(boolean flag) {\n        Object[] a \u003d {1, 2};\n        Object b \u003d \"hello\";\n        foo(flag ? a : new Object[]{b});\n    }\n    static void foo(Object... obj) {\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003csmall\u003eNew in 2020.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MeaninglessRecordAnnotationInspection",
          "displayName": "Meaningless record annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports annotations used on record components that have no effect.\n\u003cp\u003eThis can happen in two cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eThe reported annotation has the METHOD target, but the corresponding accessor is explicitly defined.\u003c/li\u003e\n  \u003cli\u003eThe reported annotation has the PARAMETER target, but the canonical constructor is explicitly defined.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n@Target(ElementType.METHOD)\n@interface A { }\n  \n// The annotation will not appear in bytecode at all,\n// as it should be propagated to the accessor but accessor is explicitly defined \nrecord R(@A int x) {\n  public int x() { return x; }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2021.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassNewInstance",
          "displayName": "Unsafe call to \u0027Class.newInstance()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003ejava.lang.Class.newInstance()\u003c/code\u003e.\n\u003cp\u003e\n  This method propagates exceptions thrown by\n  the no-arguments constructor, including checked exceptions. Usages of this method\n  effectively bypass the compile-time exception checking that would\n  otherwise be performed by the compiler.\n\u003c/p\u003e\n\u003cp\u003e\n  A quick-fix is suggested to replace the call with a call to the\n  \u003ccode\u003ejava.lang.reflect.Constructor.newInstance()\u003c/code\u003e method, which\n  avoids this problem by wrapping any exception thrown by the constructor in a\n  (checked) \u003ccode\u003ejava.lang.reflect.InvocationTargetException\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  clazz.newInstance()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  clazz.getConstructor().newInstance();\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ScheduledThreadPoolExecutorWithZeroCoreThreads",
          "displayName": "\u0027ScheduledThreadPoolExecutor\u0027 with zero core threads",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any \u003ccode\u003ejava.util.concurrent.ScheduledThreadPoolExecutor\u003c/code\u003e instances in which\n\u003ccode\u003ecorePoolSize\u003c/code\u003e is set to zero via the \u003ccode\u003esetCorePoolSize\u003c/code\u003e method or\nthe object constructor.\n\u003cp\u003e\n  A \u003ccode\u003eScheduledThreadPoolExecutor\u003c/code\u003e with zero core threads will run nothing.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(int corePoolSize) {\n      if (corePoolSize !\u003d 0) return;\n      ThreadPoolExecutor executor \u003d new ScheduledThreadPoolExecutor(corePoolSize); // warning\n      executor.setCorePoolSize(corePoolSize); // warning\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "StringConcatenationInFormatCall",
          "displayName": "String concatenation as argument to \u0027format()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-constant string concatenations used as a format string argument.\n\u003cp\u003e\n  While occasionally intended, this is usually a misuse of a formatting method\n  and may even cause security issues if the variables used in the concatenated string\n  contain special characters like \u003ccode\u003e%\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Also, sometimes this could be the result\n  of mistakenly concatenating a string format argument by typing a \u003ccode\u003e+\u003c/code\u003e when a \u003ccode\u003e,\u003c/code\u003e was meant.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  static String formatGreeting(String userName) {\n    return String.format(\"Hello, \" + userName);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Here, the \u003ccode\u003euserName\u003c/code\u003e will be interpreted as a part of format string, which may result\n  in \u003ccode\u003eIllegalFormatException\u003c/code\u003e (for example, if \u003ccode\u003euserName\u003c/code\u003e is \u003ccode\u003e\"%\"\u003c/code\u003e) or\n  in using an enormous amount of memory (for example, if \u003ccode\u003euserName\u003c/code\u003e is \u003ccode\u003e\"%2000000000%\"\u003c/code\u003e).\n  The call should be probably replaced with \u003ccode\u003eString.format(\"Hello, %s\", userName);\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  This inspection checks calls to formatting methods on\n  \u003ccode\u003ejava.util.Formatter\u003c/code\u003e,\n  \u003ccode\u003ejava.lang.String\u003c/code\u003e,\n  \u003ccode\u003ejava.io.PrintWriter\u003c/code\u003e,\n  or \u003ccode\u003ejava.io.PrintStream\u003c/code\u003e.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousDateFormat",
          "displayName": "Suspicious date format pattern",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports date format patterns that are likely used by mistake.\n\u003cp\u003eThe following patterns are reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUppercase \"Y\", unless \"w\" appears nearby. It stands for \"Week year\" that is almost always\n    the same as normal \"Year\" (lowercase \"y\" pattern), but may point to the next year\n    at the end of December.\u003c/li\u003e\n  \u003cli\u003eUppercase \"M\" (month) close to \"H\", \"K\", \"h\", or \"k\" (hour). It\u0027s likely that a lowercase \"m\" (minute) was intended.\u003c/li\u003e\n  \u003cli\u003eLowercase \"m\" (minute) close to \"y\" (year) or \"d\" (day in month). It\u0027s likely that an uppercase \"M\" (month) was intended.\u003c/li\u003e\n  \u003cli\u003eUppercase \"D\" (day in year) close to \"M\", or \"L\" (month). It\u0027s likely that a lowercase \"d\" (day in month) was intended.\u003c/li\u003e\n  \u003cli\u003eUppercase \"S\" (milliseconds) close to \"m\" (minutes). It\u0027s likely that a lowercase \"s\" (seconds) was intended.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  Examples:\u003cbr\u003e\n  \u003ccode\u003enew SimpleDateFormat(\"YYYY-MM-dd\")\u003c/code\u003e: likely \u003ccode\u003e\"yyyy-MM-dd\"\u003c/code\u003e was intended.\u003cbr\u003e\n  \u003ccode\u003enew SimpleDateFormat(\"yyyy-MM-DD\")\u003c/code\u003e: likely \u003ccode\u003e\"yyyy-MM-dd\"\u003c/code\u003e was intended.\u003cbr\u003e\n  \u003ccode\u003enew SimpleDateFormat(\"HH:MM\")\u003c/code\u003e: likely \u003ccode\u003e\"HH:mm\"\u003c/code\u003e was intended.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EqualsUsesNonFinalVariable",
          "displayName": "Non-final field referenced in \u0027equals()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports implementations of \u003ccode\u003eequals()\u003c/code\u003e that access\nnon-\u003ccode\u003efinal\u003c/code\u003e variables. Such access may result in \u003ccode\u003eequals()\u003c/code\u003e\nreturning different results at different points in the object\u0027s lifecycle, which may in turn cause problems when\nusing the standard collections classes.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public class Person {\n    private String lastName;\n\n    @Override\n    public boolean equals(Object obj) {\n      ...\n      Person other \u003d (Person) obj;\n      if (lastName \u003d\u003d null) {\n        if (!lastName.equals(other.lastName)) {\n        return false;\n      ...\n      }\n    }\n  }\n  \u003c/code\u003e\n\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousSystemArraycopy",
          "displayName": "Suspicious \u0027System.arraycopy()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports suspicious calls to \u003ccode\u003eSystem.arraycopy()\u003c/code\u003e.\n\u003cp\u003eSuch calls are suspicious when:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ethe source or destination is not of an array type\n\u003cli\u003ethe source and destination are of different types\n\u003cli\u003ethe copied chunk length is greater than \u003ccode\u003esrc.length - srcPos\u003c/code\u003e\n\u003cli\u003ethe copied chunk length is greater than \u003ccode\u003edest.length - destPos\u003c/code\u003e\n\u003cli\u003ethe ranges always intersect when the source and destination are the same array\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo() {\n    int[] src \u003d new int[] { 1, 2, 3, 4 };\n    System.arraycopy(src, 0, src, 1, 2); // warning: Copying to the same array with intersecting ranges\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantAssertCondition",
          "displayName": "Constant condition in \u0027assert\u0027 statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eassert\u003c/code\u003e statement conditions that are constants. \u003ccode\u003eassert\u003c/code\u003e\nstatements with constant conditions will either always fail or always succeed.\nSuch statements might be left over after a refactoring and are probably not intended.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    void foo() {\n        assert true;\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IgnoreResultOfCall",
          "displayName": "Result of method call ignored",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method calls whose result is ignored.\n\u003cp\u003eFor many methods, ignoring the result is perfectly\n  legitimate, but for some it is almost certainly an error. Examples of methods where ignoring\n  the result is likely an error include \u003ccode\u003ejava.io.inputStream.read()\u003c/code\u003e,\n  which returns the number of bytes actually read, and any method on\n  \u003ccode\u003ejava.lang.String\u003c/code\u003e or \u003ccode\u003ejava.math.BigInteger\u003c/code\u003e. These methods do not produce side-effects and thus pointless\n  if their result is ignored.\n\u003c/p\u003e\n\u003cp\u003eThe calls to the following methods are inspected:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eSimple getters (which do nothing except return a field)\u003c/li\u003e\n  \u003cli\u003eMethods specified in the settings of this inspection\u003c/li\u003e\n  \u003cli\u003eMethods annotated with \u003ccode\u003eorg.jetbrains.annotations.Contract(pure\u003dtrue)\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eMethods annotated with .*.\u003ccode\u003eCheckReturnValue\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eMethods in a class or package annotated with \u003ccode\u003ejavax.annotation.CheckReturnValue\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eOptionally, all non-library methods\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCalls to methods annotated with Error Prone\u0027s or AssertJ\u0027s \u003ccode\u003e@CanIgnoreReturnValue\u003c/code\u003e annotation are not reported.\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the inspection settings to specify the classes to check.\n  Methods are matched by name or name pattern using Java regular expression syntax.\n  For classes, use fully-qualified names. Each entry applies to both the class and all its inheritors.\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousToArrayCall",
          "displayName": "Suspicious \u0027Collection.toArray()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports suspicious calls to \u003ccode\u003eCollection.toArray()\u003c/code\u003e.\n\u003cp\u003eThe following types of calls are considered suspicious:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    when the type of the array\n    argument is not the same as the array type to which the result is casted.\n  \u003c/li\u003e\n  \u003cli\u003e\n    when the type of the array argument does not match the type parameter in the collection declaration.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nvoid m1(List list) {\n  Number[] ns \u003d (Number[]) list.toArray(new String[0]);\n}\n\nvoid m2(List\u0026lt;Number\u0026gt; list) {\n  Number[] ns \u003d list.toArray(new String[0]);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IncorrectDateTimeFormat",
          "displayName": "Incorrect \u0027DateTimeFormat\u0027 pattern",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003c!-- Copyright 2000-2022 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license. --\u003e\n\u003chtml\u003e\n\u003cbody\u003e\nReports incorrect date time format patterns.\n\u003cp\u003eThe following errors are reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUnsupported pattern letters, like \"TT\"\u003c/li\u003e\n  \u003cli\u003eUsing reserved characters, like \"#\"\u003c/li\u003e\n  \u003cli\u003eIncorrect use of padding\u003c/li\u003e\n  \u003cli\u003eUnbalanced brackets\u003c/li\u003e\n  \u003cli\u003eIncorrect amount of consecutive pattern letters\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  DateTimeFormatter.ofPattern(\"[][]]\"); // Closing \u0027]\u0027 without previous opening \u0027[\u0027\n  DateTimeFormatter.ofPattern(\"TT\"); // Illegal pattern letter \u0027T\u0027\n  DateTimeFormatter.ofPattern(\"{\"); // Use of reserved character \u0027{\u0027\n  DateTimeFormatter.ofPattern(\"MMMMMM\"); // Too many consecutive pattern letters \u0027M\u0027\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2022.3\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InvalidComparatorMethodReference",
          "displayName": "Invalid method reference used for \u0027Comparator\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports method references mapped to the \u003ccode\u003eComparator\u003c/code\u003e interface that don\u0027t fulfill its contract.\n\u003cp\u003e\nSome method references, like \u003ccode\u003eInteger::max\u003c/code\u003e, can be mapped to the \u003ccode\u003eComparator\u003c/code\u003e interface.\nHowever, using them as \u003ccode\u003eComparator\u003c/code\u003e is meaningless and the result might be unpredictable.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ArrayList\u0026lt;Integer\u0026gt; ints \u003d foo();\n  ints.sort(Math::min);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  ArrayList\u0026lt;Integer\u0026gt; ints \u003d foo();\n  ints.sort(Comparator.reverseOrder());\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ComparatorMethodParameterNotUsed",
          "displayName": "Suspicious \u0027Comparator.compare()\u0027 implementation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports problems in \u003ccode\u003eComparator.compare()\u003c/code\u003e and \u003ccode\u003eComparable.compareTo()\u003c/code\u003e implementations.\n\u003cp\u003eThe following cases are reported:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e\n    A parameter is not used. Most likely this is a typo and the other parameter is compared\n    with itself, or the method is not implemented correctly.\n  \u003c/li\u003e\n  \u003cli\u003e\n    It\u0027s evident that the method does not return \u003ccode\u003e0\u003c/code\u003e for the same elements. Such a comparison method violates the contract\n    and can produce unpredictable results when equal elements are encountered. In particular,\n    sorting may fail with an exception on some data.\u003c/li\u003e\n  \u003cli\u003e\n    The comparison method never returns positive or negative value. To fulfill the contract, if the comparison method returns positive values,\n    it should also return negative ones if arguments are supplied in reversed order.\n  \u003c/li\u003e\n  \u003cli\u003e\n    The comparison method returns \u003ccode\u003eInteger.MIN_VALUE\u003c/code\u003e. While allowed by the contract, it may be error-prone, as some call sites\n    may incorrectly try to invert the return value of the comparison method using the unary minus operator.\n    The negated value of \u003ccode\u003eInteger.MIN_VALUE\u003c/code\u003e is \u003ccode\u003eInteger.MIN_VALUE\u003c/code\u003e.\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Comparator\u0026lt;String\u0026gt; lambda \u003d\n    (a, b) -\u0026gt; a.length() \u0026gt; b.length()\n              ? 0\n              : Math.random() \u0026gt; 0.5 ? -1 : 1;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "OverwrittenKey",
          "displayName": "Overwritten Map, Set, or array element",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code that overwrites a \u003ccode\u003eMap\u003c/code\u003e key, a \u003ccode\u003eSet\u003c/code\u003e element, or an array element in a sequence of\n\u003ccode\u003eadd\u003c/code\u003e/\u003ccode\u003eput\u003c/code\u003e calls or using a Java 9 factory method like \u003ccode\u003eSet.of\u003c/code\u003e (which will result in runtime exception).\n\u003cp\u003eThis usually occurs due to a copy-paste error.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  map.put(\"A\", 1);\n  map.put(\"B\", 2);\n  map.put(\"C\", 3);\n  map.put(\"D\", 4);\n  map.put(\"A\", 5); // duplicating key \"A\", overwrites the previously written entry\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.3\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MalformedFormatString",
          "displayName": "Malformed format string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports format strings that don\u0027t comply with the standard Java syntax.\n\u003cp\u003eBy default, the inspection considers a compile-time constant a format string if it\u0027s used as an argument to the corresponding methods on\n\u003ccode\u003ejava.util.Formatter\u003c/code\u003e, \u003ccode\u003ejava.lang.String\u003c/code\u003e, \u003ccode\u003ejava.io.PrintWriter\u003c/code\u003e or \u003ccode\u003ejava.io.PrintStream\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String.format(\"x \u003d %d, y \u003d %d\", 42);\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the inspection settings to mark additional classes and methods as related to string formatting.\u003c/p\u003e\n\u003cp\u003eAs an alternative, you can use the \u003ccode\u003eorg.intellij.lang.annotations.PrintFormat\u003c/code\u003e annotation\n  to mark the format string method parameter. In this case,\n  the format arguments parameter must immediately follow the format string and be the last method parameter. Example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void myFormatMethod(int mode, @PrintFormat String formatString, Object... args) {...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Methods annotated in this way will also be recognized by this inspection.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MisspelledEquals",
          "displayName": "\u0027equal()\u0027 instead of \u0027equals()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declarations of \u003ccode\u003eequal()\u003c/code\u003e with a single parameter.\nNormally, this is a typo and \u003ccode\u003eequals()\u003c/code\u003e is actually intended.\n\u003cp\u003eA quick-fix is suggested to rename the method to \u003ccode\u003eequals\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    public boolean equal(Object obj) {\n      return true;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    public boolean equals(Object obj) {\n      return true;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReplaceAllDot",
          "displayName": "Suspicious regex expression argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to\n\u003ccode\u003eString.replaceAll()\u003c/code\u003e or \u003ccode\u003eString.split()\u003c/code\u003e where the first argument is a single regex meta character argument.\n\u003cp\u003e\n  The regex meta characters are one of \u003ccode\u003e.$|()[{^?*+\\\u003c/code\u003e. They have a special meaning in regular expressions.\n  For example, calling \u003ccode\u003e\"ab.cd\".replaceAll(\".\", \"-\")\u003c/code\u003e produces \u003ccode\u003e\"-----\"\u003c/code\u003e, because the dot matches any character.\n  Most likely the escaped variant \u003ccode\u003e\"\\\\.\"\u003c/code\u003e was intended instead.\n\u003c/p\u003e\n\u003cp\u003e\n  Using \u003ccode\u003eFile.separator\u003c/code\u003e as a regex is also reported. The \u003ccode\u003eFile.separator\u003c/code\u003e has a platform specific value. It\n  equals to \u003ccode\u003e/\u003c/code\u003e on Linux and Mac but equals to \u003ccode\u003e\\\u003c/code\u003e on Windows, which is not a valid regular expression, so \n  such code is not portable.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  s.replaceAll(\".\", \"-\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  s.replaceAll(\"\\\\.\", \"-\");\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NullArgumentToVariableArgMethod",
          "displayName": "Confusing argument to varargs method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to variable arity methods that have a single argument\nin the vararg parameter position, which is either a \u003ccode\u003enull\u003c/code\u003e or an array of a subtype of the vararg parameter.\nSuch an argument may be confusing as it is unclear if a varargs or non-varargs call is desired.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String[] ss \u003d new String[]{\"foo\", \"bar\"};\n  System.out.printf(\"%s\", ss);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example only the first element of the array will be printed, not the entire array.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EqualsWhichDoesntCheckParameterClass",
          "displayName": "\u0027equals()\u0027 method which does not check class of parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eequals()\u003c/code\u003e methods that do not check the type of their parameter.\n\u003cp\u003eFailure to check the type of the parameter\n  in the \u003ccode\u003eequals()\u003c/code\u003e method may result in latent errors if the object is used in an untyped collection.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyClass {\n    int x;\n\n    @Override\n    public boolean equals(Object obj) {\n      // equals method should return false if obj is not MyClass\n      return ((MyClass)obj).x \u003d\u003d x;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CastToIncompatibleInterface",
          "displayName": "Casting to incompatible interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports type cast expressions where\nthe cast type is an interface and the cast expression has a class type that neither\nimplements the cast interface, nor has any visible subclasses that implement the cast interface.\n\u003cp\u003e\n  Although this might be intended, such a construct is most likely an error, and will\n  result in a \u003ccode\u003ejava.lang.ClassCastException\u003c/code\u003e at runtime.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface A {}\n  interface Z {}\n  static class C {}\n\n  void x(C c) {\n    if (c instanceof Z) {\n      A a \u003d ((A)c); // cast to incompatible interface \u0027A\u0027\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "OptionalGetWithoutIsPresent",
          "displayName": "Optional.get() is called without isPresent() check",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eget()\u003c/code\u003e on an \u003ccode\u003eOptional\u003c/code\u003e without checking that it has a value.\n\u003cp\u003eCalling \u003ccode\u003eOptional.get()\u003c/code\u003e on an empty \u003ccode\u003eOptional\u003c/code\u003e instance will throw an exception.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003evoid\u003c/b\u003e x(List\u0026lt;Integer\u003e list) {\n    \u003cb\u003efinal\u003c/b\u003e Optional\u0026lt;Integer\u003e optional \u003d\n      list.stream().filter(x -\u003e x \u003e 10).findFirst();\n    \u003cb\u003efinal\u003c/b\u003e Integer result \u003d optional.get(); // problem here\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringConcatenationMissingWhitespace",
          "displayName": "Whitespace may be missing in string concatenation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports string concatenations with missing whitespaces, that is where the left-hand side\nends with a Unicode letter or digit and the right-hand side starts with a Unicode letter or digit.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String sql \u003d \"SELECT column\" +\n               \"FROM table\";\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore concatenations with variable strings\u003c/b\u003e option to only report\n  when both the left and right side of the concatenation are literals.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "PrimitiveArrayArgumentToVariableArgMethod",
          "displayName": "Confusing primitive array argument to varargs method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any calls to a variable arity method where the call has a primitive array in\nthe variable arity parameter position (for example, \u003ccode\u003eSystem.out.printf(\"%s\", new int[]{1, 2, 3})\u003c/code\u003e).\nSuch a primitive-array argument may be confusing, as it will be wrapped as a single-element array, rather than each individual\nelement being boxed, as might be expected.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String.format(\"%s\", new int[]{1, 2, 3});\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String.format(\"%s\", (Object) new int[]{1, 2, 3});\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NumberEquality",
          "displayName": "Number comparison using \u0027\u003d\u003d\u0027, instead of \u0027equals()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code that uses \u003cb\u003e\u003d\u003d\u003c/b\u003e or \u003cb\u003e!\u003d\u003c/b\u003e instead of \u003ccode\u003eequals()\u003c/code\u003e to test for \u003ccode\u003eNumber\u003c/code\u003e equality.\n\u003cp\u003e\n  With auto-boxing, it is easy\n  to make the mistake of comparing two instances of a wrapper type instead of two primitives, for example \u003ccode\u003eInteger\u003c/code\u003e instead of\n  \u003ccode\u003eint\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  void foo(Integer a, Integer b) {\n    final boolean bool \u003d a \u003d\u003d b;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf \u003ccode\u003ea\u003c/code\u003e is known to be non-null, then it\u0027s safe to apply the \"unsafe\" quick-fix and get the result similar to the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  void foo(Integer a, Integer b) {\n    final boolean bool \u003d a.equals(b);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MismatchedStringBuilderQueryUpdate",
          "displayName": "Mismatched query and update of \u0027StringBuilder\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eStringBuilder\u003c/code\u003e or \u003ccode\u003eStringBuffer\u003c/code\u003e objects whose contents are read but not written to,\nor written to but not read.\n\u003cp\u003eSuch inconsistent reads and writes are pointless and probably indicate\n  dead, incomplete, or erroneous code.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public void m1() {\n    StringBuilder sb \u003d new StringBuilder();\n    sb.append(\"a\");\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ObjectEquality",
          "displayName": "Object comparison using \u0027\u003d\u003d\u0027, instead of \u0027equals()\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports code that uses \u003ccode\u003e\u003d\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e rather than \u003ccode\u003eequals()\u003c/code\u003e to test for object equality.\n\u003c/p\u003e\n\u003cp\u003e\n  Comparing objects using \u003ccode\u003e\u003d\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e is often a bug,\n  because it compares objects by identity instead of equality.\n  Comparisons to \u003ccode\u003enull\u003c/code\u003e are not reported.\n\u003c/p\u003e\n\u003cp\u003e\n  Array, \u003ccode\u003eString\u003c/code\u003e and \u003ccode\u003eNumber\u003c/code\u003e comparisons are reported by separate inspections.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  \u003cb\u003eif\u003c/b\u003e (list1 \u003d\u003d list2) {\n    \u003cb\u003ereturn\u003c/b\u003e;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  \u003cb\u003eif\u003c/b\u003e (Objects.equals(list1, list2)) {\n    \u003cb\u003ereturn\u003c/b\u003e;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eUse the inspection settings to configure exceptions for this inspection.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringConcatenationInMessageFormatCall",
          "displayName": "String concatenation as argument to \u0027MessageFormat.format()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports non-constant string concatenations used as an argument to a call to\n\u003ccode\u003eMessageFormat.format()\u003c/code\u003e.\n\u003cp\u003e\n  While occasionally intended, this is usually a misuse of the formatting method\n  and may even cause unexpected exceptions if the variables used in the concatenated string contain\n  special characters like \u003ccode\u003e{\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  Also, sometimes this could be the result\n  of mistakenly concatenating a string format argument by typing a \u003ccode\u003e+\u003c/code\u003e when a \u003ccode\u003e,\u003c/code\u003e was meant.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  String formatGreeting(String userName, int balance) {\n    return MessageFormat.format(\"Hello, \" + userName + \"! Your balance is {0}.\", balance);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  Here, the \u003ccode\u003euserName\u003c/code\u003e will be interpreted as a part of the format string, which may result\n  in \u003ccode\u003eIllegalArgumentException\u003c/code\u003e (for example, if \u003ccode\u003euserName\u003c/code\u003e is \u003ccode\u003e\"{\"\u003c/code\u003e).\n  This call should be probably replaced with \u003ccode\u003eMessageFormat.format(\"Hello, {0}! Your balance is {1}.\", userName, balance)\u003c/code\u003e.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CopyConstructorMissesField",
          "displayName": "Copy constructor misses field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports copy constructors that don\u0027t copy all the fields of the class.\n\u003cp\u003e\n  \u003ccode\u003efinal\u003c/code\u003e fields with initializers and \u003ccode\u003etransient\u003c/code\u003e fields are considered unnecessary to copy.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Point {\n\n    private int x;\n    private int y;\n\n    Point(int x, int y) {\n      this.x \u003d x;\n      this.y \u003d y;\n    }\n\n    Point(Point other) {\n      // fields x and y are not initialized\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EqualsAndHashcode",
          "displayName": "\u0027equals()\u0027 and \u0027hashCode()\u0027 not paired",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that override the\n\u003ccode\u003eequals()\u003c/code\u003e method but do not override the\n\u003ccode\u003ehashCode()\u003c/code\u003e method or vice versa, which can potentially lead to problems\nwhen the class is added to a \u003ccode\u003eCollection\u003c/code\u003e or a \u003ccode\u003eHashMap\u003c/code\u003e.\n\u003cp\u003eThe quick-fix generates the default implementation for an absent method.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass StringHolder {\n  String s;\n\n  @Override public int hashCode() {\n    return s !\u003d null ? s.hashCode() : 0;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nclass StringHolder {\n  String s;\n\n  @Override public int hashCode() {\n    return s !\u003d null ? s.hashCode() : 0;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this \u003d\u003d o) return true;\n    if (!(o instanceof StringHolder)) return false;\n\n    StringHolder holder \u003d (StringHolder)o;\n\n    if (s !\u003d null ? !s.equals(holder.s) : holder.s !\u003d null) return false;\n\n    return true;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "SuspiciousInvocationHandlerImplementation",
          "displayName": "Suspicious \u0027InvocationHandler\u0027 implementation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports implementations of \u003ccode\u003eInvocationHandler\u003c/code\u003e that do not proxy standard\n\u003ccode\u003eObject\u003c/code\u003e methods like \u003ccode\u003ehashCode()\u003c/code\u003e, \u003ccode\u003eequals()\u003c/code\u003e, and \u003ccode\u003etoString()\u003c/code\u003e.\n\u003cp\u003eFailing to handle these methods might cause unexpected problems upon calling them on a proxy instance.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  InvocationHandler myHandler \u003d (proxy, method, params) -\u0026gt; {\n    System.out.println(\"Hello World!\");\n    \u003cb\u003ereturn\u003c/b\u003e null;\n  };\n  Runnable myProxy \u003d (Runnable) Proxy.newProxyInstance(\n    Thread.currentThread().getContextClassLoader(),\n    \u003cb\u003enew\u003c/b\u003e Class[] {Runnable.class}, myHandler\n  );\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  This code snippet is designed to only proxy the \u003ccode\u003eRunnable.run()\u003c/code\u003e method.\n  However, calls to any \u003ccode\u003eObject\u003c/code\u003e methods, like \u003ccode\u003ehashCode()\u003c/code\u003e, are proxied as well.\n  This can lead to problems like a \u003ccode\u003eNullPointerException\u003c/code\u003e, for example, when adding \u003ccode\u003emyProxy\u003c/code\u003e to a \u003ccode\u003eHashSet\u003c/code\u003e.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2020.2\u003c/small\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ArrayEquality",
          "displayName": "Array comparison using \u0027\u003d\u003d\u0027, instead of \u0027Arrays.equals()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports operators \u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e used to test for array equality.\nIn most cases, testing for the equality of array contents is intended,\nwhich can be done with the \u003ccode\u003ejava.util.Arrays.equals()\u003c/code\u003e method.\n\u003cp\u003e\n  A quick-fix is suggested to replace \u003ccode\u003e\u003d\u003d\u003c/code\u003e with \u003ccode\u003ejava.util.Arrays.equals()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(Object[] x, Object[] y) {\n    boolean comparison \u003d x \u003d\u003d y;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(Object[] x, Object[] y) {\n    boolean comparison \u003d Arrays.equals(x, y);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EqualsBetweenInconvertibleTypes",
          "displayName": "\u0027equals()\u0027 between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eequals()\u003c/code\u003e where the target and argument are\nof incompatible types.\n\u003cp\u003eWhile such a call might theoretically be useful, most likely it is a bug.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  new HashSet\u0026lt;String\u0026gt;().equals(new TreeSet\u0026lt;Integer\u0026gt;());\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CompareToUsesNonFinalVariable",
          "displayName": "Non-final field referenced in \u0027compareTo()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports access to a non-\u003ccode\u003efinal\u003c/code\u003e field inside a \u003ccode\u003ecompareTo()\u003c/code\u003e implementation.\n\u003cp\u003e\n  Such access may result in \u003ccode\u003ecompareTo()\u003c/code\u003e\n  returning different results at different points in the object\u0027s lifecycle, which may in turn cause problems when\n  using the standard collections classes, for example \u003ccode\u003ejava.util.TreeSet\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\n  A quick-fix to make the field \u003ccode\u003efinal\u003c/code\u003e is available\n  only when there is no write access to the field, otherwise no fixes are suggested.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo implements Comparable\u0026lt;Foo\u0026gt;{\n    private int index;\n    Foo(int idx) {\n      index \u003d idx;\n    }\n    @Override\n    public int compareTo(Foo foo) {\n     return Integer.compare(this.index, foo.index);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo implements Comparable\u0026lt;Foo\u0026gt;{\n    private final int index;\n    Foo(int idx) {\n      index \u003d idx;\n    }\n    @Override\n    public int compareTo(Foo foo) {\n      return Integer.compare(this.index, foo.index);\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CapturingCleaner",
          "displayName": "Cleaner captures object reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eRunnable\u003c/code\u003e passed to a \u003ccode\u003eCleaner.register()\u003c/code\u003e capturing reference being registered.\nIf the reference is captured, it will never be phantom reachable and the cleaning action will never be invoked.\n\u003cp\u003ePossible sources of this problem:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eLambda using non-static methods, fields, or \u003ccode\u003ethis\u003c/code\u003e itself\u003c/li\u003e\n  \u003cli\u003eNon-static inner class (anonymous or not) always captures this reference in java up to 18 version\u003c/li\u003e\n  \u003cli\u003eInstance method reference\u003c/li\u003e\n  \u003cli\u003eAccess to outer class non-static members from non-static inner class\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eSample of code that will be reported: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int fileDescriptor;\n  Cleaner.Cleanable cleanable \u003d Cleaner.create().register(this, () -\u003e {\n    System.out.println(\"adsad\");\n    //\u003ci\u003ethis\u003c/i\u003e is captured via \u003ci\u003efileDescriptor\u003c/i\u003e\n    fileDescriptor \u003d 0;\n  });\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis inspection only reports if the language level of the project or module is 9 or higher.\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MathRoundingWithIntArgument",
          "displayName": "Call math rounding with \u0027int\u0027 argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eround()\u003c/code\u003e, \u003ccode\u003eceil()\u003c/code\u003e,\n\u003ccode\u003efloor()\u003c/code\u003e, \u003ccode\u003erint()\u003c/code\u003e methods for \u003ccode\u003eMath\u003c/code\u003e and \u003ccode\u003eStrictMath\u003c/code\u003e with \u003ccode\u003eint\u003c/code\u003e as the argument.\n\u003cp\u003eThese methods could be called in case the argument is expected to be \u003ccode\u003elong\u003c/code\u003e or \u003ccode\u003edouble\u003c/code\u003e, and it may have unexpected results.\u003c/p\u003e\n\u003cp\u003eThe inspection provides a fix that simplify such expressions (except \u003ccode\u003eround\u003c/code\u003e) to cast to \u003ccode\u003edouble\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int i \u003d 2;\n  double d1 \u003d Math.floor(i);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int i \u003d 2;\n  double d1 \u003d i;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2023.1\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IterableUsedAsVararg",
          "displayName": "Iterable is used as vararg",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports suspicious usages of \u003ccode\u003eCollection\u003c/code\u003e or \u003ccode\u003eIterable\u003c/code\u003e in vararg method calls.\n\u003cp\u003eFor example, in the following method:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u0026lt;T\u0026gt; boolean contains(T needle, T... haystack) {...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ea call like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  if(contains(\"item\", listOfStrings)) {...}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003elooks suspicious as the list will be wrapped into a single element array.\n  Such code can be successfully compiled and will likely run without\n  exceptions, but it\u0027s probably used by mistake.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2019.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ClassGetClass",
          "displayName": "Suspicious \u0027Class.getClass()\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003egetClass()\u003c/code\u003e methods that are called on a \u003ccode\u003ejava.lang.Class\u003c/code\u003e instance.\n\u003cp\u003eThis is usually a mistake as the result is always equivalent to \u003ccode\u003eClass.class\u003c/code\u003e.\nIf it\u0027s a mistake, then it\u0027s better to remove the \u003ccode\u003egetClass()\u003c/code\u003e call and use the qualifier directly.\n  If the behavior is intended, then it\u0027s better to write \u003ccode\u003eClass.class\u003c/code\u003e explicitly to avoid confusion.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(Class\u0026lt;?\u0026gt; clazz) {\n    String name \u003d clazz.getClass().getName();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter one of the possible quick-fixes is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(Class\u0026lt;?\u0026gt; clazz) {\n    String name \u003d clazz.getName();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CastConflictsWithInstanceof",
          "displayName": "Cast conflicts with \u0027instanceof\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports type cast expressions that are preceded by an \u003ccode\u003einstanceof\u003c/code\u003e check for a different type.\n\u003cp\u003e\n  Although this might be intended, such a construct is most likely an error, and will\n  result in a \u003ccode\u003ejava.lang.ClassCastException\u003c/code\u003e at runtime.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Main {\n    int whenCharSequenceCastToNumber(Object o){\n      if (o instanceof CharSequence) {\n        return ((Number) o).intValue();\n      }\n      return 0;\n    }\n\n    int earlyReturnWhenNotCharSequence(Object o){\n      if (!(o instanceof CharSequence)) return 0;\n      return ((Number)o).intValue();\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ConstantValue",
          "displayName": "Constant values",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports expressions and conditions that always produce the same result, like true, false, null, or zero.\nSuch expressions could be replaced with the corresponding constant value. Very often though they signal about a bug\nin the code.\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  // always true\n  // root cause: || is used instead of \u0026\u0026\n  if (x \u0026gt; 0 || x \u0026lt; 10) {}\n\n  System.out.println(str.trim());\n  // always false\n  // root cause: variable was dereferenced before null-check\n  if (str \u003d\u003d null) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n  The inspection behavior may be controlled by a number of annotations, such as \n  \u003ca href\u003d\"https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html\"\u003enullability\u003c/a\u003e annotations,\n  \u003ccode\u003e\u003ca href\u003d\"https://www.jetbrains.com/help/idea/contract-annotations.html\"\u003e@Contract\u003c/a\u003e\u003c/code\u003e annotation, \n  \u003ccode\u003e@Range\u003c/code\u003e annotation and so on.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eConfigure the inspection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eUse the \u003cb\u003eDon\u0027t report assertions with condition statically proven to be always true\u003c/b\u003e option to avoid reporting assertions that were\n    statically proven to be always true. This also includes conditions like \u003ccode\u003eif (alwaysFalseCondition) throw new IllegalArgumentException();\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eIgnore assert statements\u003c/b\u003e option to control how the inspection treats \u003ccode\u003eassert\u003c/code\u003e statements. By default, the option\n    is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored\n    (-da mode).\u003c/li\u003e\n  \u003cli\u003eUse the \u003cb\u003eWarn when constant is stored in variable\u003c/b\u003e option to display warnings when variable is used, whose value is known to be a constant.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\n  Before IntelliJ IDEA 2022.3, this inspection was part of \"Constant Conditions \u0026 Exceptions\" inspection. Now, it split into two inspections:\n  \"Constant Values\" and \"Nullability and data flow problems\".\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "EqualsOnSuspiciousObject",
          "displayName": "\u0027equals()\u0027 called on \u0027StringBuilder\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eequals()\u003c/code\u003e calls on \u003ccode\u003eStringBuilder\u003c/code\u003e or \u003ccode\u003eStringBuffer\u003c/code\u003e instances.\n\u003cp\u003eThe \u003ccode\u003eequals()\u003c/code\u003e method is not overridden in these classes, so it may return \u003ccode\u003efalse\u003c/code\u003e even when the contents of the two objects are the same.\nIf the reference equality is intended, it\u0027s better to use \u003ccode\u003e\u003d\u003d\u003c/code\u003e to avoid confusion.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  public void test(StringBuilder sb1, StringBuilder sb2) {\n    boolean result \u003d sb1.equals(sb2); // Suspicious\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ComparableImplementedButEqualsNotOverridden",
          "displayName": "\u0027Comparable\u0027 implemented but \u0027equals()\u0027 not overridden",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports classes that implement \u003ccode\u003ejava.lang.Comparable\u003c/code\u003e\nbut do not override \u003ccode\u003eequals()\u003c/code\u003e.\n\u003cp\u003e\n  If \u003ccode\u003eequals()\u003c/code\u003e\n  is not overridden, the \u003ccode\u003eequals()\u003c/code\u003e implementation is not consistent with\n  the \u003ccode\u003ecompareTo()\u003c/code\u003e implementation. If an object of such a class is added\n  to a collection such as \u003ccode\u003ejava.util.SortedSet\u003c/code\u003e, this collection will violate\n  the contract of \u003ccode\u003ejava.util.Set\u003c/code\u003e, which is defined in terms of\n  \u003ccode\u003eequals()\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Length implements Comparable\u0026lt;Length\u003e {\n    private int cm \u003d 0;\n\n    @Override\n    public int compareTo(@NotNull Length o) {\n      if (cm \u003d\u003d o.cm) return 0;\n      return cm \u0026lt; o.cm ? -1 : 1;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Length implements Comparable\u0026lt;Length\u003e {\n    private int cm \u003d 0;\n\n    @Override\n    public int compareTo(@NotNull Length o) {\n      if (cm \u003d\u003d o.cm) return 0;\n      return cm \u0026lt; o.cm ? -1 : 1;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      return o instanceof Length \u0026\u0026 compareTo((Length) o) \u003d\u003d 0;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "InstanceofIncompatibleInterface",
          "displayName": "\u0027instanceof\u0027 with incompatible interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003einstanceof\u003c/code\u003e expressions where\nthe compared type is an interface, and the compared expression has a class type that neither\nimplements the compared interface, nor has any visible subclasses which implement the compared interface.\n\u003cp\u003e\n  Although that might be intended, normally such a construct is most likely an error, where\n  the resulting \u003ccode\u003einstanceof\u003c/code\u003e expression always evaluates to \u003ccode\u003efalse\u003c/code\u003e.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface I1 {}\n\n  interface I2 {}\n\n  interface I3 extends I1 {}\n\n  static class Sub1 implements I1 {}\n\n  static class Sub2 extends Sub1 implements I2 {\n    void test(Sub1 sub1) {\n      if (sub1 instanceof I3) { // here \u0027I3\u0027 is incompatible interface\n      }\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NonShortCircuitBoolean",
          "displayName": "Non-short-circuit boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of the non-short-circuit forms of boolean \u0027and\u0027 and \u0027or\u0027 (\u003ccode\u003e\u0026amp;\u003c/code\u003e, \u003ccode\u003e|\u003c/code\u003e, \u003ccode\u003e\u0026amp;\u003d\u003c/code\u003e and \u003ccode\u003e|\u003d\u003c/code\u003e).\nAlthough the non-short-circuit versions are occasionally useful, in most cases the short-circuit forms (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e\nand \u003ccode\u003e||\u003c/code\u003e) are intended and such unintentional usages may lead to subtle bugs.\n\u003cp\u003e\n  A quick-fix is suggested to use the short-circuit versions.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(boolean x, boolean y, boolean z) {\n    if (x | y) { x |\u003d z; }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(boolean x, boolean y) {\n    if (x || y) { x \u003d x || z; }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ImplicitArrayToString",
          "displayName": "Call to \u0027toString()\u0027 on array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports arrays used in \u003ccode\u003eString\u003c/code\u003e concatenations or passed as parameters to \u003ccode\u003ejava.io.PrintStream\u003c/code\u003e\nmethods, such as \u003ccode\u003eSystem.out.println()\u003c/code\u003e.\n\u003cp\u003e\n  Usually, the content of the array is meant to be used and not the array object itself.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void print(Object[] objects) {\n    System.out.println(objects);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void print(Object[] objects) {\n    System.out.println(Arrays.toString(objects));\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousArrayCast",
          "displayName": "Suspicious array cast",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports suspicious array casts.\nAn array cast is considered suspicious when it casts to a more specific array type. Such a cast is legal at compile\ntime but may fail with a \u003ccode\u003eClassCastException\u003c/code\u003e at runtime.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  Number[] numbers \u003d new Number[]{1L, 2L, 4L};\n  Long[] longs \u003d (Long[])numbers;\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "HashCodeUsesNonFinalVariable",
          "displayName": "Non-final field referenced in \u0027hashCode()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports implementations of \u003ccode\u003ehashCode()\u003c/code\u003e that access\nnon-\u003ccode\u003efinal\u003c/code\u003e variables.\n\u003cp\u003e\n  Such access may result in \u003ccode\u003ehashCode()\u003c/code\u003e\n  returning different values at different points in the object\u0027s lifecycle, which may in turn cause problems when\n  using the standard collections classes.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Drink {\n    String name;\n    Drink(String name) { this.name \u003d name; }\n    @Override public int hashCode() {\n      return Objects.hash(name); //warning\n    }\n  }\n  ...\n    Drink coffee \u003d new Drink(\"Coffee\");\n    priceMap.put(coffee, 10.0);\n    coffee.name \u003d \"Tea\";\n    double coffeePrice \u003d priceMap.get(coffee); //not found\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA quick-fix is suggested to make the field final:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Drink {\n    final String name;\n    ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousIndentAfterControlStatement",
          "displayName": "Suspicious indentation after control statement without braces",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports suspicious indentation of statements after a control statement without braces.\n\u003cp\u003e\n  Such indentation can make it look like the statement is inside the control statement,\n  when in fact it will be executed unconditionally after the control statement.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Bar {\n      void foo(int i) {\n          if (i \u003d\u003d 0)\n              System.out.println(\"foo\");\n              System.out.println(\"bar\"); // warning\n          if (i \u003d\u003d 1);\n              System.out.println(\"great\"); // warning\n          if (i \u003d\u003d 42)\n              System.out.println(\"answer\");\n                  System.out.println(\"question\"); // warning\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousListRemoveInLoop",
          "displayName": "Suspicious \u0027List.remove()\u0027 in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003elist.remove(index)\u003c/code\u003e calls inside an ascending counted loop.\n\u003cp\u003e\n  This is suspicious as the list becomes\n  shorter after the removal, and the next element gets skipped. A simple fix is to decrease the index variable\n  after the removal,\n  but probably removing via an iterator or using the \u003ccode\u003eremoveIf()\u003c/code\u003e method (Java 8 and later) is a more robust alternative.\n  If you don\u0027t expect that \u003ccode\u003eremove()\u003c/code\u003e will be called more than once in a loop, consider adding a \u003ccode\u003ebreak\u003c/code\u003e after it.\n\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  public static void main(String[] args) {\n    process(new ArrayList\u0026lt;\u003e(\n      Arrays.asList(\"1\", \"2\", \"|\", \"3\", \"4\")));\n  }\n\n  static void process(List\u0026lt;String\u0026gt; list) {\n    for (int i \u003d 0; i \u0026lt; list.size(); i++) {\n      if (list.get(i).equals(\"|\")) {\n        list.remove(i);\n        continue;\n      }\n      System.out.println(list.get(i));\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe code looks like \u003ccode\u003e1 2 3 4\u003c/code\u003e is going to be printed, but in reality, \u003ccode\u003e3\u003c/code\u003e will be skipped in the output.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2018.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CovariantEquals",
          "displayName": "Covariant \u0027equals()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eequals()\u003c/code\u003e methods taking an argument type other than\n\u003ccode\u003ejava.lang.Object\u003c/code\u003e if the containing class does not have other overloads of\n\u003ccode\u003eequals()\u003c/code\u003e that take \u003ccode\u003ejava.lang.Object\u003c/code\u003e as\nits argument type.\n\u003cp\u003e\n  A covariant version of \u003ccode\u003eequals()\u003c/code\u003e does not override the\n  \u003ccode\u003eObject.equals(Object)\u003c/code\u003e method. It may cause unexpected\n  behavior at runtime. For example, if the class is used to construct\n  one of the standard collection classes, which expect that the\n  \u003ccode\u003eObject.equals(Object)\u003c/code\u003e method is overridden.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n      public boolean equals(Foo foo) {  // warning\n          return false;\n      }\n  }\n  class Bar {\n      public boolean equals(Bar bar) {  // no warning here\n          return false;\n      }\n      @Override\n      public boolean equals(Object obj) {\n          return false;\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "WriteOnlyObject",
          "displayName": "Write-only object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports objects that are modified but never queried.\n\u003cp\u003eThe inspection relies on the method mutation contract, which could be inferred\n  or pre-annotated for some library methods. This inspection does not report collections, maps, and string builders, as these types\n  are reported by other more precise inspections.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  AtomicReference\u0026lt;String\u0026gt; ref \u003d new AtomicReference\u0026lt;\u0026gt;();\n  ref.set(\"hello\"); // ref is never used again\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the \u003cb\u003eIgnore impure constructors\u003c/b\u003e option to control whether to process objects created by constructor or method whose purity is not known.\n  Unchecking the option may introduce some false-positives if the object reference is intentionally leaked during the construction.\n\u003c/p\u003e\n\u003cb\u003e\u003csmall\u003eNew in 2021.2\u003c/small\u003e\u003c/b\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EqualsWithItself",
          "displayName": "\u0027equals()\u0027 called on itself",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003eequals()\u003c/code\u003e or \u003ccode\u003ecompareTo()\u003c/code\u003e where an object is compared for equality\nwith itself.\n\u003cp\u003eAccording to the method contracts, these operations will always return\n  \u003ccode\u003etrue\u003c/code\u003e for \u003ccode\u003eequals()\u003c/code\u003e or \u003ccode\u003e0\u003c/code\u003e for \u003ccode\u003ecompareTo()\u003c/code\u003e. The inspection also checks\n  the calls to \u003ccode\u003eObjects.equals()\u003c/code\u003e, \u003ccode\u003eObjects.deepEquals()\u003c/code\u003e,\n  \u003ccode\u003eArrays.equals()\u003c/code\u003e, \u003ccode\u003eComparator.compare\u003c/code\u003e, and the like.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n    boolean foo(Object o) {\n        return o.equals(o); // warning\n    }\n\n    boolean bar(String[] ss) {\n        return Arrays.equals(ss, ss); // warning\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  Use the option to report test assertions report only on non-extendable library classes (like \u003ccode\u003eString\u003c/code\u003e) and primitive types.\n  This option could be useful, when tests check \u003ccode\u003eequals\u003c/code\u003e methods.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "Contract",
          "displayName": "Contract issues",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports issues in method \u003ccode\u003e@Contract\u003c/code\u003e annotations. The types of issues that can be reported are:\n\u003cul\u003e\n\u003cli\u003eErrors in contract syntax\u003c/li\u003e\n\u003cli\u003eContracts that do not conform to the method signature (wrong parameter count)\u003c/li\u003e\n\u003cli\u003eMethod implementations that contradict the contract (e.g. return \u003ccode\u003etrue\u003c/code\u003e when the contract says \u003ccode\u003efalse\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // method has no parameters, but contract expects 1\n  @Contract(\"_ -\u003e fail\")\n  \u003cb\u003evoid\u003c/b\u003e x() {\n    \u003cb\u003ethrow\u003c/b\u003e new AssertionError();\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "IteratorHasNextCallsIteratorNext",
          "displayName": "\u0027Iterator.hasNext()\u0027 which calls \u0027next()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports implementations of \u003ccode\u003eIterator.hasNext()\u003c/code\u003e or \u003ccode\u003eListIterator.hasPrevious()\u003c/code\u003e that call\n\u003ccode\u003eIterator.next()\u003c/code\u003e or \u003ccode\u003eListIterator.previous()\u003c/code\u003e on the iterator instance. Such calls are almost certainly an error, as methods\nlike \u003ccode\u003ehasNext()\u003c/code\u003e should not modify the iterators state, while \u003ccode\u003enext()\u003c/code\u003e should.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyIterator implements Iterator\u0026lt;Integer\u0026gt; {\n    public boolean hasNext() {\n      return next() !\u003d null;\n    }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "EmptyStatementBody",
          "displayName": "Statement with empty body",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003edo\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, and \u003ccode\u003eswitch\u003c/code\u003e statements\nwith empty bodies.\n\u003cp\u003eWhile occasionally intended, such code is confusing and is often the result of a typo.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003eThis inspection is disabled in JSP files.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SortedCollectionWithNonComparableKeys",
          "displayName": "Sorted collection with non-comparable elements",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports construction of sorted collections, for example \u003ccode\u003eTreeSet\u003c/code\u003e, that rely on natural ordering,\nwhose element type doesn\u0027t implement the \u003ccode\u003eComparable\u003c/code\u003e interface.\n\u003cp\u003eIt\u0027s unlikely that such a collection will work properly.\u003c/p\u003e\n\u003cp\u003e\n  A false positive is possible if the collection element type is a non-comparable super-type,\n  but the collection is intended to only hold comparable sub-types. Even if this is the case,\n  it\u0027s better to narrow the collection element type or declare the super-type as \u003ccode\u003eComparable\u003c/code\u003e because the mentioned approach is error-prone.\n\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  The inspection also reports cases when the collection element is a type parameter which is not declared as \u003ccode\u003eextends Comparable\u003c/code\u003e.\n  You can suppress the warnings on type parameters using the provided option (for example, to keep the API compatibility).\n\u003c/p\u003e\n\u003cp\u003e\n  \u003csmall\u003eNew in 2018.3\u003c/small\u003e\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StaticFieldReferenceOnSubclass",
          "displayName": "Static field referenced via subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports accesses to static fields where the call is\nqualified by a subclass of the declaring class, rather than by the declaring class itself.\n\u003cp\u003e\n  Java allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Parent {\n    static int foo \u003d 0;\n  }\n\n  class Child extends Parent { }\n\n  void bar() {\n    System.out.println(Child.foo);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied, the result looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Parent {\n    static int foo \u003d 0;\n  }\n\n  class Child extends Parent { }\n\n  void bar() {\n    System.out.println(Parent.foo);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SuspiciousArrayMethodCall",
          "displayName": "Suspicious \u0027Arrays\u0027 method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to non-generic-array manipulation methods like \u003ccode\u003eArrays.fill()\u003c/code\u003e with mismatched argument types.\nSuch calls don\u0027t do anything useful and are likely to be mistakes.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  int foo(String[] strings) {\n    return Arrays.binarySearch(strings, 1);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003csmall\u003eNew in 2017.2\u003c/small\u003e\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "StringEquality",
          "displayName": "String comparison using \u0027\u003d\u003d\u0027, instead of \u0027equals()\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code that uses of \u003cb\u003e\u003d\u003d\u003c/b\u003e or \u003cb\u003e!\u003d\u003c/b\u003e to compare strings.\n\u003cp\u003e\n  These operators determine referential equality instead of comparing content.\n  In most cases, strings should be compared using \u003ccode\u003eequals()\u003c/code\u003e,\n  which does a character-by-character comparison when the strings are different objects.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(String s, String t) {\n    final boolean b \u003d t \u003d\u003d s;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf \u003ccode\u003et\u003c/code\u003e is known to be non-null, then it\u0027s safe to apply the \"unsafe\" quick-fix and get the result similar to the following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void foo(String s, String t) {\n    final boolean b \u003d t.equals(s);\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "ReflectionForUnavailableAnnotation",
          "displayName": "Reflective access to a source-only annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports attempts to reflectively check for the presence of a non-runtime annotation.\n\u003cp\u003eUsing \u003ccode\u003eClass.isAnnotationPresent()\u003c/code\u003e to test for an annotation\n  whose retention policy is set to \u003ccode\u003eSOURCE\u003c/code\u003e or \u003ccode\u003eCLASS\u003c/code\u003e\n  (the default) will always have a negative result. This mistake is easy to overlook.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  {\n    getClass().isAnnotationPresent(SourceAnnotation.class); //always false\n  }\n\n  @Retention(RetentionPolicy.SOURCE)\n  @interface SourceAnnotation {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "NewObjectEquality",
          "displayName": "New object is compared using \u0027\u003d\u003d\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports code that applies \u003ccode\u003e\u003d\u003d\u003c/code\u003e or \u003ccode\u003e!\u003d\u003c/code\u003e to a newly allocated object\ninstead of calling \u003ccode\u003eequals()\u003c/code\u003e.\n\u003cp\u003e\n  The references to newly allocated objects cannot point at existing objects,\n  thus the comparison will always evaluate to \u003ccode\u003efalse\u003c/code\u003e. The inspection may also report newly\n  created objects returned from simple methods.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(Object obj) {\n    if (new Object() \u003d\u003d obj) {...}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  void test(Object obj) {\n    if (new Object().equals(obj)) {...}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\n  \u003csmall\u003eNew in 2018.3\u003c/small\u003e\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "MismatchedArrayReadWrite",
          "displayName": "Mismatched read and write of array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "231.9011.34",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports arrays whose contents are read but not updated,\nor updated but not read. Such inconsistent reads and writes are pointless and probably indicate\ndead, incomplete or erroneous code.\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  final int[] bar \u003d new int[3];\n  bar[2] \u003d 3;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Redundant constructs",
      "inspections": [
        {
          "shortName": "RemoveCurlyBracesFromTemplate",
          "displayName": "Redundant curly braces in string template",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of curly braces in string templates around simple identifiers.\n\u003cp\u003eUse the \u0027Remove curly braces\u0027 quick-fix to remove the redundant braces.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun redundant() {\n     val x \u003d 4\n     val y \u003d \"${x}\" // \u0026lt;\u003d\u003d redundant\n  }\n\n  fun correctUsage() {\n      val x \u003d \"x\"\n      val y \u003d \"${x.length}\" // \u0026lt;\u003d\u003d Ok\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun redundant() {\n     val x \u003d 4\n     val y \u003d \"$x\"\n  }\n\n  fun correctUsage() {\n      val x \u003d \"x\" \u0026lt;\u003d\u003d Updated\n      val y \u003d \"${x.length}\"\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveRedundantQualifierName",
          "displayName": "Redundant qualifier name",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant qualifiers (or their parts) on class names, functions, and properties.\n\u003cp\u003e\n    A fully qualified name is an unambiguous identifier that specifies which object, function, or property a call refers to.\n    In the contexts where the name can be shortened, the inspection informs on the opportunity and the associated\n    \u0027Remove redundant qualifier name\u0027 quick-fix allows amending the code.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  package my.simple.name\n  import kotlin.Int.Companion.MAX_VALUE\n\n  class Foo\n\n  fun main() {\n      val a \u003d my.simple.name.Foo()    // \u0027Foo\u0027 resides in the declared \u0027my.simple.name\u0027 package, qualifier is redundant\n      val b \u003d kotlin.Int.MAX_VALUE    // Can be replaced with \u0027MAX_VALUE\u0027 since it\u0027s imported\n      val c \u003d kotlin.Double.MAX_VALUE // Can be replaced with \u0027Double.MAX_VALUE\u0027 since built-in types are imported automatically\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  package my.simple.name\n  import kotlin.Int.Companion.MAX_VALUE\n\n  class Foo\n\n  fun main() {\n      val a \u003d Foo()\n      val b \u003d MAX_VALUE\n      val c \u003d Double.MAX_VALUE\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinRedundantDiagnosticSuppress",
          "displayName": "Redundant diagnostic suppression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports usages of \u003ccode\u003e@Suppress\u003c/code\u003e annotations that can be safely removed because the compiler diagnostic they affect is no longer applicable in this context.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun doSmth(@Suppress(\"UNUSED_PARAMETER\") used: Int) {\n    println(used)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun doSmth(used: Int) {\n    println(used)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "KotlinDoubleNegation",
          "displayName": "Redundant double negation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant double negations.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  val truth \u003d !!true\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveForLoopIndices",
          "displayName": "Unused loop index",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003efor\u003c/code\u003e loops iterating over a collection using the \u003ccode\u003ewithIndex()\u003c/code\u003e function and not using the index variable.\n\u003cp\u003eUse the \"Remove indices in \u0027for\u0027 loop\" quick-fix to clean up the code.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(bar: List\u0026lt;String\u0026gt;) {\n     for ((index : Int, value: String) in bar.withIndex()) { // \u0026lt;\u003d\u003d \u0027index\u0027 is unused\n         println(value)\n     }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(bar: List\u0026lt;String\u0026gt;) {\n      for (value: String in bar) { // \u0026lt;\u003d\u003d \u0027.withIndex()\u0027 and \u0027index\u0027 are removed\n          println(value)\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantElvisReturnNull",
          "displayName": "Redundant \u0027?: return null\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant \u003ccode\u003e?: return null\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(): Int? {\n      ...\n  }\n\n  fun test() : Int? {\n      return foo() \u003cb\u003e?: return null\u003c/b\u003e\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(): Int? {\n      ...\n  }\n\n  fun test() : Int? {\n      return foo()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantVisibilityModifier",
          "displayName": "Redundant visibility modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports visibility modifiers that match the default visibility of an element\n(\u003ccode\u003epublic\u003c/code\u003e for most elements, \u003ccode\u003eprotected\u003c/code\u003e for members that override a protected member).\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantExplicitType",
          "displayName": "Obvious explicit type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports local variables\u0027 explicitly given types which are obvious and thus redundant, like \u003ccode\u003eval f: Foo \u003d Foo()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Point(val x: Int, val y: Int)\n\n  fun foo() {\n      val t: \u003cb\u003eBoolean\u003c/b\u003e \u003d true\n      val p: \u003cb\u003ePoint\u003c/b\u003e \u003d Point(1, 2)\n      val i: \u003cb\u003eInt\u003c/b\u003e \u003d 42\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Point(val x: Int, val y: Int)\n\n  fun foo() {\n      val t \u003d true\n      val p \u003d Point(1, 2)\n      val i \u003d 42\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantCompanionReference",
          "displayName": "Redundant \u0027Companion\u0027 reference",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant \u003ccode\u003eCompanion\u003c/code\u003e reference.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A {\n      \u003cb\u003ecompanion object\u003c/b\u003e {\n          fun create() \u003d A()\n      }\n  }\n  fun test() {\n      val s \u003d A.\u003cb\u003eCompanion\u003c/b\u003e.create()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class A {\n      \u003cb\u003ecompanion object\u003c/b\u003e {\n          fun create() \u003d A()\n      }\n  }\n  fun test() {\n      val s \u003d A.create()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "NullChecksToSafeCall",
          "displayName": "Null-checks can be replaced with safe-calls",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports chained null-checks that can be replaced with safe-calls.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(my: My?) {\n      if (my !\u003d null \u0026\u0026 my.foo() !\u003d null) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(my: My?) {\n      if (my?.foo() !\u003d null) {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantIf",
          "displayName": "Redundant \u0027if\u0027 statement",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003eif\u003c/code\u003e statements which can be simplified to a single statement.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test() {\n      if (foo()) {\n         return true\n      } else {\n         return false\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test() {\n      return foo()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveSingleExpressionStringTemplate",
          "displayName": "Redundant string template",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports single-expression string templates that can be safely removed.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  val x \u003d \"Hello\"\n  val y \u003d \"$x\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  val x \u003d \"Hello\"\n  val y \u003d x // \u0026lt;\u003d\u003d Updated\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveToStringInStringTemplate",
          "displayName": "Redundant call to \u0027toString()\u0027 in string template",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports calls to \u003ccode\u003etoString()\u003c/code\u003e in string templates that can be safely removed.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun foo(a: Int, b: Int) \u003d a + b\n\n  fun test(): String {\n      return \"Foo: ${foo(0, 4).toString()}\" // \u0027toString()\u0027 is redundant\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  fun foo(a: Int, b: Int) \u003d a + b\n\n  fun test(): String {\n      return \"Foo: ${foo(0, 4)}\"\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "KotlinUnusedImport",
          "displayName": "Unused import directive",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant \u003ccode\u003eimport\u003c/code\u003e statements.\n\n\u003cp\u003eDefault and unused imports can be safely removed.\u003c/p\u003e\n\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  import kotlin.*\n  import kotlin.collections.*\n  import kotlin.comparisons.*\n  import kotlin.io.*\n  import kotlin.ranges.*\n  import kotlin.sequences.*\n  import kotlin.text.*\n\n  // jvm specific\n  import java.lang.*\n  import kotlin.jvm.*\n\n  // js specific\n  import kotlin.js.*\n\n  import java.io.* // this import is unused and could be removed\n  import java.util.*\n\n  fun foo(list: ArrayList\u0026lt;String\u0026gt;) {\n      list.add(\"\")\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnnecessaryOptInAnnotation",
          "displayName": "Unnecessary \u0027@OptIn\u0027 annotation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports unnecessary opt-in annotations that can be safely removed.\n\n\u003cp\u003e\u003ccode\u003e@OptIn\u003c/code\u003e annotation is required for the code using experimental APIs that can change\n    any time in the future. This annotation becomes useless and possibly misleading if no such API is used\n    (e.g., when the experimental API becomes stable and does not require opting in its usage anymore).\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cb\u003eRemove annotation\u003c/b\u003e quick-fix can be used to remove the unnecessary \u003ccode\u003e@OptIn\u003c/code\u003e annotation.\n\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @OptIn(ExperimentalApi::class)\n  fun foo(x: Bar) {\n      x.baz()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(x: Bar) {\n      x.baz()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantNullableReturnType",
          "displayName": "Redundant nullable return type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports functions and variables with nullable return type which never return or become \u003ccode\u003enull\u003c/code\u003e.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun greeting(user: String): String? \u003d \"Hello, $user!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun greeting(user: String): String \u003d \"Hello, $user!\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantRequireNotNullCall",
          "displayName": "Redundant \u0027requireNotNull\u0027 or \u0027checkNotNull\u0027 call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant \u003ccode\u003erequireNotNull\u003c/code\u003e or \u003ccode\u003echeckNotNull\u003c/code\u003e call on non-nullable expressions.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(i: Int) {\n      requireNotNull(i) // This \u0027i\u0027 is always not null, so this \u0027requireNotNull\u0027 call is redundant.\n      ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(i: Int) {\n      ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantWith",
          "displayName": "Redundant \u0027with\u0027 call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant \u003ccode\u003ewith\u003c/code\u003e function calls that don\u0027t access anything from the receiver.\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyClass {\n      fun f(): String \u003d \"\"\n  }\n\n  fun testRedundant() {\n      with(c) { // \u0026lt;\u003d\u003d \u0027with\u0027 is redundant since \u0027c\u0027 isn\u0027t used\n          println(\"1\")\n      }\n  }\n\n  fun testOk() {\n      val c \u003d MyClass()\n      with(c) { // \u0026lt;\u003d\u003d OK because \u0027f()\u0027 is effectively \u0027c.f()\u0027\n          println(f())\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RemoveRedundantSpreadOperator",
          "displayName": "Redundant spread operator",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the use of a redundant spread operator for a family of \u003ccode\u003earrayOf\u003c/code\u003e function calls.\n\u003cp\u003eUse the \u0027Remove redundant spread operator\u0027 quick-fix to clean up the code.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(vararg s: String) { }\n\n  fun bar(ss: Array\u0026lt;String\u0026gt;) {\n      foo(*arrayOf(\"abc\"))       // for the both calls of \u0027foo\u0027, array creation\n      foo(*arrayOf(*ss, \"zzz\"))  // and its subsequent \"spreading\" is redundant\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(vararg s: String) { }\n\n  fun bar(ss: Array\u0026lt;String\u0026gt;) {\n      foo(\"abc\")\n      foo(*ss, \"zzz\")\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantConstructorKeyword",
          "displayName": "Redundant \u0027constructor\u0027 keyword",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant constructor keywords on primary constructors.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo \u003cb\u003econstructor\u003c/b\u003e(x: Int, y: Int)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo(x: Int, y: Int)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveExplicitSuperQualifier",
          "displayName": "Unnecessary supertype qualification",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003esuper\u003c/code\u003e member calls with redundant supertype qualification.\n\u003cp\u003e\n    Code in a derived class can call its superclass functions and property accessors implementations using the \u003ccode\u003esuper\u003c/code\u003e keyword.\n    To specify the supertype from which the inherited implementation is taken, \u003ccode\u003esuper\u003c/code\u003e can be qualified by the supertype name in\n    angle brackets, e.g. \u003ccode\u003esuper\u0026lt;Base\u0026gt;\u003c/code\u003e. Sometimes this qualification is redundant and can be omitted.\n    Use the \u0027Remove explicit supertype qualification\u0027 quick-fix to clean up the code.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  open class B {\n      open fun foo(){}\n  }\n\n  class A : B() {\n      override fun foo() {\n         super\u0026lt;B\u0026gt;.foo() // \u0026lt;\u003d\u003d redundant because \u0027B\u0027 is the only supertype\n      }\n  }\n\n  interface I {\n      fun foo() {}\n  }\n\n  class C : B(), I {\n      override fun foo() {\n          super\u0026lt;B\u0026gt;.foo() // \u0026lt;\u003d\u003d here \u0026lt;B\u0026gt; qualifier is needed to distinguish \u0027B.foo()\u0027 from \u0027I.foo()\u0027\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  open class B {\n      open fun foo(){}\n  }\n\n  class A : B() {\n      override fun foo() {\n         super.foo() // \u0026lt;\u003d\u003d Updated\n      }\n  }\n\n  interface I {\n      fun foo() {}\n  }\n\n  class C : B(), I {\n      override fun foo() {\n          super\u0026lt;B\u0026gt;.foo()\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantSuspendModifier",
          "displayName": "Redundant \u0027suspend\u0027 modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003esuspend\u003c/code\u003e modifier as redundant if no other suspending functions are called inside.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "WhenWithOnlyElse",
          "displayName": "\u0027when\u0027 has only \u0027else\u0027 branch and can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ewhen\u003c/code\u003e expressions with only an \u003ccode\u003eelse\u003c/code\u003e branch that can be simplified.\n\u003cp\u003e\u003cb\u003eSimplify expression\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun redundant() {\n      val x \u003d when { // \u0026lt;\u003d\u003d redundant, the quick-fix simplifies the when expression to \"val x \u003d 1\"\n          else -\u003e 1\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ComplexRedundantLet",
          "displayName": "Redundant argument-based \u0027let\u0027 call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a redundant argument-based \u003ccode\u003elet\u003c/code\u003e call.\n\u003cp\u003e\u003ccode\u003elet\u003c/code\u003e is redundant when the lambda parameter is only used as a qualifier in a call expression.\u003c/p\u003e\n\u003cp\u003eIf you need to give a name to the qualifying expression, declare a local variable.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun splitNumbers() {\n      \"1,2,3\".let { it.split(\u0027,\u0027) }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix removes the extra \u003ccode\u003elet()\u003c/code\u003e call:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun example() {\n      \"1,2,3\".split(\u0027,\u0027)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAlternative:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun splitNumbers() {\n      val numbers \u003d \"1,2,3\"\n      numbers.split(\u0027,\u0027)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CanBePrimaryConstructorProperty",
          "displayName": "Property is explicitly assigned to constructor parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports properties that are explicitly assigned to primary constructor parameters.\n\u003cp\u003eProperties can be declared directly in the primary constructor, reducing the amount of code and increasing code readability.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class User(name: String) {\n      val name \u003d name\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix joins the parameter and property declaration into a primary constructor parameter:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class User(val name: String) {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantModalityModifier",
          "displayName": "Redundant modality modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the modality modifiers that match the default modality of an element\n(\u003ccode\u003efinal\u003c/code\u003e for most elements, \u003ccode\u003eopen\u003c/code\u003e for members with an \u003ccode\u003eoverride\u003c/code\u003e).\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003efinal\u003c/b\u003e class Foo\n\n  open class Bar : Comparable\u0026lt;Bar\u0026gt; {\n      \u003cb\u003eopen\u003c/b\u003e override fun compareTo(other: Bar): Int \u003d 0\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo\n\n  open class Bar : Comparable\u0026lt;Bar\u0026gt; {\n      override fun compareTo(other: Bar): Int \u003d 0\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveSetterParameterType",
          "displayName": "Redundant setter parameter type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports explicitly specified parameter types in property setters.\n\u003cp\u003e\n    Setter parameter type always matches the property type, so it\u0027s not required to be explicit.\n    The \u0027Remove explicit type specification\u0027 quick-fix allows amending the code accordingly.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun process(x: Int) {}\n\n  var x: Int \u003d 0\n      set(value: Int) \u003d process(value) // \u0026lt;\u003d\u003d \u0027Int\u0027 specification can be safely omitted\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun process(x: Int) {}\n\n  var x: Int \u003d 0\n      set(value) \u003d process(value)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantSemicolon",
          "displayName": "Redundant semicolon",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n    Reports redundant semicolons (\u003ccode\u003e;\u003c/code\u003e) that can be safely removed.\n\u003cp\u003e\n    Kotlin does not require a semicolon at the end of each statement or expression.\n    The quick-fix is suggested to remove redundant semicolons.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val myMap \u003d mapOf(\"one\" to 1, \"two\" to 2);\n  myMap.forEach { (key, value) -\u003e  print(\"$key -\u003e $value\")};\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  val myMap \u003d mapOf(\"one\" to 1, \"two\" to 2)\n  myMap.forEach { (key, value) -\u003e  print(\"$key -\u003e $value\")}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThere are two cases though where a semicolon is required:\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003e\n        Several statements placed on a single line need to be separated with semicolons:\n\u003cpre\u003e\u003ccode\u003e\n  map.forEach { val (key, value) \u003d it; println(\"$key -\u003e $value\") }\n\u003c/code\u003e\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ccode\u003eenum\u003c/code\u003e classes that also declare properties or functions, require a semicolon after the list of enum constants:\n        \u003cpre\u003e\u003ccode\u003e\n  enum class Mode {\n      SILENT, VERBOSE;\n\n      fun isSilent(): Boolean \u003d this \u003d\u003d SILENT\n  }\n        \u003c/code\u003e\u003c/pre\u003e\n    \u003c/li\u003e\n\u003c/ol\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimpleRedundantLet",
          "displayName": "Redundant receiver-based \u0027let\u0027 call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant receiver-based \u003ccode\u003elet\u003c/code\u003e calls.\n\u003cp\u003eThe quick-fix removes the redundant \u003ccode\u003elet\u003c/code\u003e call.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(s: String?): Int? \u003d s?.let { it.length }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test(s: String?): Int? \u003d s?.length\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantLambdaOrAnonymousFunction",
          "displayName": "Redundant creation of lambda or anonymous function",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports lambdas or anonymous functions that are created and used immediately.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003efun\u003c/b\u003e test() {\n      ({ println() })() // redundant\n      (\u003cb\u003efun\u003c/b\u003e() { println() })() // redundant\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantGetter",
          "displayName": "Redundant property getter",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant property getters.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Test {\n      val a \u003d 1\n          \u003cb\u003eget\u003c/b\u003e\n      val b \u003d 1\n          \u003cb\u003eget() \u003d field\u003c/b\u003e\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Test {\n      val a \u003d 1\n      val b \u003d 1\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ExplicitThis",
          "displayName": "Redundant explicit \u0027this\u0027",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an explicit \u003ccode\u003ethis\u003c/code\u003e when it can be omitted.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class C {\n      private val i \u003d 1\n      fun f() \u003d this.i\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix removes the redundant \u003ccode\u003ethis\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class C {\n      private val i \u003d 1\n      fun f() \u003d i\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveEmptySecondaryConstructorBody",
          "displayName": "Redundant constructor body",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty bodies of secondary constructors.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RemoveRedundantBackticks",
          "displayName": "Redundant backticks",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant backticks in references.\n\u003cp\u003e\n    Some of the Kotlin keywords are valid identifiers in Java, for example: \u003ccode\u003ein\u003c/code\u003e, \u003ccode\u003eobject\u003c/code\u003e, \u003ccode\u003eis\u003c/code\u003e.\n    If a Java library uses a Kotlin keyword for a method, you can still call the method escaping it\n    with the backtick character (\u003ccode\u003e`\u003c/code\u003e), for example, \u003ccode\u003efoo.`is`(bar)\u003c/code\u003e.\n    Sometimes this escaping is redundant and can be safely omitted. The inspection discovers and reports such cases and is\n    paired with the \u0027Remove redundant backticks\u0027 quick-fix, which allows you to amend the highlighted code.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun `is`(x: String) {}\n  fun foo() {\n      `is`(\"bar\") // \u0027is\u0027 is a keyword, backticks are required\n  }\n\n  fun `test that smth works as designed`() {} // OK, complex identifier for readability improvement\n\n  val `a` \u003d 1  // no need for backticks\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantSamConstructor",
          "displayName": "Redundant SAM constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports SAM (Single Abstract Method) constructor usages which can be replaced with lambdas.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      foo(\u003cb\u003eRunnable\u003c/b\u003e { println(\"Hi!\") })\n  }\n\n  fun foo(other: Runnable) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      foo( { println(\"Hi!\") })\n  }\n\n  fun foo(other: Runnable) {}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnnecessaryVariable",
          "displayName": "Unnecessary local variable",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports local variables that used only in the very next \u003ccode\u003ereturn\u003c/code\u003e statement or exact copies of other variables.\n\u003cp\u003eSuch variables can be safely inlined to make the code more clear.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantEnumConstructorInvocation",
          "displayName": "Redundant enum constructor invocation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant constructor invocation on an enum entry.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum class Baz(i: Int \u003d 0) {\n      A(1),\n      B\u003cb\u003e()\u003c/b\u003e,\n      C\u003cb\u003e()\u003c/b\u003e,\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  enum class Baz(i: Int \u003d 0) {\n      A(1),\n      B,\n      C,\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ReplaceWithIgnoreCaseEquals",
          "displayName": "Should be replaced with \u0027equals(..., ignoreCase \u003d true)\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports case-insensitive comparisons that can be replaced with \u003ccode\u003eequals(..., ignoreCase \u003d true)\u003c/code\u003e.\n\u003cp\u003eBy using \u003ccode\u003eequals()\u003c/code\u003e you don\u0027t have to allocate extra strings with \u003ccode\u003etoLowerCase()\u003c/code\u003e or \u003ccode\u003etoUpperCase()\u003c/code\u003e to compare strings.\u003c/p\u003e\n\u003cp\u003eThe quick-fix replaces the case-insensitive comparison that uses \u003ccode\u003etoLowerCase()\u003c/code\u003e or \u003ccode\u003etoUpperCase()\u003c/code\u003e with \u003ccode\u003eequals(..., ignoreCase \u003d true)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e May change semantics for some locales.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      val a \u003d \u0026quot;KoTliN\u0026quot;\n      val b \u003d \u0026quot;KOTLIN\u0026quot;\n      println(a.toLowerCase() \u003d\u003d b.toLowerCase())\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun main() {\n      val a \u003d \u0026quot;KoTliN\u0026quot;\n      val b \u003d \u0026quot;KOTLIN\u0026quot;\n      println(a.equals(b, ignoreCase \u003d true))\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RemoveExplicitTypeArguments",
          "displayName": "Unnecessary type argument",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports function calls with type arguments that can be automatically inferred. Such type arguments are redundant and can be safely omitted.\n\u003cp\u003eUse the \u0027Remove explicit type arguments\u0027 quick-fix to clean up the code.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  // \u0027String\u0027 type can be inferred here\n  fun foo(): MutableList\u0026lt;String\u0026gt; \u003d mutableListOf\u0026lt;String\u0026gt;()\n\n  // Here \u0027String\u0027 cannot be inferred, type argument is required.\n  fun bar() \u003d mutableListOf\u0026lt;String\u0026gt;()\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(): MutableList\u0026lt;String\u0026gt; \u003d mutableListOf() \u0026lt;\u003d\u003d Updated\n\n  fun bar() \u003d mutableListOf\u0026lt;String\u0026gt;()\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "UnusedSymbol",
          "displayName": "Unused symbol",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports symbols that are not used or not reachable from entry points.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveEmptyParenthesesFromLambdaCall",
          "displayName": "Unnecessary parentheses in function call with lambda",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant empty parentheses of function calls where the only parameter is a lambda that\u0027s outside the parentheses.\n\u003cp\u003eUse the \u0027Remove unnecessary parentheses from function call with lambda\u0027 quick-fix to clean up the code.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n      listOf(1).forEach() {  }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo() {\n      listOf(1).forEach {  }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CanBeParameter",
          "displayName": "Constructor parameter is never used as a property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports primary constructor parameters that can have \u003ccode\u003eval\u003c/code\u003e or \u003ccode\u003evar\u003c/code\u003e removed.\n\u003cp\u003e\n    Class properties declared in the constructor increase memory consumption.\n    If the parameter value is only used in the constructor, you can omit them.\n\u003c/p\u003e\n\u003cp\u003eNote that the referenced object might be garbage-collected earlier.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Task(val name: String) {\n      init {\n          print(\"Task created: $name\")\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix removes the extra \u003ccode\u003eval\u003c/code\u003e or \u003ccode\u003evar\u003c/code\u003e keyword:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Task(name: String) {\n      init {\n          print(\"Task created: $name\")\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantLambdaArrow",
          "displayName": "Redundant lambda arrow",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant lambda arrows in lambdas without parameters.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(f: () -\u003e Unit) \u003d f()\n\n  fun bar() {\n      foo { \u003cb\u003e-\u003e\u003c/b\u003e println(\"Hi!\") }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun foo(f: () -\u003e Unit) \u003d f()\n\n  fun bar() {\n      foo { println(\"Hi!\") }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveEmptyPrimaryConstructor",
          "displayName": "Redundant empty primary constructor",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports empty primary constructors when they are implicitly available anyway.\n\u003cp\u003e\n    A primary constructor is redundant and can be safely omitted when it does not have any annotations or visibility modifiers.\n    Use the \u0027Remove empty primary constructor\u0027 quick-fix to clean up the code.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class MyClassA constructor() //  redundant, can be replaced with \u0027class MyClassA\u0027\n\n  annotation class MyAnnotation\n  class MyClassB @MyAnnotation constructor() //  required because of annotation\n\n  class MyClassC private constructor() // required because of visibility modifier\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "SimplifyWhenWithBooleanConstantCondition",
          "displayName": "Simplifiable \u0027when\u0027",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003ewhen\u003c/code\u003e expressions with the constant \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e branches.\n\u003cp\u003e\u003cb\u003eSimplify \"when\"\u003c/b\u003e quick-fix can be used to amend the code automatically.\u003c/p\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun redundant() {\n      when { // \u0026lt;\u003d\u003d redundant, quick-fix simplifies the when expression to \"println(\"true\")\"\n          true -\u003e println(\"true\")\n          else -\u003e println(\"false\")\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantUnitReturnType",
          "displayName": "Redundant \u0027Unit\u0027 return type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a redundant \u003ccode\u003eUnit\u003c/code\u003e return type which can be omitted.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "UnusedReceiverParameter",
          "displayName": "Unused receiver parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports receiver parameter of extension functions and properties that is not used.\n\u003cp\u003e\u003cb\u003eRemove redundant receiver parameter\u003c/b\u003e can be used to amend the code automatically.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantValueArgument",
          "displayName": "Redundant value argument",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports arguments that are equal to the default values of the corresponding parameters.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun foo(x: Int, y: Int \u003d 2) {}\n\nfun bar() {\n    foo(1, 2)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\nfun bar() {\n    foo(1)\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantReturnLabel",
          "displayName": "Redundant \u0027return\u0027 label",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports redundant return labels outside of lambda expressions.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test() {\n      return@test\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun test() {\n      return\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveEmptyClassBody",
          "displayName": "Replace empty class body",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports declarations of classes and objects with an empty body.\n\u003cp\u003eUse the \u0027Remove redundant empty class body\u0027 quick-fix to clean up the code.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class EmptyA() {} // \u0026lt;\u003d\u003d empty body\n\n  class EmptyB {\n      companion object {} // \u0026lt;\u003d\u003d empty body\n  }\n\n  fun emptyC() {\n     object {} // \u0026lt;\u003d\u003d anonymous object, it\u0027s ok (not reported)\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class EmptyA()\n\n  class EmptyB {\n      companion object\n  }\n\n  fun emptyC() {\n     object {}\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantUnitExpression",
          "displayName": "Redundant \u0027Unit\u0027",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant \u003ccode\u003eUnit\u003c/code\u003e expressions.\n\u003cp\u003e\n    \u003ccode\u003eUnit\u003c/code\u003e in Kotlin can be used as the return type of functions that do not return anything meaningful.\n    The \u003ccode\u003eUnit\u003c/code\u003e type has only one possible value, which is the \u003ccode\u003eUnit\u003c/code\u003e object.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun redundantA(): Unit {\n      return Unit // redundant, \u0027Unit\u0027 is returned by default and matches the expected return type\n  }\n\n  fun requiredA(condition: Boolean): Any {\n      if (condition) return \"hello\"\n      return Unit // explicit \u0027Unit\u0027 is required since the expected type is \u0027Any\u0027\n  }\n\n  fun redundantB(condition: Boolean): Any \u003d if (condition) {\n      fun ancillary(): Int \u003d 1\n      println(\"${ancillary()}\")\n      Unit // redundant since the last expression is already of type \u0027Unit\u0027\n  } else {\n      println(\"else\")\n  }\n\n  fun requiredB(condition: Boolean): Any \u003d if (condition) {\n      1024\n      Unit // required, otherwise \u00271024\u0027 (Int) would be the return value\n  } else {\n      println(\"else\")\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "RedundantSetter",
          "displayName": "Redundant property setter",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant property setters.\n\u003cp\u003e\nSetter is considered to be redundant in one of the following cases:\n\u003c/p\u003e\n\u003col\u003e\n    \u003cli\u003e\n        Setter has no body. Accessor visibility isn\u0027t changed, declaration isn\u0027t \u003ccode\u003eexternal\u003c/code\u003e and has no annotations.\n        \u003cpre\u003e\u003ccode\u003e\n  var myPropWithRedundantSetter: Int \u003d 0\n      set // redundant\n\n  var myPropA: Int \u003d 0\n      private set // OK - property visibility is changed to private\n\n  var myPropB: Int \u003d 0\n      external set // OK - implemented not in Kotlin (external)\n\n  var myPropC: Int \u003d 0\n      @Inject set // OK - accessor is annotated\n        \u003c/code\u003e\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        Setter body is a block with a single statement assigning the parameter to the backing field.\n        \u003cpre\u003e\u003ccode\u003e\n  var prop: Int \u003d 0\n      set(value) { // redundant\n          field \u003d value\n      }\n       \u003c/code\u003e\u003c/pre\u003e\n    \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RedundantInnerClassModifier",
          "displayName": "Redundant \u0027inner\u0027 modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports the \u003ccode\u003einner\u003c/code\u003e modifier on a class as redundant if it doesn\u0027t reference members of its outer class.\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n      \u003cb\u003einner\u003c/b\u003e class InnerClass { // redundant `inner` modifier\n          fun hello() {\n              println(\"Hi!\")\n          }\n      }\n  }\n\n  class List {\n      val objects \u003d Array\u0026lt;Any\u0026gt;(42) { Any() }\n\n      \u003cb\u003einner\u003c/b\u003e class Iterator { // Not redundant `inner` modifier\n          fun next(): Any {\n              return objects[0]\n          }\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Foo {\n      class InnerClass { // redundant `inner` modifier\n          fun hello() {\n              println(\"Hi!\")\n          }\n      }\n  }\n\n  class List {\n      val objects \u003d Array\u0026lt;Any\u0026gt;(42) { Any() }\n\n      \u003cb\u003einner\u003c/b\u003e class Iterator { // Not redundant `inner` modifier\n          fun next(): Any {\n              return objects[0]\n          }\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "ConstantConditionIf",
          "displayName": "Condition of \u0027if\u0027 expression is constant",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports \u003ccode\u003eif\u003c/code\u003e expressions that have \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e\nconstant literal condition and can be simplified.\n\u003cp\u003eWhile occasionally intended, this construction is confusing and often the result of a typo\n    or previous refactoring.\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun example() {\n      if (true) {\n          throw IllegalStateException(\"Unexpected state\")\n      }\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe quick-fix removes the \u003ccode\u003eif\u003c/code\u003e condition:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  fun example() {\n      throw IllegalStateException(\"Unexpected state\")\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "RemoveRedundantCallsOfConversionMethods",
          "displayName": "Redundant call of conversion method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant calls to conversion methods (for example, \u003ccode\u003etoString()\u003c/code\u003e on a \u003ccode\u003eString\u003c/code\u003e or \u003ccode\u003etoDouble()\u003c/code\u003e\non a \u003ccode\u003eDouble\u003c/code\u003e).\n\u003cp\u003eUse the \u0027Remove redundant calls of the conversion method\u0027 quick-fix to clean up the code.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "KotlinRedundantOverride",
          "displayName": "Redundant overriding method",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "231-1.9.0-release-358-IJ8770.65",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports redundant overriding declarations.\n\u003cp\u003e\n    An override can be omitted if it does not modify the inherited signature semantics, for example, by changing visibility.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  \u003cb\u003eopen class\u003c/b\u003e Foo {\n      open fun singleExpression() {\n      }\n  }\n\n  class Bar : Foo() {\n      \u003cb\u003eoverride\u003c/b\u003e fun singleExpression() \u003d super.singleExpression()\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAfter the quick-fix is applied:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  class Bar : Foo() {\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Android Lint: Interoperability",
      "inspections": [
        {
          "shortName": "AndroidLintKotlinPropertyAccess",
          "displayName": "Kotlin Property Access",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eKotlin Property Access\u003cbr\u003e\u003cbr\u003eFor a method to be represented as a property in Kotlin, strict \u0026#8220;bean\u0026#8221;-style prefixing must be used.\u003cbr/\u003e\n\u003cbr/\u003e\nAccessor methods require a \u003ccode\u003eget\u003c/code\u003e prefix or for boolean-returning methods an \u003ccode\u003eis\u003c/code\u003e prefix can be used.\u003cbr\u003e\u003cbr\u003eIssue id: KotlinPropertyAccess\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://android.github.io/kotlin-guides/interop.html#property-prefixes\"\u003ehttps://android.github.io/kotlin-guides/interop.html#property-prefixes\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintJavaPluginLanguageLevel",
          "displayName": "Java Plugin Language Level",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": true,
          "description": "\u003chtml\u003e\u003cbody\u003eNo Explicit Java Language Level Given\u003cbr\u003e\u003cbr\u003eIn modules using plugins deriving from the Gradle \u003ccode\u003ejava\u003c/code\u003e plugin (e.g. \u003ccode\u003ejava-library\u003c/code\u003e or \u003ccode\u003eapplication\u003c/code\u003e), the java source and target compatibility default to the version of the JDK being used to run Gradle, which may cause compatibility problems with Android (or other) modules.\u003cbr/\u003e\n\u003cbr/\u003e\nYou can specify an explicit sourceCompatibility and targetCompatibility in this module to maintain compatibility no matter which JDK is used to run Gradle.\u003cbr\u003e\u003cbr\u003eIssue id: JavaPluginLanguageLevel\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintLambdaLast",
          "displayName": "Lambda Parameters Last",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eLambda Parameters Last\u003cbr\u003e\u003cbr\u003eTo improve calling this code from Kotlin, parameter types eligible for SAM conversion should be last.\u003cbr\u003e\u003cbr\u003eIssue id: LambdaLast\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://android.github.io/kotlin-guides/interop.html#lambda-parameters-last\"\u003ehttps://android.github.io/kotlin-guides/interop.html#lambda-parameters-last\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintUnknownNullness",
          "displayName": "Unknown nullness",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eUnknown nullness\u003cbr\u003e\u003cbr\u003eTo improve referencing this code from Kotlin, consider adding explicit nullness information here with either \u003ccode\u003e@NonNull\u003c/code\u003e or \u003ccode\u003e@Nullable\u003c/code\u003e.\u003cbr\u003e\u003cbr\u003eIssue id: UnknownNullness\u003cbr\u003e\u003cbr\u003eAvailable options:\u003cbr/\u003e\n\u003cbr/\u003e\n\u003cb\u003eignore-deprecated\u003c/b\u003e (default is false):\u003cbr/\u003e\nWhether to ignore classes and members that have been annotated with \u003ccode\u003e@Deprecated\u003c/code\u003e.\u003cbr/\u003e\n\u003cbr/\u003e\nNormally this lint check will flag all unannotated elements, but by setting this option to \u003ccode\u003etrue\u003c/code\u003e it will skip any deprecated elements.\u003cbr/\u003e\n\u003cbr/\u003e\nTo configure this option, use a \u003ccode\u003elint.xml\u003c/code\u003e file with an \u0026lt;option\u003e like this:\u003cbr/\u003e\n\n\u003cpre\u003e\n\u0026lt;lint\u003e\n    \u0026lt;issue id\u003d\"UnknownNullness\"\u003e\n        \u0026lt;option name\u003d\"ignore-deprecated\" value\u003d\"false\" /\u003e\n    \u0026lt;/issue\u003e\n\u0026lt;/lint\u003e\n\u003c/pre\u003e\n\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://developer.android.com/kotlin/interop#nullability_annotations\"\u003ehttps://developer.android.com/kotlin/interop#nullability_annotations\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        },
        {
          "shortName": "AndroidLintNoHardKeywords",
          "displayName": "No Hard Kotlin Keywords",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.android",
          "pluginVersion": "2022.1.1.231.9011.34",
          "isGlobalTool": true,
          "enabled": false,
          "description": "\u003chtml\u003e\u003cbody\u003eNo Hard Kotlin Keywords\u003cbr\u003e\u003cbr\u003eDo not use Kotlin\u0026#8217;s hard keywords as the name of methods or fields. These require the use of backticks to escape when calling from Kotlin. Soft keywords, modifier keywords, and special identifiers are allowed.\u003cbr/\u003e\n\u003cbr/\u003e\nFor example, ActionEvent\u0027s \u003ccode\u003egetWhen()\u003c/code\u003e method requires backticks when used from Kotlin:\n\u003cpre\u003e\nval timestamp \u003d event.`when`\n\u003c/pre\u003e\n\u003cbr\u003e\u003cbr\u003eIssue id: NoHardKeywords\u003cbr\u003e\u003cbr\u003e\u003ca href\u003d\"https://android.github.io/kotlin-guides/interop.html#no-hard-keywords\"\u003ehttps://android.github.io/kotlin-guides/interop.html#no-hard-keywords\u003c/a\u003e\u003c/body\u003e\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "Angular",
      "inspections": [
        {
          "shortName": "AngularInvalidImportedOrDeclaredSymbol",
          "displayName": "Invalid imported or declared symbol",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports any symbol that is declared, imported or exported by an Angular module that is not a module, component, directive, or pipe or\ncan’t be used in the context of the property.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularCliAddDependency",
          "displayName": "Angular CLI add dependency",
          "defaultSeverity": "WARNING",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nSuggests using the \u003ccode\u003eng add\u003c/code\u003e command to install the dependency.\n\u003cp\u003e\u003ccode\u003eng add\u003c/code\u003e will use the package manager to download it and invoke a schematic\n  which can update your project with configuration changes, add additional dependencies (e.g. polyfills),\n  or scaffold package-specific initialization code.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularNgOptimizedImage",
          "displayName": "Issues with ngSrc usage in img tags",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports issues related to usage of \u003ccode\u003engSrc\u003c/code\u003e (\u003ca href\u003d\"https://angular.io/guide/image-directive\"\u003eNgOptimizedDirective\u003c/a\u003e)\non \u003ccode\u003eimg\u003c/code\u003e tags.\n\u003cp\u003e\nFollowing issues are reported:\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eimg\u003c/code\u003e tags, which use \u003ccode\u003esrc\u003c/code\u003e instead of \u003ccode\u003engSrc\u003c/code\u003e\n  \u003cli\u003elack of \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e, or \u003ccode\u003efill\u003c/code\u003e attributes when \u003ccode\u003engSrc\u003c/code\u003e is used\n  \u003cli\u003e\u003ccode\u003ewidth\u003c/code\u003e or \u003ccode\u003eheight\u003c/code\u003e, and \u003ccode\u003efill\u003c/code\u003e attributes being present on the same element when \u003ccode\u003engSrc\u003c/code\u003e is used\n\u003c/ul\u003e\n\u003c!-- tooltip end --\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularMissingEventHandler",
          "displayName": "Missing event handler",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a missing event handler statement for an event binding.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularInaccessibleComponentMemberInAotMode",
          "displayName": "Inaccessible component member in AOT mode",
          "defaultSeverity": "WARNING",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports accessing a private or protected member of a component from the component\u0027s template. Such usages result in AOT compilation failure.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularInvalidTemplateReferenceVariable",
          "displayName": "Unbound or ambiguous template reference variable",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a template reference variable that is not assigned to a directive when using \u003ccode\u003eexportAs\u003c/code\u003e or is assigned to multiple\ndirectives.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularInvalidSelector",
          "displayName": "Missing or invalid selector",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an invalid \u003ccode\u003eselector\u003c/code\u003e property of a component or directive.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularUndefinedBinding",
          "displayName": "Undefined binding",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an undefined property, event, or structural directive bindings on elements.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularInvalidI18nAttribute",
          "displayName": "Invalid i18n attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a problem with a \u003ccode\u003ei18n-*\u003c/code\u003e attribute.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularNonEmptyNgContent",
          "displayName": "Content inside \u003cng-content\u003e tag",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a text or tag occurrence inside a \u003ccode\u003e\u0026lt;ng-content\u0026gt;\u003c/code\u003e tag used for content projection.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularAmbiguousComponentTag",
          "displayName": "Ambiguous component tag",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a component that is matched on an embedded template element \u003ccode\u003e\u0026lt;ng-template\u0026gt;\u003c/code\u003e or multiple components matched\non any other element.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularMultipleStructuralDirectives",
          "displayName": "Multiple structural directives on one element",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports multiple structural directives (\u003ccode\u003e*ngIf\u003c/code\u003e, \u003ccode\u003e*ngFor\u003c/code\u003e, etc.) on one element.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularMissingRequiredDirectiveInputBinding",
          "displayName": "Missing required directive input",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a missing binding for a required directive input.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularMissingOrInvalidDeclarationInModule",
          "displayName": "Missing or invalid component, directive or pipe declaration in a module",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a non-standalone Angular component, directive, or pipe that is not declared in any module or is declared in multiple modules.\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "AngularInsecureBindingToEvent",
          "displayName": "Insecure binding to event",
          "defaultSeverity": "WARNING",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a binding to an event property or attribute, for example, \u003ccode\u003e[onclick]\u003c/code\u003e or \u003ccode\u003e[attr.onclick]\u003c/code\u003e instead of\n\u003ccode\u003e(click)\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularRecursiveModuleImportExport",
          "displayName": "Recursive import or export of Angular module",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a cyclic dependency between Angular modules.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularInvalidEntryComponent",
          "displayName": "Invalid entry component",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an invalid Angular component specified in the module’s \u003ccode\u003ebootstrap\u003c/code\u003e or \u003ccode\u003eentryComponents\u003c/code\u003e property.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularUndefinedTag",
          "displayName": "Undefined tag",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a tag defined by a component or directive out of the current scope.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularUndefinedModuleExport",
          "displayName": "Undefined export from Angular module",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an export of an undeclared or unimported component, directive, or pipes from an Angular module.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularIncorrectTemplateDefinition",
          "displayName": "Incorrect component template definition",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "TypeScript",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports a component that  doesn’t have an associated template or uses both \u003ccode\u003etemplate\u003c/code\u003e and \u003ccode\u003etemplateUrl\u003c/code\u003e properties.\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "AngularInvalidAnimationTriggerAssignment",
          "displayName": "Invalid animation trigger assignment",
          "defaultSeverity": "ERROR",
          "pluginId": "AngularJS",
          "pluginVersion": "231.9011.34",
          "language": "HtmlCompatible",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\nReports an invalid assignment of an animation trigger. To attach an animation to an element, use\n\u003ccode\u003e[@triggerName]\u003d\"expression\"\u003c/code\u003e or an attribute without a value \u003ccode\u003e@triggerName\u003c/code\u003e.\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    },
    {
      "name": "CDI (Contexts and Dependency Injection)",
      "inspections": [
        {
          "shortName": "CdiDecoratorInspection",
          "displayName": "Incorrect @Decorator class",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect \u003ccode\u003e@Decorator\u003c/code\u003e bean definitions.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCannot be final.\u003c/li\u003e\n  \u003cli\u003eMust have exactly one delegate attribute (field or parameter) annotated with \u003ccode\u003e@Delegate\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiDomBeans",
          "displayName": "Incorrect bean definitions in beans.xml",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect bean definitions in \u003ccode\u003ebeans.xml\u003c/code\u003e configuration files.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiAlternativeInspection",
          "displayName": "Vetoed @Alternative bean",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003e\n  Reports vetoed \u003ccode\u003e@Alternative\u003c/code\u003e beans.\n  A bean is considered vetoed when it is annotated with \u003ccode\u003e@Vetoed\u003c/code\u003e or it is declared in a vetoed package.\n\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiUnproxyableBeanTypesInspection",
          "displayName": "Incorrect usage of bean type that cannot be proxied",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect usages of bean types that cannot be proxied.\u003c/p\u003e\n\u003cp\u003eThe container can\u0027t proxy certain legal bean types:\n  classes which don\u0027t have a non-private constructor with no parameters,\n  classes which are declared final,\n  or have final methods, primitive types, and array types.\u003c/p\u003e\n\n\u003cp\u003eThe inspection reports the following violations for such bean types:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eManaged bean declaring a passivating scope must be \u003ccode\u003ejava.io.Serializable\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eBean of non-serializable type cannot be injected into a bean of passivating scope\u003c/li\u003e\n  \u003cli\u003eThe container must be able to proxy tha injected normal scoped bean\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CdiObservesInspection",
          "displayName": "Incorrect observer method",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect observer method definitions.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eMust contain only one \u003ccode\u003e@Observes\u003c/code\u003e parameter\u003c/li\u003e\n  \u003cli\u003eCannot have parameters annotated with \u003ccode\u003e@Disposes\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eCannot be annotated with \u003ccode\u003e@Inject\u003c/code\u003e and \u003ccode\u003e@Produces\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiNormalScopeInspection",
          "displayName": "Bean with non-default scope declares public fields",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports managed beans with public instance fields that are not in the default \u003ccode\u003e@Dependent\u003c/code\u003e scope.\n  According to the CDI specification, contextual scopes\n  (\u003ccode\u003e@RequestScoped\u003c/code\u003e, \u003ccode\u003e@ApplicationScoped\u003c/code\u003e, \u003ccode\u003e@SessionScoped\u003c/code\u003e, and \u003ccode\u003eConversationScoped\u003c/code\u003e)\n  are not allowed for managed beans with public instance fields.\n\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  @ApplicationScoped // Warning: Bean with non-default scope must not have public fields\n  class Car {\n    public String engine;\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiManagedBeanInconsistencyInspection",
          "displayName": "Incorrect managed bean definition",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect bean definition rules.\u003c/p\u003e\n\u003cp\u003eTop-level Java class can be a simple bean if:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eIt is not a parameterized type.\u003c/li\u003e\n  \u003cli\u003eIt is not a non-static inner class.\u003c/li\u003e\n  \u003cli\u003eIt is a concrete class, or is annotated with \u003ccode\u003e@Decorator\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003eIt has an appropriate constructor: either the class has a constructor with no parameters,\n    or the class declares a constructor annotated with \u003ccode\u003e@Initializer\u003c/code\u003e.\n  \u003c/li\u003e\n  \u003cli\u003eIt does not implement any of the following interfaces:\n    \u003ccode\u003ejavax.servlet.Servlet\u003c/code\u003e,\n    \u003ccode\u003ejavax.servlet.Filter\u003c/code\u003e,\n    \u003ccode\u003ejavax.servlet.ServletContextListener\u003c/code\u003e,\n    \u003ccode\u003ejavax.servlet.http.HttpSessionListener\u003c/code\u003e,\n    \u003ccode\u003ejavax.servlet.ServletRequestListener\u003c/code\u003e,\n    \u003ccode\u003ejavax.ejb.EnterpriseBean\u003c/code\u003e.\n  \u003c/li\u003e\n  \u003cli\u003eIt does not extend \u003ccode\u003ejavax.faces.component.UIComponent\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiInterceptorInspection",
          "displayName": "@Interceptor class without binding types",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003e@Interceptor\u003c/code\u003e classes without binding types. An interceptor must specify at least one interceptor binding.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiSpecializesInspection",
          "displayName": "Incorrect @Specializes usage",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect usages of the \u003ccode\u003e@Specializes\u003c/code\u003e annotation.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eSpecializing bean must extend another bean\u003c/li\u003e\n  \u003cli\u003eSpecializing method must override a \u003ccode\u003e@Produces\u003c/code\u003e method of its direct superclass\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e@Named\u003c/code\u003e annotation cannot be used on the specializing and specialized class\u003c/li\u003e\n  \u003cli\u003eTwo or more classes cannot specialize the same superclass\u003c/li\u003e\n  \u003cli\u003eSpecializing method cannot be static\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiInjectInspection",
          "displayName": "Incorrect dependency injection place",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect injection points: fields, methods, and parameters annotated with \u003ccode\u003e@Inject\u003c/code\u003e that violate the CDI specification.\u003c/p\u003e\n\n\u003cp\u003eRequirements for fields:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eCannot be static or final\u003c/li\u003e\n  \u003cli\u003eCannot be annotated with \u003ccode\u003e@Produces\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRequirements for methods with injection:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eCannot be static or abstract\u003c/li\u003e\n  \u003cli\u003eCannot have parameters with \u003ccode\u003e@Disposes\u003c/code\u003e and \u003ccode\u003e@Observes\u003c/code\u003e annotations\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiDisposerMethodInspection",
          "displayName": "Incorrect disposer method",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect disposer methods.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCannot be abstract.\u003c/li\u003e\n  \u003cli\u003eMust have exactly only one disposed parameter annotated with \u003ccode\u003e@Disposes\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiScopeInspection",
          "displayName": "Incorrect bean scope",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect bean scopes:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eSingleton bean must be either \u003ccode\u003e@ApplicationScoped\u003c/code\u003e or \u003ccode\u003e@Dependent\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eSession stateless bean must be \u003ccode\u003e@Dependent\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiUnknownProducersForDisposerMethodInspection",
          "displayName": "Disposer method parameter without producers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports disposer methods without the corresponding producer method.\u003c/p\u003e\n\u003cp\u003eEach disposer method must have exactly one disposed parameter of the same type as the corresponding producer method or\n  the producer field return type. When searching the disposer methods for a producer method or producer field, the container\n  considers the type and qualifiers of the disposed parameter. If the disposed parameter resolves to a producer method or\n  producer field declared by the same bean class, the container must call this method when destroying any instance returned by\n  that producer method or producer field.\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CdiTypedAnnotationInspection",
          "displayName": "Incorrect @Typed annotation usage",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports \u003ccode\u003e@Typed\u003c/code\u003e annotation usages that violate the following rules:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eOnly producer methods can have the \u003ccode\u003e@Typed\u003c/code\u003e annotation\u003c/li\u003e\n  \u003cli\u003eBean type must correspond to the types mentioned in the \u003ccode\u003e@Typed\u003c/code\u003e annotation\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiStereotypeRestrictionsInspection",
          "displayName": "Bean has collision of scope in stereotypes",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports classes with multiple stereotypes in different scopes or if a scope is not specified\u003c/p\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        },
        {
          "shortName": "CdiStereotypeInspection",
          "displayName": "Incorrect @Stereotype annotation class",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports incorrect \u003ccode\u003e@Stereotype\u003c/code\u003e annotation classes:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003eNon-empty \u003ccode\u003e@Named\u003c/code\u003e annotation is not allowed for stereotypes\u003c/li\u003e\n  \u003cli\u003eQualifier annotations are not allowed for stereotypes\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"
        },
        {
          "shortName": "CdiInjectionPointsInspection",
          "displayName": "Injection point with ambiguous dependencies",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.cdi",
          "pluginVersion": "231.9011.34",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "\u003chtml\u003e\n\u003cbody\u003e\n\u003cp\u003eReports injection points in bean classes that have ambiguous dependencies.\u003c/p\u003e\n\u003c!-- tooltip end --\u003e\n\u003cp\u003e\u003cb\u003eExample:\u003c/b\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n  interface Engine {}\n\n  @Singleton\n  class GasEngine implements Engine {}\n\n  @Singleton\n  class ElectricEngine implements Engine {}\n\n  @Singleton\n  class Car {\n    @Inject Engine \u003cb\u003eengine\u003c/b\u003e; // Ambiguous dependency: there are multiple beans that match the injection point\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/body\u003e\n\u003c/html\u003e"
        }
      ]
    }
  ]
}